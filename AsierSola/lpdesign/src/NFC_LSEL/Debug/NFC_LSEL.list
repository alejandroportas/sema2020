
NFC_LSEL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e000  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  0800e1a0  0800e1a0  0001e1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e53c  0800e53c  00020148  2**0
                  CONTENTS
  4 .ARM          00000008  0800e53c  0800e53c  0001e53c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e544  0800e544  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e544  0800e544  0001e544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e548  0800e548  0001e548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  20000000  0800e54c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f90  20000148  0800e694  00020148  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010d8  0800e694  000210d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023f1a  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004cb0  00000000  00000000  00044092  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001460  00000000  00000000  00048d48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001258  00000000  00000000  0004a1a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e4f7  00000000  00000000  0004b400  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018871  00000000  00000000  000698f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a000b  00000000  00000000  00082168  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00122173  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054f4  00000000  00000000  001221f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000148 	.word	0x20000148
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e188 	.word	0x0800e188

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000014c 	.word	0x2000014c
 80001dc:	0800e188 	.word	0x0800e188

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <demoNotif>:
 *
 *  This function receives the event notifications from RFAL
 *****************************************************************************
 */
static void demoNotif( rfalNfcState st )
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
    uint8_t       devCnt;
    rfalNfcDevice *dev;
    
    
    if( st == RFAL_NFC_STATE_WAKEUP_MODE )
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b03      	cmp	r3, #3
 80005be:	d010      	beq.n	80005e2 <demoNotif+0x32>
    {
        //platformLog("Wake Up mode started \r\n");
    }
    else if( st == RFAL_NFC_STATE_POLL_TECHDETECT )
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	2b0a      	cmp	r3, #10
 80005c4:	d00d      	beq.n	80005e2 <demoNotif+0x32>
    {
        //platformLog("Wake Up mode terminated. Polling for devices \r\n");
    }
    else if( st == RFAL_NFC_STATE_POLL_SELECT )
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	2b0c      	cmp	r3, #12
 80005ca:	d10a      	bne.n	80005e2 <demoNotif+0x32>
    {
        /* Multiple devices were found, activate first of them */
        rfalNfcGetDevicesFound( &dev, &devCnt );
 80005cc:	f107 020f 	add.w	r2, r7, #15
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	4611      	mov	r1, r2
 80005d6:	4618      	mov	r0, r3
 80005d8:	f005 ff72 	bl	80064c0 <rfalNfcGetDevicesFound>
        rfalNfcSelect( 0 );
 80005dc:	2000      	movs	r0, #0
 80005de:	f005 ff49 	bl	8006474 <rfalNfcSelect>
        
        //platformLog("Multiple Tags detected: %d \r\n", devCnt);
    }
}
 80005e2:	bf00      	nop
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <demoIni>:
 * \return true  : Initialization ok
 * \return false : Initialization failed
 *****************************************************************************
 */
bool demoIni( void )
{
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
    ReturnCode err;
    
    err = rfalNfcInitialize();
 80005f2:	f005 fe6f 	bl	80062d4 <rfalNfcInitialize>
 80005f6:	4603      	mov	r3, r0
 80005f8:	80fb      	strh	r3, [r7, #6]
    if( err == ERR_NONE )
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d139      	bne.n	8000674 <demoIni+0x88>
    {
        discParam.compMode      = RFAL_COMPLIANCE_MODE_NFC;
 8000600:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <demoIni+0x94>)
 8000602:	2200      	movs	r2, #0
 8000604:	701a      	strb	r2, [r3, #0]
        discParam.devLimit      = 1U;
 8000606:	4b1e      	ldr	r3, [pc, #120]	; (8000680 <demoIni+0x94>)
 8000608:	2201      	movs	r2, #1
 800060a:	719a      	strb	r2, [r3, #6]
        discParam.nfcfBR        = RFAL_BR_212;
 800060c:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <demoIni+0x94>)
 800060e:	2201      	movs	r2, #1
 8000610:	71da      	strb	r2, [r3, #7]
        discParam.ap2pBR        = RFAL_BR_424;
 8000612:	4b1b      	ldr	r3, [pc, #108]	; (8000680 <demoIni+0x94>)
 8000614:	2202      	movs	r2, #2
 8000616:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
        
        ST_MEMCPY( &discParam.nfcid3, NFCID3, sizeof(NFCID3) );
 800061a:	4b19      	ldr	r3, [pc, #100]	; (8000680 <demoIni+0x94>)
 800061c:	4a19      	ldr	r2, [pc, #100]	; (8000684 <demoIni+0x98>)
 800061e:	3308      	adds	r3, #8
 8000620:	ca07      	ldmia	r2, {r0, r1, r2}
 8000622:	c303      	stmia	r3!, {r0, r1}
 8000624:	801a      	strh	r2, [r3, #0]
        ST_MEMCPY( &discParam.GB, GB, sizeof(GB) );
 8000626:	4b16      	ldr	r3, [pc, #88]	; (8000680 <demoIni+0x94>)
 8000628:	4a17      	ldr	r2, [pc, #92]	; (8000688 <demoIni+0x9c>)
 800062a:	f103 0512 	add.w	r5, r3, #18
 800062e:	4614      	mov	r4, r2
 8000630:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000632:	6028      	str	r0, [r5, #0]
 8000634:	6069      	str	r1, [r5, #4]
 8000636:	60aa      	str	r2, [r5, #8]
 8000638:	60eb      	str	r3, [r5, #12]
 800063a:	6820      	ldr	r0, [r4, #0]
 800063c:	6128      	str	r0, [r5, #16]
        discParam.GBLen         = sizeof(GB);
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <demoIni+0x94>)
 8000640:	2214      	movs	r2, #20
 8000642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        discParam.notifyCb             = demoNotif;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <demoIni+0x94>)
 8000648:	4a10      	ldr	r2, [pc, #64]	; (800068c <demoIni+0xa0>)
 800064a:	669a      	str	r2, [r3, #104]	; 0x68
        discParam.totalDuration        = 1000U;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <demoIni+0x94>)
 800064e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000652:	809a      	strh	r2, [r3, #4]
        discParam.wakeupEnabled        = true;
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <demoIni+0x94>)
 8000656:	2201      	movs	r2, #1
 8000658:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        discParam.wakeupConfigDefault  = true;
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <demoIni+0x94>)
 800065e:	2201      	movs	r2, #1
 8000660:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        discParam.techs2Find           = RFAL_NFC_POLL_TECH_A;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <demoIni+0x94>)
 8000666:	2201      	movs	r2, #1
 8000668:	805a      	strh	r2, [r3, #2]
        

	
        state = DEMO_ST_START_DISCOVERY;
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <demoIni+0xa4>)
 800066c:	2201      	movs	r2, #1
 800066e:	701a      	strb	r2, [r3, #0]
        return true;
 8000670:	2301      	movs	r3, #1
 8000672:	e000      	b.n	8000676 <demoIni+0x8a>
    }
    return false;
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bdb0      	pop	{r4, r5, r7, pc}
 800067e:	bf00      	nop
 8000680:	20000164 	.word	0x20000164
 8000684:	20000000 	.word	0x20000000
 8000688:	2000000c 	.word	0x2000000c
 800068c:	080005b1 	.word	0x080005b1
 8000690:	200001e8 	.word	0x200001e8

08000694 <demoCycle>:
 *  This function executes the demo state machine. 
 *  It must be called periodically
 *****************************************************************************
 */
char* demoCycle( void )
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
    static rfalNfcDevice *nfcDevice;
    
    rfalNfcWorker();                                    /* Run RFAL worker periodically */
 8000698:	f005 ff60 	bl	800655c <rfalNfcWorker>
        /* Debounce button */
    //    while( platformGpioIsLow(PLATFORM_USER_BUTTON_PORT, PLATFORM_USER_BUTTON_PIN) );
    //}

    
    switch( state )
 800069c:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <demoCycle+0x74>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d002      	beq.n	80006aa <demoCycle+0x16>
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	d00a      	beq.n	80006be <demoCycle+0x2a>
            break;

        /*******************************************************************************/
        case DEMO_ST_NOTINIT:
        default:
            break;
 80006a8:	e02a      	b.n	8000700 <demoCycle+0x6c>
          rfalNfcDeactivate( false );
 80006aa:	2000      	movs	r0, #0
 80006ac:	f005 fec0 	bl	8006430 <rfalNfcDeactivate>
          rfalNfcDiscover( &discParam );
 80006b0:	4816      	ldr	r0, [pc, #88]	; (800070c <demoCycle+0x78>)
 80006b2:	f005 fe2b 	bl	800630c <rfalNfcDiscover>
          state = DEMO_ST_DISCOVERY;
 80006b6:	4b14      	ldr	r3, [pc, #80]	; (8000708 <demoCycle+0x74>)
 80006b8:	2202      	movs	r2, #2
 80006ba:	701a      	strb	r2, [r3, #0]
          break;
 80006bc:	e020      	b.n	8000700 <demoCycle+0x6c>
            if( rfalNfcIsDevActivated( rfalNfcGetState() ) )
 80006be:	f005 fef3 	bl	80064a8 <rfalNfcGetState>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b1d      	cmp	r3, #29
 80006c6:	d91a      	bls.n	80006fe <demoCycle+0x6a>
 80006c8:	f005 feee 	bl	80064a8 <rfalNfcGetState>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b21      	cmp	r3, #33	; 0x21
 80006d0:	d815      	bhi.n	80006fe <demoCycle+0x6a>
                rfalNfcGetActiveDevice( &nfcDevice );
 80006d2:	480f      	ldr	r0, [pc, #60]	; (8000710 <demoCycle+0x7c>)
 80006d4:	f005 ff1a 	bl	800650c <rfalNfcGetActiveDevice>
                rfalNfcDeactivate(false);
 80006d8:	2000      	movs	r0, #0
 80006da:	f005 fea9 	bl	8006430 <rfalNfcDeactivate>
                nfcid = hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen );
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <demoCycle+0x7c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	699a      	ldr	r2, [r3, #24]
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <demoCycle+0x7c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	7f1b      	ldrb	r3, [r3, #28]
 80006ea:	4619      	mov	r1, r3
 80006ec:	4610      	mov	r0, r2
 80006ee:	f000 f8bb 	bl	8000868 <hex2Str>
 80006f2:	4602      	mov	r2, r0
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <demoCycle+0x80>)
 80006f6:	601a      	str	r2, [r3, #0]
                state = DEMO_ST_START_DISCOVERY;
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <demoCycle+0x74>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	701a      	strb	r2, [r3, #0]
            break;
 80006fe:	bf00      	nop
    }
    return nfcid;
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <demoCycle+0x80>)
 8000702:	681b      	ldr	r3, [r3, #0]
}
 8000704:	4618      	mov	r0, r3
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200001e8 	.word	0x200001e8
 800070c:	20000164 	.word	0x20000164
 8000710:	200001ec 	.word	0x200001ec
 8000714:	200001fc 	.word	0x200001fc

08000718 <fsm_new>:

fsm_t*

fsm_new (fsm_trans_t* tt)

{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]

  fsm_t* this = (fsm_t*) malloc (sizeof (fsm_t));
 8000720:	2008      	movs	r0, #8
 8000722:	f00d f8e9 	bl	800d8f8 <malloc>
 8000726:	4603      	mov	r3, r0
 8000728:	60fb      	str	r3, [r7, #12]

  fsm_init (this, tt);
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	68f8      	ldr	r0, [r7, #12]
 800072e:	f000 f805 	bl	800073c <fsm_init>

  return this;
 8000732:	68fb      	ldr	r3, [r7, #12]

}
 8000734:	4618      	mov	r0, r3
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <fsm_init>:

void

fsm_init (fsm_t* this, fsm_trans_t* tt)

{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]

  this->tt = tt;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	683a      	ldr	r2, [r7, #0]
 800074a:	605a      	str	r2, [r3, #4]

  this->current_state = tt[0].orig_state;
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	601a      	str	r2, [r3, #0]

}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <fsm_fire>:

void

fsm_fire (fsm_t* this)

{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]

  fsm_trans_t* t;

  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	e01c      	b.n	80007aa <fsm_fire+0x4a>

    if ((this->current_state == t->orig_state) && t->in(this)) {
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	429a      	cmp	r2, r3
 800077a:	d113      	bne.n	80007a4 <fsm_fire+0x44>
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	4798      	blx	r3
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d00c      	beq.n	80007a4 <fsm_fire+0x44>

      this->current_state = t->dest_state;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	689a      	ldr	r2, [r3, #8]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	601a      	str	r2, [r3, #0]

      if (t->out)
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	68db      	ldr	r3, [r3, #12]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d00c      	beq.n	80007b4 <fsm_fire+0x54>

        t->out(this);
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	4798      	blx	r3

      break;
 80007a2:	e007      	b.n	80007b4 <fsm_fire+0x54>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	3310      	adds	r3, #16
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	dade      	bge.n	8000770 <fsm_fire+0x10>

    }

  }

}
 80007b2:	e000      	b.n	80007b6 <fsm_fire+0x56>
      break;
 80007b4:	bf00      	nop
}
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <logUsartInit>:
  * @brief  This function initalize the UART handle.
	* @param	husart : already initalized handle to USART HW
  * @retval none :
  */
void logUsartInit(UART_HandleTypeDef *husart)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
    pLogUsart = husart;
 80007c8:	4a04      	ldr	r2, [pc, #16]	; (80007dc <logUsartInit+0x1c>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6013      	str	r3, [r2, #0]
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	200001f4 	.word	0x200001f4

080007e0 <logUsartTx>:
	* @param	dataLen : length of data to be transmitted
  * @retval ERR_INVALID_HANDLE : in case the SPI HW is not initalized yet
  * @retval others : HAL status
  */
uint8_t logUsartTx(uint8_t *data, uint16_t dataLen)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	807b      	strh	r3, [r7, #2]
  if(pLogUsart == 0)
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <logUsartTx+0x34>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d101      	bne.n	80007f8 <logUsartTx+0x18>
    return ERR_INVALID_HANDLE;
 80007f4:	2326      	movs	r3, #38	; 0x26
 80007f6:	e008      	b.n	800080a <logUsartTx+0x2a>

  return HAL_UART_Transmit(pLogUsart, data, dataLen, USART_TIMEOUT);
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <logUsartTx+0x34>)
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	887a      	ldrh	r2, [r7, #2]
 80007fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	f003 fa63 	bl	8003cce <HAL_UART_Transmit>
 8000808:	4603      	mov	r3, r0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200001f4 	.word	0x200001f4

08000818 <logUsart>:

int logUsart(const char* format, ...)
{
 8000818:	b40f      	push	{r0, r1, r2, r3}
 800081a:	b580      	push	{r7, lr}
 800081c:	b0c2      	sub	sp, #264	; 0x108
 800081e:	af00      	add	r7, sp, #0
  #if (USE_LOGGER == LOGGER_ON)
  {  
    #define LOG_BUFFER_SIZE 256
    char buf[LOG_BUFFER_SIZE];
    va_list argptr;
    va_start(argptr, format);
 8000820:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000824:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    int cnt = vsnprintf(buf, LOG_BUFFER_SIZE, format, argptr);
 8000828:	4638      	mov	r0, r7
 800082a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800082e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000832:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000836:	f00d f98f 	bl	800db58 <vsniprintf>
 800083a:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
    va_end(argptr);  
      
    /* */
    logUsartTx((uint8_t*)buf, strlen(buf));
 800083e:	463b      	mov	r3, r7
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fcd7 	bl	80001f4 <strlen>
 8000846:	4603      	mov	r3, r0
 8000848:	b29a      	uxth	r2, r3
 800084a:	463b      	mov	r3, r7
 800084c:	4611      	mov	r1, r2
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff ffc6 	bl	80007e0 <logUsartTx>
    return cnt;
 8000854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
  #else
  {
    return 0;
  }
  #endif /* #if USE_LOGGER == LOGGER_ON */
}
 8000858:	4618      	mov	r0, r3
 800085a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800085e:	46bd      	mov	sp, r7
 8000860:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000864:	b004      	add	sp, #16
 8000866:	4770      	bx	lr

08000868 <hex2Str>:

/* */

char* hex2Str(unsigned char * data, size_t dataLen)
{
 8000868:	b480      	push	{r7}
 800086a:	b089      	sub	sp, #36	; 0x24
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
  #if (USE_LOGGER == LOGGER_ON)
  {
    unsigned char * pin = data;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	61fb      	str	r3, [r7, #28]
    const char * hex = "0123456789ABCDEF";
 8000876:	4b37      	ldr	r3, [pc, #220]	; (8000954 <hex2Str+0xec>)
 8000878:	613b      	str	r3, [r7, #16]
    char * pout = hexStr[hexStrIdx];
 800087a:	4b37      	ldr	r3, [pc, #220]	; (8000958 <hex2Str+0xf0>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	01db      	lsls	r3, r3, #7
 8000880:	4a36      	ldr	r2, [pc, #216]	; (800095c <hex2Str+0xf4>)
 8000882:	4413      	add	r3, r2
 8000884:	61bb      	str	r3, [r7, #24]
    uint8_t i = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	75fb      	strb	r3, [r7, #23]
    uint8_t idx = hexStrIdx;
 800088a:	4b33      	ldr	r3, [pc, #204]	; (8000958 <hex2Str+0xf0>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	73fb      	strb	r3, [r7, #15]
    size_t len;  
      
    if(dataLen == 0)
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d103      	bne.n	800089e <hex2Str+0x36>
    {
      pout[0] = 0;     
 8000896:	69bb      	ldr	r3, [r7, #24]
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
 800089c:	e042      	b.n	8000924 <hex2Str+0xbc>
    } 
    else     
    {
      /* Trim data that doesn't fit in buffer */
      len = MIN( dataLen , (MAX_HEX_STR_LENGTH / 2) );
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	2b40      	cmp	r3, #64	; 0x40
 80008a2:	bf28      	it	cs
 80008a4:	2340      	movcs	r3, #64	; 0x40
 80008a6:	60bb      	str	r3, [r7, #8]
        
      for(; i < (len - 1); ++i)
 80008a8:	e01c      	b.n	80008e4 <hex2Str+0x7c>
      {
          *pout++ = hex[(*pin>>4)&0xF];
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	091b      	lsrs	r3, r3, #4
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	f003 030f 	and.w	r3, r3, #15
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	441a      	add	r2, r3
 80008ba:	69bb      	ldr	r3, [r7, #24]
 80008bc:	1c59      	adds	r1, r3, #1
 80008be:	61b9      	str	r1, [r7, #24]
 80008c0:	7812      	ldrb	r2, [r2, #0]
 80008c2:	701a      	strb	r2, [r3, #0]
          *pout++ = hex[(*pin++)&0xF];
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	1c5a      	adds	r2, r3, #1
 80008c8:	61fa      	str	r2, [r7, #28]
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	f003 030f 	and.w	r3, r3, #15
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	441a      	add	r2, r3
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	1c59      	adds	r1, r3, #1
 80008d8:	61b9      	str	r1, [r7, #24]
 80008da:	7812      	ldrb	r2, [r2, #0]
 80008dc:	701a      	strb	r2, [r3, #0]
      for(; i < (len - 1); ++i)
 80008de:	7dfb      	ldrb	r3, [r7, #23]
 80008e0:	3301      	adds	r3, #1
 80008e2:	75fb      	strb	r3, [r7, #23]
 80008e4:	7dfa      	ldrb	r2, [r7, #23]
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	3b01      	subs	r3, #1
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d3dd      	bcc.n	80008aa <hex2Str+0x42>
      }
      *pout++ = hex[(*pin>>4)&0xF];
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	091b      	lsrs	r3, r3, #4
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	f003 030f 	and.w	r3, r3, #15
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	441a      	add	r2, r3
 80008fe:	69bb      	ldr	r3, [r7, #24]
 8000900:	1c59      	adds	r1, r3, #1
 8000902:	61b9      	str	r1, [r7, #24]
 8000904:	7812      	ldrb	r2, [r2, #0]
 8000906:	701a      	strb	r2, [r3, #0]
      *pout++ = hex[(*pin)&0xF];
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	f003 030f 	and.w	r3, r3, #15
 8000910:	693a      	ldr	r2, [r7, #16]
 8000912:	441a      	add	r2, r3
 8000914:	69bb      	ldr	r3, [r7, #24]
 8000916:	1c59      	adds	r1, r3, #1
 8000918:	61b9      	str	r1, [r7, #24]
 800091a:	7812      	ldrb	r2, [r2, #0]
 800091c:	701a      	strb	r2, [r3, #0]
      *pout = 0;
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
    }    
    
    hexStrIdx++;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <hex2Str+0xf0>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	3301      	adds	r3, #1
 800092a:	b2da      	uxtb	r2, r3
 800092c:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <hex2Str+0xf0>)
 800092e:	701a      	strb	r2, [r3, #0]
    hexStrIdx %= MAX_HEX_STR;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <hex2Str+0xf0>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	f003 0303 	and.w	r3, r3, #3
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <hex2Str+0xf0>)
 800093c:	701a      	strb	r2, [r3, #0]
    
    return hexStr[idx];
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	01db      	lsls	r3, r3, #7
 8000942:	4a06      	ldr	r2, [pc, #24]	; (800095c <hex2Str+0xf4>)
 8000944:	4413      	add	r3, r2
  #else
  {
    return NULL;
  }
  #endif /* #if USE_LOGGER == LOGGER_ON */
}
 8000946:	4618      	mov	r0, r3
 8000948:	3724      	adds	r7, #36	; 0x24
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	0800e1a0 	.word	0x0800e1a0
 8000958:	200001f0 	.word	0x200001f0
 800095c:	20000e34 	.word	0x20000e34

08000960 <ucCardDetected>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static uint8_t ucCardDetected (fsm_t* this) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]

	ucflagAccess = 0;
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <ucCardDetected+0x54>)
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
    ucflagAccessAcepted_l = 0;
 800096e:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <ucCardDetected+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
	nfcid = demoCycle();
 8000974:	f7ff fe8e 	bl	8000694 <demoCycle>
 8000978:	4602      	mov	r2, r0
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <ucCardDetected+0x5c>)
 800097c:	601a      	str	r2, [r3, #0]
	nfcid = demoCycle();
 800097e:	f7ff fe89 	bl	8000694 <demoCycle>
 8000982:	4602      	mov	r2, r0
 8000984:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <ucCardDetected+0x5c>)
 8000986:	601a      	str	r2, [r3, #0]
	if(nfcid != NULL){
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <ucCardDetected+0x5c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d00b      	beq.n	80009a8 <ucCardDetected+0x48>
		platformLog("NFC card detected %s\r\n", nfcid);
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <ucCardDetected+0x5c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4619      	mov	r1, r3
 8000996:	480a      	ldr	r0, [pc, #40]	; (80009c0 <ucCardDetected+0x60>)
 8000998:	f7ff ff3e 	bl	8000818 <logUsart>
		ucflagCardDetected = 1;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <ucCardDetected+0x64>)
 800099e:	2201      	movs	r2, #1
 80009a0:	701a      	strb	r2, [r3, #0]
		ucflagReady = 0;
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <ucCardDetected+0x68>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
	}

	return ucflagCardDetected;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <ucCardDetected+0x64>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000200 	.word	0x20000200
 80009b8:	20000202 	.word	0x20000202
 80009bc:	200001fc 	.word	0x200001fc
 80009c0:	0800e1b4 	.word	0x0800e1b4
 80009c4:	20000020 	.word	0x20000020
 80009c8:	20000021 	.word	0x20000021

080009cc <ucAccessAcepted>:

static uint8_t ucAccessAcepted (fsm_t* this) { return ucflagAccess; }
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <ucAccessAcepted+0x18>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	4618      	mov	r0, r3
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	20000200 	.word	0x20000200

080009e8 <ucAccessDenied>:

static uint8_t ucAccessDenied (fsm_t* this) { return !ucflagAccess; }
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <ucAccessDenied+0x24>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	bf0c      	ite	eq
 80009f8:	2301      	moveq	r3, #1
 80009fa:	2300      	movne	r3, #0
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	4618      	mov	r0, r3
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000200 	.word	0x20000200

08000a10 <ucReady>:

static uint8_t ucReady (fsm_t* this) { return ucflagReady; }
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <ucReady+0x18>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	20000021 	.word	0x20000021

08000a2c <ucAllowed>:

static uint8_t ucAllowed(fsm_t* this) {uint8_t a = ucDoorOpenFlag && ucflagAccess;
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <ucAllowed+0x30>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d005      	beq.n	8000a48 <ucAllowed+0x1c>
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <ucAllowed+0x34>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <ucAllowed+0x1c>
 8000a44:	2301      	movs	r3, #1
 8000a46:	e000      	b.n	8000a4a <ucAllowed+0x1e>
 8000a48:	2300      	movs	r3, #0
 8000a4a:	73fb      	strb	r3, [r7, #15]
; return (a);}
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	20000203 	.word	0x20000203
 8000a60:	20000200 	.word	0x20000200

08000a64 <ucNotAllowed>:

static uint8_t ucNotAllowed(fsm_t* this) { uint8_t a = ucDoorOpenFlag && !ucflagAccess;
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <ucNotAllowed+0x30>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d005      	beq.n	8000a80 <ucNotAllowed+0x1c>
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <ucNotAllowed+0x34>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d101      	bne.n	8000a80 <ucNotAllowed+0x1c>
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e000      	b.n	8000a82 <ucNotAllowed+0x1e>
 8000a80:	2300      	movs	r3, #0
 8000a82:	73fb      	strb	r3, [r7, #15]
return (a);}
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
 8000a86:	4618      	mov	r0, r3
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	20000203 	.word	0x20000203
 8000a98:	20000200 	.word	0x20000200

08000a9c <ucTimeout>:

static uint8_t ucTimeout(fsm_t* this){ return (HAL_GetTick() - door_time > TIME_DOOR);}
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	f001 fea6 	bl	80027f4 <HAL_GetTick>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <ucTimeout+0x28>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	1ad3      	subs	r3, r2, r3
 8000ab0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000ab4:	bf8c      	ite	hi
 8000ab6:	2301      	movhi	r3, #1
 8000ab8:	2300      	movls	r3, #0
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20001034 	.word	0x20001034

08000ac8 <ucIsClose>:

static uint8_t ucIsClose(fsm_t* this){ uint8_t a = !ucDoorOpenFlag;
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <ucIsClose+0x28>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	bf0c      	ite	eq
 8000ad8:	2301      	moveq	r3, #1
 8000ada:	2300      	movne	r3, #0
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	73fb      	strb	r3, [r7, #15]
 return a;}
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000203 	.word	0x20000203

08000af4 <vRequestAccess>:
//Request access
static void vRequestAccess (fsm_t* this)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]


  //Update flags
  ucflagCardDetected = 0;
 8000afc:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <vRequestAccess+0x80>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]

  //Falta la función de Rafa
  char* tmp = NULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
  strcpy(tmp,nfcid);
 8000b06:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <vRequestAccess+0x84>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	68f8      	ldr	r0, [r7, #12]
 8000b0e:	f00c ffef 	bl	800daf0 <strcpy>
  ucflagBluetooth = 1; //Send a bluetooth access request. Send the ulIdDevice
 8000b12:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <vRequestAccess+0x88>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	701a      	strb	r2, [r3, #0]
  if(strcmp(nfcid, tmp)){
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <vRequestAccess+0x84>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	68f9      	ldr	r1, [r7, #12]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fb5e 	bl	80001e0 <strcmp>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d002      	beq.n	8000b30 <vRequestAccess+0x3c>
	  ucflagAccessAcepted_l = 1;
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <vRequestAccess+0x8c>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	701a      	strb	r2, [r3, #0]
  }
  //start timeout timer
  //timer_start(TIMEOUT);
  nfcid = NULL; // Reset nfcid value
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <vRequestAccess+0x84>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
  if(ucflagAccessAcepted_l) {
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <vRequestAccess+0x8c>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d00b      	beq.n	8000b56 <vRequestAccess+0x62>
    ucflagAccess = 1;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <vRequestAccess+0x90>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	701a      	strb	r2, [r3, #0]
    platformLog("Access accepted\r\n");
 8000b44:	4810      	ldr	r0, [pc, #64]	; (8000b88 <vRequestAccess+0x94>)
 8000b46:	f7ff fe67 	bl	8000818 <logUsart>
	HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin,GPIO_PIN_SET); //access accepted
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	480f      	ldr	r0, [pc, #60]	; (8000b8c <vRequestAccess+0x98>)
 8000b50:	f002 f92a 	bl	8002da8 <HAL_GPIO_WritePin>
	ucflagReady = 0;
	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_GPIO_Port,GPIO_PIN_SET); //access denied

  }

}
 8000b54:	e00a      	b.n	8000b6c <vRequestAccess+0x78>
	platformLog("Access denied\r\n");
 8000b56:	480e      	ldr	r0, [pc, #56]	; (8000b90 <vRequestAccess+0x9c>)
 8000b58:	f7ff fe5e 	bl	8000818 <logUsart>
	ucflagReady = 0;
 8000b5c:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <vRequestAccess+0xa0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_GPIO_Port,GPIO_PIN_SET); //access denied
 8000b62:	2201      	movs	r2, #1
 8000b64:	2100      	movs	r1, #0
 8000b66:	480c      	ldr	r0, [pc, #48]	; (8000b98 <vRequestAccess+0xa4>)
 8000b68:	f002 f91e 	bl	8002da8 <HAL_GPIO_WritePin>
}
 8000b6c:	bf00      	nop
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000020 	.word	0x20000020
 8000b78:	200001fc 	.word	0x200001fc
 8000b7c:	20000201 	.word	0x20000201
 8000b80:	20000202 	.word	0x20000202
 8000b84:	20000200 	.word	0x20000200
 8000b88:	0800e1cc 	.word	0x0800e1cc
 8000b8c:	40020400 	.word	0x40020400
 8000b90:	0800e1e0 	.word	0x0800e1e0
 8000b94:	20000021 	.word	0x20000021
 8000b98:	40020000 	.word	0x40020000

08000b9c <vUpdateFlag>:

//Update flags
static void vUpdateFlag (fsm_t* this)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  ucflagAccess = 0;
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <vUpdateFlag+0x1c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000200 	.word	0x20000200

08000bbc <vOpenDoor>:

//Wait till the door is open
static void vOpenDoor (fsm_t* this)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  //Update flags

  platformLog("Opening door...\r\n");
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <vOpenDoor+0x20>)
 8000bc6:	f7ff fe27 	bl	8000818 <logUsart>
  HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin,GPIO_PIN_SET); //indicates that the door started to open
 8000bca:	2201      	movs	r2, #1
 8000bcc:	2102      	movs	r1, #2
 8000bce:	4804      	ldr	r0, [pc, #16]	; (8000be0 <vOpenDoor+0x24>)
 8000bd0:	f002 f8ea 	bl	8002da8 <HAL_GPIO_WritePin>


}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	0800e1f0 	.word	0x0800e1f0
 8000be0:	40020000 	.word	0x40020000

08000be4 <vIsOpened>:

static void vIsOpened(fsm_t* this)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	2101      	movs	r1, #1
 8000bf0:	4807      	ldr	r0, [pc, #28]	; (8000c10 <vIsOpened+0x2c>)
 8000bf2:	f002 f8d9 	bl	8002da8 <HAL_GPIO_WritePin>
	platformLog("La puerta esta abierta. Cierrala.\r\n");
 8000bf6:	4807      	ldr	r0, [pc, #28]	; (8000c14 <vIsOpened+0x30>)
 8000bf8:	f7ff fe0e 	bl	8000818 <logUsart>
	door_time = HAL_GetTick();
 8000bfc:	f001 fdfa 	bl	80027f4 <HAL_GetTick>
 8000c00:	4602      	mov	r2, r0
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <vIsOpened+0x34>)
 8000c04:	601a      	str	r2, [r3, #0]

}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40020400 	.word	0x40020400
 8000c14:	0800e204 	.word	0x0800e204
 8000c18:	20001034 	.word	0x20001034

08000c1c <vIsClosed>:

static void vIsClosed(fsm_t* this)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2101      	movs	r1, #1
 8000c28:	4806      	ldr	r0, [pc, #24]	; (8000c44 <vIsClosed+0x28>)
 8000c2a:	f002 f8bd 	bl	8002da8 <HAL_GPIO_WritePin>
	platformLog("La puerta esta cerrada\r\n");
 8000c2e:	4806      	ldr	r0, [pc, #24]	; (8000c48 <vIsClosed+0x2c>)
 8000c30:	f7ff fdf2 	bl	8000818 <logUsart>
	ucflagReady = 1;
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <vIsClosed+0x30>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	701a      	strb	r2, [r3, #0]

}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40020400 	.word	0x40020400
 8000c48:	0800e228 	.word	0x0800e228
 8000c4c:	20000021 	.word	0x20000021

08000c50 <vAlarm>:

static void vAlarm(fsm_t* this)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2110      	movs	r1, #16
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <vAlarm+0x20>)
 8000c5e:	f002 f8a3 	bl	8002da8 <HAL_GPIO_WritePin>
	platformLog("Alarma sonando con un ruido espantoso...\r\n");
 8000c62:	4804      	ldr	r0, [pc, #16]	; (8000c74 <vAlarm+0x24>)
 8000c64:	f7ff fdd8 	bl	8000818 <logUsart>

}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40020000 	.word	0x40020000
 8000c74:	0800e244 	.word	0x0800e244

08000c78 <vNotAlarm>:

static void vNotAlarm(fsm_t* this){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]


	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2110      	movs	r1, #16
 8000c84:	4808      	ldr	r0, [pc, #32]	; (8000ca8 <vNotAlarm+0x30>)
 8000c86:	f002 f88f 	bl	8002da8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	4807      	ldr	r0, [pc, #28]	; (8000cac <vNotAlarm+0x34>)
 8000c90:	f002 f88a 	bl	8002da8 <HAL_GPIO_WritePin>
	platformLog("Se apaga la alarma porque se ha cerrado la puerta\r\n");
 8000c94:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <vNotAlarm+0x38>)
 8000c96:	f7ff fdbf 	bl	8000818 <logUsart>
	ucflagReady = 1;
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <vNotAlarm+0x3c>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]


}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40020000 	.word	0x40020000
 8000cac:	40020400 	.word	0x40020400
 8000cb0:	0800e270 	.word	0x0800e270
 8000cb4:	20000021 	.word	0x20000021

08000cb8 <vReady>:

static void vReady(fsm_t* this){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin,GPIO_PIN_RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2102      	movs	r1, #2
 8000cc4:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <vReady+0x1c>)
 8000cc6:	f002 f86f 	bl	8002da8 <HAL_GPIO_WritePin>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40020000 	.word	0x40020000

08000cd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cde:	f001 fd23 	bl	8002728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce2:	f000 f883 	bl	8000dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce6:	f000 f941 	bl	8000f6c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000cea:	f000 f8df 	bl	8000eac <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000cee:	f000 f913 	bl	8000f18 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  /* Initialize driver*/
  spiInit(&hspi1);
 8000cf2:	4835      	ldr	r0, [pc, #212]	; (8000dc8 <main+0xf0>)
 8000cf4:	f000 fa30 	bl	8001158 <spiInit>
  
  /* Initialize log module */
  logUsartInit(&huart2);
 8000cf8:	4834      	ldr	r0, [pc, #208]	; (8000dcc <main+0xf4>)
 8000cfa:	f7ff fd61 	bl	80007c0 <logUsartInit>

  /* Create new fsm */
  fsm_t* main_fsm = fsm_new(fsm_table1);
 8000cfe:	4834      	ldr	r0, [pc, #208]	; (8000dd0 <main+0xf8>)
 8000d00:	f7ff fd0a 	bl	8000718 <fsm_new>
 8000d04:	60b8      	str	r0, [r7, #8]
  fsm_t* alarm_fsm = fsm_new(fsm_table2);
 8000d06:	4833      	ldr	r0, [pc, #204]	; (8000dd4 <main+0xfc>)
 8000d08:	f7ff fd06 	bl	8000718 <fsm_new>
 8000d0c:	6078      	str	r0, [r7, #4]

  uint32_t next_execution;
  uint8_t frame = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	73fb      	strb	r3, [r7, #15]
  /*******************************************************/

  platformLog("************* NFC DEMO *************\r\n");
 8000d12:	4831      	ldr	r0, [pc, #196]	; (8000dd8 <main+0x100>)
 8000d14:	f7ff fd80 	bl	8000818 <logUsart>

  /* Initalize RFAL */
  if( !demoIni() )
 8000d18:	f7ff fc68 	bl	80005ec <demoIni>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	f083 0301 	eor.w	r3, r3, #1
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d003      	beq.n	8000d30 <main+0x58>
  {
    /*
    * in case the rfal initalization failed signal it by flashing all LED
    * and stoping all operations
    */
    platformLog("NFC Driver initialization FAIL.\r\n");
 8000d28:	482c      	ldr	r0, [pc, #176]	; (8000ddc <main+0x104>)
 8000d2a:	f7ff fd75 	bl	8000818 <logUsart>
    while(1);
 8000d2e:	e7fe      	b.n	8000d2e <main+0x56>
  }
  else
  {
    platformLog("NFC Driver initialization OK.\r\n");
 8000d30:	482b      	ldr	r0, [pc, #172]	; (8000de0 <main+0x108>)
 8000d32:	f7ff fd71 	bl	8000818 <logUsart>
    platformLog("*******************************************\r\n");
 8000d36:	482b      	ldr	r0, [pc, #172]	; (8000de4 <main+0x10c>)
 8000d38:	f7ff fd6e 	bl	8000818 <logUsart>
	  if( platformGpioIsLow(PLATFORM_USER_BUTTON_PORT, PLATFORM_USER_BUTTON_PIN))
		  ucDoorOpenFlag = 1;
	  else
		  ucDoorOpenFlag = 0;*/

	 next_execution = HAL_GetTick() + SECONDARY_PERIOD_MS ;
 8000d3c:	f001 fd5a 	bl	80027f4 <HAL_GetTick>
 8000d40:	4603      	mov	r3, r0
 8000d42:	3332      	adds	r3, #50	; 0x32
 8000d44:	603b      	str	r3, [r7, #0]
	 switch (frame) {
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
 8000d48:	2b05      	cmp	r3, #5
 8000d4a:	d82a      	bhi.n	8000da2 <main+0xca>
 8000d4c:	a201      	add	r2, pc, #4	; (adr r2, 8000d54 <main+0x7c>)
 8000d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d52:	bf00      	nop
 8000d54:	08000d6d 	.word	0x08000d6d
 8000d58:	08000d7b 	.word	0x08000d7b
 8000d5c:	08000d83 	.word	0x08000d83
 8000d60:	08000d8b 	.word	0x08000d8b
 8000d64:	08000d93 	.word	0x08000d93
 8000d68:	08000d9b 	.word	0x08000d9b
	 case 0:
		  fsm_fire(main_fsm);
 8000d6c:	68b8      	ldr	r0, [r7, #8]
 8000d6e:	f7ff fcf7 	bl	8000760 <fsm_fire>
		  fsm_fire(alarm_fsm);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff fcf4 	bl	8000760 <fsm_fire>
		  break;
 8000d78:	e013      	b.n	8000da2 <main+0xca>
	 case 1:
		  fsm_fire(alarm_fsm);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff fcf0 	bl	8000760 <fsm_fire>
		  break;
 8000d80:	e00f      	b.n	8000da2 <main+0xca>
	 case 2:
		  fsm_fire(alarm_fsm);
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f7ff fcec 	bl	8000760 <fsm_fire>
		  break;
 8000d88:	e00b      	b.n	8000da2 <main+0xca>
	 case 3:
		  fsm_fire(alarm_fsm);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff fce8 	bl	8000760 <fsm_fire>
		  break;
 8000d90:	e007      	b.n	8000da2 <main+0xca>
	 case 4:
		  fsm_fire(alarm_fsm);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff fce4 	bl	8000760 <fsm_fire>
		  break;
 8000d98:	e003      	b.n	8000da2 <main+0xca>
	 case 5:
		  fsm_fire(alarm_fsm);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff fce0 	bl	8000760 <fsm_fire>
		  break;
 8000da0:	bf00      	nop
	  }
	 frame = (frame + 1) % 6;
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	1c5a      	adds	r2, r3, #1
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <main+0x110>)
 8000da8:	fb83 3102 	smull	r3, r1, r3, r2
 8000dac:	17d3      	asrs	r3, r2, #31
 8000dae:	1ac9      	subs	r1, r1, r3
 8000db0:	460b      	mov	r3, r1
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	440b      	add	r3, r1
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	1ad1      	subs	r1, r2, r3
 8000dba:	460b      	mov	r3, r1
 8000dbc:	73fb      	strb	r3, [r7, #15]
	 delay_until(next_execution);
 8000dbe:	6838      	ldr	r0, [r7, #0]
 8000dc0:	f000 f984 	bl	80010cc <delay_until>
	 next_execution = HAL_GetTick() + SECONDARY_PERIOD_MS ;
 8000dc4:	e7ba      	b.n	8000d3c <main+0x64>
 8000dc6:	bf00      	nop
 8000dc8:	20001038 	.word	0x20001038
 8000dcc:	20001090 	.word	0x20001090
 8000dd0:	20000024 	.word	0x20000024
 8000dd4:	20000074 	.word	0x20000074
 8000dd8:	0800e2a4 	.word	0x0800e2a4
 8000ddc:	0800e2cc 	.word	0x0800e2cc
 8000de0:	0800e2f0 	.word	0x0800e2f0
 8000de4:	0800e310 	.word	0x0800e310
 8000de8:	2aaaaaab 	.word	0x2aaaaaab

08000dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b094      	sub	sp, #80	; 0x50
 8000df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df2:	f107 0320 	add.w	r3, r7, #32
 8000df6:	2230      	movs	r2, #48	; 0x30
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f00c fdb7 	bl	800d96e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <SystemClock_Config+0xb8>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	4a22      	ldr	r2, [pc, #136]	; (8000ea4 <SystemClock_Config+0xb8>)
 8000e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e20:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <SystemClock_Config+0xb8>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <SystemClock_Config+0xbc>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e38:	4a1b      	ldr	r2, [pc, #108]	; (8000ea8 <SystemClock_Config+0xbc>)
 8000e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e3e:	6013      	str	r3, [r2, #0]
 8000e40:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <SystemClock_Config+0xbc>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e50:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5a:	f107 0320 	add.w	r3, r7, #32
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f001 ffd4 	bl	8002e0c <HAL_RCC_OscConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e6a:	f000 f971 	bl	8001150 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6e:	230f      	movs	r3, #15
 8000e70:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000e72:	2301      	movs	r3, #1
 8000e74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f002 fa2e 	bl	80032ec <HAL_RCC_ClockConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e96:	f000 f95b 	bl	8001150 <Error_Handler>
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3750      	adds	r7, #80	; 0x50
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40007000 	.word	0x40007000

08000eac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000eb0:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <MX_SPI1_Init+0x64>)
 8000eb2:	4a18      	ldr	r2, [pc, #96]	; (8000f14 <MX_SPI1_Init+0x68>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eb6:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <MX_SPI1_Init+0x64>)
 8000eb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ebc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ebe:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <MX_SPI1_Init+0x64>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <MX_SPI1_Init+0x64>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_SPI1_Init+0x64>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_SPI1_Init+0x64>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_SPI1_Init+0x64>)
 8000ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000edc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_SPI1_Init+0x64>)
 8000ee0:	2218      	movs	r2, #24
 8000ee2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <MX_SPI1_Init+0x64>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_SPI1_Init+0x64>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <MX_SPI1_Init+0x64>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_SPI1_Init+0x64>)
 8000ef8:	220a      	movs	r2, #10
 8000efa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000efc:	4804      	ldr	r0, [pc, #16]	; (8000f10 <MX_SPI1_Init+0x64>)
 8000efe:	f002 fbe7 	bl	80036d0 <HAL_SPI_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f08:	f000 f922 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20001038 	.word	0x20001038
 8000f14:	40013000 	.word	0x40013000

08000f18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f1e:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <MX_USART2_UART_Init+0x50>)
 8000f20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f3e:	220c      	movs	r2, #12
 8000f40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f50:	f002 fe70 	bl	8003c34 <HAL_UART_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f5a:	f000 f8f9 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20001090 	.word	0x20001090
 8000f68:	40004400 	.word	0x40004400

08000f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	4b4c      	ldr	r3, [pc, #304]	; (80010b8 <MX_GPIO_Init+0x14c>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a4b      	ldr	r2, [pc, #300]	; (80010b8 <MX_GPIO_Init+0x14c>)
 8000f8c:	f043 0304 	orr.w	r3, r3, #4
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b49      	ldr	r3, [pc, #292]	; (80010b8 <MX_GPIO_Init+0x14c>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0304 	and.w	r3, r3, #4
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b45      	ldr	r3, [pc, #276]	; (80010b8 <MX_GPIO_Init+0x14c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a44      	ldr	r2, [pc, #272]	; (80010b8 <MX_GPIO_Init+0x14c>)
 8000fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b42      	ldr	r3, [pc, #264]	; (80010b8 <MX_GPIO_Init+0x14c>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	4b3e      	ldr	r3, [pc, #248]	; (80010b8 <MX_GPIO_Init+0x14c>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a3d      	ldr	r2, [pc, #244]	; (80010b8 <MX_GPIO_Init+0x14c>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b3b      	ldr	r3, [pc, #236]	; (80010b8 <MX_GPIO_Init+0x14c>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <MX_GPIO_Init+0x14c>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a36      	ldr	r2, [pc, #216]	; (80010b8 <MX_GPIO_Init+0x14c>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b34      	ldr	r3, [pc, #208]	; (80010b8 <MX_GPIO_Init+0x14c>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 7189 	mov.w	r1, #274	; 0x112
 8000ff8:	4830      	ldr	r0, [pc, #192]	; (80010bc <MX_GPIO_Init+0x150>)
 8000ffa:	f001 fed5 	bl	8002da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2171      	movs	r1, #113	; 0x71
 8001002:	482f      	ldr	r0, [pc, #188]	; (80010c0 <MX_GPIO_Init+0x154>)
 8001004:	f001 fed0 	bl	8002da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001008:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800100c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800100e:	4b2d      	ldr	r3, [pc, #180]	; (80010c4 <MX_GPIO_Init+0x158>)
 8001010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	482a      	ldr	r0, [pc, #168]	; (80010c8 <MX_GPIO_Init+0x15c>)
 800101e:	f001 fd29 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001022:	2301      	movs	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001026:	4b27      	ldr	r3, [pc, #156]	; (80010c4 <MX_GPIO_Init+0x158>)
 8001028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	4821      	ldr	r0, [pc, #132]	; (80010bc <MX_GPIO_Init+0x150>)
 8001036:	f001 fd1d 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8;
 800103a:	f44f 7389 	mov.w	r3, #274	; 0x112
 800103e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001040:	2301      	movs	r3, #1
 8001042:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	481a      	ldr	r0, [pc, #104]	; (80010bc <MX_GPIO_Init+0x150>)
 8001054:	f001 fd0e 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001058:	2371      	movs	r3, #113	; 0x71
 800105a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	4814      	ldr	r0, [pc, #80]	; (80010c0 <MX_GPIO_Init+0x154>)
 8001070:	f001 fd00 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001074:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001078:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <MX_GPIO_Init+0x150>)
 800108a:	f001 fcf3 	bl	8002a74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	2006      	movs	r0, #6
 8001094:	f001 fcb7 	bl	8002a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001098:	2006      	movs	r0, #6
 800109a:	f001 fcd0 	bl	8002a3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 800109e:	2201      	movs	r2, #1
 80010a0:	2100      	movs	r1, #0
 80010a2:	2028      	movs	r0, #40	; 0x28
 80010a4:	f001 fcaf 	bl	8002a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010a8:	2028      	movs	r0, #40	; 0x28
 80010aa:	f001 fcc8 	bl	8002a3e <HAL_NVIC_EnableIRQ>

}
 80010ae:	bf00      	nop
 80010b0:	3728      	adds	r7, #40	; 0x28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020000 	.word	0x40020000
 80010c0:	40020400 	.word	0x40020400
 80010c4:	10110000 	.word	0x10110000
 80010c8:	40020800 	.word	0x40020800

080010cc <delay_until>:

/* USER CODE BEGIN 4 */
void delay_until(uint32_t time){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 80010d4:	f001 fb8e 	bl	80027f4 <HAL_GetTick>
 80010d8:	60f8      	str	r0, [r7, #12]
    if(currentTime >= time){
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d207      	bcs.n	80010f2 <delay_until+0x26>
        return;
    }
    else{
    	HAL_Delay(time - currentTime);
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 fb8f 	bl	800280c <HAL_Delay>
    }
    return;
 80010ee:	bf00      	nop
 80010f0:	e000      	b.n	80010f4 <delay_until+0x28>
        return;
 80010f2:	bf00      	nop
}
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
	if(GPIO_Pin == GPIO_PIN_13){
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800110c:	d117      	bne.n	800113e <HAL_GPIO_EXTI_Callback+0x42>
		static int a;
		if(HAL_GetTick() - a > 100){
 800110e:	f001 fb71 	bl	80027f4 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b64      	cmp	r3, #100	; 0x64
 800111c:	d909      	bls.n	8001132 <HAL_GPIO_EXTI_Callback+0x36>
		ucDoorOpenFlag = !ucDoorOpenFlag;
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <HAL_GPIO_EXTI_Callback+0x50>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	bf0c      	ite	eq
 8001126:	2301      	moveq	r3, #1
 8001128:	2300      	movne	r3, #0
 800112a:	b2db      	uxtb	r3, r3
 800112c:	461a      	mov	r2, r3
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <HAL_GPIO_EXTI_Callback+0x50>)
 8001130:	701a      	strb	r2, [r3, #0]
	}
	a = HAL_GetTick();
 8001132:	f001 fb5f 	bl	80027f4 <HAL_GetTick>
 8001136:	4603      	mov	r3, r0
 8001138:	461a      	mov	r2, r3
 800113a:	4b03      	ldr	r3, [pc, #12]	; (8001148 <HAL_GPIO_EXTI_Callback+0x4c>)
 800113c:	601a      	str	r2, [r3, #0]
	}

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000204 	.word	0x20000204
 800114c:	20000203 	.word	0x20000203

08001150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8001154:	e7fe      	b.n	8001154 <Error_Handler+0x4>
	...

08001158 <spiInit>:

SPI_HandleTypeDef *pSpi = 0;


void spiInit(SPI_HandleTypeDef *hspi)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
    pSpi = hspi;
 8001160:	4a08      	ldr	r2, [pc, #32]	; (8001184 <spiInit+0x2c>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6013      	str	r3, [r2, #0]

    /* enabling SPI block will put SCLK to output, guaranteeing proper state when spiSelect() gets called */
    __HAL_SPI_ENABLE(hspi);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001174:	601a      	str	r2, [r3, #0]
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	200002d0 	.word	0x200002d0

08001188 <spiTxRx>:
{
   HAL_GPIO_WritePin(ssPort, ssPin, GPIO_PIN_SET);
}

HAL_StatusTypeDef spiTxRx(const uint8_t *txData, uint8_t *rxData, uint16_t length)
{  
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af02      	add	r7, sp, #8
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	4613      	mov	r3, r2
 8001194:	80fb      	strh	r3, [r7, #6]
  if(pSpi == 0)
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <spiTxRx+0x70>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <spiTxRx+0x1a>
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e025      	b.n	80011ee <spiTxRx+0x66>
  
  if(length > SPI_BUF_LEN)
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	2b61      	cmp	r3, #97	; 0x61
 80011a6:	d901      	bls.n	80011ac <spiTxRx+0x24>
  {
    return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e020      	b.n	80011ee <spiTxRx+0x66>
  }
  
  /* Initialize Tx data*/
  if(txData != NULL)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d006      	beq.n	80011c0 <spiTxRx+0x38>
  {
    memcpy(txBuf, txData, length );
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	461a      	mov	r2, r3
 80011b6:	68f9      	ldr	r1, [r7, #12]
 80011b8:	4810      	ldr	r0, [pc, #64]	; (80011fc <spiTxRx+0x74>)
 80011ba:	f00c fbb4 	bl	800d926 <memcpy>
 80011be:	e005      	b.n	80011cc <spiTxRx+0x44>
  }
  else
  {
    memset(txBuf, 0x00, length );
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	461a      	mov	r2, r3
 80011c4:	2100      	movs	r1, #0
 80011c6:	480d      	ldr	r0, [pc, #52]	; (80011fc <spiTxRx+0x74>)
 80011c8:	f00c fbd1 	bl	800d96e <memset>
  }

  return HAL_SPI_TransmitReceive(pSpi, txBuf, (rxData != NULL) ? rxData : rxBuf, length, SPI_TIMEOUT);
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <spiTxRx+0x70>)
 80011ce:	6818      	ldr	r0, [r3, #0]
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <spiTxRx+0x52>
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	e000      	b.n	80011dc <spiTxRx+0x54>
 80011da:	4a09      	ldr	r2, [pc, #36]	; (8001200 <spiTxRx+0x78>)
 80011dc:	88f9      	ldrh	r1, [r7, #6]
 80011de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	460b      	mov	r3, r1
 80011e6:	4905      	ldr	r1, [pc, #20]	; (80011fc <spiTxRx+0x74>)
 80011e8:	f002 fad6 	bl	8003798 <HAL_SPI_TransmitReceive>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200002d0 	.word	0x200002d0
 80011fc:	20000208 	.word	0x20000208
 8001200:	2000026c 	.word	0x2000026c

08001204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <HAL_MspInit+0x4c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	4a0f      	ldr	r2, [pc, #60]	; (8001250 <HAL_MspInit+0x4c>)
 8001214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001218:	6453      	str	r3, [r2, #68]	; 0x44
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <HAL_MspInit+0x4c>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <HAL_MspInit+0x4c>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	4a08      	ldr	r2, [pc, #32]	; (8001250 <HAL_MspInit+0x4c>)
 8001230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001234:	6413      	str	r3, [r2, #64]	; 0x40
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_MspInit+0x4c>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800

08001254 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a19      	ldr	r2, [pc, #100]	; (80012d8 <HAL_SPI_MspInit+0x84>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d12b      	bne.n	80012ce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <HAL_SPI_MspInit+0x88>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	4a17      	ldr	r2, [pc, #92]	; (80012dc <HAL_SPI_MspInit+0x88>)
 8001280:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001284:	6453      	str	r3, [r2, #68]	; 0x44
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <HAL_SPI_MspInit+0x88>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_SPI_MspInit+0x88>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a10      	ldr	r2, [pc, #64]	; (80012dc <HAL_SPI_MspInit+0x88>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <HAL_SPI_MspInit+0x88>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012ae:	23e0      	movs	r3, #224	; 0xe0
 80012b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012be:	2305      	movs	r3, #5
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	4805      	ldr	r0, [pc, #20]	; (80012e0 <HAL_SPI_MspInit+0x8c>)
 80012ca:	f001 fbd3 	bl	8002a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012ce:	bf00      	nop
 80012d0:	3728      	adds	r7, #40	; 0x28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40013000 	.word	0x40013000
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020000 	.word	0x40020000

080012e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	; 0x28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a19      	ldr	r2, [pc, #100]	; (8001368 <HAL_UART_MspInit+0x84>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d12b      	bne.n	800135e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <HAL_UART_MspInit+0x88>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	4a17      	ldr	r2, [pc, #92]	; (800136c <HAL_UART_MspInit+0x88>)
 8001310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001314:	6413      	str	r3, [r2, #64]	; 0x40
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_UART_MspInit+0x88>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <HAL_UART_MspInit+0x88>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a10      	ldr	r2, [pc, #64]	; (800136c <HAL_UART_MspInit+0x88>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <HAL_UART_MspInit+0x88>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800133e:	230c      	movs	r3, #12
 8001340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800134e:	2307      	movs	r3, #7
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	4619      	mov	r1, r3
 8001358:	4805      	ldr	r0, [pc, #20]	; (8001370 <HAL_UART_MspInit+0x8c>)
 800135a:	f001 fb8b 	bl	8002a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800135e:	bf00      	nop
 8001360:	3728      	adds	r7, #40	; 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40004400 	.word	0x40004400
 800136c:	40023800 	.word	0x40023800
 8001370:	40020000 	.word	0x40020000

08001374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001386:	e7fe      	b.n	8001386 <HardFault_Handler+0x4>

08001388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800138c:	e7fe      	b.n	800138c <MemManage_Handler+0x4>

0800138e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001392:	e7fe      	b.n	8001392 <BusFault_Handler+0x4>

08001394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001398:	e7fe      	b.n	8001398 <UsageFault_Handler+0x4>

0800139a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c8:	f001 fa00 	bl	80027cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80013d4:	2001      	movs	r0, #1
 80013d6:	f001 fd01 	bl	8002ddc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  st25r3911Isr();
 80013da:	f000 fffb 	bl	80023d4 <st25r3911Isr>
  /* USER CODE END EXTI0_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80013e6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013ea:	f001 fcf7 	bl	8002ddc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <_sbrk+0x50>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d102      	bne.n	800140a <_sbrk+0x16>
		heap_end = &end;
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <_sbrk+0x50>)
 8001406:	4a10      	ldr	r2, [pc, #64]	; (8001448 <_sbrk+0x54>)
 8001408:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <_sbrk+0x50>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <_sbrk+0x50>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4413      	add	r3, r2
 8001418:	466a      	mov	r2, sp
 800141a:	4293      	cmp	r3, r2
 800141c:	d907      	bls.n	800142e <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800141e:	f00c fa41 	bl	800d8a4 <__errno>
 8001422:	4602      	mov	r2, r0
 8001424:	230c      	movs	r3, #12
 8001426:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
 800142c:	e006      	b.n	800143c <_sbrk+0x48>
	}

	heap_end += incr;
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <_sbrk+0x50>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	4a03      	ldr	r2, [pc, #12]	; (8001444 <_sbrk+0x50>)
 8001438:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800143a:	68fb      	ldr	r3, [r7, #12]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200002d4 	.word	0x200002d4
 8001448:	200010d8 	.word	0x200010d8

0800144c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <SystemInit+0x60>)
 8001452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001456:	4a15      	ldr	r2, [pc, #84]	; (80014ac <SystemInit+0x60>)
 8001458:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800145c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <SystemInit+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <SystemInit+0x64>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800146c:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <SystemInit+0x64>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <SystemInit+0x64>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a0e      	ldr	r2, [pc, #56]	; (80014b0 <SystemInit+0x64>)
 8001478:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800147c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001480:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <SystemInit+0x64>)
 8001484:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <SystemInit+0x68>)
 8001486:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <SystemInit+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <SystemInit+0x64>)
 800148e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001492:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <SystemInit+0x64>)
 8001496:	2200      	movs	r2, #0
 8001498:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800149a:	4b04      	ldr	r3, [pc, #16]	; (80014ac <SystemInit+0x60>)
 800149c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014a0:	609a      	str	r2, [r3, #8]
#endif
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00
 80014b0:	40023800 	.word	0x40023800
 80014b4:	24003010 	.word	0x24003010

080014b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014be:	e003      	b.n	80014c8 <LoopCopyDataInit>

080014c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014c6:	3104      	adds	r1, #4

080014c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014c8:	480b      	ldr	r0, [pc, #44]	; (80014f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014d0:	d3f6      	bcc.n	80014c0 <CopyDataInit>
  ldr  r2, =_sbss
 80014d2:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014d4:	e002      	b.n	80014dc <LoopFillZerobss>

080014d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014d8:	f842 3b04 	str.w	r3, [r2], #4

080014dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014e0:	d3f9      	bcc.n	80014d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014e2:	f7ff ffb3 	bl	800144c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014e6:	f00c f9e3 	bl	800d8b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ea:	f7ff fbf5 	bl	8000cd8 <main>
  bx  lr    
 80014ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014f0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80014f4:	0800e54c 	.word	0x0800e54c
  ldr  r0, =_sdata
 80014f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014fc:	20000148 	.word	0x20000148
  ldr  r2, =_sbss
 8001500:	20000148 	.word	0x20000148
  ldr  r3, = _ebss
 8001504:	200010d8 	.word	0x200010d8

08001508 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001508:	e7fe      	b.n	8001508 <ADC_IRQHandler>

0800150a <st25r3911TxRxOn>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

void st25r3911TxRxOn( void )
{
 800150a:	b580      	push	{r7, lr}
 800150c:	af00      	add	r7, sp, #0
    st25r3911SetRegisterBits(ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_rx_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 800150e:	2148      	movs	r1, #72	; 0x48
 8001510:	2002      	movs	r0, #2
 8001512:	f000 fd64 	bl	8001fde <st25r3911SetRegisterBits>
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}

0800151a <st25r3911TxRxOff>:

void st25r3911TxRxOff( void )
{
 800151a:	b580      	push	{r7, lr}
 800151c:	af00      	add	r7, sp, #0
    st25r3911ClrRegisterBits(ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_rx_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 800151e:	2148      	movs	r1, #72	; 0x48
 8001520:	2002      	movs	r0, #2
 8001522:	f000 fd39 	bl	8001f98 <st25r3911ClrRegisterBits>
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}

0800152a <st25r3911OscOn>:


void st25r3911OscOn( void )
{
 800152a:	b580      	push	{r7, lr}
 800152c:	af00      	add	r7, sp, #0
    /* Check if oscillator is already turned on and stable                                                */        
    /* Use ST25R3911_REG_OP_CONTROL_en instead of ST25R3911_REG_AUX_DISPLAY_osc_ok to be on the safe side */    
    if( !st25r3911CheckReg( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_en, ST25R3911_REG_OP_CONTROL_en ) )
 800152e:	2280      	movs	r2, #128	; 0x80
 8001530:	2180      	movs	r1, #128	; 0x80
 8001532:	2002      	movs	r0, #2
 8001534:	f000 f9ba 	bl	80018ac <st25r3911CheckReg>
 8001538:	4603      	mov	r3, r0
 800153a:	f083 0301 	eor.w	r3, r3, #1
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	d011      	beq.n	8001568 <st25r3911OscOn+0x3e>
    {
        /* Clear any eventual previous oscillator IRQ */
        st25r3911GetInterrupt( ST25R3911_IRQ_MASK_OSC );
 8001544:	2080      	movs	r0, #128	; 0x80
 8001546:	f001 f849 	bl	80025dc <st25r3911GetInterrupt>
      
        /* enable oscillator frequency stable interrupt */
        st25r3911EnableInterrupts(ST25R3911_IRQ_MASK_OSC);
 800154a:	2080      	movs	r0, #128	; 0x80
 800154c:	f001 f87e 	bl	800264c <st25r3911EnableInterrupts>

        /* enable oscillator and regulator output */
        st25r3911ModifyRegister(ST25R3911_REG_OP_CONTROL, 0x00, ST25R3911_REG_OP_CONTROL_en);
 8001550:	2280      	movs	r2, #128	; 0x80
 8001552:	2100      	movs	r1, #0
 8001554:	2002      	movs	r0, #2
 8001556:	f000 fd76 	bl	8002046 <st25r3911ModifyRegister>

        /* wait for the oscillator interrupt */
        st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_OSC, ST25R3911_OSC_STABLE_TIMEOUT);
 800155a:	210a      	movs	r1, #10
 800155c:	2080      	movs	r0, #128	; 0x80
 800155e:	f000 ffed 	bl	800253c <st25r3911WaitForInterruptsTimed>
        st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_OSC);
 8001562:	2080      	movs	r0, #128	; 0x80
 8001564:	f001 f87e 	bl	8002664 <st25r3911DisableInterrupts>
    }
    
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}

0800156c <st25r3911Initialize>:


void st25r3911Initialize(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
    uint16_t vdd_mV;

    /* first, reset the st25r3911 */
    st25r3911ExecuteCommand(ST25R3911_CMD_SET_DEFAULT);
 8001572:	20c1      	movs	r0, #193	; 0xc1
 8001574:	f000 fe4a 	bl	800220c <st25r3911ExecuteCommand>

    /* Set Operation Control Register to default value */
    st25r3911WriteRegister(ST25R3911_REG_OP_CONTROL, 0x00);
 8001578:	2100      	movs	r1, #0
 800157a:	2002      	movs	r0, #2
 800157c:	f000 fcc2 	bl	8001f04 <st25r3911WriteRegister>
        
    /* enable pull downs on miso line */
    st25r3911ModifyRegister(ST25R3911_REG_IO_CONF2, 0, 
 8001580:	2218      	movs	r2, #24
 8001582:	2100      	movs	r1, #0
 8001584:	2001      	movs	r0, #1
 8001586:	f000 fd5e 	bl	8002046 <st25r3911ModifyRegister>
            ST25R3911_REG_IO_CONF2_miso_pd1 |
            ST25R3911_REG_IO_CONF2_miso_pd2);

    /* after reset all interrupts are enabled. so disable them at first */
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_ALL);
 800158a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800158e:	f001 f869 	bl	8002664 <st25r3911DisableInterrupts>
    /* and clear them, just to be sure... */
    st25r3911ClearInterrupts();
 8001592:	f001 f873 	bl	800267c <st25r3911ClearInterrupts>
    
    st25r3911OscOn();
 8001596:	f7ff ffc8 	bl	800152a <st25r3911OscOn>
    
    /* Measure vdd and set sup3V bit accordingly */
    vdd_mV = st25r3911MeasureVoltage(ST25R3911_REG_REGULATOR_CONTROL_mpsv_vdd);
 800159a:	2000      	movs	r0, #0
 800159c:	f000 f928 	bl	80017f0 <st25r3911MeasureVoltage>
 80015a0:	4603      	mov	r3, r0
 80015a2:	80fb      	strh	r3, [r7, #6]

    st25r3911ModifyRegister(ST25R3911_REG_IO_CONF2,
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80015aa:	d201      	bcs.n	80015b0 <st25r3911Initialize+0x44>
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	e000      	b.n	80015b2 <st25r3911Initialize+0x46>
 80015b0:	2300      	movs	r3, #0
 80015b2:	461a      	mov	r2, r3
 80015b4:	2180      	movs	r1, #128	; 0x80
 80015b6:	2001      	movs	r0, #1
 80015b8:	f000 fd45 	bl	8002046 <st25r3911ModifyRegister>
                         ST25R3911_REG_IO_CONF2_sup3V,
                         (uint8_t)((vdd_mV < 3600U)?ST25R3911_REG_IO_CONF2_sup3V:0U));

    /* Make sure Transmitter and Receiver are disabled */
    st25r3911TxRxOff();
 80015bc:	f7ff ffad 	bl	800151a <st25r3911TxRxOff>
    
    return;
 80015c0:	bf00      	nop
}
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <st25r3911AdjustRegulators>:

    return;
}

ReturnCode st25r3911AdjustRegulators(uint16_t* result_mV)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
    uint8_t result;
    uint8_t io_conf2;
    ReturnCode err = ERR_NONE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	81fb      	strh	r3, [r7, #14]

    /* Reset logic and set regulated voltages to be defined by result of Adjust Regulators command */
    st25r3911SetRegisterBits( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s );
 80015d4:	2180      	movs	r1, #128	; 0x80
 80015d6:	202a      	movs	r0, #42	; 0x2a
 80015d8:	f000 fd01 	bl	8001fde <st25r3911SetRegisterBits>
    st25r3911ClrRegisterBits( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s );
 80015dc:	2180      	movs	r1, #128	; 0x80
 80015de:	202a      	movs	r0, #42	; 0x2a
 80015e0:	f000 fcda 	bl	8001f98 <st25r3911ClrRegisterBits>

    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_ADJUST_REGULATORS,
 80015e4:	f107 030d 	add.w	r3, r7, #13
 80015e8:	2205      	movs	r2, #5
 80015ea:	212b      	movs	r1, #43	; 0x2b
 80015ec:	20d6      	movs	r0, #214	; 0xd6
 80015ee:	f000 fad5 	bl	8001b9c <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_REGULATOR_RESULT,
                                    5,
                                    &result);
  
    st25r3911ReadRegister(ST25R3911_REG_IO_CONF2, &io_conf2);
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	4619      	mov	r1, r3
 80015f8:	2001      	movs	r0, #1
 80015fa:	f000 fb5b 	bl	8001cb4 <st25r3911ReadRegister>

    result >>= ST25R3911_REG_REGULATOR_RESULT_shift_reg;
 80015fe:	7b7b      	ldrb	r3, [r7, #13]
 8001600:	091b      	lsrs	r3, r3, #4
 8001602:	b2db      	uxtb	r3, r3
 8001604:	737b      	strb	r3, [r7, #13]
    result -= 5U;
 8001606:	7b7b      	ldrb	r3, [r7, #13]
 8001608:	3b05      	subs	r3, #5
 800160a:	b2db      	uxtb	r3, r3
 800160c:	737b      	strb	r3, [r7, #13]
    if (result_mV != NULL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d02b      	beq.n	800166c <st25r3911AdjustRegulators+0xa4>
    {
        if((io_conf2 & ST25R3911_REG_IO_CONF2_sup3V) != 0U)
 8001614:	7b3b      	ldrb	r3, [r7, #12]
 8001616:	b25b      	sxtb	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	da16      	bge.n	800164a <st25r3911AdjustRegulators+0x82>
        {
            *result_mV = 2400;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8001622:	801a      	strh	r2, [r3, #0]
            *result_mV += (uint16_t)result * 100U;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	881a      	ldrh	r2, [r3, #0]
 8001628:	7b7b      	ldrb	r3, [r7, #13]
 800162a:	b29b      	uxth	r3, r3
 800162c:	4619      	mov	r1, r3
 800162e:	0089      	lsls	r1, r1, #2
 8001630:	440b      	add	r3, r1
 8001632:	4619      	mov	r1, r3
 8001634:	0088      	lsls	r0, r1, #2
 8001636:	4619      	mov	r1, r3
 8001638:	4603      	mov	r3, r0
 800163a:	440b      	add	r3, r1
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	b29b      	uxth	r3, r3
 8001640:	4413      	add	r3, r2
 8001642:	b29a      	uxth	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	801a      	strh	r2, [r3, #0]
 8001648:	e010      	b.n	800166c <st25r3911AdjustRegulators+0xa4>
        }
        else
        {
            *result_mV = 3900;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f640 723c 	movw	r2, #3900	; 0xf3c
 8001650:	801a      	strh	r2, [r3, #0]
            *result_mV += (uint16_t)result * 120U;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	881a      	ldrh	r2, [r3, #0]
 8001656:	7b7b      	ldrb	r3, [r7, #13]
 8001658:	b29b      	uxth	r3, r3
 800165a:	4619      	mov	r1, r3
 800165c:	0109      	lsls	r1, r1, #4
 800165e:	1acb      	subs	r3, r1, r3
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	b29b      	uxth	r3, r3
 8001664:	4413      	add	r3, r2
 8001666:	b29a      	uxth	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	801a      	strh	r2, [r3, #0]
        }
    }
    return err;
 800166c:	89fb      	ldrh	r3, [r7, #14]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <st25r3911MeasureAmplitude>:

void st25r3911MeasureAmplitude(uint8_t* result)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_MEASURE_AMPLITUDE,
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	220a      	movs	r2, #10
 8001682:	2120      	movs	r1, #32
 8001684:	20d3      	movs	r0, #211	; 0xd3
 8001686:	f000 fa89 	bl	8001b9c <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_AD_RESULT,
                                    10,
                                    result);
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <st25r3911MeasurePhase>:

void st25r3911MeasurePhase(uint8_t* result)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_MEASURE_PHASE,
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	220a      	movs	r2, #10
 800169e:	2120      	movs	r1, #32
 80016a0:	20d9      	movs	r0, #217	; 0xd9
 80016a2:	f000 fa7b 	bl	8001b9c <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_AD_RESULT,
                                    10,
                                    result);
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <st25r3911MeasureCapacitance>:

void st25r3911MeasureCapacitance(uint8_t* result)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_MEASURE_CAPACITANCE, 
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	220a      	movs	r2, #10
 80016ba:	2120      	movs	r1, #32
 80016bc:	20de      	movs	r0, #222	; 0xde
 80016be:	f000 fa6d 	bl	8001b9c <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_AD_RESULT,
                                    10,
                                    result);
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <st25r3911CalibrateAntenna>:

void st25r3911CalibrateAntenna(uint8_t* result)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_CALIBRATE_ANTENNA,
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	220a      	movs	r2, #10
 80016d6:	2123      	movs	r1, #35	; 0x23
 80016d8:	20d8      	movs	r0, #216	; 0xd8
 80016da:	f000 fa5f 	bl	8001b9c <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_ANT_CAL_RESULT,
                                    10,
                                    result);
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <st25r3911CalibrateCapacitiveSensor>:
                                    result);
}


ReturnCode st25r3911CalibrateCapacitiveSensor(uint8_t* result)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b084      	sub	sp, #16
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    uint8_t    res;
    
    /* Clear Manual calibration values to enable automatic calibration mode */
    st25r3911ClrRegisterBits( ST25R3911_REG_CAP_SENSOR_CONTROL, ST25R3916_REG_CAP_SENSOR_CONTROL_mask_cs_mcal );
 80016ee:	21f8      	movs	r1, #248	; 0xf8
 80016f0:	202e      	movs	r0, #46	; 0x2e
 80016f2:	f000 fc51 	bl	8001f98 <st25r3911ClrRegisterBits>
    
    /* Execute automatic calibration */
    ret = st25r3911ExecuteCommandAndGetResult( ST25R3911_CMD_CALIBRATE_C_SENSOR, ST25R3911_REG_CAP_SENSOR_RESULT, ST25R3911_TOUT_CALIBRATE_CAP_SENSOR, &res );
 80016f6:	f107 030d 	add.w	r3, r7, #13
 80016fa:	2204      	movs	r2, #4
 80016fc:	212f      	movs	r1, #47	; 0x2f
 80016fe:	20dd      	movs	r0, #221	; 0xdd
 8001700:	f000 fa4c 	bl	8001b9c <st25r3911ExecuteCommandAndGetResult>
 8001704:	4603      	mov	r3, r0
 8001706:	81fb      	strh	r3, [r7, #14]
    
    /* Check wether the calibration was successull */
    if( ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) != ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) ||
 8001708:	7b7b      	ldrb	r3, [r7, #13]
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	2b00      	cmp	r3, #0
 8001710:	d007      	beq.n	8001722 <st25r3911CalibrateCapacitiveSensor+0x3c>
        ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) == ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) || (ret != ERR_NONE) )
 8001712:	7b7b      	ldrb	r3, [r7, #13]
 8001714:	f003 0302 	and.w	r3, r3, #2
    if( ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) != ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) ||
 8001718:	2b00      	cmp	r3, #0
 800171a:	d102      	bne.n	8001722 <st25r3911CalibrateCapacitiveSensor+0x3c>
        ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) == ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) || (ret != ERR_NONE) )
 800171c:	89fb      	ldrh	r3, [r7, #14]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <st25r3911CalibrateCapacitiveSensor+0x40>
    {
        return ERR_IO;
 8001722:	2303      	movs	r3, #3
 8001724:	e008      	b.n	8001738 <st25r3911CalibrateCapacitiveSensor+0x52>
    }
    
    if( result != NULL )
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d004      	beq.n	8001736 <st25r3911CalibrateCapacitiveSensor+0x50>
    {
        (*result) = (uint8_t)(res >> ST25R3911_REG_CAP_SENSOR_CONTROL_shift_cs_mcal);
 800172c:	7b7b      	ldrb	r3, [r7, #13]
 800172e:	08db      	lsrs	r3, r3, #3
 8001730:	b2da      	uxtb	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <st25r3911SetBitrate>:


ReturnCode st25r3911SetBitrate(uint8_t txRate, uint8_t rxRate)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	460a      	mov	r2, r1
 800174a:	71fb      	strb	r3, [r7, #7]
 800174c:	4613      	mov	r3, r2
 800174e:	71bb      	strb	r3, [r7, #6]
    uint8_t reg;

    st25r3911ReadRegister(ST25R3911_REG_BIT_RATE, &reg);
 8001750:	f107 030f 	add.w	r3, r7, #15
 8001754:	4619      	mov	r1, r3
 8001756:	2004      	movs	r0, #4
 8001758:	f000 faac 	bl	8001cb4 <st25r3911ReadRegister>
    if (rxRate != ST25R3911_BR_DO_NOT_SET)
 800175c:	79bb      	ldrb	r3, [r7, #6]
 800175e:	2bff      	cmp	r3, #255	; 0xff
 8001760:	d00e      	beq.n	8001780 <st25r3911SetBitrate+0x40>
    {
        if(rxRate > ST25R3911_BR_3390)
 8001762:	79bb      	ldrb	r3, [r7, #6]
 8001764:	2b05      	cmp	r3, #5
 8001766:	d901      	bls.n	800176c <st25r3911SetBitrate+0x2c>
        {
            return ERR_PARAM;
 8001768:	2307      	movs	r3, #7
 800176a:	e025      	b.n	80017b8 <st25r3911SetBitrate+0x78>
        }
        else
        {
            reg = (uint8_t)(reg & ~ST25R3911_REG_BIT_RATE_mask_rxrate);     /* MISRA 10.3 */
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	f023 030f 	bic.w	r3, r3, #15
 8001772:	b2db      	uxtb	r3, r3
 8001774:	73fb      	strb	r3, [r7, #15]
            reg |= rxRate << ST25R3911_REG_BIT_RATE_shift_rxrate;
 8001776:	7bfa      	ldrb	r2, [r7, #15]
 8001778:	79bb      	ldrb	r3, [r7, #6]
 800177a:	4313      	orrs	r3, r2
 800177c:	b2db      	uxtb	r3, r3
 800177e:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (txRate != ST25R3911_BR_DO_NOT_SET)
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	2bff      	cmp	r3, #255	; 0xff
 8001784:	d012      	beq.n	80017ac <st25r3911SetBitrate+0x6c>
    {
        if(txRate > ST25R3911_BR_6780)
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	2b06      	cmp	r3, #6
 800178a:	d901      	bls.n	8001790 <st25r3911SetBitrate+0x50>
        {
            return ERR_PARAM;
 800178c:	2307      	movs	r3, #7
 800178e:	e013      	b.n	80017b8 <st25r3911SetBitrate+0x78>
        }
        else
        {
            reg = (uint8_t)(reg & ~ST25R3911_REG_BIT_RATE_mask_txrate);     /* MISRA 10.3 */
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	b2db      	uxtb	r3, r3
 8001798:	73fb      	strb	r3, [r7, #15]
            reg |= txRate<<ST25R3911_REG_BIT_RATE_shift_txrate;
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	b25a      	sxtb	r2, r3
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	b25b      	sxtb	r3, r3
 80017a4:	4313      	orrs	r3, r2
 80017a6:	b25b      	sxtb	r3, r3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	73fb      	strb	r3, [r7, #15]
        }
    }
    st25r3911WriteRegister(ST25R3911_REG_BIT_RATE, reg);
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	4619      	mov	r1, r3
 80017b0:	2004      	movs	r0, #4
 80017b2:	f000 fba7 	bl	8001f04 <st25r3911WriteRegister>
    
    return ERR_NONE;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <st25r3911MeasurePowerSupply>:

uint8_t st25r3911MeasurePowerSupply( uint8_t mpsv )
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
   
    /* Set the source of direct command: Measure Power Supply Voltage */
    st25r3911ChangeRegisterBits( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_mask_mpsv, mpsv );
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	461a      	mov	r2, r3
 80017ce:	2106      	movs	r1, #6
 80017d0:	202a      	movs	r0, #42	; 0x2a
 80017d2:	f000 fc22 	bl	800201a <st25r3911ChangeRegisterBits>

    /* Execute command: Measure Power Supply Voltage */
    st25r3911ExecuteCommandAndGetResult( ST25R3911_CMD_MEASURE_VDD, ST25R3911_REG_AD_RESULT, 10, &result);
 80017d6:	f107 030f 	add.w	r3, r7, #15
 80017da:	220a      	movs	r2, #10
 80017dc:	2120      	movs	r1, #32
 80017de:	20df      	movs	r0, #223	; 0xdf
 80017e0:	f000 f9dc 	bl	8001b9c <st25r3911ExecuteCommandAndGetResult>

    return result;
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <st25r3911MeasureVoltage>:

uint16_t st25r3911MeasureVoltage(uint8_t mpsv)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
    uint16_t mV;

    result = st25r3911MeasurePowerSupply( mpsv );
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ffdf 	bl	80017c0 <st25r3911MeasurePowerSupply>
 8001802:	4603      	mov	r3, r0
 8001804:	73fb      	strb	r3, [r7, #15]

    mV = ((uint16_t)result) * 23U;
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	b29b      	uxth	r3, r3
 800180a:	461a      	mov	r2, r3
 800180c:	0052      	lsls	r2, r2, #1
 800180e:	441a      	add	r2, r3
 8001810:	00d2      	lsls	r2, r2, #3
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	81bb      	strh	r3, [r7, #12]
    mV += ((((uint16_t)result) * 438U) + 500U) / 1000U;
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800181c:	fb02 f303 	mul.w	r3, r2, r3
 8001820:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001824:	4a06      	ldr	r2, [pc, #24]	; (8001840 <st25r3911MeasureVoltage+0x50>)
 8001826:	fba2 2303 	umull	r2, r3, r2, r3
 800182a:	099b      	lsrs	r3, r3, #6
 800182c:	b29a      	uxth	r2, r3
 800182e:	89bb      	ldrh	r3, [r7, #12]
 8001830:	4413      	add	r3, r2
 8001832:	81bb      	strh	r3, [r7, #12]

    return mV;
 8001834:	89bb      	ldrh	r3, [r7, #12]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	10624dd3 	.word	0x10624dd3

08001844 <st25r3911StartGPTimer_8fcs>:
{
    return st25r3911NoResponseTime_64fcs;
}

void st25r3911StartGPTimer_8fcs(uint16_t gpt_8fcs, uint8_t trigger_source)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	460a      	mov	r2, r1
 800184e:	80fb      	strh	r3, [r7, #6]
 8001850:	4613      	mov	r3, r2
 8001852:	717b      	strb	r3, [r7, #5]
    st25r3911SetGPTime_8fcs(gpt_8fcs);
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	4618      	mov	r0, r3
 8001858:	f000 f811 	bl	800187e <st25r3911SetGPTime_8fcs>

    st25r3911ModifyRegister(ST25R3911_REG_GPT_CONTROL, 
 800185c:	797b      	ldrb	r3, [r7, #5]
 800185e:	461a      	mov	r2, r3
 8001860:	21e0      	movs	r1, #224	; 0xe0
 8001862:	2011      	movs	r0, #17
 8001864:	f000 fbef 	bl	8002046 <st25r3911ModifyRegister>
            ST25R3911_REG_GPT_CONTROL_gptc_mask, 
            trigger_source);
    if (trigger_source == 0U)
 8001868:	797b      	ldrb	r3, [r7, #5]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d103      	bne.n	8001876 <st25r3911StartGPTimer_8fcs+0x32>
    {
        st25r3911ExecuteCommand(ST25R3911_CMD_START_GP_TIMER);
 800186e:	20e0      	movs	r0, #224	; 0xe0
 8001870:	f000 fccc 	bl	800220c <st25r3911ExecuteCommand>
    }

    return;
 8001874:	bf00      	nop
 8001876:	bf00      	nop
}
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <st25r3911SetGPTime_8fcs>:

void st25r3911SetGPTime_8fcs(uint16_t gpt_8fcs)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	4603      	mov	r3, r0
 8001886:	80fb      	strh	r3, [r7, #6]
    st25r3911WriteRegister(ST25R3911_REG_GPT1, (uint8_t)(gpt_8fcs >> 8));
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	0a1b      	lsrs	r3, r3, #8
 800188c:	b29b      	uxth	r3, r3
 800188e:	b2db      	uxtb	r3, r3
 8001890:	4619      	mov	r1, r3
 8001892:	2012      	movs	r0, #18
 8001894:	f000 fb36 	bl	8001f04 <st25r3911WriteRegister>
    st25r3911WriteRegister(ST25R3911_REG_GPT2, (uint8_t)(gpt_8fcs & 0xffU));
 8001898:	88fb      	ldrh	r3, [r7, #6]
 800189a:	b2db      	uxtb	r3, r3
 800189c:	4619      	mov	r1, r3
 800189e:	2013      	movs	r0, #19
 80018a0:	f000 fb30 	bl	8001f04 <st25r3911WriteRegister>

    return;
 80018a4:	bf00      	nop
}
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <st25r3911CheckReg>:

bool st25r3911CheckReg( uint8_t reg, uint8_t mask, uint8_t value )
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
 80018b6:	460b      	mov	r3, r1
 80018b8:	71bb      	strb	r3, [r7, #6]
 80018ba:	4613      	mov	r3, r2
 80018bc:	717b      	strb	r3, [r7, #5]
    uint8_t regVal;
    
    regVal = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	73fb      	strb	r3, [r7, #15]
    st25r3911ReadRegister( reg, &regVal );
 80018c2:	f107 020f 	add.w	r2, r7, #15
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	4611      	mov	r1, r2
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f9f2 	bl	8001cb4 <st25r3911ReadRegister>
    
    return ((regVal & mask) == value );
 80018d0:	7bfa      	ldrb	r2, [r7, #15]
 80018d2:	79bb      	ldrb	r3, [r7, #6]
 80018d4:	4013      	ands	r3, r2
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	797a      	ldrb	r2, [r7, #5]
 80018da:	429a      	cmp	r2, r3
 80018dc:	bf0c      	ite	eq
 80018de:	2301      	moveq	r3, #1
 80018e0:	2300      	movne	r3, #0
 80018e2:	b2db      	uxtb	r3, r3
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <st25r3911CheckChipID>:


bool st25r3911CheckChipID( uint8_t *rev )
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
    uint8_t ID;
    
    ID = 0;    
 80018f4:	2300      	movs	r3, #0
 80018f6:	73fb      	strb	r3, [r7, #15]
    st25r3911ReadRegister( ST25R3911_REG_IC_IDENTITY, &ID );
 80018f8:	f107 030f 	add.w	r3, r7, #15
 80018fc:	4619      	mov	r1, r3
 80018fe:	203f      	movs	r0, #63	; 0x3f
 8001900:	f000 f9d8 	bl	8001cb4 <st25r3911ReadRegister>
    
    /* Check if IC Identity Register contains ST25R3911's IC type code */
    if( (ID & ST25R3911_REG_IC_IDENTITY_mask_ic_type) != ST25R3911_REG_IC_IDENTITY_ic_type )
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800190a:	2b08      	cmp	r3, #8
 800190c:	d001      	beq.n	8001912 <st25r3911CheckChipID+0x26>
    {
        return false;
 800190e:	2300      	movs	r3, #0
 8001910:	e009      	b.n	8001926 <st25r3911CheckChipID+0x3a>
    }
        
    if(rev != NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d005      	beq.n	8001924 <st25r3911CheckChipID+0x38>
    {
        *rev = (ID & ST25R3911_REG_IC_IDENTITY_mask_ic_rev);
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	b2da      	uxtb	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	701a      	strb	r2, [r3, #0]
    }
    
    return true;
 8001924:	2301      	movs	r3, #1
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <st25r3911SetNoResponseTime_64fcs>:

ReturnCode st25r3911SetNoResponseTime_64fcs(uint32_t nrt_64fcs)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
    ReturnCode err = ERR_NONE;
 8001938:	2300      	movs	r3, #0
 800193a:	81fb      	strh	r3, [r7, #14]
    uint8_t nrt_step = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	737b      	strb	r3, [r7, #13]
    uint32_t noResponseTime_64fcs = nrt_64fcs;      /* MISRA 17.8: Use intermediate variable */
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	60bb      	str	r3, [r7, #8]

    st25r3911NoResponseTime_64fcs = noResponseTime_64fcs;
 8001944:	4a18      	ldr	r2, [pc, #96]	; (80019a8 <st25r3911SetNoResponseTime_64fcs+0x78>)
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	6013      	str	r3, [r2, #0]
    if (noResponseTime_64fcs > (uint32_t)0xFFFFU)
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001950:	d312      	bcc.n	8001978 <st25r3911SetNoResponseTime_64fcs+0x48>
    {
        nrt_step = ST25R3911_REG_GPT_CONTROL_nrt_step;
 8001952:	2301      	movs	r3, #1
 8001954:	737b      	strb	r3, [r7, #13]
        noResponseTime_64fcs = (noResponseTime_64fcs + 63U) / 64U;
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	333f      	adds	r3, #63	; 0x3f
 800195a:	099b      	lsrs	r3, r3, #6
 800195c:	60bb      	str	r3, [r7, #8]
        if (noResponseTime_64fcs > (uint32_t)0xFFFFU)
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001964:	d304      	bcc.n	8001970 <st25r3911SetNoResponseTime_64fcs+0x40>
        {
            noResponseTime_64fcs = 0xFFFFU;
 8001966:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800196a:	60bb      	str	r3, [r7, #8]
            err = ERR_PARAM;
 800196c:	2307      	movs	r3, #7
 800196e:	81fb      	strh	r3, [r7, #14]
        }
        st25r3911NoResponseTime_64fcs = 64U * noResponseTime_64fcs;
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	019b      	lsls	r3, r3, #6
 8001974:	4a0c      	ldr	r2, [pc, #48]	; (80019a8 <st25r3911SetNoResponseTime_64fcs+0x78>)
 8001976:	6013      	str	r3, [r2, #0]
    }

    st25r3911ModifyRegister(ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_step, nrt_step);
 8001978:	7b7b      	ldrb	r3, [r7, #13]
 800197a:	461a      	mov	r2, r3
 800197c:	2101      	movs	r1, #1
 800197e:	2011      	movs	r0, #17
 8001980:	f000 fb61 	bl	8002046 <st25r3911ModifyRegister>
    st25r3911WriteRegister(ST25R3911_REG_NO_RESPONSE_TIMER1, (uint8_t)(noResponseTime_64fcs >> 8));
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	0a1b      	lsrs	r3, r3, #8
 8001988:	b2db      	uxtb	r3, r3
 800198a:	4619      	mov	r1, r3
 800198c:	200f      	movs	r0, #15
 800198e:	f000 fab9 	bl	8001f04 <st25r3911WriteRegister>
    st25r3911WriteRegister(ST25R3911_REG_NO_RESPONSE_TIMER2, (uint8_t)(noResponseTime_64fcs & 0xffU));
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	4619      	mov	r1, r3
 8001998:	2010      	movs	r0, #16
 800199a:	f000 fab3 	bl	8001f04 <st25r3911WriteRegister>

    return err;
 800199e:	89fb      	ldrh	r3, [r7, #14]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	200002d8 	.word	0x200002d8

080019ac <st25r3911PerformCollisionAvoidance>:
    
    return err;
}

ReturnCode st25r3911PerformCollisionAvoidance( uint8_t FieldONCmd, uint8_t pdThreshold, uint8_t caThreshold, uint8_t nTRFW )
{
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4604      	mov	r4, r0
 80019b4:	4608      	mov	r0, r1
 80019b6:	4611      	mov	r1, r2
 80019b8:	461a      	mov	r2, r3
 80019ba:	4623      	mov	r3, r4
 80019bc:	71fb      	strb	r3, [r7, #7]
 80019be:	4603      	mov	r3, r0
 80019c0:	71bb      	strb	r3, [r7, #6]
 80019c2:	460b      	mov	r3, r1
 80019c4:	717b      	strb	r3, [r7, #5]
 80019c6:	4613      	mov	r3, r2
 80019c8:	713b      	strb	r3, [r7, #4]
    uint8_t  treMask;
    uint32_t irqs;
    
    if( (FieldONCmd != ST25R3911_CMD_INITIAL_RF_COLLISION)    && 
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	2bc8      	cmp	r3, #200	; 0xc8
 80019ce:	d007      	beq.n	80019e0 <st25r3911PerformCollisionAvoidance+0x34>
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	2bca      	cmp	r3, #202	; 0xca
 80019d4:	d004      	beq.n	80019e0 <st25r3911PerformCollisionAvoidance+0x34>
        (FieldONCmd != ST25R3911_CMD_RESPONSE_RF_COLLISION_0) && 
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	2bc9      	cmp	r3, #201	; 0xc9
 80019da:	d001      	beq.n	80019e0 <st25r3911PerformCollisionAvoidance+0x34>
        (FieldONCmd != ST25R3911_CMD_RESPONSE_RF_COLLISION_N)   )
    {
        return ERR_PARAM;
 80019dc:	2307      	movs	r3, #7
 80019de:	e056      	b.n	8001a8e <st25r3911PerformCollisionAvoidance+0xe2>
    }
    
    /* Check if new thresholds are to be applied */
    if( (pdThreshold != ST25R3911_THRESHOLD_DO_NOT_SET) || (caThreshold != ST25R3911_THRESHOLD_DO_NOT_SET) )
 80019e0:	79bb      	ldrb	r3, [r7, #6]
 80019e2:	2bff      	cmp	r3, #255	; 0xff
 80019e4:	d102      	bne.n	80019ec <st25r3911PerformCollisionAvoidance+0x40>
 80019e6:	797b      	ldrb	r3, [r7, #5]
 80019e8:	2bff      	cmp	r3, #255	; 0xff
 80019ea:	d01e      	beq.n	8001a2a <st25r3911PerformCollisionAvoidance+0x7e>
    {
        treMask = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	73fb      	strb	r3, [r7, #15]
        
        if(pdThreshold != ST25R3911_THRESHOLD_DO_NOT_SET)
 80019f0:	79bb      	ldrb	r3, [r7, #6]
 80019f2:	2bff      	cmp	r3, #255	; 0xff
 80019f4:	d003      	beq.n	80019fe <st25r3911PerformCollisionAvoidance+0x52>
        {
            treMask |= ST25R3911_REG_FIELD_THRESHOLD_mask_trg;
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80019fc:	73fb      	strb	r3, [r7, #15]
        }
        
        if(caThreshold != ST25R3911_THRESHOLD_DO_NOT_SET)
 80019fe:	797b      	ldrb	r3, [r7, #5]
 8001a00:	2bff      	cmp	r3, #255	; 0xff
 8001a02:	d003      	beq.n	8001a0c <st25r3911PerformCollisionAvoidance+0x60>
        {
            treMask |= ST25R3911_REG_FIELD_THRESHOLD_mask_rfe;
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	f043 030f 	orr.w	r3, r3, #15
 8001a0a:	73fb      	strb	r3, [r7, #15]
        }
            
        /* Set Detection Threshold and|or Collision Avoidance Threshold */
        st25r3911ChangeRegisterBits( ST25R3911_REG_FIELD_THRESHOLD, treMask, (pdThreshold & ST25R3911_REG_FIELD_THRESHOLD_mask_trg) | (caThreshold & ST25R3911_REG_FIELD_THRESHOLD_mask_rfe ) );
 8001a0c:	79bb      	ldrb	r3, [r7, #6]
 8001a0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	797b      	ldrb	r3, [r7, #5]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	4619      	mov	r1, r3
 8001a24:	2029      	movs	r0, #41	; 0x29
 8001a26:	f000 faf8 	bl	800201a <st25r3911ChangeRegisterBits>
    }
    
    /* Set n x TRFW */
    st25r3911ModifyRegister(ST25R3911_REG_AUX, ST25R3911_REG_AUX_mask_nfc_n, (nTRFW & ST25R3911_REG_AUX_mask_nfc_n) );
 8001a2a:	793b      	ldrb	r3, [r7, #4]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	461a      	mov	r2, r3
 8001a34:	2103      	movs	r1, #3
 8001a36:	2009      	movs	r0, #9
 8001a38:	f000 fb05 	bl	8002046 <st25r3911ModifyRegister>
    
    /* Enable and clear CA specific interrupts and execute command */
    st25r3911EnableInterrupts( (ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT) );
 8001a3c:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8001a40:	f000 fe04 	bl	800264c <st25r3911EnableInterrupts>
    st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT) );
 8001a44:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8001a48:	f000 fdc8 	bl	80025dc <st25r3911GetInterrupt>
    
    st25r3911ExecuteCommand(FieldONCmd);
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 fbdc 	bl	800220c <st25r3911ExecuteCommand>
    
    irqs = st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT, ST25R3911_CA_TIMEOUT );
 8001a54:	210a      	movs	r1, #10
 8001a56:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8001a5a:	f000 fd6f 	bl	800253c <st25r3911WaitForInterruptsTimed>
 8001a5e:	60b8      	str	r0, [r7, #8]
    
    /* Clear any previous External Field events and disable CA specific interrupts */
    st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_EOF | ST25R3911_IRQ_MASK_EON) );
 8001a60:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001a64:	f000 fdba 	bl	80025dc <st25r3911GetInterrupt>
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT);
 8001a68:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8001a6c:	f000 fdfa 	bl	8002664 <st25r3911DisableInterrupts>
    
    
    if((ST25R3911_IRQ_MASK_CAC & irqs) != 0U)                             /* Collision occurred */
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <st25r3911PerformCollisionAvoidance+0xd2>
    {
        return ERR_RF_COLLISION;
 8001a7a:	231d      	movs	r3, #29
 8001a7c:	e007      	b.n	8001a8e <st25r3911PerformCollisionAvoidance+0xe2>
    }
    
    if((ST25R3911_IRQ_MASK_CAT & irqs) != 0U)                             /* No Collision detected, Field On */
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <st25r3911PerformCollisionAvoidance+0xe0>
    {
        return ERR_NONE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	e000      	b.n	8001a8e <st25r3911PerformCollisionAvoidance+0xe2>
    }

    /* No interrupt detected */
    return ERR_INTERNAL;
 8001a8c:	230c      	movs	r3, #12
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd90      	pop	{r4, r7, pc}

08001a96 <st25r3911SetNumTxBits>:
    return ERR_NONE;
}


void st25r3911SetNumTxBits( uint32_t nBits )
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
    st25r3911WriteRegister(ST25R3911_REG_NUM_TX_BYTES2, (uint8_t)((nBits >> 0) & 0xffU)); 
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	201e      	movs	r0, #30
 8001aa6:	f000 fa2d 	bl	8001f04 <st25r3911WriteRegister>
    st25r3911WriteRegister(ST25R3911_REG_NUM_TX_BYTES1, (uint8_t)((nBits >> 8) & 0xffU));    
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	201d      	movs	r0, #29
 8001ab4:	f000 fa26 	bl	8001f04 <st25r3911WriteRegister>
}
 8001ab8:	bf00      	nop
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <st25r3911StreamConfigure>:
    }
    return true;
}

ReturnCode st25r3911StreamConfigure(const struct st25r3911StreamConfig *config)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
    uint8_t smd = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	73fb      	strb	r3, [r7, #15]
    uint8_t mode;

    if (config->useBPSK != 0U)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d016      	beq.n	8001b02 <st25r3911StreamConfigure+0x42>
    {
        mode = ST25R3911_REG_MODE_om_bpsk_stream;
 8001ad4:	2378      	movs	r3, #120	; 0x78
 8001ad6:	73bb      	strb	r3, [r7, #14]
        if ((config->din<2U) || (config->din>4U)) /* not in fc/4 .. fc/16 */
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	785b      	ldrb	r3, [r3, #1]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d903      	bls.n	8001ae8 <st25r3911StreamConfigure+0x28>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	785b      	ldrb	r3, [r3, #1]
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d901      	bls.n	8001aec <st25r3911StreamConfigure+0x2c>
        {
            return ERR_PARAM;
 8001ae8:	2307      	movs	r3, #7
 8001aea:	e053      	b.n	8001b94 <st25r3911StreamConfigure+0xd4>
        }
        smd |= (4U - config->din) << ST25R3911_REG_STREAM_MODE_shift_scf;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	785b      	ldrb	r3, [r3, #1]
 8001af0:	f1c3 0304 	rsb	r3, r3, #4
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	015b      	lsls	r3, r3, #5
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	73fb      	strb	r3, [r7, #15]
 8001b00:	e01b      	b.n	8001b3a <st25r3911StreamConfigure+0x7a>

    }
    else
    {
        mode = ST25R3911_REG_MODE_om_subcarrier_stream;
 8001b02:	2370      	movs	r3, #112	; 0x70
 8001b04:	73bb      	strb	r3, [r7, #14]
        if ((config->din<3U) || (config->din>6U)) /* not in fc/8 .. fc/64 */
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	785b      	ldrb	r3, [r3, #1]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d903      	bls.n	8001b16 <st25r3911StreamConfigure+0x56>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	785b      	ldrb	r3, [r3, #1]
 8001b12:	2b06      	cmp	r3, #6
 8001b14:	d901      	bls.n	8001b1a <st25r3911StreamConfigure+0x5a>
        {
            return ERR_PARAM;
 8001b16:	2307      	movs	r3, #7
 8001b18:	e03c      	b.n	8001b94 <st25r3911StreamConfigure+0xd4>
        }
        smd |= (6U - config->din) << ST25R3911_REG_STREAM_MODE_shift_scf;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	785b      	ldrb	r3, [r3, #1]
 8001b1e:	f1c3 0306 	rsb	r3, r3, #6
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	015b      	lsls	r3, r3, #5
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	73fb      	strb	r3, [r7, #15]
        if (config->report_period_length == 0U) 
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	78db      	ldrb	r3, [r3, #3]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <st25r3911StreamConfigure+0x7a>
        {
            return ERR_PARAM;
 8001b36:	2307      	movs	r3, #7
 8001b38:	e02c      	b.n	8001b94 <st25r3911StreamConfigure+0xd4>
        }
    }

    if ((config->dout<1U) || (config->dout>7U)) /* not in fc/2 .. fc/128 */
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	789b      	ldrb	r3, [r3, #2]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <st25r3911StreamConfigure+0x8a>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	789b      	ldrb	r3, [r3, #2]
 8001b46:	2b07      	cmp	r3, #7
 8001b48:	d901      	bls.n	8001b4e <st25r3911StreamConfigure+0x8e>
    {
        return ERR_PARAM;
 8001b4a:	2307      	movs	r3, #7
 8001b4c:	e022      	b.n	8001b94 <st25r3911StreamConfigure+0xd4>
    }
    smd |= (7U - config->dout) << ST25R3911_REG_STREAM_MODE_shift_stx;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	789b      	ldrb	r3, [r3, #2]
 8001b52:	f1c3 0307 	rsb	r3, r3, #7
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	73fb      	strb	r3, [r7, #15]

    if (config->report_period_length > 3U) 
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	78db      	ldrb	r3, [r3, #3]
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d901      	bls.n	8001b6a <st25r3911StreamConfigure+0xaa>
    {
        return ERR_PARAM;
 8001b66:	2307      	movs	r3, #7
 8001b68:	e014      	b.n	8001b94 <st25r3911StreamConfigure+0xd4>
    }
    smd |= config->report_period_length << ST25R3911_REG_STREAM_MODE_shift_scp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	78db      	ldrb	r3, [r3, #3]
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	b25a      	sxtb	r2, r3
 8001b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	b25b      	sxtb	r3, r3
 8001b7a:	73fb      	strb	r3, [r7, #15]

    st25r3911WriteRegister(ST25R3911_REG_STREAM_MODE, smd);
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	4619      	mov	r1, r3
 8001b80:	2008      	movs	r0, #8
 8001b82:	f000 f9bf 	bl	8001f04 <st25r3911WriteRegister>
    st25r3911ChangeRegisterBits(ST25R3911_REG_MODE, ST25R3911_REG_MODE_mask_om, mode);
 8001b86:	7bbb      	ldrb	r3, [r7, #14]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	2178      	movs	r1, #120	; 0x78
 8001b8c:	2003      	movs	r0, #3
 8001b8e:	f000 fa44 	bl	800201a <st25r3911ChangeRegisterBits>

    return ERR_NONE;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <st25r3911ExecuteCommandAndGetResult>:
 *  \param[out] result: 8 bit long result
 *
 *****************************************************************************
 */
static ReturnCode st25r3911ExecuteCommandAndGetResult(uint8_t cmd, uint8_t resreg, uint8_t sleeptime, uint8_t* result)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	71fb      	strb	r3, [r7, #7]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	71bb      	strb	r3, [r7, #6]
 8001bac:	4613      	mov	r3, r2
 8001bae:	717b      	strb	r3, [r7, #5]

    st25r3911EnableInterrupts(ST25R3911_IRQ_MASK_DCT);
 8001bb0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001bb4:	f000 fd4a 	bl	800264c <st25r3911EnableInterrupts>
    st25r3911GetInterrupt(ST25R3911_IRQ_MASK_DCT);
 8001bb8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001bbc:	f000 fd0e 	bl	80025dc <st25r3911GetInterrupt>
    st25r3911ExecuteCommand(cmd);
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 fb22 	bl	800220c <st25r3911ExecuteCommand>
    st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_DCT, sleeptime);
 8001bc8:	797b      	ldrb	r3, [r7, #5]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001bd2:	f000 fcb3 	bl	800253c <st25r3911WaitForInterruptsTimed>
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_DCT);
 8001bd6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001bda:	f000 fd43 	bl	8002664 <st25r3911DisableInterrupts>
    
    /* read out the result if the pointer is not NULL */
    if (result != NULL)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d004      	beq.n	8001bee <st25r3911ExecuteCommandAndGetResult+0x52>
    {
        st25r3911ReadRegister(resreg, result);
 8001be4:	79bb      	ldrb	r3, [r7, #6]
 8001be6:	6839      	ldr	r1, [r7, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f000 f863 	bl	8001cb4 <st25r3911ReadRegister>
    }

    return ERR_NONE;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	db0b      	blt.n	8001c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	f003 021f 	and.w	r2, r3, #31
 8001c10:	4907      	ldr	r1, [pc, #28]	; (8001c30 <__NVIC_EnableIRQ+0x38>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	095b      	lsrs	r3, r3, #5
 8001c18:	2001      	movs	r0, #1
 8001c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000e100 	.word	0xe000e100

08001c34 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	db10      	blt.n	8001c68 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	f003 021f 	and.w	r2, r3, #31
 8001c4c:	4909      	ldr	r1, [pc, #36]	; (8001c74 <__NVIC_DisableIRQ+0x40>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	095b      	lsrs	r3, r3, #5
 8001c54:	2001      	movs	r0, #1
 8001c56:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5a:	3320      	adds	r3, #32
 8001c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c64:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000e100 	.word	0xe000e100

08001c78 <st25r3911CheckFieldSetLED>:
* LOCAL FUNCTION PROTOTYPES
******************************************************************************
*/

static inline void st25r3911CheckFieldSetLED(uint8_t value)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
    if ((ST25R3911_REG_OP_CONTROL_tx_en & value) != 0U)
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d006      	beq.n	8001c9c <st25r3911CheckFieldSetLED+0x24>
    {
#ifdef PLATFORM_LED_FIELD_PIN
        platformLedOn( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c94:	4806      	ldr	r0, [pc, #24]	; (8001cb0 <st25r3911CheckFieldSetLED+0x38>)
 8001c96:	f001 f887 	bl	8002da8 <HAL_GPIO_WritePin>
    else
    {
        platformLedOff( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
#endif /* PLATFORM_LED_FIELD_PIN */
    }
}
 8001c9a:	e005      	b.n	8001ca8 <st25r3911CheckFieldSetLED+0x30>
        platformLedOff( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ca2:	4803      	ldr	r0, [pc, #12]	; (8001cb0 <st25r3911CheckFieldSetLED+0x38>)
 8001ca4:	f001 f880 	bl	8002da8 <HAL_GPIO_WritePin>
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40020000 	.word	0x40020000

08001cb4 <st25r3911ReadRegister>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
void st25r3911ReadRegister(uint8_t reg, uint8_t* value)
{ 
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	6039      	str	r1, [r7, #0]
 8001cbe:	71fb      	strb	r3, [r7, #7]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t  buf[2];
#endif  /* ST25R391X_COM_SINGLETXRX */
  
    platformProtectST25R391xComm();
 8001cc0:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <st25r3911ReadRegister+0x8c>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <st25r3911ReadRegister+0x8c>)
 8001cca:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ccc:	f3bf 8f4f 	dsb	sy
 8001cd0:	2006      	movs	r0, #6
 8001cd2:	f7ff ffaf 	bl	8001c34 <__NVIC_DisableIRQ>
 8001cd6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001cda:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2140      	movs	r1, #64	; 0x40
 8001ce2:	4818      	ldr	r0, [pc, #96]	; (8001d44 <st25r3911ReadRegister+0x90>)
 8001ce4:	f001 f860 	bl	8002da8 <HAL_GPIO_WritePin>
  
    buf[0] = (reg | ST25R3911_READ_MODE);
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	733b      	strb	r3, [r7, #12]
    buf[1] = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	737b      	strb	r3, [r7, #13]
  
    platformSpiTxRx(buf, buf, 2);
 8001cf6:	f107 010c 	add.w	r1, r7, #12
 8001cfa:	f107 030c 	add.w	r3, r7, #12
 8001cfe:	2202      	movs	r2, #2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fa41 	bl	8001188 <spiTxRx>
  
    if(value != NULL)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d002      	beq.n	8001d12 <st25r3911ReadRegister+0x5e>
    {
      *value = buf[1];
 8001d0c:	7b7a      	ldrb	r2, [r7, #13]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	701a      	strb	r2, [r3, #0]
    }
    
    platformSpiDeselect();
 8001d12:	2201      	movs	r2, #1
 8001d14:	2140      	movs	r1, #64	; 0x40
 8001d16:	480b      	ldr	r0, [pc, #44]	; (8001d44 <st25r3911ReadRegister+0x90>)
 8001d18:	f001 f846 	bl	8002da8 <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8001d1c:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <st25r3911ReadRegister+0x8c>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <st25r3911ReadRegister+0x8c>)
 8001d26:	701a      	strb	r2, [r3, #0]
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <st25r3911ReadRegister+0x8c>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d103      	bne.n	8001d38 <st25r3911ReadRegister+0x84>
 8001d30:	2006      	movs	r0, #6
 8001d32:	f7ff ff61 	bl	8001bf8 <__NVIC_EnableIRQ>

    return;
 8001d36:	bf00      	nop
 8001d38:	bf00      	nop
}
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	200001f8 	.word	0x200001f8
 8001d44:	40020400 	.word	0x40020400

08001d48 <st25r3911ReadMultipleRegisters>:


void st25r3911ReadMultipleRegisters(uint8_t reg, uint8_t* values, uint8_t length)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
 8001d54:	4613      	mov	r3, r2
 8001d56:	71bb      	strb	r3, [r7, #6]
#if !defined(ST25R391X_COM_SINGLETXRX)
    uint8_t cmd = (reg | ST25R3911_READ_MODE);
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	73fb      	strb	r3, [r7, #15]
#endif  /* !ST25R391X_COM_SINGLETXRX */
  
    if (length > 0U)
 8001d62:	79bb      	ldrb	r3, [r7, #6]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d034      	beq.n	8001dd2 <st25r3911ReadMultipleRegisters+0x8a>
    {
        platformProtectST25R391xComm();
 8001d68:	4b1c      	ldr	r3, [pc, #112]	; (8001ddc <st25r3911ReadMultipleRegisters+0x94>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	4b1a      	ldr	r3, [pc, #104]	; (8001ddc <st25r3911ReadMultipleRegisters+0x94>)
 8001d72:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d74:	f3bf 8f4f 	dsb	sy
 8001d78:	2006      	movs	r0, #6
 8001d7a:	f7ff ff5b 	bl	8001c34 <__NVIC_DisableIRQ>
 8001d7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d82:	f3bf 8f6f 	isb	sy
        platformSpiSelect();
 8001d86:	2200      	movs	r2, #0
 8001d88:	2140      	movs	r1, #64	; 0x40
 8001d8a:	4815      	ldr	r0, [pc, #84]	; (8001de0 <st25r3911ReadMultipleRegisters+0x98>)
 8001d8c:	f001 f80c 	bl	8002da8 <HAL_GPIO_WritePin>
        ST_MEMCPY( values, &comBuf[ST25R3911_CMD_LEN], MIN( length, ST25R3911_BUF_LEN - ST25R3911_CMD_LEN ) );  /* Copy from local buf to output buffer and skip cmd byte */
  
#else  /* ST25R391X_COM_SINGLETXRX */
  
        /* Since the result comes one byte later, let's first transmit the adddress with discarding the result */
        platformSpiTxRx(&cmd, NULL, ST25R3911_CMD_LEN);
 8001d90:	f107 030f 	add.w	r3, r7, #15
 8001d94:	2201      	movs	r2, #1
 8001d96:	2100      	movs	r1, #0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff f9f5 	bl	8001188 <spiTxRx>
        platformSpiTxRx(NULL, values, length);  
 8001d9e:	79bb      	ldrb	r3, [r7, #6]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	461a      	mov	r2, r3
 8001da4:	6839      	ldr	r1, [r7, #0]
 8001da6:	2000      	movs	r0, #0
 8001da8:	f7ff f9ee 	bl	8001188 <spiTxRx>
  
#endif  /* ST25R391X_COM_SINGLETXRX */

        platformSpiDeselect();
 8001dac:	2201      	movs	r2, #1
 8001dae:	2140      	movs	r1, #64	; 0x40
 8001db0:	480b      	ldr	r0, [pc, #44]	; (8001de0 <st25r3911ReadMultipleRegisters+0x98>)
 8001db2:	f000 fff9 	bl	8002da8 <HAL_GPIO_WritePin>
        platformUnprotectST25R391xComm();
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <st25r3911ReadMultipleRegisters+0x94>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <st25r3911ReadMultipleRegisters+0x94>)
 8001dc0:	701a      	strb	r2, [r3, #0]
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <st25r3911ReadMultipleRegisters+0x94>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d103      	bne.n	8001dd2 <st25r3911ReadMultipleRegisters+0x8a>
 8001dca:	2006      	movs	r0, #6
 8001dcc:	f7ff ff14 	bl	8001bf8 <__NVIC_EnableIRQ>
    }
    
    return;
 8001dd0:	bf00      	nop
 8001dd2:	bf00      	nop
}
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200001f8 	.word	0x200001f8
 8001de0:	40020400 	.word	0x40020400

08001de4 <st25r3911ReadTestRegister>:

void st25r3911ReadTestRegister(uint8_t reg, uint8_t* value)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	6039      	str	r1, [r7, #0]
 8001dee:	71fb      	strb	r3, [r7, #7]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t  buf[3];
#endif  /* ST25R391X_COM_SINGLETXRX */

    platformProtectST25R391xComm();
 8001df0:	4b20      	ldr	r3, [pc, #128]	; (8001e74 <st25r3911ReadTestRegister+0x90>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	3301      	adds	r3, #1
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <st25r3911ReadTestRegister+0x90>)
 8001dfa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001dfc:	f3bf 8f4f 	dsb	sy
 8001e00:	2006      	movs	r0, #6
 8001e02:	f7ff ff17 	bl	8001c34 <__NVIC_DisableIRQ>
 8001e06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e0a:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2140      	movs	r1, #64	; 0x40
 8001e12:	4819      	ldr	r0, [pc, #100]	; (8001e78 <st25r3911ReadTestRegister+0x94>)
 8001e14:	f000 ffc8 	bl	8002da8 <HAL_GPIO_WritePin>

    buf[0] = ST25R3911_CMD_TEST_ACCESS;
 8001e18:	23fc      	movs	r3, #252	; 0xfc
 8001e1a:	733b      	strb	r3, [r7, #12]
    buf[1] = (reg | ST25R3911_READ_MODE);
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	737b      	strb	r3, [r7, #13]
    buf[2] = 0x00;
 8001e26:	2300      	movs	r3, #0
 8001e28:	73bb      	strb	r3, [r7, #14]
  
    platformSpiTxRx(buf, buf, 3);
 8001e2a:	f107 010c 	add.w	r1, r7, #12
 8001e2e:	f107 030c 	add.w	r3, r7, #12
 8001e32:	2203      	movs	r2, #3
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff f9a7 	bl	8001188 <spiTxRx>
    
    if(value != NULL)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <st25r3911ReadTestRegister+0x62>
    {
      *value = buf[2];
 8001e40:	7bba      	ldrb	r2, [r7, #14]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	701a      	strb	r2, [r3, #0]
    }
    
    platformSpiDeselect();
 8001e46:	2201      	movs	r2, #1
 8001e48:	2140      	movs	r1, #64	; 0x40
 8001e4a:	480b      	ldr	r0, [pc, #44]	; (8001e78 <st25r3911ReadTestRegister+0x94>)
 8001e4c:	f000 ffac 	bl	8002da8 <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <st25r3911ReadTestRegister+0x90>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	3b01      	subs	r3, #1
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <st25r3911ReadTestRegister+0x90>)
 8001e5a:	701a      	strb	r2, [r3, #0]
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <st25r3911ReadTestRegister+0x90>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d103      	bne.n	8001e6c <st25r3911ReadTestRegister+0x88>
 8001e64:	2006      	movs	r0, #6
 8001e66:	f7ff fec7 	bl	8001bf8 <__NVIC_EnableIRQ>

    return;
 8001e6a:	bf00      	nop
 8001e6c:	bf00      	nop
}
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	200001f8 	.word	0x200001f8
 8001e78:	40020400 	.word	0x40020400

08001e7c <st25r3911WriteTestRegister>:

void st25r3911WriteTestRegister(uint8_t reg, uint8_t value)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	460a      	mov	r2, r1
 8001e86:	71fb      	strb	r3, [r7, #7]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	71bb      	strb	r3, [r7, #6]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t  buf[3];
#endif  /* ST25R391X_COM_SINGLETXRX */
    
    platformProtectST25R391xComm();
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <st25r3911WriteTestRegister+0x80>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	3301      	adds	r3, #1
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	4b19      	ldr	r3, [pc, #100]	; (8001efc <st25r3911WriteTestRegister+0x80>)
 8001e96:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e98:	f3bf 8f4f 	dsb	sy
 8001e9c:	2006      	movs	r0, #6
 8001e9e:	f7ff fec9 	bl	8001c34 <__NVIC_DisableIRQ>
 8001ea2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ea6:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2140      	movs	r1, #64	; 0x40
 8001eae:	4814      	ldr	r0, [pc, #80]	; (8001f00 <st25r3911WriteTestRegister+0x84>)
 8001eb0:	f000 ff7a 	bl	8002da8 <HAL_GPIO_WritePin>

    buf[0] = ST25R3911_CMD_TEST_ACCESS;
 8001eb4:	23fc      	movs	r3, #252	; 0xfc
 8001eb6:	733b      	strb	r3, [r7, #12]
    buf[1] = (reg | ST25R3911_WRITE_MODE);
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	737b      	strb	r3, [r7, #13]
    buf[2] = value;
 8001ebc:	79bb      	ldrb	r3, [r7, #6]
 8001ebe:	73bb      	strb	r3, [r7, #14]
  
    platformSpiTxRx(buf, NULL, 3);
 8001ec0:	f107 030c 	add.w	r3, r7, #12
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff f95d 	bl	8001188 <spiTxRx>
  
    platformSpiDeselect();
 8001ece:	2201      	movs	r2, #1
 8001ed0:	2140      	movs	r1, #64	; 0x40
 8001ed2:	480b      	ldr	r0, [pc, #44]	; (8001f00 <st25r3911WriteTestRegister+0x84>)
 8001ed4:	f000 ff68 	bl	8002da8 <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <st25r3911WriteTestRegister+0x80>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	3b01      	subs	r3, #1
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <st25r3911WriteTestRegister+0x80>)
 8001ee2:	701a      	strb	r2, [r3, #0]
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <st25r3911WriteTestRegister+0x80>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d103      	bne.n	8001ef4 <st25r3911WriteTestRegister+0x78>
 8001eec:	2006      	movs	r0, #6
 8001eee:	f7ff fe83 	bl	8001bf8 <__NVIC_EnableIRQ>

    return;
 8001ef2:	bf00      	nop
 8001ef4:	bf00      	nop
}
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	200001f8 	.word	0x200001f8
 8001f00:	40020400 	.word	0x40020400

08001f04 <st25r3911WriteRegister>:

void st25r3911WriteRegister(uint8_t reg, uint8_t value)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	460a      	mov	r2, r1
 8001f0e:	71fb      	strb	r3, [r7, #7]
 8001f10:	4613      	mov	r3, r2
 8001f12:	71bb      	strb	r3, [r7, #6]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t buf[2];
#endif  /* ST25R391X_COM_SINGLETXRX */
  
    if (ST25R3911_REG_OP_CONTROL == reg)
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d103      	bne.n	8001f22 <st25r3911WriteRegister+0x1e>
    {
        st25r3911CheckFieldSetLED(value);
 8001f1a:	79bb      	ldrb	r3, [r7, #6]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff feab 	bl	8001c78 <st25r3911CheckFieldSetLED>
    }    
    
    platformProtectST25R391xComm();
 8001f22:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <st25r3911WriteRegister+0x8c>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	3301      	adds	r3, #1
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <st25r3911WriteRegister+0x8c>)
 8001f2c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f2e:	f3bf 8f4f 	dsb	sy
 8001f32:	2006      	movs	r0, #6
 8001f34:	f7ff fe7e 	bl	8001c34 <__NVIC_DisableIRQ>
 8001f38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f3c:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 8001f40:	2200      	movs	r2, #0
 8001f42:	2140      	movs	r1, #64	; 0x40
 8001f44:	4813      	ldr	r0, [pc, #76]	; (8001f94 <st25r3911WriteRegister+0x90>)
 8001f46:	f000 ff2f 	bl	8002da8 <HAL_GPIO_WritePin>

    buf[0] = reg | ST25R3911_WRITE_MODE;
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	733b      	strb	r3, [r7, #12]
    buf[1] = value;
 8001f4e:	79bb      	ldrb	r3, [r7, #6]
 8001f50:	737b      	strb	r3, [r7, #13]
    
    platformSpiTxRx(buf, NULL, 2);
 8001f52:	f107 030c 	add.w	r3, r7, #12
 8001f56:	2202      	movs	r2, #2
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff f914 	bl	8001188 <spiTxRx>
    
    platformSpiDeselect();
 8001f60:	2201      	movs	r2, #1
 8001f62:	2140      	movs	r1, #64	; 0x40
 8001f64:	480b      	ldr	r0, [pc, #44]	; (8001f94 <st25r3911WriteRegister+0x90>)
 8001f66:	f000 ff1f 	bl	8002da8 <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8001f6a:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <st25r3911WriteRegister+0x8c>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <st25r3911WriteRegister+0x8c>)
 8001f74:	701a      	strb	r2, [r3, #0]
 8001f76:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <st25r3911WriteRegister+0x8c>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d103      	bne.n	8001f86 <st25r3911WriteRegister+0x82>
 8001f7e:	2006      	movs	r0, #6
 8001f80:	f7ff fe3a 	bl	8001bf8 <__NVIC_EnableIRQ>

    return;
 8001f84:	bf00      	nop
 8001f86:	bf00      	nop
}
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	200001f8 	.word	0x200001f8
 8001f94:	40020400 	.word	0x40020400

08001f98 <st25r3911ClrRegisterBits>:

void st25r3911ClrRegisterBits( uint8_t reg, uint8_t clr_mask )
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	460a      	mov	r2, r1
 8001fa2:	71fb      	strb	r3, [r7, #7]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;

    st25r3911ReadRegister(reg, &tmp);
 8001fa8:	f107 020f 	add.w	r2, r7, #15
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	4611      	mov	r1, r2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fe7f 	bl	8001cb4 <st25r3911ReadRegister>
    tmp &= ~clr_mask;
 8001fb6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	b25a      	sxtb	r2, r3
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
 8001fc0:	b25b      	sxtb	r3, r3
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	b25b      	sxtb	r3, r3
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	73fb      	strb	r3, [r7, #15]
    st25r3911WriteRegister(reg, tmp);
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff97 	bl	8001f04 <st25r3911WriteRegister>
    
    return;
 8001fd6:	bf00      	nop
}
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <st25r3911SetRegisterBits>:


void st25r3911SetRegisterBits( uint8_t reg, uint8_t set_mask )
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b084      	sub	sp, #16
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	460a      	mov	r2, r1
 8001fe8:	71fb      	strb	r3, [r7, #7]
 8001fea:	4613      	mov	r3, r2
 8001fec:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;

    st25r3911ReadRegister(reg, &tmp);
 8001fee:	f107 020f 	add.w	r2, r7, #15
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fe5c 	bl	8001cb4 <st25r3911ReadRegister>
    tmp |= set_mask;
 8001ffc:	7bfa      	ldrb	r2, [r7, #15]
 8001ffe:	79bb      	ldrb	r3, [r7, #6]
 8002000:	4313      	orrs	r3, r2
 8002002:	b2db      	uxtb	r3, r3
 8002004:	73fb      	strb	r3, [r7, #15]
    st25r3911WriteRegister(reg, tmp);
 8002006:	7bfa      	ldrb	r2, [r7, #15]
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff79 	bl	8001f04 <st25r3911WriteRegister>
    
    return;
 8002012:	bf00      	nop
}
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <st25r3911ChangeRegisterBits>:

void st25r3911ChangeRegisterBits(uint8_t reg, uint8_t valueMask, uint8_t value)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	4603      	mov	r3, r0
 8002022:	71fb      	strb	r3, [r7, #7]
 8002024:	460b      	mov	r3, r1
 8002026:	71bb      	strb	r3, [r7, #6]
 8002028:	4613      	mov	r3, r2
 800202a:	717b      	strb	r3, [r7, #5]
    st25r3911ModifyRegister(reg, valueMask, (valueMask & value) );
 800202c:	79ba      	ldrb	r2, [r7, #6]
 800202e:	797b      	ldrb	r3, [r7, #5]
 8002030:	4013      	ands	r3, r2
 8002032:	b2da      	uxtb	r2, r3
 8002034:	79b9      	ldrb	r1, [r7, #6]
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	4618      	mov	r0, r3
 800203a:	f000 f804 	bl	8002046 <st25r3911ModifyRegister>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <st25r3911ModifyRegister>:

void st25r3911ModifyRegister(uint8_t reg, uint8_t clr_mask, uint8_t set_mask)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b084      	sub	sp, #16
 800204a:	af00      	add	r7, sp, #0
 800204c:	4603      	mov	r3, r0
 800204e:	71fb      	strb	r3, [r7, #7]
 8002050:	460b      	mov	r3, r1
 8002052:	71bb      	strb	r3, [r7, #6]
 8002054:	4613      	mov	r3, r2
 8002056:	717b      	strb	r3, [r7, #5]
    uint8_t tmp;

    st25r3911ReadRegister(reg, &tmp);
 8002058:	f107 020f 	add.w	r2, r7, #15
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	4611      	mov	r1, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fe27 	bl	8001cb4 <st25r3911ReadRegister>

    /* mask out the bits we don't want to change */
    tmp &= ~clr_mask;
 8002066:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800206a:	43db      	mvns	r3, r3
 800206c:	b25a      	sxtb	r2, r3
 800206e:	7bfb      	ldrb	r3, [r7, #15]
 8002070:	b25b      	sxtb	r3, r3
 8002072:	4013      	ands	r3, r2
 8002074:	b25b      	sxtb	r3, r3
 8002076:	b2db      	uxtb	r3, r3
 8002078:	73fb      	strb	r3, [r7, #15]
    /* set the new value */
    tmp |= set_mask;
 800207a:	7bfa      	ldrb	r2, [r7, #15]
 800207c:	797b      	ldrb	r3, [r7, #5]
 800207e:	4313      	orrs	r3, r2
 8002080:	b2db      	uxtb	r3, r3
 8002082:	73fb      	strb	r3, [r7, #15]
    st25r3911WriteRegister(reg, tmp);
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff ff3a 	bl	8001f04 <st25r3911WriteRegister>

    return;
 8002090:	bf00      	nop
}
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <st25r3911ChangeTestRegisterBits>:

void st25r3911ChangeTestRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	71fb      	strb	r3, [r7, #7]
 80020a2:	460b      	mov	r3, r1
 80020a4:	71bb      	strb	r3, [r7, #6]
 80020a6:	4613      	mov	r3, r2
 80020a8:	717b      	strb	r3, [r7, #5]
    uint8_t    rdVal;
    uint8_t    wrVal;
    
    /* Read current reg value */
    st25r3911ReadTestRegister(reg, &rdVal);
 80020aa:	f107 020e 	add.w	r2, r7, #14
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	4611      	mov	r1, r2
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fe96 	bl	8001de4 <st25r3911ReadTestRegister>
    
    /* Compute new value */
    wrVal  = (rdVal & ~valueMask);
 80020b8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80020bc:	43db      	mvns	r3, r3
 80020be:	b25a      	sxtb	r2, r3
 80020c0:	7bbb      	ldrb	r3, [r7, #14]
 80020c2:	b25b      	sxtb	r3, r3
 80020c4:	4013      	ands	r3, r2
 80020c6:	b25b      	sxtb	r3, r3
 80020c8:	73fb      	strb	r3, [r7, #15]
    wrVal |= (value & valueMask);
 80020ca:	797a      	ldrb	r2, [r7, #5]
 80020cc:	79bb      	ldrb	r3, [r7, #6]
 80020ce:	4013      	ands	r3, r2
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	73fb      	strb	r3, [r7, #15]
    
    /* Write new reg value */
    st25r3911WriteTestRegister(reg, wrVal );
 80020d8:	7bfa      	ldrb	r2, [r7, #15]
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	4611      	mov	r1, r2
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fecc 	bl	8001e7c <st25r3911WriteTestRegister>
    
    return;
 80020e4:	bf00      	nop
}
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <st25r3911WriteFifo>:
    return;
}


void st25r3911WriteFifo(const uint8_t* values, uint8_t length)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	70fb      	strb	r3, [r7, #3]
#if !defined(ST25R391X_COM_SINGLETXRX)
    uint8_t cmd = ST25R3911_FIFO_LOAD;
 80020f8:	2380      	movs	r3, #128	; 0x80
 80020fa:	73fb      	strb	r3, [r7, #15]
#endif  /* !ST25R391X_COM_SINGLETXRX */

    if (length > 0U)
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d034      	beq.n	800216c <st25r3911WriteFifo+0x80>
    {  
        platformProtectST25R391xComm();
 8002102:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <st25r3911WriteFifo+0x88>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	3301      	adds	r3, #1
 8002108:	b2da      	uxtb	r2, r3
 800210a:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <st25r3911WriteFifo+0x88>)
 800210c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800210e:	f3bf 8f4f 	dsb	sy
 8002112:	2006      	movs	r0, #6
 8002114:	f7ff fd8e 	bl	8001c34 <__NVIC_DisableIRQ>
 8002118:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800211c:	f3bf 8f6f 	isb	sy
        platformSpiSelect();
 8002120:	2200      	movs	r2, #0
 8002122:	2140      	movs	r1, #64	; 0x40
 8002124:	4814      	ldr	r0, [pc, #80]	; (8002178 <st25r3911WriteFifo+0x8c>)
 8002126:	f000 fe3f 	bl	8002da8 <HAL_GPIO_WritePin>

        platformSpiTxRx( comBuf, NULL, MIN( (ST25R3911_CMD_LEN + length), ST25R3911_BUF_LEN ) );
  
#else  /*ST25R391X_COM_SINGLETXRX*/
  
        platformSpiTxRx( &cmd, NULL, ST25R3911_CMD_LEN );
 800212a:	f107 030f 	add.w	r3, r7, #15
 800212e:	2201      	movs	r2, #1
 8002130:	2100      	movs	r1, #0
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff f828 	bl	8001188 <spiTxRx>
        platformSpiTxRx( values, NULL, length );
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	b29b      	uxth	r3, r3
 800213c:	461a      	mov	r2, r3
 800213e:	2100      	movs	r1, #0
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff f821 	bl	8001188 <spiTxRx>
  
#endif  /*ST25R391X_COM_SINGLETXRX*/
  
        platformSpiDeselect();
 8002146:	2201      	movs	r2, #1
 8002148:	2140      	movs	r1, #64	; 0x40
 800214a:	480b      	ldr	r0, [pc, #44]	; (8002178 <st25r3911WriteFifo+0x8c>)
 800214c:	f000 fe2c 	bl	8002da8 <HAL_GPIO_WritePin>
        platformUnprotectST25R391xComm();
 8002150:	4b08      	ldr	r3, [pc, #32]	; (8002174 <st25r3911WriteFifo+0x88>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	3b01      	subs	r3, #1
 8002156:	b2da      	uxtb	r2, r3
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <st25r3911WriteFifo+0x88>)
 800215a:	701a      	strb	r2, [r3, #0]
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <st25r3911WriteFifo+0x88>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d103      	bne.n	800216c <st25r3911WriteFifo+0x80>
 8002164:	2006      	movs	r0, #6
 8002166:	f7ff fd47 	bl	8001bf8 <__NVIC_EnableIRQ>
    }

    return;
 800216a:	bf00      	nop
 800216c:	bf00      	nop
}
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	200001f8 	.word	0x200001f8
 8002178:	40020400 	.word	0x40020400

0800217c <st25r3911ReadFifo>:

void st25r3911ReadFifo(uint8_t* buf, uint8_t length)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	70fb      	strb	r3, [r7, #3]
#if !defined(ST25R391X_COM_SINGLETXRX)
    uint8_t cmd = ST25R3911_FIFO_READ;
 8002188:	23bf      	movs	r3, #191	; 0xbf
 800218a:	73fb      	strb	r3, [r7, #15]
#endif  /* !ST25R391X_COM_SINGLETXRX */
    
    if(length > 0U)
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d034      	beq.n	80021fc <st25r3911ReadFifo+0x80>
    {
        platformProtectST25R391xComm();
 8002192:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <st25r3911ReadFifo+0x88>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	3301      	adds	r3, #1
 8002198:	b2da      	uxtb	r2, r3
 800219a:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <st25r3911ReadFifo+0x88>)
 800219c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800219e:	f3bf 8f4f 	dsb	sy
 80021a2:	2006      	movs	r0, #6
 80021a4:	f7ff fd46 	bl	8001c34 <__NVIC_DisableIRQ>
 80021a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80021ac:	f3bf 8f6f 	isb	sy
        platformSpiSelect();
 80021b0:	2200      	movs	r2, #0
 80021b2:	2140      	movs	r1, #64	; 0x40
 80021b4:	4814      	ldr	r0, [pc, #80]	; (8002208 <st25r3911ReadFifo+0x8c>)
 80021b6:	f000 fdf7 	bl	8002da8 <HAL_GPIO_WritePin>
        platformSpiTxRx( comBuf, comBuf, MIN( (ST25R3911_CMD_LEN + length), ST25R3911_BUF_LEN ) );          /* Transceive as a single SPI call                        */
        ST_MEMCPY( buf, &comBuf[ST25R3911_CMD_LEN], MIN( length, ST25R3911_BUF_LEN - ST25R3911_CMD_LEN ) ); /* Copy from local buf to output buffer and skip cmd byte */
  
#else  /*ST25R391X_COM_SINGLETXRX*/
  
        platformSpiTxRx( &cmd, NULL, ST25R3911_CMD_LEN );
 80021ba:	f107 030f 	add.w	r3, r7, #15
 80021be:	2201      	movs	r2, #1
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe ffe0 	bl	8001188 <spiTxRx>
        platformSpiTxRx( NULL, buf, length );
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	461a      	mov	r2, r3
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	2000      	movs	r0, #0
 80021d2:	f7fe ffd9 	bl	8001188 <spiTxRx>
  
#endif  /*ST25R391X_COM_SINGLETXRX*/
      
        platformSpiDeselect();
 80021d6:	2201      	movs	r2, #1
 80021d8:	2140      	movs	r1, #64	; 0x40
 80021da:	480b      	ldr	r0, [pc, #44]	; (8002208 <st25r3911ReadFifo+0x8c>)
 80021dc:	f000 fde4 	bl	8002da8 <HAL_GPIO_WritePin>
        platformUnprotectST25R391xComm();
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <st25r3911ReadFifo+0x88>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <st25r3911ReadFifo+0x88>)
 80021ea:	701a      	strb	r2, [r3, #0]
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <st25r3911ReadFifo+0x88>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d103      	bne.n	80021fc <st25r3911ReadFifo+0x80>
 80021f4:	2006      	movs	r0, #6
 80021f6:	f7ff fcff 	bl	8001bf8 <__NVIC_EnableIRQ>
    }

    return;
 80021fa:	bf00      	nop
 80021fc:	bf00      	nop
}
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	200001f8 	.word	0x200001f8
 8002208:	40020400 	.word	0x40020400

0800220c <st25r3911ExecuteCommand>:

void st25r3911ExecuteCommand( uint8_t cmd )
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
    uint8_t tmpCmd;                                    /* MISRA 17.8 */
    
#ifdef PLATFORM_LED_FIELD_PIN
    if ( (cmd >= ST25R3911_CMD_TRANSMIT_WITH_CRC) && (cmd <= ST25R3911_CMD_RESPONSE_RF_COLLISION_0))
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	2bc3      	cmp	r3, #195	; 0xc3
 800221a:	d908      	bls.n	800222e <st25r3911ExecuteCommand+0x22>
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	2bca      	cmp	r3, #202	; 0xca
 8002220:	d805      	bhi.n	800222e <st25r3911ExecuteCommand+0x22>
    {
        platformLedOff(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 8002222:	2200      	movs	r2, #0
 8002224:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002228:	481c      	ldr	r0, [pc, #112]	; (800229c <st25r3911ExecuteCommand+0x90>)
 800222a:	f000 fdbd 	bl	8002da8 <HAL_GPIO_WritePin>
    }
#endif /* PLATFORM_LED_FIELD_PIN */
    
    tmpCmd = (cmd | ST25R3911_CMD_MODE);
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002234:	b2db      	uxtb	r3, r3
 8002236:	73fb      	strb	r3, [r7, #15]

    platformProtectST25R391xComm();
 8002238:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <st25r3911ExecuteCommand+0x94>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	3301      	adds	r3, #1
 800223e:	b2da      	uxtb	r2, r3
 8002240:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <st25r3911ExecuteCommand+0x94>)
 8002242:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002244:	f3bf 8f4f 	dsb	sy
 8002248:	2006      	movs	r0, #6
 800224a:	f7ff fcf3 	bl	8001c34 <__NVIC_DisableIRQ>
 800224e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002252:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 8002256:	2200      	movs	r2, #0
 8002258:	2140      	movs	r1, #64	; 0x40
 800225a:	4812      	ldr	r0, [pc, #72]	; (80022a4 <st25r3911ExecuteCommand+0x98>)
 800225c:	f000 fda4 	bl	8002da8 <HAL_GPIO_WritePin>
    
    platformSpiTxRx( &tmpCmd, NULL, ST25R3911_CMD_LEN );
 8002260:	f107 030f 	add.w	r3, r7, #15
 8002264:	2201      	movs	r2, #1
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe ff8d 	bl	8001188 <spiTxRx>
    
    platformSpiDeselect();
 800226e:	2201      	movs	r2, #1
 8002270:	2140      	movs	r1, #64	; 0x40
 8002272:	480c      	ldr	r0, [pc, #48]	; (80022a4 <st25r3911ExecuteCommand+0x98>)
 8002274:	f000 fd98 	bl	8002da8 <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <st25r3911ExecuteCommand+0x94>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	3b01      	subs	r3, #1
 800227e:	b2da      	uxtb	r2, r3
 8002280:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <st25r3911ExecuteCommand+0x94>)
 8002282:	701a      	strb	r2, [r3, #0]
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <st25r3911ExecuteCommand+0x94>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d103      	bne.n	8002294 <st25r3911ExecuteCommand+0x88>
 800228c:	2006      	movs	r0, #6
 800228e:	f7ff fcb3 	bl	8001bf8 <__NVIC_EnableIRQ>

    return;
 8002292:	bf00      	nop
 8002294:	bf00      	nop
}
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40020000 	.word	0x40020000
 80022a0:	200001f8 	.word	0x200001f8
 80022a4:	40020400 	.word	0x40020400

080022a8 <st25r3911ExecuteCommands>:


void st25r3911ExecuteCommands(const uint8_t *cmds, uint8_t length)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	70fb      	strb	r3, [r7, #3]
    platformProtectST25R391xComm();
 80022b4:	4b18      	ldr	r3, [pc, #96]	; (8002318 <st25r3911ExecuteCommands+0x70>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	3301      	adds	r3, #1
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	4b16      	ldr	r3, [pc, #88]	; (8002318 <st25r3911ExecuteCommands+0x70>)
 80022be:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80022c0:	f3bf 8f4f 	dsb	sy
 80022c4:	2006      	movs	r0, #6
 80022c6:	f7ff fcb5 	bl	8001c34 <__NVIC_DisableIRQ>
 80022ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80022ce:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 80022d2:	2200      	movs	r2, #0
 80022d4:	2140      	movs	r1, #64	; 0x40
 80022d6:	4811      	ldr	r0, [pc, #68]	; (800231c <st25r3911ExecuteCommands+0x74>)
 80022d8:	f000 fd66 	bl	8002da8 <HAL_GPIO_WritePin>
    
    platformSpiTxRx( cmds, NULL, length );
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	461a      	mov	r2, r3
 80022e2:	2100      	movs	r1, #0
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7fe ff4f 	bl	8001188 <spiTxRx>
    
    platformSpiDeselect();
 80022ea:	2201      	movs	r2, #1
 80022ec:	2140      	movs	r1, #64	; 0x40
 80022ee:	480b      	ldr	r0, [pc, #44]	; (800231c <st25r3911ExecuteCommands+0x74>)
 80022f0:	f000 fd5a 	bl	8002da8 <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 80022f4:	4b08      	ldr	r3, [pc, #32]	; (8002318 <st25r3911ExecuteCommands+0x70>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	3b01      	subs	r3, #1
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <st25r3911ExecuteCommands+0x70>)
 80022fe:	701a      	strb	r2, [r3, #0]
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <st25r3911ExecuteCommands+0x70>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d103      	bne.n	8002310 <st25r3911ExecuteCommands+0x68>
 8002308:	2006      	movs	r0, #6
 800230a:	f7ff fc75 	bl	8001bf8 <__NVIC_EnableIRQ>

    return;
 800230e:	bf00      	nop
 8002310:	bf00      	nop
}
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	200001f8 	.word	0x200001f8
 800231c:	40020400 	.word	0x40020400

08002320 <__NVIC_EnableIRQ>:
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	2b00      	cmp	r3, #0
 8002330:	db0b      	blt.n	800234a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	f003 021f 	and.w	r2, r3, #31
 8002338:	4907      	ldr	r1, [pc, #28]	; (8002358 <__NVIC_EnableIRQ+0x38>)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	2001      	movs	r0, #1
 8002342:	fa00 f202 	lsl.w	r2, r0, r2
 8002346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	e000e100 	.word	0xe000e100

0800235c <__NVIC_DisableIRQ>:
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	2b00      	cmp	r3, #0
 800236c:	db10      	blt.n	8002390 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	f003 021f 	and.w	r2, r3, #31
 8002374:	4909      	ldr	r1, [pc, #36]	; (800239c <__NVIC_DisableIRQ+0x40>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	2001      	movs	r0, #1
 800237e:	fa00 f202 	lsl.w	r2, r0, r2
 8002382:	3320      	adds	r3, #32
 8002384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002388:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800238c:	f3bf 8f6f 	isb	sy
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	e000e100 	.word	0xe000e100

080023a0 <st25r3911InitInterrupts>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
void st25r3911InitInterrupts( void )
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
    platformIrqST25R3911PinInitialize();
    platformIrqST25R3911SetCallback( st25r3911Isr );
    
    st25r3911interrupt.callback     = NULL;
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <st25r3911InitInterrupts+0x2c>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	605a      	str	r2, [r3, #4]
    st25r3911interrupt.prevCallback = NULL;
 80023aa:	4b08      	ldr	r3, [pc, #32]	; (80023cc <st25r3911InitInterrupts+0x2c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
    st25r3911interrupt.status       = ST25R3911_IRQ_MASK_NONE;
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <st25r3911InitInterrupts+0x2c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
    st25r3911interrupt.mask         = ST25R3911_IRQ_MASK_NONE;
 80023b6:	4b05      	ldr	r3, [pc, #20]	; (80023cc <st25r3911InitInterrupts+0x2c>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	60da      	str	r2, [r3, #12]
#ifdef PLATFORM_LED_RX_PIN
    platformLedOff( PLATFORM_LED_RX_PORT, PLATFORM_LED_RX_PIN );
#endif /* PLATFORM_LED_RX_PIN */

#ifdef PLATFORM_LED_FIELD_PIN
    platformLedOff( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 80023bc:	2200      	movs	r2, #0
 80023be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023c2:	4803      	ldr	r0, [pc, #12]	; (80023d0 <st25r3911InitInterrupts+0x30>)
 80023c4:	f000 fcf0 	bl	8002da8 <HAL_GPIO_WritePin>
#endif /* PLATFORM_LED_FIELD_PIN */
}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	200002dc 	.word	0x200002dc
 80023d0:	40020000 	.word	0x40020000

080023d4 <st25r3911Isr>:

void st25r3911Isr( void )
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
    st25r3911CheckForReceivedInterrupts();
 80023d8:	f000 f80c 	bl	80023f4 <st25r3911CheckForReceivedInterrupts>
    
    if (NULL != st25r3911interrupt.callback)
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <st25r3911Isr+0x1c>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <st25r3911Isr+0x16>
    {
        st25r3911interrupt.callback();
 80023e4:	4b02      	ldr	r3, [pc, #8]	; (80023f0 <st25r3911Isr+0x1c>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4798      	blx	r3
    }
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	200002dc 	.word	0x200002dc

080023f4 <st25r3911CheckForReceivedInterrupts>:

void st25r3911CheckForReceivedInterrupts( void )
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
    uint8_t  iregs[ST25R3911_INT_REGS_LEN];
    uint32_t irqStatus; 

    irqStatus = ST25R3911_IRQ_MASK_NONE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	607b      	str	r3, [r7, #4]
    ST_MEMSET( iregs, (int32_t)(ST25R3911_IRQ_MASK_ALL & 0xFFU), ST25R3911_INT_REGS_LEN );  /* MISRA 10.3 */
 80023fe:	463b      	mov	r3, r7
 8002400:	2203      	movs	r2, #3
 8002402:	21ff      	movs	r1, #255	; 0xff
 8002404:	4618      	mov	r0, r3
 8002406:	f00b fab2 	bl	800d96e <memset>
        
    /* In case the IRQ is Edge (not Level) triggered read IRQs until done */
    while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 800240a:	e01f      	b.n	800244c <st25r3911CheckForReceivedInterrupts+0x58>
    {
        st25r3911ReadMultipleRegisters(ST25R3911_REG_IRQ_MAIN, iregs, sizeof(iregs));
 800240c:	463b      	mov	r3, r7
 800240e:	2203      	movs	r2, #3
 8002410:	4619      	mov	r1, r3
 8002412:	2017      	movs	r0, #23
 8002414:	f7ff fc98 	bl	8001d48 <st25r3911ReadMultipleRegisters>
       
#ifdef PLATFORM_LED_FIELD_PIN         
        if ((iregs[0] & ST25R3911_IRQ_MASK_TXE) != 0U)
 8002418:	783b      	ldrb	r3, [r7, #0]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d005      	beq.n	800242e <st25r3911CheckForReceivedInterrupts+0x3a>
        {
            platformLedOn( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 8002422:	2201      	movs	r2, #1
 8002424:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002428:	481f      	ldr	r0, [pc, #124]	; (80024a8 <st25r3911CheckForReceivedInterrupts+0xb4>)
 800242a:	f000 fcbd 	bl	8002da8 <HAL_GPIO_WritePin>
        {
            platformLedOff( PLATFORM_LED_RX_PORT, PLATFORM_LED_RX_PIN );
        }
#endif /* PLATFORM_LED_RX_PIN */
       
        irqStatus |= (uint32_t)iregs[0];
 800242e:	783b      	ldrb	r3, [r7, #0]
 8002430:	461a      	mov	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4313      	orrs	r3, r2
 8002436:	607b      	str	r3, [r7, #4]
        irqStatus |= (uint32_t)iregs[1]<<8;
 8002438:	787b      	ldrb	r3, [r7, #1]
 800243a:	021b      	lsls	r3, r3, #8
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	4313      	orrs	r3, r2
 8002440:	607b      	str	r3, [r7, #4]
        irqStatus |= (uint32_t)iregs[2]<<16;
 8002442:	78bb      	ldrb	r3, [r7, #2]
 8002444:	041b      	lsls	r3, r3, #16
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	4313      	orrs	r3, r2
 800244a:	607b      	str	r3, [r7, #4]
    while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 800244c:	2101      	movs	r1, #1
 800244e:	4816      	ldr	r0, [pc, #88]	; (80024a8 <st25r3911CheckForReceivedInterrupts+0xb4>)
 8002450:	f000 fc92 	bl	8002d78 <HAL_GPIO_ReadPin>
 8002454:	4603      	mov	r3, r0
 8002456:	2b01      	cmp	r3, #1
 8002458:	d0d8      	beq.n	800240c <st25r3911CheckForReceivedInterrupts+0x18>
    }
    
    /* Forward all interrupts, even masked ones to application. */
    platformProtectST25R391xIrqStatus();
 800245a:	4b14      	ldr	r3, [pc, #80]	; (80024ac <st25r3911CheckForReceivedInterrupts+0xb8>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	3301      	adds	r3, #1
 8002460:	b2da      	uxtb	r2, r3
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <st25r3911CheckForReceivedInterrupts+0xb8>)
 8002464:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002466:	f3bf 8f4f 	dsb	sy
 800246a:	2006      	movs	r0, #6
 800246c:	f7ff ff76 	bl	800235c <__NVIC_DisableIRQ>
 8002470:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002474:	f3bf 8f6f 	isb	sy
    st25r3911interrupt.status |= irqStatus;
 8002478:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <st25r3911CheckForReceivedInterrupts+0xbc>)
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4313      	orrs	r3, r2
 8002480:	4a0b      	ldr	r2, [pc, #44]	; (80024b0 <st25r3911CheckForReceivedInterrupts+0xbc>)
 8002482:	6093      	str	r3, [r2, #8]
    platformUnprotectST25R391xIrqStatus();
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <st25r3911CheckForReceivedInterrupts+0xb8>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	3b01      	subs	r3, #1
 800248a:	b2da      	uxtb	r2, r3
 800248c:	4b07      	ldr	r3, [pc, #28]	; (80024ac <st25r3911CheckForReceivedInterrupts+0xb8>)
 800248e:	701a      	strb	r2, [r3, #0]
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <st25r3911CheckForReceivedInterrupts+0xb8>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d102      	bne.n	800249e <st25r3911CheckForReceivedInterrupts+0xaa>
 8002498:	2006      	movs	r0, #6
 800249a:	f7ff ff41 	bl	8002320 <__NVIC_EnableIRQ>
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40020000 	.word	0x40020000
 80024ac:	200001f8 	.word	0x200001f8
 80024b0:	200002dc 	.word	0x200002dc

080024b4 <st25r3911ModifyInterrupts>:


void st25r3911ModifyInterrupts(uint32_t clr_mask, uint32_t set_mask)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
    uint8_t i;
    uint32_t old_mask;
    uint32_t new_mask;

    old_mask = st25r3911interrupt.mask;
 80024be:	4b1e      	ldr	r3, [pc, #120]	; (8002538 <st25r3911ModifyInterrupts+0x84>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	613b      	str	r3, [r7, #16]
    new_mask = (~old_mask & set_mask) | (old_mask & clr_mask);
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	43da      	mvns	r2, r3
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	401a      	ands	r2, r3
 80024cc:	6939      	ldr	r1, [r7, #16]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	400b      	ands	r3, r1
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]
    st25r3911interrupt.mask &= ~clr_mask;
 80024d6:	4b18      	ldr	r3, [pc, #96]	; (8002538 <st25r3911ModifyInterrupts+0x84>)
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	43db      	mvns	r3, r3
 80024de:	4013      	ands	r3, r2
 80024e0:	4a15      	ldr	r2, [pc, #84]	; (8002538 <st25r3911ModifyInterrupts+0x84>)
 80024e2:	60d3      	str	r3, [r2, #12]
    st25r3911interrupt.mask |= set_mask;
 80024e4:	4b14      	ldr	r3, [pc, #80]	; (8002538 <st25r3911ModifyInterrupts+0x84>)
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	4a12      	ldr	r2, [pc, #72]	; (8002538 <st25r3911ModifyInterrupts+0x84>)
 80024ee:	60d3      	str	r3, [r2, #12]
    for (i=0; i<3U ; i++)
 80024f0:	2300      	movs	r3, #0
 80024f2:	75fb      	strb	r3, [r7, #23]
 80024f4:	e019      	b.n	800252a <st25r3911ModifyInterrupts+0x76>
    { 
        if (((new_mask >> (i*8U)) & 0xffU) == 0U) {
 80024f6:	7dfb      	ldrb	r3, [r7, #23]
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00d      	beq.n	8002522 <st25r3911ModifyInterrupts+0x6e>
            continue;
        }
        st25r3911WriteRegister((ST25R3911_REG_IRQ_MASK_MAIN + i), (uint8_t)((st25r3911interrupt.mask>>(i*8U))&0xffU));
 8002506:	7dfb      	ldrb	r3, [r7, #23]
 8002508:	3314      	adds	r3, #20
 800250a:	b2d8      	uxtb	r0, r3
 800250c:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <st25r3911ModifyInterrupts+0x84>)
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	7dfb      	ldrb	r3, [r7, #23]
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
 8002518:	b2db      	uxtb	r3, r3
 800251a:	4619      	mov	r1, r3
 800251c:	f7ff fcf2 	bl	8001f04 <st25r3911WriteRegister>
 8002520:	e000      	b.n	8002524 <st25r3911ModifyInterrupts+0x70>
            continue;
 8002522:	bf00      	nop
    for (i=0; i<3U ; i++)
 8002524:	7dfb      	ldrb	r3, [r7, #23]
 8002526:	3301      	adds	r3, #1
 8002528:	75fb      	strb	r3, [r7, #23]
 800252a:	7dfb      	ldrb	r3, [r7, #23]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d9e2      	bls.n	80024f6 <st25r3911ModifyInterrupts+0x42>
    }
    return;
 8002530:	bf00      	nop
}
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	200002dc 	.word	0x200002dc

0800253c <st25r3911WaitForInterruptsTimed>:


uint32_t st25r3911WaitForInterruptsTimed(uint32_t mask, uint16_t tmo)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	807b      	strh	r3, [r7, #2]
    uint32_t tmr;
    uint32_t status;
   
    tmr = platformTimerCreate(tmo);
 8002548:	887b      	ldrh	r3, [r7, #2]
 800254a:	4618      	mov	r0, r3
 800254c:	f000 f8c8 	bl	80026e0 <timerCalculateTimer>
 8002550:	60f8      	str	r0, [r7, #12]
    do 
    {
        status = (st25r3911interrupt.status & mask);
 8002552:	4b20      	ldr	r3, [pc, #128]	; (80025d4 <st25r3911WaitForInterruptsTimed+0x98>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	4013      	ands	r3, r2
 800255a:	60bb      	str	r3, [r7, #8]
    } while( ( !platformTimerIsExpired( tmr ) || (tmo == 0U)) && (status == 0U) );
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 f8cd 	bl	80026fc <timerIsExpired>
 8002562:	4603      	mov	r3, r0
 8002564:	f083 0301 	eor.w	r3, r3, #1
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d102      	bne.n	8002574 <st25r3911WaitForInterruptsTimed+0x38>
 800256e:	887b      	ldrh	r3, [r7, #2]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d102      	bne.n	800257a <st25r3911WaitForInterruptsTimed+0x3e>
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0eb      	beq.n	8002552 <st25r3911WaitForInterruptsTimed+0x16>

    status = st25r3911interrupt.status & mask;
 800257a:	4b16      	ldr	r3, [pc, #88]	; (80025d4 <st25r3911WaitForInterruptsTimed+0x98>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	4013      	ands	r3, r2
 8002582:	60bb      	str	r3, [r7, #8]
    
    platformProtectST25R391xIrqStatus();
 8002584:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <st25r3911WaitForInterruptsTimed+0x9c>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	3301      	adds	r3, #1
 800258a:	b2da      	uxtb	r2, r3
 800258c:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <st25r3911WaitForInterruptsTimed+0x9c>)
 800258e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002590:	f3bf 8f4f 	dsb	sy
 8002594:	2006      	movs	r0, #6
 8002596:	f7ff fee1 	bl	800235c <__NVIC_DisableIRQ>
 800259a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800259e:	f3bf 8f6f 	isb	sy
    st25r3911interrupt.status &= ~status;
 80025a2:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <st25r3911WaitForInterruptsTimed+0x98>)
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	4013      	ands	r3, r2
 80025ac:	4a09      	ldr	r2, [pc, #36]	; (80025d4 <st25r3911WaitForInterruptsTimed+0x98>)
 80025ae:	6093      	str	r3, [r2, #8]
    platformUnprotectST25R391xIrqStatus();
 80025b0:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <st25r3911WaitForInterruptsTimed+0x9c>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <st25r3911WaitForInterruptsTimed+0x9c>)
 80025ba:	701a      	strb	r2, [r3, #0]
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <st25r3911WaitForInterruptsTimed+0x9c>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d102      	bne.n	80025ca <st25r3911WaitForInterruptsTimed+0x8e>
 80025c4:	2006      	movs	r0, #6
 80025c6:	f7ff feab 	bl	8002320 <__NVIC_EnableIRQ>
    
    return status;
 80025ca:	68bb      	ldr	r3, [r7, #8]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	200002dc 	.word	0x200002dc
 80025d8:	200001f8 	.word	0x200001f8

080025dc <st25r3911GetInterrupt>:

uint32_t st25r3911GetInterrupt(uint32_t mask)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
    uint32_t irqs;

    irqs = (st25r3911interrupt.status & mask);
 80025e4:	4b17      	ldr	r3, [pc, #92]	; (8002644 <st25r3911GetInterrupt+0x68>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	4013      	ands	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]
    if (irqs != ST25R3911_IRQ_MASK_NONE)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d022      	beq.n	800263a <st25r3911GetInterrupt+0x5e>
    {
        platformProtectST25R391xIrqStatus();
 80025f4:	4b14      	ldr	r3, [pc, #80]	; (8002648 <st25r3911GetInterrupt+0x6c>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	3301      	adds	r3, #1
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	4b12      	ldr	r3, [pc, #72]	; (8002648 <st25r3911GetInterrupt+0x6c>)
 80025fe:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002600:	f3bf 8f4f 	dsb	sy
 8002604:	2006      	movs	r0, #6
 8002606:	f7ff fea9 	bl	800235c <__NVIC_DisableIRQ>
 800260a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800260e:	f3bf 8f6f 	isb	sy
        st25r3911interrupt.status &= ~irqs;
 8002612:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <st25r3911GetInterrupt+0x68>)
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	43db      	mvns	r3, r3
 800261a:	4013      	ands	r3, r2
 800261c:	4a09      	ldr	r2, [pc, #36]	; (8002644 <st25r3911GetInterrupt+0x68>)
 800261e:	6093      	str	r3, [r2, #8]
        platformUnprotectST25R391xIrqStatus();
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <st25r3911GetInterrupt+0x6c>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	3b01      	subs	r3, #1
 8002626:	b2da      	uxtb	r2, r3
 8002628:	4b07      	ldr	r3, [pc, #28]	; (8002648 <st25r3911GetInterrupt+0x6c>)
 800262a:	701a      	strb	r2, [r3, #0]
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <st25r3911GetInterrupt+0x6c>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d102      	bne.n	800263a <st25r3911GetInterrupt+0x5e>
 8002634:	2006      	movs	r0, #6
 8002636:	f7ff fe73 	bl	8002320 <__NVIC_EnableIRQ>
    }
    return irqs;
 800263a:	68fb      	ldr	r3, [r7, #12]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	200002dc 	.word	0x200002dc
 8002648:	200001f8 	.word	0x200001f8

0800264c <st25r3911EnableInterrupts>:

void st25r3911EnableInterrupts(uint32_t mask)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
    st25r3911ModifyInterrupts(mask,0);
 8002654:	2100      	movs	r1, #0
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff ff2c 	bl	80024b4 <st25r3911ModifyInterrupts>
}
 800265c:	bf00      	nop
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <st25r3911DisableInterrupts>:

void st25r3911DisableInterrupts(uint32_t mask)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
    st25r3911ModifyInterrupts(0,mask);
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	2000      	movs	r0, #0
 8002670:	f7ff ff20 	bl	80024b4 <st25r3911ModifyInterrupts>
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <st25r3911ClearInterrupts>:

void st25r3911ClearInterrupts( void )
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
    uint8_t iregs[3];

    st25r3911ReadMultipleRegisters(ST25R3911_REG_IRQ_MAIN, iregs, 3);
 8002682:	1d3b      	adds	r3, r7, #4
 8002684:	2203      	movs	r2, #3
 8002686:	4619      	mov	r1, r3
 8002688:	2017      	movs	r0, #23
 800268a:	f7ff fb5d 	bl	8001d48 <st25r3911ReadMultipleRegisters>

    platformProtectST25R391xIrqStatus();
 800268e:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <st25r3911ClearInterrupts+0x5c>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	3301      	adds	r3, #1
 8002694:	b2da      	uxtb	r2, r3
 8002696:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <st25r3911ClearInterrupts+0x5c>)
 8002698:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800269a:	f3bf 8f4f 	dsb	sy
 800269e:	2006      	movs	r0, #6
 80026a0:	f7ff fe5c 	bl	800235c <__NVIC_DisableIRQ>
 80026a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80026a8:	f3bf 8f6f 	isb	sy
    st25r3911interrupt.status = 0;
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <st25r3911ClearInterrupts+0x60>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
    platformUnprotectST25R391xIrqStatus();
 80026b2:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <st25r3911ClearInterrupts+0x5c>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <st25r3911ClearInterrupts+0x5c>)
 80026bc:	701a      	strb	r2, [r3, #0]
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <st25r3911ClearInterrupts+0x5c>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d103      	bne.n	80026ce <st25r3911ClearInterrupts+0x52>
 80026c6:	2006      	movs	r0, #6
 80026c8:	f7ff fe2a 	bl	8002320 <__NVIC_EnableIRQ>
    return;
 80026cc:	bf00      	nop
 80026ce:	bf00      	nop
}
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	200001f8 	.word	0x200001f8
 80026dc:	200002dc 	.word	0x200002dc

080026e0 <timerCalculateTimer>:
*/


/*******************************************************************************/
uint32_t timerCalculateTimer( uint16_t time )
{  
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	80fb      	strh	r3, [r7, #6]
  return (platformGetSysTick() + time);
 80026ea:	f000 f883 	bl	80027f4 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	88fb      	ldrh	r3, [r7, #6]
 80026f2:	4413      	add	r3, r2
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <timerIsExpired>:


/*******************************************************************************/
bool timerIsExpired( uint32_t timer )
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t uDiff;
  int32_t sDiff;
  
  uDiff = (timer - platformGetSysTick());   /* Calculate the diff between the timers */
 8002704:	f000 f876 	bl	80027f4 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	1a9b      	subs	r3, r3, r2
 800270e:	60fb      	str	r3, [r7, #12]
  sDiff = uDiff;                            /* Convert the diff to a signed var      */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	60bb      	str	r3, [r7, #8]
   *    Signaling not expired: acceptable!
   * 2) Time roll-over case will be handled correctly: super!
   */
  
  /* Check if the given timer has expired already */
  if( sDiff < 0 )
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b00      	cmp	r3, #0
 8002718:	da01      	bge.n	800271e <timerIsExpired+0x22>
  {
    return true;
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <timerIsExpired+0x24>
  }
  
  return false;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800272c:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <HAL_Init+0x40>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a0d      	ldr	r2, [pc, #52]	; (8002768 <HAL_Init+0x40>)
 8002732:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002736:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <HAL_Init+0x40>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <HAL_Init+0x40>)
 800273e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002742:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002744:	4b08      	ldr	r3, [pc, #32]	; (8002768 <HAL_Init+0x40>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a07      	ldr	r2, [pc, #28]	; (8002768 <HAL_Init+0x40>)
 800274a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800274e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002750:	2003      	movs	r0, #3
 8002752:	f000 f94d 	bl	80029f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002756:	2000      	movs	r0, #0
 8002758:	f000 f808 	bl	800276c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800275c:	f7fe fd52 	bl	8001204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40023c00 	.word	0x40023c00

0800276c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002774:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_InitTick+0x54>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <HAL_InitTick+0x58>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	4619      	mov	r1, r3
 800277e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002782:	fbb3 f3f1 	udiv	r3, r3, r1
 8002786:	fbb2 f3f3 	udiv	r3, r2, r3
 800278a:	4618      	mov	r0, r3
 800278c:	f000 f965 	bl	8002a5a <HAL_SYSTICK_Config>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e00e      	b.n	80027b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b0f      	cmp	r3, #15
 800279e:	d80a      	bhi.n	80027b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a0:	2200      	movs	r2, #0
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	f04f 30ff 	mov.w	r0, #4294967295
 80027a8:	f000 f92d 	bl	8002a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027ac:	4a06      	ldr	r2, [pc, #24]	; (80027c8 <HAL_InitTick+0x5c>)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	e000      	b.n	80027b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	200000d4 	.word	0x200000d4
 80027c4:	200000dc 	.word	0x200000dc
 80027c8:	200000d8 	.word	0x200000d8

080027cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_IncTick+0x20>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <HAL_IncTick+0x24>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4413      	add	r3, r2
 80027dc:	4a04      	ldr	r2, [pc, #16]	; (80027f0 <HAL_IncTick+0x24>)
 80027de:	6013      	str	r3, [r2, #0]
}
 80027e0:	bf00      	nop
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	200000dc 	.word	0x200000dc
 80027f0:	200010d0 	.word	0x200010d0

080027f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return uwTick;
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <HAL_GetTick+0x14>)
 80027fa:	681b      	ldr	r3, [r3, #0]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	200010d0 	.word	0x200010d0

0800280c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002814:	f7ff ffee 	bl	80027f4 <HAL_GetTick>
 8002818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002824:	d005      	beq.n	8002832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <HAL_Delay+0x40>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	461a      	mov	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4413      	add	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002832:	bf00      	nop
 8002834:	f7ff ffde 	bl	80027f4 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	429a      	cmp	r2, r3
 8002842:	d8f7      	bhi.n	8002834 <HAL_Delay+0x28>
  {
  }
}
 8002844:	bf00      	nop
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	200000dc 	.word	0x200000dc

08002850 <__NVIC_SetPriorityGrouping>:
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002860:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <__NVIC_SetPriorityGrouping+0x44>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800286c:	4013      	ands	r3, r2
 800286e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800287c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002882:	4a04      	ldr	r2, [pc, #16]	; (8002894 <__NVIC_SetPriorityGrouping+0x44>)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	60d3      	str	r3, [r2, #12]
}
 8002888:	bf00      	nop
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <__NVIC_GetPriorityGrouping>:
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800289c:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <__NVIC_GetPriorityGrouping+0x18>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	0a1b      	lsrs	r3, r3, #8
 80028a2:	f003 0307 	and.w	r3, r3, #7
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	e000ed00 	.word	0xe000ed00

080028b4 <__NVIC_EnableIRQ>:
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	db0b      	blt.n	80028de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	f003 021f 	and.w	r2, r3, #31
 80028cc:	4907      	ldr	r1, [pc, #28]	; (80028ec <__NVIC_EnableIRQ+0x38>)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	095b      	lsrs	r3, r3, #5
 80028d4:	2001      	movs	r0, #1
 80028d6:	fa00 f202 	lsl.w	r2, r0, r2
 80028da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	e000e100 	.word	0xe000e100

080028f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	6039      	str	r1, [r7, #0]
 80028fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002900:	2b00      	cmp	r3, #0
 8002902:	db0a      	blt.n	800291a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	b2da      	uxtb	r2, r3
 8002908:	490c      	ldr	r1, [pc, #48]	; (800293c <__NVIC_SetPriority+0x4c>)
 800290a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290e:	0112      	lsls	r2, r2, #4
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	440b      	add	r3, r1
 8002914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002918:	e00a      	b.n	8002930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	b2da      	uxtb	r2, r3
 800291e:	4908      	ldr	r1, [pc, #32]	; (8002940 <__NVIC_SetPriority+0x50>)
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	3b04      	subs	r3, #4
 8002928:	0112      	lsls	r2, r2, #4
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	440b      	add	r3, r1
 800292e:	761a      	strb	r2, [r3, #24]
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	e000e100 	.word	0xe000e100
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002944:	b480      	push	{r7}
 8002946:	b089      	sub	sp, #36	; 0x24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f1c3 0307 	rsb	r3, r3, #7
 800295e:	2b04      	cmp	r3, #4
 8002960:	bf28      	it	cs
 8002962:	2304      	movcs	r3, #4
 8002964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	3304      	adds	r3, #4
 800296a:	2b06      	cmp	r3, #6
 800296c:	d902      	bls.n	8002974 <NVIC_EncodePriority+0x30>
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	3b03      	subs	r3, #3
 8002972:	e000      	b.n	8002976 <NVIC_EncodePriority+0x32>
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002978:	f04f 32ff 	mov.w	r2, #4294967295
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43da      	mvns	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	401a      	ands	r2, r3
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800298c:	f04f 31ff 	mov.w	r1, #4294967295
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	fa01 f303 	lsl.w	r3, r1, r3
 8002996:	43d9      	mvns	r1, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800299c:	4313      	orrs	r3, r2
         );
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3724      	adds	r7, #36	; 0x24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
	...

080029ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029bc:	d301      	bcc.n	80029c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029be:	2301      	movs	r3, #1
 80029c0:	e00f      	b.n	80029e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029c2:	4a0a      	ldr	r2, [pc, #40]	; (80029ec <SysTick_Config+0x40>)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ca:	210f      	movs	r1, #15
 80029cc:	f04f 30ff 	mov.w	r0, #4294967295
 80029d0:	f7ff ff8e 	bl	80028f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029d4:	4b05      	ldr	r3, [pc, #20]	; (80029ec <SysTick_Config+0x40>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029da:	4b04      	ldr	r3, [pc, #16]	; (80029ec <SysTick_Config+0x40>)
 80029dc:	2207      	movs	r2, #7
 80029de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	e000e010 	.word	0xe000e010

080029f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7ff ff29 	bl	8002850 <__NVIC_SetPriorityGrouping>
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b086      	sub	sp, #24
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	60b9      	str	r1, [r7, #8]
 8002a10:	607a      	str	r2, [r7, #4]
 8002a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a18:	f7ff ff3e 	bl	8002898 <__NVIC_GetPriorityGrouping>
 8002a1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	68b9      	ldr	r1, [r7, #8]
 8002a22:	6978      	ldr	r0, [r7, #20]
 8002a24:	f7ff ff8e 	bl	8002944 <NVIC_EncodePriority>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a2e:	4611      	mov	r1, r2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff ff5d 	bl	80028f0 <__NVIC_SetPriority>
}
 8002a36:	bf00      	nop
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	4603      	mov	r3, r0
 8002a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff ff31 	bl	80028b4 <__NVIC_EnableIRQ>
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b082      	sub	sp, #8
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff ffa2 	bl	80029ac <SysTick_Config>
 8002a68:	4603      	mov	r3, r0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	; 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
 8002a8e:	e159      	b.n	8002d44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a90:	2201      	movs	r2, #1
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	f040 8148 	bne.w	8002d3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d00b      	beq.n	8002ace <HAL_GPIO_Init+0x5a>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d007      	beq.n	8002ace <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ac2:	2b11      	cmp	r3, #17
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b12      	cmp	r3, #18
 8002acc:	d130      	bne.n	8002b30 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	2203      	movs	r2, #3
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68da      	ldr	r2, [r3, #12]
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b04:	2201      	movs	r2, #1
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f003 0201 	and.w	r2, r3, #1
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d003      	beq.n	8002b70 <HAL_GPIO_Init+0xfc>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b12      	cmp	r3, #18
 8002b6e:	d123      	bne.n	8002bb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	08da      	lsrs	r2, r3, #3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3208      	adds	r2, #8
 8002b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	220f      	movs	r2, #15
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	691a      	ldr	r2, [r3, #16]
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	08da      	lsrs	r2, r3, #3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3208      	adds	r2, #8
 8002bb2:	69b9      	ldr	r1, [r7, #24]
 8002bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 0203 	and.w	r2, r3, #3
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80a2 	beq.w	8002d3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	4b56      	ldr	r3, [pc, #344]	; (8002d58 <HAL_GPIO_Init+0x2e4>)
 8002c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c02:	4a55      	ldr	r2, [pc, #340]	; (8002d58 <HAL_GPIO_Init+0x2e4>)
 8002c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c08:	6453      	str	r3, [r2, #68]	; 0x44
 8002c0a:	4b53      	ldr	r3, [pc, #332]	; (8002d58 <HAL_GPIO_Init+0x2e4>)
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c16:	4a51      	ldr	r2, [pc, #324]	; (8002d5c <HAL_GPIO_Init+0x2e8>)
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	089b      	lsrs	r3, r3, #2
 8002c1c:	3302      	adds	r3, #2
 8002c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	220f      	movs	r2, #15
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a48      	ldr	r2, [pc, #288]	; (8002d60 <HAL_GPIO_Init+0x2ec>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d019      	beq.n	8002c76 <HAL_GPIO_Init+0x202>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a47      	ldr	r2, [pc, #284]	; (8002d64 <HAL_GPIO_Init+0x2f0>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d013      	beq.n	8002c72 <HAL_GPIO_Init+0x1fe>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a46      	ldr	r2, [pc, #280]	; (8002d68 <HAL_GPIO_Init+0x2f4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d00d      	beq.n	8002c6e <HAL_GPIO_Init+0x1fa>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a45      	ldr	r2, [pc, #276]	; (8002d6c <HAL_GPIO_Init+0x2f8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d007      	beq.n	8002c6a <HAL_GPIO_Init+0x1f6>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a44      	ldr	r2, [pc, #272]	; (8002d70 <HAL_GPIO_Init+0x2fc>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d101      	bne.n	8002c66 <HAL_GPIO_Init+0x1f2>
 8002c62:	2304      	movs	r3, #4
 8002c64:	e008      	b.n	8002c78 <HAL_GPIO_Init+0x204>
 8002c66:	2307      	movs	r3, #7
 8002c68:	e006      	b.n	8002c78 <HAL_GPIO_Init+0x204>
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e004      	b.n	8002c78 <HAL_GPIO_Init+0x204>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e002      	b.n	8002c78 <HAL_GPIO_Init+0x204>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <HAL_GPIO_Init+0x204>
 8002c76:	2300      	movs	r3, #0
 8002c78:	69fa      	ldr	r2, [r7, #28]
 8002c7a:	f002 0203 	and.w	r2, r2, #3
 8002c7e:	0092      	lsls	r2, r2, #2
 8002c80:	4093      	lsls	r3, r2
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c88:	4934      	ldr	r1, [pc, #208]	; (8002d5c <HAL_GPIO_Init+0x2e8>)
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	089b      	lsrs	r3, r3, #2
 8002c8e:	3302      	adds	r3, #2
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c96:	4b37      	ldr	r3, [pc, #220]	; (8002d74 <HAL_GPIO_Init+0x300>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cba:	4a2e      	ldr	r2, [pc, #184]	; (8002d74 <HAL_GPIO_Init+0x300>)
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cc0:	4b2c      	ldr	r3, [pc, #176]	; (8002d74 <HAL_GPIO_Init+0x300>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ce4:	4a23      	ldr	r2, [pc, #140]	; (8002d74 <HAL_GPIO_Init+0x300>)
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cea:	4b22      	ldr	r3, [pc, #136]	; (8002d74 <HAL_GPIO_Init+0x300>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d0e:	4a19      	ldr	r2, [pc, #100]	; (8002d74 <HAL_GPIO_Init+0x300>)
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d14:	4b17      	ldr	r3, [pc, #92]	; (8002d74 <HAL_GPIO_Init+0x300>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d38:	4a0e      	ldr	r2, [pc, #56]	; (8002d74 <HAL_GPIO_Init+0x300>)
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	3301      	adds	r3, #1
 8002d42:	61fb      	str	r3, [r7, #28]
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	2b0f      	cmp	r3, #15
 8002d48:	f67f aea2 	bls.w	8002a90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	3724      	adds	r7, #36	; 0x24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40013800 	.word	0x40013800
 8002d60:	40020000 	.word	0x40020000
 8002d64:	40020400 	.word	0x40020400
 8002d68:	40020800 	.word	0x40020800
 8002d6c:	40020c00 	.word	0x40020c00
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40013c00 	.word	0x40013c00

08002d78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	887b      	ldrh	r3, [r7, #2]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
 8002d94:	e001      	b.n	8002d9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d96:	2300      	movs	r3, #0
 8002d98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	807b      	strh	r3, [r7, #2]
 8002db4:	4613      	mov	r3, r2
 8002db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002db8:	787b      	ldrb	r3, [r7, #1]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dbe:	887a      	ldrh	r2, [r7, #2]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dc4:	e003      	b.n	8002dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dc6:	887b      	ldrh	r3, [r7, #2]
 8002dc8:	041a      	lsls	r2, r3, #16
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	619a      	str	r2, [r3, #24]
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
	...

08002ddc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002de6:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002de8:	695a      	ldr	r2, [r3, #20]
 8002dea:	88fb      	ldrh	r3, [r7, #6]
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d006      	beq.n	8002e00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002df2:	4a05      	ldr	r2, [pc, #20]	; (8002e08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002df4:	88fb      	ldrh	r3, [r7, #6]
 8002df6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002df8:	88fb      	ldrh	r3, [r7, #6]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe f97e 	bl	80010fc <HAL_GPIO_EXTI_Callback>
  }
}
 8002e00:	bf00      	nop
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40013c00 	.word	0x40013c00

08002e0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e25b      	b.n	80032d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d075      	beq.n	8002f16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e2a:	4ba3      	ldr	r3, [pc, #652]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d00c      	beq.n	8002e50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e36:	4ba0      	ldr	r3, [pc, #640]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d112      	bne.n	8002e68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e42:	4b9d      	ldr	r3, [pc, #628]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e4e:	d10b      	bne.n	8002e68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e50:	4b99      	ldr	r3, [pc, #612]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d05b      	beq.n	8002f14 <HAL_RCC_OscConfig+0x108>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d157      	bne.n	8002f14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e236      	b.n	80032d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e70:	d106      	bne.n	8002e80 <HAL_RCC_OscConfig+0x74>
 8002e72:	4b91      	ldr	r3, [pc, #580]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a90      	ldr	r2, [pc, #576]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8002e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	e01d      	b.n	8002ebc <HAL_RCC_OscConfig+0xb0>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e88:	d10c      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x98>
 8002e8a:	4b8b      	ldr	r3, [pc, #556]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a8a      	ldr	r2, [pc, #552]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8002e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	4b88      	ldr	r3, [pc, #544]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a87      	ldr	r2, [pc, #540]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8002e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	e00b      	b.n	8002ebc <HAL_RCC_OscConfig+0xb0>
 8002ea4:	4b84      	ldr	r3, [pc, #528]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a83      	ldr	r2, [pc, #524]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8002eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eae:	6013      	str	r3, [r2, #0]
 8002eb0:	4b81      	ldr	r3, [pc, #516]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a80      	ldr	r2, [pc, #512]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8002eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d013      	beq.n	8002eec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7ff fc96 	bl	80027f4 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ecc:	f7ff fc92 	bl	80027f4 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	; 0x64
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e1fb      	b.n	80032d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ede:	4b76      	ldr	r3, [pc, #472]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0xc0>
 8002eea:	e014      	b.n	8002f16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7ff fc82 	bl	80027f4 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ef4:	f7ff fc7e 	bl	80027f4 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b64      	cmp	r3, #100	; 0x64
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e1e7      	b.n	80032d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f06:	4b6c      	ldr	r3, [pc, #432]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0xe8>
 8002f12:	e000      	b.n	8002f16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d063      	beq.n	8002fea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f22:	4b65      	ldr	r3, [pc, #404]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 030c 	and.w	r3, r3, #12
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00b      	beq.n	8002f46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f2e:	4b62      	ldr	r3, [pc, #392]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d11c      	bne.n	8002f74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f3a:	4b5f      	ldr	r3, [pc, #380]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d116      	bne.n	8002f74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f46:	4b5c      	ldr	r3, [pc, #368]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d005      	beq.n	8002f5e <HAL_RCC_OscConfig+0x152>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d001      	beq.n	8002f5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e1bb      	b.n	80032d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5e:	4b56      	ldr	r3, [pc, #344]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4952      	ldr	r1, [pc, #328]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f72:	e03a      	b.n	8002fea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d020      	beq.n	8002fbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f7c:	4b4f      	ldr	r3, [pc, #316]	; (80030bc <HAL_RCC_OscConfig+0x2b0>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f82:	f7ff fc37 	bl	80027f4 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f8a:	f7ff fc33 	bl	80027f4 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e19c      	b.n	80032d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9c:	4b46      	ldr	r3, [pc, #280]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0f0      	beq.n	8002f8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa8:	4b43      	ldr	r3, [pc, #268]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4940      	ldr	r1, [pc, #256]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]
 8002fbc:	e015      	b.n	8002fea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fbe:	4b3f      	ldr	r3, [pc, #252]	; (80030bc <HAL_RCC_OscConfig+0x2b0>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc4:	f7ff fc16 	bl	80027f4 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fcc:	f7ff fc12 	bl	80027f4 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e17b      	b.n	80032d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fde:	4b36      	ldr	r3, [pc, #216]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d030      	beq.n	8003058 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d016      	beq.n	800302c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ffe:	4b30      	ldr	r3, [pc, #192]	; (80030c0 <HAL_RCC_OscConfig+0x2b4>)
 8003000:	2201      	movs	r2, #1
 8003002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003004:	f7ff fbf6 	bl	80027f4 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800300c:	f7ff fbf2 	bl	80027f4 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e15b      	b.n	80032d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301e:	4b26      	ldr	r3, [pc, #152]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8003020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0x200>
 800302a:	e015      	b.n	8003058 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800302c:	4b24      	ldr	r3, [pc, #144]	; (80030c0 <HAL_RCC_OscConfig+0x2b4>)
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003032:	f7ff fbdf 	bl	80027f4 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800303a:	f7ff fbdb 	bl	80027f4 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e144      	b.n	80032d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800304c:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 800304e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f0      	bne.n	800303a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 80a0 	beq.w	80031a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003066:	2300      	movs	r3, #0
 8003068:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800306a:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10f      	bne.n	8003096 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	4a0e      	ldr	r2, [pc, #56]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8003080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003084:	6413      	str	r3, [r2, #64]	; 0x40
 8003086:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <HAL_RCC_OscConfig+0x2ac>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308e:	60bb      	str	r3, [r7, #8]
 8003090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003092:	2301      	movs	r3, #1
 8003094:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003096:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <HAL_RCC_OscConfig+0x2b8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d121      	bne.n	80030e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030a2:	4b08      	ldr	r3, [pc, #32]	; (80030c4 <HAL_RCC_OscConfig+0x2b8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a07      	ldr	r2, [pc, #28]	; (80030c4 <HAL_RCC_OscConfig+0x2b8>)
 80030a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ae:	f7ff fba1 	bl	80027f4 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b4:	e011      	b.n	80030da <HAL_RCC_OscConfig+0x2ce>
 80030b6:	bf00      	nop
 80030b8:	40023800 	.word	0x40023800
 80030bc:	42470000 	.word	0x42470000
 80030c0:	42470e80 	.word	0x42470e80
 80030c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c8:	f7ff fb94 	bl	80027f4 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e0fd      	b.n	80032d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030da:	4b81      	ldr	r3, [pc, #516]	; (80032e0 <HAL_RCC_OscConfig+0x4d4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d106      	bne.n	80030fc <HAL_RCC_OscConfig+0x2f0>
 80030ee:	4b7d      	ldr	r3, [pc, #500]	; (80032e4 <HAL_RCC_OscConfig+0x4d8>)
 80030f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f2:	4a7c      	ldr	r2, [pc, #496]	; (80032e4 <HAL_RCC_OscConfig+0x4d8>)
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	6713      	str	r3, [r2, #112]	; 0x70
 80030fa:	e01c      	b.n	8003136 <HAL_RCC_OscConfig+0x32a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2b05      	cmp	r3, #5
 8003102:	d10c      	bne.n	800311e <HAL_RCC_OscConfig+0x312>
 8003104:	4b77      	ldr	r3, [pc, #476]	; (80032e4 <HAL_RCC_OscConfig+0x4d8>)
 8003106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003108:	4a76      	ldr	r2, [pc, #472]	; (80032e4 <HAL_RCC_OscConfig+0x4d8>)
 800310a:	f043 0304 	orr.w	r3, r3, #4
 800310e:	6713      	str	r3, [r2, #112]	; 0x70
 8003110:	4b74      	ldr	r3, [pc, #464]	; (80032e4 <HAL_RCC_OscConfig+0x4d8>)
 8003112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003114:	4a73      	ldr	r2, [pc, #460]	; (80032e4 <HAL_RCC_OscConfig+0x4d8>)
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	6713      	str	r3, [r2, #112]	; 0x70
 800311c:	e00b      	b.n	8003136 <HAL_RCC_OscConfig+0x32a>
 800311e:	4b71      	ldr	r3, [pc, #452]	; (80032e4 <HAL_RCC_OscConfig+0x4d8>)
 8003120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003122:	4a70      	ldr	r2, [pc, #448]	; (80032e4 <HAL_RCC_OscConfig+0x4d8>)
 8003124:	f023 0301 	bic.w	r3, r3, #1
 8003128:	6713      	str	r3, [r2, #112]	; 0x70
 800312a:	4b6e      	ldr	r3, [pc, #440]	; (80032e4 <HAL_RCC_OscConfig+0x4d8>)
 800312c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312e:	4a6d      	ldr	r2, [pc, #436]	; (80032e4 <HAL_RCC_OscConfig+0x4d8>)
 8003130:	f023 0304 	bic.w	r3, r3, #4
 8003134:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d015      	beq.n	800316a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313e:	f7ff fb59 	bl	80027f4 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003144:	e00a      	b.n	800315c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003146:	f7ff fb55 	bl	80027f4 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	f241 3288 	movw	r2, #5000	; 0x1388
 8003154:	4293      	cmp	r3, r2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e0bc      	b.n	80032d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800315c:	4b61      	ldr	r3, [pc, #388]	; (80032e4 <HAL_RCC_OscConfig+0x4d8>)
 800315e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0ee      	beq.n	8003146 <HAL_RCC_OscConfig+0x33a>
 8003168:	e014      	b.n	8003194 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316a:	f7ff fb43 	bl	80027f4 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003170:	e00a      	b.n	8003188 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003172:	f7ff fb3f 	bl	80027f4 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003180:	4293      	cmp	r3, r2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e0a6      	b.n	80032d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003188:	4b56      	ldr	r3, [pc, #344]	; (80032e4 <HAL_RCC_OscConfig+0x4d8>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1ee      	bne.n	8003172 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003194:	7dfb      	ldrb	r3, [r7, #23]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d105      	bne.n	80031a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800319a:	4b52      	ldr	r3, [pc, #328]	; (80032e4 <HAL_RCC_OscConfig+0x4d8>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	4a51      	ldr	r2, [pc, #324]	; (80032e4 <HAL_RCC_OscConfig+0x4d8>)
 80031a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 8092 	beq.w	80032d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031b0:	4b4c      	ldr	r3, [pc, #304]	; (80032e4 <HAL_RCC_OscConfig+0x4d8>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 030c 	and.w	r3, r3, #12
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d05c      	beq.n	8003276 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d141      	bne.n	8003248 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c4:	4b48      	ldr	r3, [pc, #288]	; (80032e8 <HAL_RCC_OscConfig+0x4dc>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ca:	f7ff fb13 	bl	80027f4 <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031d2:	f7ff fb0f 	bl	80027f4 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e078      	b.n	80032d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e4:	4b3f      	ldr	r3, [pc, #252]	; (80032e4 <HAL_RCC_OscConfig+0x4d8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f0      	bne.n	80031d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	431a      	orrs	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	019b      	lsls	r3, r3, #6
 8003200:	431a      	orrs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003206:	085b      	lsrs	r3, r3, #1
 8003208:	3b01      	subs	r3, #1
 800320a:	041b      	lsls	r3, r3, #16
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003212:	061b      	lsls	r3, r3, #24
 8003214:	4933      	ldr	r1, [pc, #204]	; (80032e4 <HAL_RCC_OscConfig+0x4d8>)
 8003216:	4313      	orrs	r3, r2
 8003218:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800321a:	4b33      	ldr	r3, [pc, #204]	; (80032e8 <HAL_RCC_OscConfig+0x4dc>)
 800321c:	2201      	movs	r2, #1
 800321e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003220:	f7ff fae8 	bl	80027f4 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003228:	f7ff fae4 	bl	80027f4 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e04d      	b.n	80032d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800323a:	4b2a      	ldr	r3, [pc, #168]	; (80032e4 <HAL_RCC_OscConfig+0x4d8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0f0      	beq.n	8003228 <HAL_RCC_OscConfig+0x41c>
 8003246:	e045      	b.n	80032d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003248:	4b27      	ldr	r3, [pc, #156]	; (80032e8 <HAL_RCC_OscConfig+0x4dc>)
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324e:	f7ff fad1 	bl	80027f4 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003256:	f7ff facd 	bl	80027f4 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e036      	b.n	80032d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003268:	4b1e      	ldr	r3, [pc, #120]	; (80032e4 <HAL_RCC_OscConfig+0x4d8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1f0      	bne.n	8003256 <HAL_RCC_OscConfig+0x44a>
 8003274:	e02e      	b.n	80032d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e029      	b.n	80032d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003282:	4b18      	ldr	r3, [pc, #96]	; (80032e4 <HAL_RCC_OscConfig+0x4d8>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	429a      	cmp	r2, r3
 8003294:	d11c      	bne.n	80032d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d115      	bne.n	80032d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032aa:	4013      	ands	r3, r2
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d10d      	bne.n	80032d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032be:	429a      	cmp	r2, r3
 80032c0:	d106      	bne.n	80032d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d001      	beq.n	80032d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40007000 	.word	0x40007000
 80032e4:	40023800 	.word	0x40023800
 80032e8:	42470060 	.word	0x42470060

080032ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0cc      	b.n	800349a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003300:	4b68      	ldr	r3, [pc, #416]	; (80034a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 030f 	and.w	r3, r3, #15
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d90c      	bls.n	8003328 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330e:	4b65      	ldr	r3, [pc, #404]	; (80034a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003316:	4b63      	ldr	r3, [pc, #396]	; (80034a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e0b8      	b.n	800349a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d020      	beq.n	8003376 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003340:	4b59      	ldr	r3, [pc, #356]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	4a58      	ldr	r2, [pc, #352]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003346:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800334a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0308 	and.w	r3, r3, #8
 8003354:	2b00      	cmp	r3, #0
 8003356:	d005      	beq.n	8003364 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003358:	4b53      	ldr	r3, [pc, #332]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	4a52      	ldr	r2, [pc, #328]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 800335e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003362:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003364:	4b50      	ldr	r3, [pc, #320]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	494d      	ldr	r1, [pc, #308]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	4313      	orrs	r3, r2
 8003374:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d044      	beq.n	800340c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d107      	bne.n	800339a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338a:	4b47      	ldr	r3, [pc, #284]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d119      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e07f      	b.n	800349a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d003      	beq.n	80033aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d107      	bne.n	80033ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033aa:	4b3f      	ldr	r3, [pc, #252]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d109      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e06f      	b.n	800349a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ba:	4b3b      	ldr	r3, [pc, #236]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e067      	b.n	800349a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ca:	4b37      	ldr	r3, [pc, #220]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f023 0203 	bic.w	r2, r3, #3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	4934      	ldr	r1, [pc, #208]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033dc:	f7ff fa0a 	bl	80027f4 <HAL_GetTick>
 80033e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e2:	e00a      	b.n	80033fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e4:	f7ff fa06 	bl	80027f4 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e04f      	b.n	800349a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fa:	4b2b      	ldr	r3, [pc, #172]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 020c 	and.w	r2, r3, #12
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	429a      	cmp	r2, r3
 800340a:	d1eb      	bne.n	80033e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800340c:	4b25      	ldr	r3, [pc, #148]	; (80034a4 <HAL_RCC_ClockConfig+0x1b8>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d20c      	bcs.n	8003434 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341a:	4b22      	ldr	r3, [pc, #136]	; (80034a4 <HAL_RCC_ClockConfig+0x1b8>)
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003422:	4b20      	ldr	r3, [pc, #128]	; (80034a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d001      	beq.n	8003434 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e032      	b.n	800349a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d008      	beq.n	8003452 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003440:	4b19      	ldr	r3, [pc, #100]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	4916      	ldr	r1, [pc, #88]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 800344e:	4313      	orrs	r3, r2
 8003450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d009      	beq.n	8003472 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800345e:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	490e      	ldr	r1, [pc, #56]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	4313      	orrs	r3, r2
 8003470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003472:	f000 f821 	bl	80034b8 <HAL_RCC_GetSysClockFreq>
 8003476:	4601      	mov	r1, r0
 8003478:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	091b      	lsrs	r3, r3, #4
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	4a0a      	ldr	r2, [pc, #40]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003484:	5cd3      	ldrb	r3, [r2, r3]
 8003486:	fa21 f303 	lsr.w	r3, r1, r3
 800348a:	4a09      	ldr	r2, [pc, #36]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800348c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800348e:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff f96a 	bl	800276c <HAL_InitTick>

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40023c00 	.word	0x40023c00
 80034a8:	40023800 	.word	0x40023800
 80034ac:	0800e34c 	.word	0x0800e34c
 80034b0:	200000d4 	.word	0x200000d4
 80034b4:	200000d8 	.word	0x200000d8

080034b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	607b      	str	r3, [r7, #4]
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	2300      	movs	r3, #0
 80034c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034ce:	4b63      	ldr	r3, [pc, #396]	; (800365c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 030c 	and.w	r3, r3, #12
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d007      	beq.n	80034ea <HAL_RCC_GetSysClockFreq+0x32>
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d008      	beq.n	80034f0 <HAL_RCC_GetSysClockFreq+0x38>
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f040 80b4 	bne.w	800364c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034e4:	4b5e      	ldr	r3, [pc, #376]	; (8003660 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80034e6:	60bb      	str	r3, [r7, #8]
       break;
 80034e8:	e0b3      	b.n	8003652 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ea:	4b5e      	ldr	r3, [pc, #376]	; (8003664 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80034ec:	60bb      	str	r3, [r7, #8]
      break;
 80034ee:	e0b0      	b.n	8003652 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034f0:	4b5a      	ldr	r3, [pc, #360]	; (800365c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034fa:	4b58      	ldr	r3, [pc, #352]	; (800365c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d04a      	beq.n	800359c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003506:	4b55      	ldr	r3, [pc, #340]	; (800365c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	099b      	lsrs	r3, r3, #6
 800350c:	f04f 0400 	mov.w	r4, #0
 8003510:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	ea03 0501 	and.w	r5, r3, r1
 800351c:	ea04 0602 	and.w	r6, r4, r2
 8003520:	4629      	mov	r1, r5
 8003522:	4632      	mov	r2, r6
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	f04f 0400 	mov.w	r4, #0
 800352c:	0154      	lsls	r4, r2, #5
 800352e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003532:	014b      	lsls	r3, r1, #5
 8003534:	4619      	mov	r1, r3
 8003536:	4622      	mov	r2, r4
 8003538:	1b49      	subs	r1, r1, r5
 800353a:	eb62 0206 	sbc.w	r2, r2, r6
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	f04f 0400 	mov.w	r4, #0
 8003546:	0194      	lsls	r4, r2, #6
 8003548:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800354c:	018b      	lsls	r3, r1, #6
 800354e:	1a5b      	subs	r3, r3, r1
 8003550:	eb64 0402 	sbc.w	r4, r4, r2
 8003554:	f04f 0100 	mov.w	r1, #0
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	00e2      	lsls	r2, r4, #3
 800355e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003562:	00d9      	lsls	r1, r3, #3
 8003564:	460b      	mov	r3, r1
 8003566:	4614      	mov	r4, r2
 8003568:	195b      	adds	r3, r3, r5
 800356a:	eb44 0406 	adc.w	r4, r4, r6
 800356e:	f04f 0100 	mov.w	r1, #0
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	0262      	lsls	r2, r4, #9
 8003578:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800357c:	0259      	lsls	r1, r3, #9
 800357e:	460b      	mov	r3, r1
 8003580:	4614      	mov	r4, r2
 8003582:	4618      	mov	r0, r3
 8003584:	4621      	mov	r1, r4
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f04f 0400 	mov.w	r4, #0
 800358c:	461a      	mov	r2, r3
 800358e:	4623      	mov	r3, r4
 8003590:	f7fc fe8e 	bl	80002b0 <__aeabi_uldivmod>
 8003594:	4603      	mov	r3, r0
 8003596:	460c      	mov	r4, r1
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	e049      	b.n	8003630 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800359c:	4b2f      	ldr	r3, [pc, #188]	; (800365c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	099b      	lsrs	r3, r3, #6
 80035a2:	f04f 0400 	mov.w	r4, #0
 80035a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	ea03 0501 	and.w	r5, r3, r1
 80035b2:	ea04 0602 	and.w	r6, r4, r2
 80035b6:	4629      	mov	r1, r5
 80035b8:	4632      	mov	r2, r6
 80035ba:	f04f 0300 	mov.w	r3, #0
 80035be:	f04f 0400 	mov.w	r4, #0
 80035c2:	0154      	lsls	r4, r2, #5
 80035c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035c8:	014b      	lsls	r3, r1, #5
 80035ca:	4619      	mov	r1, r3
 80035cc:	4622      	mov	r2, r4
 80035ce:	1b49      	subs	r1, r1, r5
 80035d0:	eb62 0206 	sbc.w	r2, r2, r6
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	f04f 0400 	mov.w	r4, #0
 80035dc:	0194      	lsls	r4, r2, #6
 80035de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80035e2:	018b      	lsls	r3, r1, #6
 80035e4:	1a5b      	subs	r3, r3, r1
 80035e6:	eb64 0402 	sbc.w	r4, r4, r2
 80035ea:	f04f 0100 	mov.w	r1, #0
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	00e2      	lsls	r2, r4, #3
 80035f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80035f8:	00d9      	lsls	r1, r3, #3
 80035fa:	460b      	mov	r3, r1
 80035fc:	4614      	mov	r4, r2
 80035fe:	195b      	adds	r3, r3, r5
 8003600:	eb44 0406 	adc.w	r4, r4, r6
 8003604:	f04f 0100 	mov.w	r1, #0
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	02a2      	lsls	r2, r4, #10
 800360e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003612:	0299      	lsls	r1, r3, #10
 8003614:	460b      	mov	r3, r1
 8003616:	4614      	mov	r4, r2
 8003618:	4618      	mov	r0, r3
 800361a:	4621      	mov	r1, r4
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f04f 0400 	mov.w	r4, #0
 8003622:	461a      	mov	r2, r3
 8003624:	4623      	mov	r3, r4
 8003626:	f7fc fe43 	bl	80002b0 <__aeabi_uldivmod>
 800362a:	4603      	mov	r3, r0
 800362c:	460c      	mov	r4, r1
 800362e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003630:	4b0a      	ldr	r3, [pc, #40]	; (800365c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	0c1b      	lsrs	r3, r3, #16
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	3301      	adds	r3, #1
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	fbb2 f3f3 	udiv	r3, r2, r3
 8003648:	60bb      	str	r3, [r7, #8]
      break;
 800364a:	e002      	b.n	8003652 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800364c:	4b04      	ldr	r3, [pc, #16]	; (8003660 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800364e:	60bb      	str	r3, [r7, #8]
      break;
 8003650:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003652:	68bb      	ldr	r3, [r7, #8]
}
 8003654:	4618      	mov	r0, r3
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800365c:	40023800 	.word	0x40023800
 8003660:	00f42400 	.word	0x00f42400
 8003664:	007a1200 	.word	0x007a1200

08003668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800366c:	4b03      	ldr	r3, [pc, #12]	; (800367c <HAL_RCC_GetHCLKFreq+0x14>)
 800366e:	681b      	ldr	r3, [r3, #0]
}
 8003670:	4618      	mov	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	200000d4 	.word	0x200000d4

08003680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003684:	f7ff fff0 	bl	8003668 <HAL_RCC_GetHCLKFreq>
 8003688:	4601      	mov	r1, r0
 800368a:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	0a9b      	lsrs	r3, r3, #10
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	4a03      	ldr	r2, [pc, #12]	; (80036a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003696:	5cd3      	ldrb	r3, [r2, r3]
 8003698:	fa21 f303 	lsr.w	r3, r1, r3
}
 800369c:	4618      	mov	r0, r3
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40023800 	.word	0x40023800
 80036a4:	0800e35c 	.word	0x0800e35c

080036a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036ac:	f7ff ffdc 	bl	8003668 <HAL_RCC_GetHCLKFreq>
 80036b0:	4601      	mov	r1, r0
 80036b2:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	0b5b      	lsrs	r3, r3, #13
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	4a03      	ldr	r2, [pc, #12]	; (80036cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036be:	5cd3      	ldrb	r3, [r2, r3]
 80036c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40023800 	.word	0x40023800
 80036cc:	0800e35c 	.word	0x0800e35c

080036d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e056      	b.n	8003790 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d106      	bne.n	8003702 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7fd fda9 	bl	8001254 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2202      	movs	r2, #2
 8003706:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003718:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	431a      	orrs	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	ea42 0103 	orr.w	r1, r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	0c1b      	lsrs	r3, r3, #16
 8003760:	f003 0104 	and.w	r1, r3, #4
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	69da      	ldr	r2, [r3, #28]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800377e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b08c      	sub	sp, #48	; 0x30
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80037a6:	2301      	movs	r3, #1
 80037a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_SPI_TransmitReceive+0x26>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e18a      	b.n	8003ad4 <HAL_SPI_TransmitReceive+0x33c>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037c6:	f7ff f815 	bl	80027f4 <HAL_GetTick>
 80037ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80037dc:	887b      	ldrh	r3, [r7, #2]
 80037de:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d00f      	beq.n	8003808 <HAL_SPI_TransmitReceive+0x70>
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ee:	d107      	bne.n	8003800 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d103      	bne.n	8003800 <HAL_SPI_TransmitReceive+0x68>
 80037f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d003      	beq.n	8003808 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003800:	2302      	movs	r3, #2
 8003802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003806:	e15b      	b.n	8003ac0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d005      	beq.n	800381a <HAL_SPI_TransmitReceive+0x82>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_SPI_TransmitReceive+0x82>
 8003814:	887b      	ldrh	r3, [r7, #2]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d103      	bne.n	8003822 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003820:	e14e      	b.n	8003ac0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b04      	cmp	r3, #4
 800382c:	d003      	beq.n	8003836 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2205      	movs	r2, #5
 8003832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	887a      	ldrh	r2, [r7, #2]
 8003846:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	887a      	ldrh	r2, [r7, #2]
 800384c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	887a      	ldrh	r2, [r7, #2]
 8003858:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	887a      	ldrh	r2, [r7, #2]
 800385e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003876:	2b40      	cmp	r3, #64	; 0x40
 8003878:	d007      	beq.n	800388a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003888:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003892:	d178      	bne.n	8003986 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <HAL_SPI_TransmitReceive+0x10a>
 800389c:	8b7b      	ldrh	r3, [r7, #26]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d166      	bne.n	8003970 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	881a      	ldrh	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	1c9a      	adds	r2, r3, #2
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038c6:	e053      	b.n	8003970 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d11b      	bne.n	800390e <HAL_SPI_TransmitReceive+0x176>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d016      	beq.n	800390e <HAL_SPI_TransmitReceive+0x176>
 80038e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d113      	bne.n	800390e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	881a      	ldrh	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	1c9a      	adds	r2, r3, #2
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003900:	b29b      	uxth	r3, r3
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b01      	cmp	r3, #1
 800391a:	d119      	bne.n	8003950 <HAL_SPI_TransmitReceive+0x1b8>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003920:	b29b      	uxth	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d014      	beq.n	8003950 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003930:	b292      	uxth	r2, r2
 8003932:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003938:	1c9a      	adds	r2, r3, #2
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003942:	b29b      	uxth	r3, r3
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800394c:	2301      	movs	r3, #1
 800394e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003950:	f7fe ff50 	bl	80027f4 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800395c:	429a      	cmp	r2, r3
 800395e:	d807      	bhi.n	8003970 <HAL_SPI_TransmitReceive+0x1d8>
 8003960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003966:	d003      	beq.n	8003970 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800396e:	e0a7      	b.n	8003ac0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003974:	b29b      	uxth	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1a6      	bne.n	80038c8 <HAL_SPI_TransmitReceive+0x130>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800397e:	b29b      	uxth	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1a1      	bne.n	80038c8 <HAL_SPI_TransmitReceive+0x130>
 8003984:	e07c      	b.n	8003a80 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <HAL_SPI_TransmitReceive+0x1fc>
 800398e:	8b7b      	ldrh	r3, [r7, #26]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d16b      	bne.n	8003a6c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	330c      	adds	r3, #12
 800399e:	7812      	ldrb	r2, [r2, #0]
 80039a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039ba:	e057      	b.n	8003a6c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d11c      	bne.n	8003a04 <HAL_SPI_TransmitReceive+0x26c>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d017      	beq.n	8003a04 <HAL_SPI_TransmitReceive+0x26c>
 80039d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d114      	bne.n	8003a04 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	330c      	adds	r3, #12
 80039e4:	7812      	ldrb	r2, [r2, #0]
 80039e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d119      	bne.n	8003a46 <HAL_SPI_TransmitReceive+0x2ae>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d014      	beq.n	8003a46 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a42:	2301      	movs	r3, #1
 8003a44:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a46:	f7fe fed5 	bl	80027f4 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d803      	bhi.n	8003a5e <HAL_SPI_TransmitReceive+0x2c6>
 8003a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5c:	d102      	bne.n	8003a64 <HAL_SPI_TransmitReceive+0x2cc>
 8003a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d103      	bne.n	8003a6c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a6a:	e029      	b.n	8003ac0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1a2      	bne.n	80039bc <HAL_SPI_TransmitReceive+0x224>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d19d      	bne.n	80039bc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 f893 	bl	8003bb0 <SPI_EndRxTxTransaction>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d006      	beq.n	8003a9e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a9c:	e010      	b.n	8003ac0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10b      	bne.n	8003abe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	617b      	str	r3, [r7, #20]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	617b      	str	r3, [r7, #20]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	617b      	str	r3, [r7, #20]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	e000      	b.n	8003ac0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003abe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ad0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3730      	adds	r7, #48	; 0x30
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aec:	e04c      	b.n	8003b88 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af4:	d048      	beq.n	8003b88 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003af6:	f7fe fe7d 	bl	80027f4 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d902      	bls.n	8003b0c <SPI_WaitFlagStateUntilTimeout+0x30>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d13d      	bne.n	8003b88 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b24:	d111      	bne.n	8003b4a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b2e:	d004      	beq.n	8003b3a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b38:	d107      	bne.n	8003b4a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b48:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b52:	d10f      	bne.n	8003b74 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b72:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e00f      	b.n	8003ba8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	4013      	ands	r3, r2
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	bf0c      	ite	eq
 8003b98:	2301      	moveq	r3, #1
 8003b9a:	2300      	movne	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d1a3      	bne.n	8003aee <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003bbc:	4b1b      	ldr	r3, [pc, #108]	; (8003c2c <SPI_EndRxTxTransaction+0x7c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a1b      	ldr	r2, [pc, #108]	; (8003c30 <SPI_EndRxTxTransaction+0x80>)
 8003bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc6:	0d5b      	lsrs	r3, r3, #21
 8003bc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bcc:	fb02 f303 	mul.w	r3, r2, r3
 8003bd0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bda:	d112      	bne.n	8003c02 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2200      	movs	r2, #0
 8003be4:	2180      	movs	r1, #128	; 0x80
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f7ff ff78 	bl	8003adc <SPI_WaitFlagStateUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d016      	beq.n	8003c20 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf6:	f043 0220 	orr.w	r2, r3, #32
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e00f      	b.n	8003c22 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00a      	beq.n	8003c1e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c18:	2b80      	cmp	r3, #128	; 0x80
 8003c1a:	d0f2      	beq.n	8003c02 <SPI_EndRxTxTransaction+0x52>
 8003c1c:	e000      	b.n	8003c20 <SPI_EndRxTxTransaction+0x70>
        break;
 8003c1e:	bf00      	nop
  }

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3718      	adds	r7, #24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	200000d4 	.word	0x200000d4
 8003c30:	165e9f81 	.word	0x165e9f81

08003c34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e03f      	b.n	8003cc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7fd fb42 	bl	80012e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2224      	movs	r2, #36	; 0x24
 8003c64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f90b 	bl	8003e94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695a      	ldr	r2, [r3, #20]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b088      	sub	sp, #32
 8003cd2:	af02      	add	r7, sp, #8
 8003cd4:	60f8      	str	r0, [r7, #12]
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	603b      	str	r3, [r7, #0]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	f040 8083 	bne.w	8003df6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <HAL_UART_Transmit+0x2e>
 8003cf6:	88fb      	ldrh	r3, [r7, #6]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e07b      	b.n	8003df8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d101      	bne.n	8003d0e <HAL_UART_Transmit+0x40>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e074      	b.n	8003df8 <HAL_UART_Transmit+0x12a>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2221      	movs	r2, #33	; 0x21
 8003d20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003d24:	f7fe fd66 	bl	80027f4 <HAL_GetTick>
 8003d28:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	88fa      	ldrh	r2, [r7, #6]
 8003d2e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	88fa      	ldrh	r2, [r7, #6]
 8003d34:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003d3e:	e042      	b.n	8003dc6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d56:	d122      	bne.n	8003d9e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2180      	movs	r1, #128	; 0x80
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 f84c 	bl	8003e00 <UART_WaitOnFlagUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e042      	b.n	8003df8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d84:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d103      	bne.n	8003d96 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	3302      	adds	r3, #2
 8003d92:	60bb      	str	r3, [r7, #8]
 8003d94:	e017      	b.n	8003dc6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	60bb      	str	r3, [r7, #8]
 8003d9c:	e013      	b.n	8003dc6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2200      	movs	r2, #0
 8003da6:	2180      	movs	r1, #128	; 0x80
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f829 	bl	8003e00 <UART_WaitOnFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e01f      	b.n	8003df8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	60ba      	str	r2, [r7, #8]
 8003dbe:	781a      	ldrb	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1b7      	bne.n	8003d40 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	2140      	movs	r1, #64	; 0x40
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 f810 	bl	8003e00 <UART_WaitOnFlagUntilTimeout>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e006      	b.n	8003df8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	e000      	b.n	8003df8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003df6:	2302      	movs	r3, #2
  }
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e10:	e02c      	b.n	8003e6c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e18:	d028      	beq.n	8003e6c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d007      	beq.n	8003e30 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e20:	f7fe fce8 	bl	80027f4 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d21d      	bcs.n	8003e6c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e3e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695a      	ldr	r2, [r3, #20]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0201 	bic.w	r2, r2, #1
 8003e4e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e00f      	b.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	4013      	ands	r3, r2
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	bf0c      	ite	eq
 8003e7c:	2301      	moveq	r3, #1
 8003e7e:	2300      	movne	r3, #0
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	461a      	mov	r2, r3
 8003e84:	79fb      	ldrb	r3, [r7, #7]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d0c3      	beq.n	8003e12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e98:	b085      	sub	sp, #20
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ed6:	f023 030c 	bic.w	r3, r3, #12
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6812      	ldr	r2, [r2, #0]
 8003ede:	68f9      	ldr	r1, [r7, #12]
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f02:	f040 818b 	bne.w	800421c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4ac1      	ldr	r2, [pc, #772]	; (8004210 <UART_SetConfig+0x37c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d005      	beq.n	8003f1c <UART_SetConfig+0x88>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4abf      	ldr	r2, [pc, #764]	; (8004214 <UART_SetConfig+0x380>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	f040 80bd 	bne.w	8004096 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f1c:	f7ff fbc4 	bl	80036a8 <HAL_RCC_GetPCLK2Freq>
 8003f20:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	461d      	mov	r5, r3
 8003f26:	f04f 0600 	mov.w	r6, #0
 8003f2a:	46a8      	mov	r8, r5
 8003f2c:	46b1      	mov	r9, r6
 8003f2e:	eb18 0308 	adds.w	r3, r8, r8
 8003f32:	eb49 0409 	adc.w	r4, r9, r9
 8003f36:	4698      	mov	r8, r3
 8003f38:	46a1      	mov	r9, r4
 8003f3a:	eb18 0805 	adds.w	r8, r8, r5
 8003f3e:	eb49 0906 	adc.w	r9, r9, r6
 8003f42:	f04f 0100 	mov.w	r1, #0
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f4e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f52:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f56:	4688      	mov	r8, r1
 8003f58:	4691      	mov	r9, r2
 8003f5a:	eb18 0005 	adds.w	r0, r8, r5
 8003f5e:	eb49 0106 	adc.w	r1, r9, r6
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	461d      	mov	r5, r3
 8003f68:	f04f 0600 	mov.w	r6, #0
 8003f6c:	196b      	adds	r3, r5, r5
 8003f6e:	eb46 0406 	adc.w	r4, r6, r6
 8003f72:	461a      	mov	r2, r3
 8003f74:	4623      	mov	r3, r4
 8003f76:	f7fc f99b 	bl	80002b0 <__aeabi_uldivmod>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	460c      	mov	r4, r1
 8003f7e:	461a      	mov	r2, r3
 8003f80:	4ba5      	ldr	r3, [pc, #660]	; (8004218 <UART_SetConfig+0x384>)
 8003f82:	fba3 2302 	umull	r2, r3, r3, r2
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	461d      	mov	r5, r3
 8003f90:	f04f 0600 	mov.w	r6, #0
 8003f94:	46a9      	mov	r9, r5
 8003f96:	46b2      	mov	sl, r6
 8003f98:	eb19 0309 	adds.w	r3, r9, r9
 8003f9c:	eb4a 040a 	adc.w	r4, sl, sl
 8003fa0:	4699      	mov	r9, r3
 8003fa2:	46a2      	mov	sl, r4
 8003fa4:	eb19 0905 	adds.w	r9, r9, r5
 8003fa8:	eb4a 0a06 	adc.w	sl, sl, r6
 8003fac:	f04f 0100 	mov.w	r1, #0
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fc0:	4689      	mov	r9, r1
 8003fc2:	4692      	mov	sl, r2
 8003fc4:	eb19 0005 	adds.w	r0, r9, r5
 8003fc8:	eb4a 0106 	adc.w	r1, sl, r6
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	461d      	mov	r5, r3
 8003fd2:	f04f 0600 	mov.w	r6, #0
 8003fd6:	196b      	adds	r3, r5, r5
 8003fd8:	eb46 0406 	adc.w	r4, r6, r6
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4623      	mov	r3, r4
 8003fe0:	f7fc f966 	bl	80002b0 <__aeabi_uldivmod>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	460c      	mov	r4, r1
 8003fe8:	461a      	mov	r2, r3
 8003fea:	4b8b      	ldr	r3, [pc, #556]	; (8004218 <UART_SetConfig+0x384>)
 8003fec:	fba3 1302 	umull	r1, r3, r3, r2
 8003ff0:	095b      	lsrs	r3, r3, #5
 8003ff2:	2164      	movs	r1, #100	; 0x64
 8003ff4:	fb01 f303 	mul.w	r3, r1, r3
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	3332      	adds	r3, #50	; 0x32
 8003ffe:	4a86      	ldr	r2, [pc, #536]	; (8004218 <UART_SetConfig+0x384>)
 8004000:	fba2 2303 	umull	r2, r3, r2, r3
 8004004:	095b      	lsrs	r3, r3, #5
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800400c:	4498      	add	r8, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	461d      	mov	r5, r3
 8004012:	f04f 0600 	mov.w	r6, #0
 8004016:	46a9      	mov	r9, r5
 8004018:	46b2      	mov	sl, r6
 800401a:	eb19 0309 	adds.w	r3, r9, r9
 800401e:	eb4a 040a 	adc.w	r4, sl, sl
 8004022:	4699      	mov	r9, r3
 8004024:	46a2      	mov	sl, r4
 8004026:	eb19 0905 	adds.w	r9, r9, r5
 800402a:	eb4a 0a06 	adc.w	sl, sl, r6
 800402e:	f04f 0100 	mov.w	r1, #0
 8004032:	f04f 0200 	mov.w	r2, #0
 8004036:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800403a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800403e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004042:	4689      	mov	r9, r1
 8004044:	4692      	mov	sl, r2
 8004046:	eb19 0005 	adds.w	r0, r9, r5
 800404a:	eb4a 0106 	adc.w	r1, sl, r6
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	461d      	mov	r5, r3
 8004054:	f04f 0600 	mov.w	r6, #0
 8004058:	196b      	adds	r3, r5, r5
 800405a:	eb46 0406 	adc.w	r4, r6, r6
 800405e:	461a      	mov	r2, r3
 8004060:	4623      	mov	r3, r4
 8004062:	f7fc f925 	bl	80002b0 <__aeabi_uldivmod>
 8004066:	4603      	mov	r3, r0
 8004068:	460c      	mov	r4, r1
 800406a:	461a      	mov	r2, r3
 800406c:	4b6a      	ldr	r3, [pc, #424]	; (8004218 <UART_SetConfig+0x384>)
 800406e:	fba3 1302 	umull	r1, r3, r3, r2
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	2164      	movs	r1, #100	; 0x64
 8004076:	fb01 f303 	mul.w	r3, r1, r3
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	3332      	adds	r3, #50	; 0x32
 8004080:	4a65      	ldr	r2, [pc, #404]	; (8004218 <UART_SetConfig+0x384>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	f003 0207 	and.w	r2, r3, #7
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4442      	add	r2, r8
 8004092:	609a      	str	r2, [r3, #8]
 8004094:	e26f      	b.n	8004576 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004096:	f7ff faf3 	bl	8003680 <HAL_RCC_GetPCLK1Freq>
 800409a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	461d      	mov	r5, r3
 80040a0:	f04f 0600 	mov.w	r6, #0
 80040a4:	46a8      	mov	r8, r5
 80040a6:	46b1      	mov	r9, r6
 80040a8:	eb18 0308 	adds.w	r3, r8, r8
 80040ac:	eb49 0409 	adc.w	r4, r9, r9
 80040b0:	4698      	mov	r8, r3
 80040b2:	46a1      	mov	r9, r4
 80040b4:	eb18 0805 	adds.w	r8, r8, r5
 80040b8:	eb49 0906 	adc.w	r9, r9, r6
 80040bc:	f04f 0100 	mov.w	r1, #0
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040c8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040cc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040d0:	4688      	mov	r8, r1
 80040d2:	4691      	mov	r9, r2
 80040d4:	eb18 0005 	adds.w	r0, r8, r5
 80040d8:	eb49 0106 	adc.w	r1, r9, r6
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	461d      	mov	r5, r3
 80040e2:	f04f 0600 	mov.w	r6, #0
 80040e6:	196b      	adds	r3, r5, r5
 80040e8:	eb46 0406 	adc.w	r4, r6, r6
 80040ec:	461a      	mov	r2, r3
 80040ee:	4623      	mov	r3, r4
 80040f0:	f7fc f8de 	bl	80002b0 <__aeabi_uldivmod>
 80040f4:	4603      	mov	r3, r0
 80040f6:	460c      	mov	r4, r1
 80040f8:	461a      	mov	r2, r3
 80040fa:	4b47      	ldr	r3, [pc, #284]	; (8004218 <UART_SetConfig+0x384>)
 80040fc:	fba3 2302 	umull	r2, r3, r3, r2
 8004100:	095b      	lsrs	r3, r3, #5
 8004102:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	461d      	mov	r5, r3
 800410a:	f04f 0600 	mov.w	r6, #0
 800410e:	46a9      	mov	r9, r5
 8004110:	46b2      	mov	sl, r6
 8004112:	eb19 0309 	adds.w	r3, r9, r9
 8004116:	eb4a 040a 	adc.w	r4, sl, sl
 800411a:	4699      	mov	r9, r3
 800411c:	46a2      	mov	sl, r4
 800411e:	eb19 0905 	adds.w	r9, r9, r5
 8004122:	eb4a 0a06 	adc.w	sl, sl, r6
 8004126:	f04f 0100 	mov.w	r1, #0
 800412a:	f04f 0200 	mov.w	r2, #0
 800412e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004132:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004136:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800413a:	4689      	mov	r9, r1
 800413c:	4692      	mov	sl, r2
 800413e:	eb19 0005 	adds.w	r0, r9, r5
 8004142:	eb4a 0106 	adc.w	r1, sl, r6
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	461d      	mov	r5, r3
 800414c:	f04f 0600 	mov.w	r6, #0
 8004150:	196b      	adds	r3, r5, r5
 8004152:	eb46 0406 	adc.w	r4, r6, r6
 8004156:	461a      	mov	r2, r3
 8004158:	4623      	mov	r3, r4
 800415a:	f7fc f8a9 	bl	80002b0 <__aeabi_uldivmod>
 800415e:	4603      	mov	r3, r0
 8004160:	460c      	mov	r4, r1
 8004162:	461a      	mov	r2, r3
 8004164:	4b2c      	ldr	r3, [pc, #176]	; (8004218 <UART_SetConfig+0x384>)
 8004166:	fba3 1302 	umull	r1, r3, r3, r2
 800416a:	095b      	lsrs	r3, r3, #5
 800416c:	2164      	movs	r1, #100	; 0x64
 800416e:	fb01 f303 	mul.w	r3, r1, r3
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	3332      	adds	r3, #50	; 0x32
 8004178:	4a27      	ldr	r2, [pc, #156]	; (8004218 <UART_SetConfig+0x384>)
 800417a:	fba2 2303 	umull	r2, r3, r2, r3
 800417e:	095b      	lsrs	r3, r3, #5
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004186:	4498      	add	r8, r3
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	461d      	mov	r5, r3
 800418c:	f04f 0600 	mov.w	r6, #0
 8004190:	46a9      	mov	r9, r5
 8004192:	46b2      	mov	sl, r6
 8004194:	eb19 0309 	adds.w	r3, r9, r9
 8004198:	eb4a 040a 	adc.w	r4, sl, sl
 800419c:	4699      	mov	r9, r3
 800419e:	46a2      	mov	sl, r4
 80041a0:	eb19 0905 	adds.w	r9, r9, r5
 80041a4:	eb4a 0a06 	adc.w	sl, sl, r6
 80041a8:	f04f 0100 	mov.w	r1, #0
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041bc:	4689      	mov	r9, r1
 80041be:	4692      	mov	sl, r2
 80041c0:	eb19 0005 	adds.w	r0, r9, r5
 80041c4:	eb4a 0106 	adc.w	r1, sl, r6
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	461d      	mov	r5, r3
 80041ce:	f04f 0600 	mov.w	r6, #0
 80041d2:	196b      	adds	r3, r5, r5
 80041d4:	eb46 0406 	adc.w	r4, r6, r6
 80041d8:	461a      	mov	r2, r3
 80041da:	4623      	mov	r3, r4
 80041dc:	f7fc f868 	bl	80002b0 <__aeabi_uldivmod>
 80041e0:	4603      	mov	r3, r0
 80041e2:	460c      	mov	r4, r1
 80041e4:	461a      	mov	r2, r3
 80041e6:	4b0c      	ldr	r3, [pc, #48]	; (8004218 <UART_SetConfig+0x384>)
 80041e8:	fba3 1302 	umull	r1, r3, r3, r2
 80041ec:	095b      	lsrs	r3, r3, #5
 80041ee:	2164      	movs	r1, #100	; 0x64
 80041f0:	fb01 f303 	mul.w	r3, r1, r3
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	3332      	adds	r3, #50	; 0x32
 80041fa:	4a07      	ldr	r2, [pc, #28]	; (8004218 <UART_SetConfig+0x384>)
 80041fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004200:	095b      	lsrs	r3, r3, #5
 8004202:	f003 0207 	and.w	r2, r3, #7
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4442      	add	r2, r8
 800420c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800420e:	e1b2      	b.n	8004576 <UART_SetConfig+0x6e2>
 8004210:	40011000 	.word	0x40011000
 8004214:	40011400 	.word	0x40011400
 8004218:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4ad7      	ldr	r2, [pc, #860]	; (8004580 <UART_SetConfig+0x6ec>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d005      	beq.n	8004232 <UART_SetConfig+0x39e>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4ad6      	ldr	r2, [pc, #856]	; (8004584 <UART_SetConfig+0x6f0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	f040 80d1 	bne.w	80043d4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004232:	f7ff fa39 	bl	80036a8 <HAL_RCC_GetPCLK2Freq>
 8004236:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	469a      	mov	sl, r3
 800423c:	f04f 0b00 	mov.w	fp, #0
 8004240:	46d0      	mov	r8, sl
 8004242:	46d9      	mov	r9, fp
 8004244:	eb18 0308 	adds.w	r3, r8, r8
 8004248:	eb49 0409 	adc.w	r4, r9, r9
 800424c:	4698      	mov	r8, r3
 800424e:	46a1      	mov	r9, r4
 8004250:	eb18 080a 	adds.w	r8, r8, sl
 8004254:	eb49 090b 	adc.w	r9, r9, fp
 8004258:	f04f 0100 	mov.w	r1, #0
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004264:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004268:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800426c:	4688      	mov	r8, r1
 800426e:	4691      	mov	r9, r2
 8004270:	eb1a 0508 	adds.w	r5, sl, r8
 8004274:	eb4b 0609 	adc.w	r6, fp, r9
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	4619      	mov	r1, r3
 800427e:	f04f 0200 	mov.w	r2, #0
 8004282:	f04f 0300 	mov.w	r3, #0
 8004286:	f04f 0400 	mov.w	r4, #0
 800428a:	0094      	lsls	r4, r2, #2
 800428c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004290:	008b      	lsls	r3, r1, #2
 8004292:	461a      	mov	r2, r3
 8004294:	4623      	mov	r3, r4
 8004296:	4628      	mov	r0, r5
 8004298:	4631      	mov	r1, r6
 800429a:	f7fc f809 	bl	80002b0 <__aeabi_uldivmod>
 800429e:	4603      	mov	r3, r0
 80042a0:	460c      	mov	r4, r1
 80042a2:	461a      	mov	r2, r3
 80042a4:	4bb8      	ldr	r3, [pc, #736]	; (8004588 <UART_SetConfig+0x6f4>)
 80042a6:	fba3 2302 	umull	r2, r3, r3, r2
 80042aa:	095b      	lsrs	r3, r3, #5
 80042ac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	469b      	mov	fp, r3
 80042b4:	f04f 0c00 	mov.w	ip, #0
 80042b8:	46d9      	mov	r9, fp
 80042ba:	46e2      	mov	sl, ip
 80042bc:	eb19 0309 	adds.w	r3, r9, r9
 80042c0:	eb4a 040a 	adc.w	r4, sl, sl
 80042c4:	4699      	mov	r9, r3
 80042c6:	46a2      	mov	sl, r4
 80042c8:	eb19 090b 	adds.w	r9, r9, fp
 80042cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80042d0:	f04f 0100 	mov.w	r1, #0
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042e4:	4689      	mov	r9, r1
 80042e6:	4692      	mov	sl, r2
 80042e8:	eb1b 0509 	adds.w	r5, fp, r9
 80042ec:	eb4c 060a 	adc.w	r6, ip, sl
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	4619      	mov	r1, r3
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	f04f 0400 	mov.w	r4, #0
 8004302:	0094      	lsls	r4, r2, #2
 8004304:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004308:	008b      	lsls	r3, r1, #2
 800430a:	461a      	mov	r2, r3
 800430c:	4623      	mov	r3, r4
 800430e:	4628      	mov	r0, r5
 8004310:	4631      	mov	r1, r6
 8004312:	f7fb ffcd 	bl	80002b0 <__aeabi_uldivmod>
 8004316:	4603      	mov	r3, r0
 8004318:	460c      	mov	r4, r1
 800431a:	461a      	mov	r2, r3
 800431c:	4b9a      	ldr	r3, [pc, #616]	; (8004588 <UART_SetConfig+0x6f4>)
 800431e:	fba3 1302 	umull	r1, r3, r3, r2
 8004322:	095b      	lsrs	r3, r3, #5
 8004324:	2164      	movs	r1, #100	; 0x64
 8004326:	fb01 f303 	mul.w	r3, r1, r3
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	3332      	adds	r3, #50	; 0x32
 8004330:	4a95      	ldr	r2, [pc, #596]	; (8004588 <UART_SetConfig+0x6f4>)
 8004332:	fba2 2303 	umull	r2, r3, r2, r3
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800433c:	4498      	add	r8, r3
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	469b      	mov	fp, r3
 8004342:	f04f 0c00 	mov.w	ip, #0
 8004346:	46d9      	mov	r9, fp
 8004348:	46e2      	mov	sl, ip
 800434a:	eb19 0309 	adds.w	r3, r9, r9
 800434e:	eb4a 040a 	adc.w	r4, sl, sl
 8004352:	4699      	mov	r9, r3
 8004354:	46a2      	mov	sl, r4
 8004356:	eb19 090b 	adds.w	r9, r9, fp
 800435a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800435e:	f04f 0100 	mov.w	r1, #0
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800436a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800436e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004372:	4689      	mov	r9, r1
 8004374:	4692      	mov	sl, r2
 8004376:	eb1b 0509 	adds.w	r5, fp, r9
 800437a:	eb4c 060a 	adc.w	r6, ip, sl
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	4619      	mov	r1, r3
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	f04f 0400 	mov.w	r4, #0
 8004390:	0094      	lsls	r4, r2, #2
 8004392:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004396:	008b      	lsls	r3, r1, #2
 8004398:	461a      	mov	r2, r3
 800439a:	4623      	mov	r3, r4
 800439c:	4628      	mov	r0, r5
 800439e:	4631      	mov	r1, r6
 80043a0:	f7fb ff86 	bl	80002b0 <__aeabi_uldivmod>
 80043a4:	4603      	mov	r3, r0
 80043a6:	460c      	mov	r4, r1
 80043a8:	461a      	mov	r2, r3
 80043aa:	4b77      	ldr	r3, [pc, #476]	; (8004588 <UART_SetConfig+0x6f4>)
 80043ac:	fba3 1302 	umull	r1, r3, r3, r2
 80043b0:	095b      	lsrs	r3, r3, #5
 80043b2:	2164      	movs	r1, #100	; 0x64
 80043b4:	fb01 f303 	mul.w	r3, r1, r3
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	3332      	adds	r3, #50	; 0x32
 80043be:	4a72      	ldr	r2, [pc, #456]	; (8004588 <UART_SetConfig+0x6f4>)
 80043c0:	fba2 2303 	umull	r2, r3, r2, r3
 80043c4:	095b      	lsrs	r3, r3, #5
 80043c6:	f003 020f 	and.w	r2, r3, #15
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4442      	add	r2, r8
 80043d0:	609a      	str	r2, [r3, #8]
 80043d2:	e0d0      	b.n	8004576 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80043d4:	f7ff f954 	bl	8003680 <HAL_RCC_GetPCLK1Freq>
 80043d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	469a      	mov	sl, r3
 80043de:	f04f 0b00 	mov.w	fp, #0
 80043e2:	46d0      	mov	r8, sl
 80043e4:	46d9      	mov	r9, fp
 80043e6:	eb18 0308 	adds.w	r3, r8, r8
 80043ea:	eb49 0409 	adc.w	r4, r9, r9
 80043ee:	4698      	mov	r8, r3
 80043f0:	46a1      	mov	r9, r4
 80043f2:	eb18 080a 	adds.w	r8, r8, sl
 80043f6:	eb49 090b 	adc.w	r9, r9, fp
 80043fa:	f04f 0100 	mov.w	r1, #0
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004406:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800440a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800440e:	4688      	mov	r8, r1
 8004410:	4691      	mov	r9, r2
 8004412:	eb1a 0508 	adds.w	r5, sl, r8
 8004416:	eb4b 0609 	adc.w	r6, fp, r9
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	4619      	mov	r1, r3
 8004420:	f04f 0200 	mov.w	r2, #0
 8004424:	f04f 0300 	mov.w	r3, #0
 8004428:	f04f 0400 	mov.w	r4, #0
 800442c:	0094      	lsls	r4, r2, #2
 800442e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004432:	008b      	lsls	r3, r1, #2
 8004434:	461a      	mov	r2, r3
 8004436:	4623      	mov	r3, r4
 8004438:	4628      	mov	r0, r5
 800443a:	4631      	mov	r1, r6
 800443c:	f7fb ff38 	bl	80002b0 <__aeabi_uldivmod>
 8004440:	4603      	mov	r3, r0
 8004442:	460c      	mov	r4, r1
 8004444:	461a      	mov	r2, r3
 8004446:	4b50      	ldr	r3, [pc, #320]	; (8004588 <UART_SetConfig+0x6f4>)
 8004448:	fba3 2302 	umull	r2, r3, r3, r2
 800444c:	095b      	lsrs	r3, r3, #5
 800444e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	469b      	mov	fp, r3
 8004456:	f04f 0c00 	mov.w	ip, #0
 800445a:	46d9      	mov	r9, fp
 800445c:	46e2      	mov	sl, ip
 800445e:	eb19 0309 	adds.w	r3, r9, r9
 8004462:	eb4a 040a 	adc.w	r4, sl, sl
 8004466:	4699      	mov	r9, r3
 8004468:	46a2      	mov	sl, r4
 800446a:	eb19 090b 	adds.w	r9, r9, fp
 800446e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004472:	f04f 0100 	mov.w	r1, #0
 8004476:	f04f 0200 	mov.w	r2, #0
 800447a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800447e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004482:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004486:	4689      	mov	r9, r1
 8004488:	4692      	mov	sl, r2
 800448a:	eb1b 0509 	adds.w	r5, fp, r9
 800448e:	eb4c 060a 	adc.w	r6, ip, sl
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	4619      	mov	r1, r3
 8004498:	f04f 0200 	mov.w	r2, #0
 800449c:	f04f 0300 	mov.w	r3, #0
 80044a0:	f04f 0400 	mov.w	r4, #0
 80044a4:	0094      	lsls	r4, r2, #2
 80044a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044aa:	008b      	lsls	r3, r1, #2
 80044ac:	461a      	mov	r2, r3
 80044ae:	4623      	mov	r3, r4
 80044b0:	4628      	mov	r0, r5
 80044b2:	4631      	mov	r1, r6
 80044b4:	f7fb fefc 	bl	80002b0 <__aeabi_uldivmod>
 80044b8:	4603      	mov	r3, r0
 80044ba:	460c      	mov	r4, r1
 80044bc:	461a      	mov	r2, r3
 80044be:	4b32      	ldr	r3, [pc, #200]	; (8004588 <UART_SetConfig+0x6f4>)
 80044c0:	fba3 1302 	umull	r1, r3, r3, r2
 80044c4:	095b      	lsrs	r3, r3, #5
 80044c6:	2164      	movs	r1, #100	; 0x64
 80044c8:	fb01 f303 	mul.w	r3, r1, r3
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	3332      	adds	r3, #50	; 0x32
 80044d2:	4a2d      	ldr	r2, [pc, #180]	; (8004588 <UART_SetConfig+0x6f4>)
 80044d4:	fba2 2303 	umull	r2, r3, r2, r3
 80044d8:	095b      	lsrs	r3, r3, #5
 80044da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044de:	4498      	add	r8, r3
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	469b      	mov	fp, r3
 80044e4:	f04f 0c00 	mov.w	ip, #0
 80044e8:	46d9      	mov	r9, fp
 80044ea:	46e2      	mov	sl, ip
 80044ec:	eb19 0309 	adds.w	r3, r9, r9
 80044f0:	eb4a 040a 	adc.w	r4, sl, sl
 80044f4:	4699      	mov	r9, r3
 80044f6:	46a2      	mov	sl, r4
 80044f8:	eb19 090b 	adds.w	r9, r9, fp
 80044fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004500:	f04f 0100 	mov.w	r1, #0
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800450c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004510:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004514:	4689      	mov	r9, r1
 8004516:	4692      	mov	sl, r2
 8004518:	eb1b 0509 	adds.w	r5, fp, r9
 800451c:	eb4c 060a 	adc.w	r6, ip, sl
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	4619      	mov	r1, r3
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	f04f 0300 	mov.w	r3, #0
 800452e:	f04f 0400 	mov.w	r4, #0
 8004532:	0094      	lsls	r4, r2, #2
 8004534:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004538:	008b      	lsls	r3, r1, #2
 800453a:	461a      	mov	r2, r3
 800453c:	4623      	mov	r3, r4
 800453e:	4628      	mov	r0, r5
 8004540:	4631      	mov	r1, r6
 8004542:	f7fb feb5 	bl	80002b0 <__aeabi_uldivmod>
 8004546:	4603      	mov	r3, r0
 8004548:	460c      	mov	r4, r1
 800454a:	461a      	mov	r2, r3
 800454c:	4b0e      	ldr	r3, [pc, #56]	; (8004588 <UART_SetConfig+0x6f4>)
 800454e:	fba3 1302 	umull	r1, r3, r3, r2
 8004552:	095b      	lsrs	r3, r3, #5
 8004554:	2164      	movs	r1, #100	; 0x64
 8004556:	fb01 f303 	mul.w	r3, r1, r3
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	3332      	adds	r3, #50	; 0x32
 8004560:	4a09      	ldr	r2, [pc, #36]	; (8004588 <UART_SetConfig+0x6f4>)
 8004562:	fba2 2303 	umull	r2, r3, r2, r3
 8004566:	095b      	lsrs	r3, r3, #5
 8004568:	f003 020f 	and.w	r2, r3, #15
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4442      	add	r2, r8
 8004572:	609a      	str	r2, [r3, #8]
}
 8004574:	e7ff      	b.n	8004576 <UART_SetConfig+0x6e2>
 8004576:	bf00      	nop
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004580:	40011000 	.word	0x40011000
 8004584:	40011400 	.word	0x40011400
 8004588:	51eb851f 	.word	0x51eb851f

0800458c <rfalAnalogConfigInitialize>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

void rfalAnalogConfigInitialize( void )
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
/* Check whether the Default Analog settings are to be used or custom ones */  
#ifdef RFAL_ANALOG_CONFIG_CUSTOM
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigCustomSettings;
    gRfalAnalogConfigMgmt.configTblSize          = rfalAnalogConfigCustomSettingsLength;
#else  
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigDefaultSettings;
 8004590:	4b07      	ldr	r3, [pc, #28]	; (80045b0 <rfalAnalogConfigInitialize+0x24>)
 8004592:	4a08      	ldr	r2, [pc, #32]	; (80045b4 <rfalAnalogConfigInitialize+0x28>)
 8004594:	601a      	str	r2, [r3, #0]
    gRfalAnalogConfigMgmt.configTblSize          = sizeof(rfalAnalogConfigDefaultSettings);
 8004596:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <rfalAnalogConfigInitialize+0x24>)
 8004598:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 800459c:	809a      	strh	r2, [r3, #4]
#endif
  
  gRfalAnalogConfigMgmt.ready = true;
 800459e:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <rfalAnalogConfigInitialize+0x24>)
 80045a0:	2201      	movs	r2, #1
 80045a2:	719a      	strb	r2, [r3, #6]
} /* rfalAnalogConfigInitialize() */
 80045a4:	bf00      	nop
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	200002ec 	.word	0x200002ec
 80045b4:	0800e364 	.word	0x0800e364

080045b8 <rfalSetAnalogConfig>:
    return ERR_NONE;
} /* rfalAnalogConfigListRead() */


ReturnCode rfalSetAnalogConfig( rfalAnalogConfigId configId )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	4603      	mov	r3, r0
 80045c0:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigOffset configOffset = 0;
 80045c2:	2300      	movs	r3, #0
 80045c4:	81fb      	strh	r3, [r7, #14]
    rfalAnalogConfigNum numConfigSet;
    rfalAnalogConfigRegAddrMaskVal *configTbl;
    ReturnCode retCode = ERR_NONE;
 80045c6:	2300      	movs	r3, #0
 80045c8:	82fb      	strh	r3, [r7, #22]
    rfalAnalogConfigNum i;
    
    if (true != gRfalAnalogConfigMgmt.ready)
 80045ca:	4b4b      	ldr	r3, [pc, #300]	; (80046f8 <rfalSetAnalogConfig+0x140>)
 80045cc:	799b      	ldrb	r3, [r3, #6]
 80045ce:	f083 0301 	eor.w	r3, r3, #1
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <rfalSetAnalogConfig+0x24>
    {
        return ERR_REQUEST;
 80045d8:	2305      	movs	r3, #5
 80045da:	e089      	b.n	80046f0 <rfalSetAnalogConfig+0x138>
    }
    
    /* Search LUT for the specific Configuration ID. */
    while(true)
    {
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 80045dc:	f107 020e 	add.w	r2, r7, #14
 80045e0:	88fb      	ldrh	r3, [r7, #6]
 80045e2:	4611      	mov	r1, r2
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 f889 	bl	80046fc <rfalAnalogConfigSearch>
 80045ea:	4603      	mov	r3, r0
 80045ec:	753b      	strb	r3, [r7, #20]
        if( RFAL_ANALOG_CONFIG_LUT_NOT_FOUND == numConfigSet )
 80045ee:	7d3b      	ldrb	r3, [r7, #20]
 80045f0:	2bff      	cmp	r3, #255	; 0xff
 80045f2:	d07b      	beq.n	80046ec <rfalSetAnalogConfig+0x134>
        {
            break;
        }
        
        configTbl = (rfalAnalogConfigRegAddrMaskVal *)( (uint32_t)gRfalAnalogConfigMgmt.currentAnalogConfigTbl + (uint32_t)configOffset); 
 80045f4:	4b40      	ldr	r3, [pc, #256]	; (80046f8 <rfalSetAnalogConfig+0x140>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	461a      	mov	r2, r3
 80045fa:	89fb      	ldrh	r3, [r7, #14]
 80045fc:	4413      	add	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]
        /* Increment the offset to the next index to search from. */
        configOffset += (uint16_t)(numConfigSet * sizeof(rfalAnalogConfigRegAddrMaskVal)); 
 8004600:	7d3b      	ldrb	r3, [r7, #20]
 8004602:	b29b      	uxth	r3, r3
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	b29a      	uxth	r2, r3
 8004608:	89fb      	ldrh	r3, [r7, #14]
 800460a:	4413      	add	r3, r2
 800460c:	b29b      	uxth	r3, r3
 800460e:	81fb      	strh	r3, [r7, #14]
        
        if ((gRfalAnalogConfigMgmt.configTblSize + 1U) < configOffset)
 8004610:	4b39      	ldr	r3, [pc, #228]	; (80046f8 <rfalSetAnalogConfig+0x140>)
 8004612:	889b      	ldrh	r3, [r3, #4]
 8004614:	3301      	adds	r3, #1
 8004616:	89fa      	ldrh	r2, [r7, #14]
 8004618:	4293      	cmp	r3, r2
 800461a:	d201      	bcs.n	8004620 <rfalSetAnalogConfig+0x68>
        {   /* Error check make sure that the we do not access outside the configuration Table Size */
            return ERR_NOMEM;
 800461c:	2301      	movs	r3, #1
 800461e:	e067      	b.n	80046f0 <rfalSetAnalogConfig+0x138>
        }
        
        for ( i = 0; i < numConfigSet; i++)
 8004620:	2300      	movs	r3, #0
 8004622:	757b      	strb	r3, [r7, #21]
 8004624:	e05d      	b.n	80046e2 <rfalSetAnalogConfig+0x12a>
        {
            if( (GETU16(configTbl[i].addr) & RFAL_TEST_REG) != 0U )
 8004626:	7d7b      	ldrb	r3, [r7, #21]
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	4413      	add	r3, r2
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	021b      	lsls	r3, r3, #8
 8004632:	7d7a      	ldrb	r2, [r7, #21]
 8004634:	0092      	lsls	r2, r2, #2
 8004636:	6939      	ldr	r1, [r7, #16]
 8004638:	440a      	add	r2, r1
 800463a:	7852      	ldrb	r2, [r2, #1]
 800463c:	4313      	orrs	r3, r2
 800463e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004642:	2b00      	cmp	r3, #0
 8004644:	d026      	beq.n	8004694 <rfalSetAnalogConfig+0xdc>
            {
                EXIT_ON_ERR(retCode, rfalChipChangeTestRegBits( (GETU16(configTbl[i].addr) & ~RFAL_TEST_REG), configTbl[i].mask, configTbl[i].val) );
 8004646:	7d7b      	ldrb	r3, [r7, #21]
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4413      	add	r3, r2
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	021b      	lsls	r3, r3, #8
 8004652:	b21a      	sxth	r2, r3
 8004654:	7d7b      	ldrb	r3, [r7, #21]
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	6939      	ldr	r1, [r7, #16]
 800465a:	440b      	add	r3, r1
 800465c:	785b      	ldrb	r3, [r3, #1]
 800465e:	b21b      	sxth	r3, r3
 8004660:	4313      	orrs	r3, r2
 8004662:	b21b      	sxth	r3, r3
 8004664:	b29b      	uxth	r3, r3
 8004666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800466a:	b298      	uxth	r0, r3
 800466c:	7d7b      	ldrb	r3, [r7, #21]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	4413      	add	r3, r2
 8004674:	7899      	ldrb	r1, [r3, #2]
 8004676:	7d7b      	ldrb	r3, [r7, #21]
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4413      	add	r3, r2
 800467e:	78db      	ldrb	r3, [r3, #3]
 8004680:	461a      	mov	r2, r3
 8004682:	f008 fea6 	bl	800d3d2 <rfalChipChangeTestRegBits>
 8004686:	4603      	mov	r3, r0
 8004688:	82fb      	strh	r3, [r7, #22]
 800468a:	8afb      	ldrh	r3, [r7, #22]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d025      	beq.n	80046dc <rfalSetAnalogConfig+0x124>
 8004690:	8afb      	ldrh	r3, [r7, #22]
 8004692:	e02d      	b.n	80046f0 <rfalSetAnalogConfig+0x138>
            }
            else
            {
                EXIT_ON_ERR(retCode, rfalChipChangeRegBits( GETU16(configTbl[i].addr), configTbl[i].mask, configTbl[i].val) );
 8004694:	7d7b      	ldrb	r3, [r7, #21]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	4413      	add	r3, r2
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	021b      	lsls	r3, r3, #8
 80046a0:	b21a      	sxth	r2, r3
 80046a2:	7d7b      	ldrb	r3, [r7, #21]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	6939      	ldr	r1, [r7, #16]
 80046a8:	440b      	add	r3, r1
 80046aa:	785b      	ldrb	r3, [r3, #1]
 80046ac:	b21b      	sxth	r3, r3
 80046ae:	4313      	orrs	r3, r2
 80046b0:	b21b      	sxth	r3, r3
 80046b2:	b298      	uxth	r0, r3
 80046b4:	7d7b      	ldrb	r3, [r7, #21]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4413      	add	r3, r2
 80046bc:	7899      	ldrb	r1, [r3, #2]
 80046be:	7d7b      	ldrb	r3, [r7, #21]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4413      	add	r3, r2
 80046c6:	78db      	ldrb	r3, [r3, #3]
 80046c8:	461a      	mov	r2, r3
 80046ca:	f008 fe6d 	bl	800d3a8 <rfalChipChangeRegBits>
 80046ce:	4603      	mov	r3, r0
 80046d0:	82fb      	strh	r3, [r7, #22]
 80046d2:	8afb      	ldrh	r3, [r7, #22]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <rfalSetAnalogConfig+0x124>
 80046d8:	8afb      	ldrh	r3, [r7, #22]
 80046da:	e009      	b.n	80046f0 <rfalSetAnalogConfig+0x138>
        for ( i = 0; i < numConfigSet; i++)
 80046dc:	7d7b      	ldrb	r3, [r7, #21]
 80046de:	3301      	adds	r3, #1
 80046e0:	757b      	strb	r3, [r7, #21]
 80046e2:	7d7a      	ldrb	r2, [r7, #21]
 80046e4:	7d3b      	ldrb	r3, [r7, #20]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d39d      	bcc.n	8004626 <rfalSetAnalogConfig+0x6e>
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 80046ea:	e777      	b.n	80045dc <rfalSetAnalogConfig+0x24>
            break;
 80046ec:	bf00      	nop
            }
        }
        
    } /* while(found Analog Config Id) */
    
    return retCode;
 80046ee:	8afb      	ldrh	r3, [r7, #22]
    
} /* rfalSetAnalogConfig() */
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	200002ec 	.word	0x200002ec

080046fc <rfalAnalogConfigSearch>:
 * \return number of Configuration Sets
 * \return #RFAL_ANALOG_CONFIG_LUT_NOT_FOUND in case Configuration ID is not found.
 *****************************************************************************
 */
static rfalAnalogConfigNum rfalAnalogConfigSearch( rfalAnalogConfigId configId, uint16_t *configOffset )
{
 80046fc:	b480      	push	{r7}
 80046fe:	b089      	sub	sp, #36	; 0x24
 8004700:	af00      	add	r7, sp, #0
 8004702:	4603      	mov	r3, r0
 8004704:	6039      	str	r1, [r7, #0]
 8004706:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigId configIdMaskVal;
    const uint8_t *configTbl;
    const uint8_t *currentConfigTbl;
    uint16_t i;
    
    currentConfigTbl = gRfalAnalogConfigMgmt.currentAnalogConfigTbl;
 8004708:	4b2d      	ldr	r3, [pc, #180]	; (80047c0 <rfalAnalogConfigSearch+0xc4>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	61bb      	str	r3, [r7, #24]
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
                       |((RFAL_ANALOG_CONFIG_TECH_CHIP == RFAL_ANALOG_CONFIG_ID_GET_TECH(configId)) ? (RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_CHIP_SPECIFIC_MASK) : configId)
 800470e:	88fb      	ldrh	r3, [r7, #6]
 8004710:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8004714:	b29b      	uxth	r3, r3
                       |((RFAL_ANALOG_CONFIG_NO_DIRECTION == RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId)) ? RFAL_ANALOG_CONFIG_DIRECTION_MASK : configId)
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00a      	beq.n	8004730 <rfalAnalogConfigSearch+0x34>
 800471a:	88fb      	ldrh	r3, [r7, #6]
 800471c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004720:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004724:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004728:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800472c:	b29a      	uxth	r2, r3
 800472e:	e001      	b.n	8004734 <rfalAnalogConfigSearch+0x38>
 8004730:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004734:	88fb      	ldrh	r3, [r7, #6]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	b29b      	uxth	r3, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <rfalAnalogConfigSearch+0x48>
 8004740:	88fb      	ldrh	r3, [r7, #6]
 8004742:	e000      	b.n	8004746 <rfalAnalogConfigSearch+0x4a>
 8004744:	2303      	movs	r3, #3
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
 8004746:	4313      	orrs	r3, r2
 8004748:	82fb      	strh	r3, [r7, #22]
                       );
    
    i = *configOffset;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	83fb      	strh	r3, [r7, #30]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 8004750:	e029      	b.n	80047a6 <rfalAnalogConfigSearch+0xaa>
    {
        configTbl = &currentConfigTbl[i];
 8004752:	8bfb      	ldrh	r3, [r7, #30]
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	4413      	add	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
        foundConfigId = GETU16(configTbl);
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	021b      	lsls	r3, r3, #8
 8004760:	b21a      	sxth	r2, r3
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	3301      	adds	r3, #1
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	b21b      	sxth	r3, r3
 800476a:	4313      	orrs	r3, r2
 800476c:	b21b      	sxth	r3, r3
 800476e:	81fb      	strh	r3, [r7, #14]
        if (configId == (foundConfigId & configIdMaskVal))
 8004770:	89fa      	ldrh	r2, [r7, #14]
 8004772:	8afb      	ldrh	r3, [r7, #22]
 8004774:	4013      	ands	r3, r2
 8004776:	b29b      	uxth	r3, r3
 8004778:	88fa      	ldrh	r2, [r7, #6]
 800477a:	429a      	cmp	r2, r3
 800477c:	d108      	bne.n	8004790 <rfalAnalogConfigSearch+0x94>
        {
            *configOffset = (uint16_t)(i + sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum));
 800477e:	8bfb      	ldrh	r3, [r7, #30]
 8004780:	3303      	adds	r3, #3
 8004782:	b29a      	uxth	r2, r3
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	801a      	strh	r2, [r3, #0]
            return configTbl[sizeof(rfalAnalogConfigId)];
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	3302      	adds	r3, #2
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	e010      	b.n	80047b2 <rfalAnalogConfigSearch+0xb6>
        }
        
        /* If Config Id does not match, increment to next Configuration Id */
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
                        + (configTbl[sizeof(rfalAnalogConfigId)] * sizeof(rfalAnalogConfigRegAddrMaskVal) )
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	3302      	adds	r3, #2
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	b29b      	uxth	r3, r3
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	b29a      	uxth	r2, r3
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
 800479c:	8bfb      	ldrh	r3, [r7, #30]
 800479e:	4413      	add	r3, r2
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	3303      	adds	r3, #3
 80047a4:	83fb      	strh	r3, [r7, #30]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 80047a6:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <rfalAnalogConfigSearch+0xc4>)
 80047a8:	889b      	ldrh	r3, [r3, #4]
 80047aa:	8bfa      	ldrh	r2, [r7, #30]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d3d0      	bcc.n	8004752 <rfalAnalogConfigSearch+0x56>
                        );
    } /* for */
    
    return RFAL_ANALOG_CONFIG_LUT_NOT_FOUND;
 80047b0:	23ff      	movs	r3, #255	; 0xff
} /* rfalAnalogConfigSearch() */
 80047b2:	4618      	mov	r0, r3
 80047b4:	3724      	adds	r7, #36	; 0x24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	200002ec 	.word	0x200002ec

080047c4 <rfalCrcCalculateCcitt>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
uint16_t rfalCrcCalculateCcitt(uint16_t preloadValue, const uint8_t* buf, uint16_t length)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	4603      	mov	r3, r0
 80047cc:	6039      	str	r1, [r7, #0]
 80047ce:	80fb      	strh	r3, [r7, #6]
 80047d0:	4613      	mov	r3, r2
 80047d2:	80bb      	strh	r3, [r7, #4]
    uint16_t crc = preloadValue;
 80047d4:	88fb      	ldrh	r3, [r7, #6]
 80047d6:	81fb      	strh	r3, [r7, #14]
    uint16_t index;

    for (index = 0; index < length; index++)
 80047d8:	2300      	movs	r3, #0
 80047da:	81bb      	strh	r3, [r7, #12]
 80047dc:	e00d      	b.n	80047fa <rfalCrcCalculateCcitt+0x36>
    {
        crc = rfalCrcUpdateCcitt(crc, buf[index]);
 80047de:	89bb      	ldrh	r3, [r7, #12]
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	4413      	add	r3, r2
 80047e4:	781a      	ldrb	r2, [r3, #0]
 80047e6:	89fb      	ldrh	r3, [r7, #14]
 80047e8:	4611      	mov	r1, r2
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 f80e 	bl	800480c <rfalCrcUpdateCcitt>
 80047f0:	4603      	mov	r3, r0
 80047f2:	81fb      	strh	r3, [r7, #14]
    for (index = 0; index < length; index++)
 80047f4:	89bb      	ldrh	r3, [r7, #12]
 80047f6:	3301      	adds	r3, #1
 80047f8:	81bb      	strh	r3, [r7, #12]
 80047fa:	89ba      	ldrh	r2, [r7, #12]
 80047fc:	88bb      	ldrh	r3, [r7, #4]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d3ed      	bcc.n	80047de <rfalCrcCalculateCcitt+0x1a>
    }

    return crc;
 8004802:	89fb      	ldrh	r3, [r7, #14]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <rfalCrcUpdateCcitt>:
******************************************************************************
* LOCAL FUNCTIONS
******************************************************************************
*/
static uint16_t rfalCrcUpdateCcitt(uint16_t crcSeed, uint8_t dataByte)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	4603      	mov	r3, r0
 8004814:	460a      	mov	r2, r1
 8004816:	80fb      	strh	r3, [r7, #6]
 8004818:	4613      	mov	r3, r2
 800481a:	717b      	strb	r3, [r7, #5]
    uint16_t crc = crcSeed;
 800481c:	88fb      	ldrh	r3, [r7, #6]
 800481e:	81fb      	strh	r3, [r7, #14]
    uint8_t  dat = dataByte;
 8004820:	797b      	ldrb	r3, [r7, #5]
 8004822:	737b      	strb	r3, [r7, #13]
    
    dat ^= (uint8_t)(crc & 0xFFU);
 8004824:	89fb      	ldrh	r3, [r7, #14]
 8004826:	b2da      	uxtb	r2, r3
 8004828:	7b7b      	ldrb	r3, [r7, #13]
 800482a:	4053      	eors	r3, r2
 800482c:	737b      	strb	r3, [r7, #13]
    dat ^= (dat << 4);
 800482e:	7b7b      	ldrb	r3, [r7, #13]
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	b25a      	sxtb	r2, r3
 8004834:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004838:	4053      	eors	r3, r2
 800483a:	b25b      	sxtb	r3, r3
 800483c:	737b      	strb	r3, [r7, #13]

    crc = (crc >> 8)^(((uint16_t) dat) << 8)^(((uint16_t) dat) << 3)^(((uint16_t) dat) >> 4);
 800483e:	89fb      	ldrh	r3, [r7, #14]
 8004840:	0a1b      	lsrs	r3, r3, #8
 8004842:	b29b      	uxth	r3, r3
 8004844:	b21a      	sxth	r2, r3
 8004846:	7b7b      	ldrb	r3, [r7, #13]
 8004848:	021b      	lsls	r3, r3, #8
 800484a:	b21b      	sxth	r3, r3
 800484c:	4053      	eors	r3, r2
 800484e:	b21a      	sxth	r2, r3
 8004850:	7b7b      	ldrb	r3, [r7, #13]
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	b21b      	sxth	r3, r3
 8004856:	4053      	eors	r3, r2
 8004858:	b21a      	sxth	r2, r3
 800485a:	7b7b      	ldrb	r3, [r7, #13]
 800485c:	091b      	lsrs	r3, r3, #4
 800485e:	b2db      	uxtb	r3, r3
 8004860:	b21b      	sxth	r3, r3
 8004862:	4053      	eors	r3, r2
 8004864:	b21b      	sxth	r3, r3
 8004866:	81fb      	strh	r3, [r7, #14]

    return crc;
 8004868:	89fb      	ldrh	r3, [r7, #14]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
	...

08004878 <iso15693PhyConfigure>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
ReturnCode iso15693PhyConfigure(const iso15693PhyConfig_t* config, const struct iso15693StreamConfig ** needed_stream_config  )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
        .report_period_length = 3, /*!< 8=2^3 the length of the reporting period */
    };
    
    
    /* make a copy of the configuration */
    ST_MEMCPY( (uint8_t*)&iso15693PhyConfig, (const uint8_t*)config, sizeof(iso15693PhyConfig_t));
 8004882:	2208      	movs	r2, #8
 8004884:	6879      	ldr	r1, [r7, #4]
 8004886:	480d      	ldr	r0, [pc, #52]	; (80048bc <iso15693PhyConfigure+0x44>)
 8004888:	f009 f84d 	bl	800d926 <memcpy>
    
    if ( config->speedMode <= 3U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b03      	cmp	r3, #3
 8004892:	d808      	bhi.n	80048a6 <iso15693PhyConfigure+0x2e>
    { /* If valid speed mode adjust report period accordingly */
        stream_config.report_period_length = (3U - (uint8_t)config->speedMode);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	b2db      	uxtb	r3, r3
 800489a:	f1c3 0303 	rsb	r3, r3, #3
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	4b07      	ldr	r3, [pc, #28]	; (80048c0 <iso15693PhyConfigure+0x48>)
 80048a2:	70da      	strb	r2, [r3, #3]
 80048a4:	e002      	b.n	80048ac <iso15693PhyConfigure+0x34>
    }
    else
    { /* If invalid default to normal (high) speed */
        stream_config.report_period_length = 3;
 80048a6:	4b06      	ldr	r3, [pc, #24]	; (80048c0 <iso15693PhyConfigure+0x48>)
 80048a8:	2203      	movs	r2, #3
 80048aa:	70da      	strb	r2, [r3, #3]
    }

    *needed_stream_config = &stream_config;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	4a04      	ldr	r2, [pc, #16]	; (80048c0 <iso15693PhyConfigure+0x48>)
 80048b0:	601a      	str	r2, [r3, #0]

    return ERR_NONE;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	200002f4 	.word	0x200002f4
 80048c0:	200000e0 	.word	0x200000e0

080048c4 <iso15693VCDCode>:
}

ReturnCode iso15693VCDCode(uint8_t* buffer, uint16_t length, bool sendCrc, bool sendFlags, bool picopassMode,
                   uint16_t *subbit_total_length, uint16_t *offset,
                   uint8_t* outbuf, uint16_t outBufSize, uint16_t* actOutBufSize)
{
 80048c4:	b590      	push	{r4, r7, lr}
 80048c6:	b08b      	sub	sp, #44	; 0x2c
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	4608      	mov	r0, r1
 80048ce:	4611      	mov	r1, r2
 80048d0:	461a      	mov	r2, r3
 80048d2:	4603      	mov	r3, r0
 80048d4:	807b      	strh	r3, [r7, #2]
 80048d6:	460b      	mov	r3, r1
 80048d8:	707b      	strb	r3, [r7, #1]
 80048da:	4613      	mov	r3, r2
 80048dc:	703b      	strb	r3, [r7, #0]
    ReturnCode err = ERR_NONE;
 80048de:	2300      	movs	r3, #0
 80048e0:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t eof, sof;
    uint8_t transbuf[2];
    uint16_t crc = 0;
 80048e2:	2300      	movs	r3, #0
 80048e4:	847b      	strh	r3, [r7, #34]	; 0x22
    ReturnCode (*txFunc)(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen);
    uint8_t crc_len;
    uint8_t* outputBuf;
    uint16_t outputBufSize;

    crc_len = (uint8_t)((sendCrc)?2:0);
 80048e6:	787b      	ldrb	r3, [r7, #1]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <iso15693VCDCode+0x2c>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e000      	b.n	80048f2 <iso15693VCDCode+0x2e>
 80048f0:	2300      	movs	r3, #0
 80048f2:	757b      	strb	r3, [r7, #21]

    *actOutBufSize = 0;
 80048f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f6:	2200      	movs	r2, #0
 80048f8:	801a      	strh	r2, [r3, #0]

    if (ISO15693_VCD_CODING_1_4 == iso15693PhyConfig.coding)
 80048fa:	4b94      	ldr	r3, [pc, #592]	; (8004b4c <iso15693VCDCode+0x288>)
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d117      	bne.n	8004932 <iso15693VCDCode+0x6e>
    {
        sof = ISO15693_DAT_SOF_1_4;
 8004902:	2321      	movs	r3, #33	; 0x21
 8004904:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_4;
 8004908:	2304      	movs	r3, #4
 800490a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of4;
 800490e:	4b90      	ldr	r3, [pc, #576]	; (8004b50 <iso15693VCDCode+0x28c>)
 8004910:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 4U)
 8004912:	887a      	ldrh	r2, [r7, #2]
 8004914:	7d7b      	ldrb	r3, [r7, #21]
 8004916:	4413      	add	r3, r2
                  + 1U) /* EOF */
 8004918:	b29b      	uxth	r3, r3
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	b29b      	uxth	r3, r3
 800491e:	3302      	adds	r3, #2
 8004920:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 8004922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004924:	801a      	strh	r2, [r3, #0]
                );
        if (outBufSize < 5U) { /* 5 should be safe: enough for sof + 1byte data in 1of4 */
 8004926:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800492a:	2b04      	cmp	r3, #4
 800492c:	d823      	bhi.n	8004976 <iso15693VCDCode+0xb2>
            return ERR_NOMEM;
 800492e:	2301      	movs	r3, #1
 8004930:	e13a      	b.n	8004ba8 <iso15693VCDCode+0x2e4>
        }
    }
    else
    {
        sof = ISO15693_DAT_SOF_1_256;
 8004932:	2381      	movs	r3, #129	; 0x81
 8004934:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_256;
 8004938:	2304      	movs	r3, #4
 800493a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of256;
 800493e:	4b85      	ldr	r3, [pc, #532]	; (8004b54 <iso15693VCDCode+0x290>)
 8004940:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 64U) 
 8004942:	887a      	ldrh	r2, [r7, #2]
 8004944:	7d7b      	ldrb	r3, [r7, #21]
 8004946:	4413      	add	r3, r2
                  + 1U) /* EOF */
 8004948:	b29b      	uxth	r3, r3
 800494a:	019b      	lsls	r3, r3, #6
 800494c:	b29b      	uxth	r3, r3
 800494e:	3302      	adds	r3, #2
 8004950:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 8004952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004954:	801a      	strh	r2, [r3, #0]
                );

        if (*offset != 0U)
 8004956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d005      	beq.n	800496a <iso15693VCDCode+0xa6>
        {
            if (outBufSize < 64U) { /* 64 should be safe: enough a single byte data in 1of256 */
 800495e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004962:	2b3f      	cmp	r3, #63	; 0x3f
 8004964:	d807      	bhi.n	8004976 <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 8004966:	2301      	movs	r3, #1
 8004968:	e11e      	b.n	8004ba8 <iso15693VCDCode+0x2e4>
            }
        }
        else
        {
            if (outBufSize < 65U) { /* At beginning of a frame we need at least 65 bytes to start: enough for sof + 1byte data in 1of256 */
 800496a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800496e:	2b40      	cmp	r3, #64	; 0x40
 8004970:	d801      	bhi.n	8004976 <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 8004972:	2301      	movs	r3, #1
 8004974:	e118      	b.n	8004ba8 <iso15693VCDCode+0x2e4>
            }
        }
    }

    if (length == 0U)
 8004976:	887b      	ldrh	r3, [r7, #2]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d102      	bne.n	8004982 <iso15693VCDCode+0xbe>
    {
        *subbit_total_length = 1;
 800497c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800497e:	2201      	movs	r2, #1
 8004980:	801a      	strh	r2, [r3, #0]
    }

    if ((length != 0U) && (0U == *offset) && sendFlags && !picopassMode)
 8004982:	887b      	ldrh	r3, [r7, #2]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d01b      	beq.n	80049c0 <iso15693VCDCode+0xfc>
 8004988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d117      	bne.n	80049c0 <iso15693VCDCode+0xfc>
 8004990:	783b      	ldrb	r3, [r7, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d014      	beq.n	80049c0 <iso15693VCDCode+0xfc>
 8004996:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800499a:	f083 0301 	eor.w	r3, r3, #1
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00d      	beq.n	80049c0 <iso15693VCDCode+0xfc>
    {
        /* set high datarate flag */
        buffer[0] |= (uint8_t)ISO15693_REQ_FLAG_HIGH_DATARATE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	f043 0302 	orr.w	r3, r3, #2
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	701a      	strb	r2, [r3, #0]
        /* clear sub-carrier flag - we only support single sub-carrier */
        buffer[0] = (uint8_t)(buffer[0] & ~ISO15693_REQ_FLAG_TWO_SUBCARRIERS);  /* MISRA 10.3 */
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	f023 0301 	bic.w	r3, r3, #1
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	701a      	strb	r2, [r3, #0]
    }

    outputBuf = outbuf;             /* MISRA 17.8: Use intermediate variable */
 80049c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049c2:	61bb      	str	r3, [r7, #24]
    outputBufSize = outBufSize;     /* MISRA 17.8: Use intermediate variable */
 80049c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80049c8:	82fb      	strh	r3, [r7, #22]

    /* Send SOF if at 0 offset */
    if ((length != 0U) && (0U == *offset))
 80049ca:	887b      	ldrh	r3, [r7, #2]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d03b      	beq.n	8004a48 <iso15693VCDCode+0x184>
 80049d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049d2:	881b      	ldrh	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d137      	bne.n	8004a48 <iso15693VCDCode+0x184>
    {
        *outputBuf = sof; 
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80049de:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 80049e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	3301      	adds	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ea:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 80049ec:	8afb      	ldrh	r3, [r7, #22]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	3301      	adds	r3, #1
 80049f6:	61bb      	str	r3, [r7, #24]
    }

    while ((*offset < length) && (err == ERR_NONE))
 80049f8:	e026      	b.n	8004a48 <iso15693VCDCode+0x184>
    {
        uint16_t filled_size;
        /* send data */
        err = txFunc(buffer[*offset], outputBuf, outputBufSize, &filled_size);
 80049fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	461a      	mov	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4413      	add	r3, r2
 8004a04:	7818      	ldrb	r0, [r3, #0]
 8004a06:	f107 030e 	add.w	r3, r7, #14
 8004a0a:	8afa      	ldrh	r2, [r7, #22]
 8004a0c:	69fc      	ldr	r4, [r7, #28]
 8004a0e:	69b9      	ldr	r1, [r7, #24]
 8004a10:	47a0      	blx	r4
 8004a12:	4603      	mov	r3, r0
 8004a14:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 8004a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a18:	881a      	ldrh	r2, [r3, #0]
 8004a1a:	89fb      	ldrh	r3, [r7, #14]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a22:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 8004a24:	89fb      	ldrh	r3, [r7, #14]
 8004a26:	461a      	mov	r2, r3
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 8004a2e:	89fb      	ldrh	r3, [r7, #14]
 8004a30:	8afa      	ldrh	r2, [r7, #22]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 8004a36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d105      	bne.n	8004a48 <iso15693VCDCode+0x184>
            (*offset)++;
 8004a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	3301      	adds	r3, #1
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a46:	801a      	strh	r2, [r3, #0]
    while ((*offset < length) && (err == ERR_NONE))
 8004a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a4a:	881b      	ldrh	r3, [r3, #0]
 8004a4c:	887a      	ldrh	r2, [r7, #2]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d902      	bls.n	8004a58 <iso15693VCDCode+0x194>
 8004a52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0d0      	beq.n	80049fa <iso15693VCDCode+0x136>
        }
    }
    if (err != ERR_NONE) {
 8004a58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d063      	beq.n	8004b26 <iso15693VCDCode+0x262>
        return ERR_AGAIN;
 8004a5e:	230d      	movs	r3, #13
 8004a60:	e0a2      	b.n	8004ba8 <iso15693VCDCode+0x2e4>
    }

    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
    {
        uint16_t filled_size;
        if (0U==crc)
 8004a62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d12b      	bne.n	8004ac0 <iso15693VCDCode+0x1fc>
        {
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 8004a68:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d002      	beq.n	8004a76 <iso15693VCDCode+0x1b2>
 8004a70:	f24e 0012 	movw	r0, #57362	; 0xe012
 8004a74:	e001      	b.n	8004a7a <iso15693VCDCode+0x1b6>
 8004a76:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004a7a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d002      	beq.n	8004a88 <iso15693VCDCode+0x1c4>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	3301      	adds	r3, #1
 8004a86:	e000      	b.n	8004a8a <iso15693VCDCode+0x1c6>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004a8e:	2a00      	cmp	r2, #0
 8004a90:	d003      	beq.n	8004a9a <iso15693VCDCode+0x1d6>
 8004a92:	887a      	ldrh	r2, [r7, #2]
 8004a94:	3a01      	subs	r2, #1
 8004a96:	b292      	uxth	r2, r2
 8004a98:	e000      	b.n	8004a9c <iso15693VCDCode+0x1d8>
 8004a9a:	887a      	ldrh	r2, [r7, #2]
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	f7ff fe91 	bl	80047c4 <rfalCrcCalculateCcitt>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	847b      	strh	r3, [r7, #34]	; 0x22
                                                    ((picopassMode) ? (buffer + 1U) : buffer),   /* CMD byte is not taken into account in PicoPass mode */
                                                    ((picopassMode) ? (length - 1U) : length));  /* CMD byte is not taken into account in PicoPass mode */
            
            crc = (uint16_t)((picopassMode) ? crc : ~crc);
 8004aa6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004aaa:	f083 0301 	eor.w	r3, r3, #1
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <iso15693VCDCode+0x1f8>
 8004ab4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ab6:	43db      	mvns	r3, r3
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	e000      	b.n	8004abe <iso15693VCDCode+0x1fa>
 8004abc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004abe:	847b      	strh	r3, [r7, #34]	; 0x22
        }
        /* send crc */
        transbuf[0] = (uint8_t)(crc & 0xffU);
 8004ac0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	743b      	strb	r3, [r7, #16]
        transbuf[1] = (uint8_t)((crc >> 8) & 0xffU);
 8004ac6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ac8:	0a1b      	lsrs	r3, r3, #8
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	747b      	strb	r3, [r7, #17]
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 8004ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	887b      	ldrh	r3, [r7, #2]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ade:	4413      	add	r3, r2
 8004ae0:	f813 0c18 	ldrb.w	r0, [r3, #-24]
 8004ae4:	f107 030c 	add.w	r3, r7, #12
 8004ae8:	8afa      	ldrh	r2, [r7, #22]
 8004aea:	69fc      	ldr	r4, [r7, #28]
 8004aec:	69b9      	ldr	r1, [r7, #24]
 8004aee:	47a0      	blx	r4
 8004af0:	4603      	mov	r3, r0
 8004af2:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 8004af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004af6:	881a      	ldrh	r2, [r3, #0]
 8004af8:	89bb      	ldrh	r3, [r7, #12]
 8004afa:	4413      	add	r3, r2
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b00:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 8004b02:	89bb      	ldrh	r3, [r7, #12]
 8004b04:	461a      	mov	r2, r3
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	4413      	add	r3, r2
 8004b0a:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 8004b0c:	89bb      	ldrh	r3, [r7, #12]
 8004b0e:	8afa      	ldrh	r2, [r7, #22]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 8004b14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d105      	bne.n	8004b26 <iso15693VCDCode+0x262>
            (*offset)++;
 8004b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b24:	801a      	strh	r2, [r3, #0]
    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 8004b26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d109      	bne.n	8004b40 <iso15693VCDCode+0x27c>
 8004b2c:	787b      	ldrb	r3, [r7, #1]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d006      	beq.n	8004b40 <iso15693VCDCode+0x27c>
 8004b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b34:	881b      	ldrh	r3, [r3, #0]
 8004b36:	461a      	mov	r2, r3
 8004b38:	887b      	ldrh	r3, [r7, #2]
 8004b3a:	3302      	adds	r3, #2
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d390      	bcc.n	8004a62 <iso15693VCDCode+0x19e>
        }
    }
    if (err != ERR_NONE) {
 8004b40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d008      	beq.n	8004b58 <iso15693VCDCode+0x294>
        return ERR_AGAIN;
 8004b46:	230d      	movs	r3, #13
 8004b48:	e02e      	b.n	8004ba8 <iso15693VCDCode+0x2e4>
 8004b4a:	bf00      	nop
 8004b4c:	200002f4 	.word	0x200002f4
 8004b50:	08004ded 	.word	0x08004ded
 8004b54:	08004e95 	.word	0x08004e95
    }

    if ((!sendCrc && (*offset == length))
 8004b58:	787b      	ldrb	r3, [r7, #1]
 8004b5a:	f083 0301 	eor.w	r3, r3, #1
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d004      	beq.n	8004b6e <iso15693VCDCode+0x2aa>
 8004b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	887a      	ldrh	r2, [r7, #2]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d009      	beq.n	8004b82 <iso15693VCDCode+0x2be>
            || (sendCrc && (*offset == (length + 2U))))
 8004b6e:	787b      	ldrb	r3, [r7, #1]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d018      	beq.n	8004ba6 <iso15693VCDCode+0x2e2>
 8004b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	887b      	ldrh	r3, [r7, #2]
 8004b7c:	3302      	adds	r3, #2
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d111      	bne.n	8004ba6 <iso15693VCDCode+0x2e2>
    {
        *outputBuf = eof; 
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8004b88:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 8004b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b94:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 8004b96:	8afb      	ldrh	r3, [r7, #22]
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	61bb      	str	r3, [r7, #24]
    else
    {
        return ERR_AGAIN;
    }

    return err;
 8004ba2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ba4:	e000      	b.n	8004ba8 <iso15693VCDCode+0x2e4>
        return ERR_AGAIN;
 8004ba6:	230d      	movs	r3, #13
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	372c      	adds	r7, #44	; 0x2c
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd90      	pop	{r4, r7, pc}

08004bb0 <iso15693VICCDecode>:
                      uint16_t outBufLen,
                      uint16_t* outBufPos,
                      uint16_t* bitsBeforeCol,
                      uint16_t ignoreBits,
                      bool picopassMode )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	607a      	str	r2, [r7, #4]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	817b      	strh	r3, [r7, #10]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	813b      	strh	r3, [r7, #8]
    ReturnCode err = ERR_NONE;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	83fb      	strh	r3, [r7, #30]
    uint16_t crc;
    uint16_t mp; /* Current bit position in manchester bit inBuf*/
    uint16_t bp; /* Current bit position in outBuf */

    *bitsBeforeCol = 0;
 8004bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bca:	2200      	movs	r2, #0
 8004bcc:	801a      	strh	r2, [r3, #0]
    *outBufPos = 0;
 8004bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	801a      	strh	r2, [r3, #0]

    /* first check for valid SOF. Since it starts with 3 unmodulated pulses it is 0x17. */
    if ((inBuf[0] & 0x1fU) != 0x17U)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	f003 031f 	and.w	r3, r3, #31
 8004bdc:	2b17      	cmp	r3, #23
 8004bde:	d001      	beq.n	8004be4 <iso15693VICCDecode+0x34>
    {
		ISO_15693_DEBUG("0x%x\n", iso15693PhyBitBuffer[0]);
		return ERR_FRAMING;
 8004be0:	2309      	movs	r3, #9
 8004be2:	e0ff      	b.n	8004de4 <iso15693VICCDecode+0x234>
    }
    ISO_15693_DEBUG("SOF\n");

    if (outBufLen == 0U)
 8004be4:	893b      	ldrh	r3, [r7, #8]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <iso15693VICCDecode+0x3e>
    {
        return ERR_NONE;
 8004bea:	2300      	movs	r3, #0
 8004bec:	e0fa      	b.n	8004de4 <iso15693VICCDecode+0x234>
    }

    mp = 5; /* 5 bits were SOF, now manchester starts: 2 bits per payload bit */
 8004bee:	2305      	movs	r3, #5
 8004bf0:	83bb      	strh	r3, [r7, #28]
    bp = 0;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	837b      	strh	r3, [r7, #26]

    ST_MEMSET(outBuf,0,outBufLen);
 8004bf6:	893b      	ldrh	r3, [r7, #8]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f008 feb6 	bl	800d96e <memset>

    if (inBufLen == 0U)
 8004c02:	897b      	ldrh	r3, [r7, #10]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f040 808e 	bne.w	8004d26 <iso15693VICCDecode+0x176>
    {
        return ERR_CRC;
 8004c0a:	2315      	movs	r3, #21
 8004c0c:	e0ea      	b.n	8004de4 <iso15693VICCDecode+0x234>
    }

    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
    {
        bool isEOF = false;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	767b      	strb	r3, [r7, #25]
        
        uint8_t man;
        man  = (inBuf[mp/8U] >> (mp%8U)) & 0x1U;
 8004c12:	8bbb      	ldrh	r3, [r7, #28]
 8004c14:	08db      	lsrs	r3, r3, #3
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	461a      	mov	r2, r3
 8004c22:	8bbb      	ldrh	r3, [r7, #28]
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	fa42 f303 	asr.w	r3, r2, r3
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	763b      	strb	r3, [r7, #24]
        man |= ((inBuf[(mp+1U)/8U] >> ((mp+1U)%8U)) & 0x1U) << 1;
 8004c34:	8bbb      	ldrh	r3, [r7, #28]
 8004c36:	3301      	adds	r3, #1
 8004c38:	08db      	lsrs	r3, r3, #3
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	461a      	mov	r2, r3
 8004c42:	8bbb      	ldrh	r3, [r7, #28]
 8004c44:	3301      	adds	r3, #1
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	fa42 f303 	asr.w	r3, r2, r3
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	7e3b      	ldrb	r3, [r7, #24]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	763b      	strb	r3, [r7, #24]
        if (1U == man)
 8004c60:	7e3b      	ldrb	r3, [r7, #24]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d102      	bne.n	8004c6c <iso15693VICCDecode+0xbc>
        {
            bp++;
 8004c66:	8b7b      	ldrh	r3, [r7, #26]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	837b      	strh	r3, [r7, #26]
        }
        if (2U == man)
 8004c6c:	7e3b      	ldrb	r3, [r7, #24]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d119      	bne.n	8004ca6 <iso15693VICCDecode+0xf6>
        {
            outBuf[bp/8U] = (uint8_t)(outBuf[bp/8U] | (1U <<(bp%8U)));  /* MISRA 10.3 */
 8004c72:	8b7b      	ldrh	r3, [r7, #26]
 8004c74:	08db      	lsrs	r3, r3, #3
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	461a      	mov	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	7819      	ldrb	r1, [r3, #0]
 8004c80:	8b7b      	ldrh	r3, [r7, #26]
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	2201      	movs	r2, #1
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	8b7b      	ldrh	r3, [r7, #26]
 8004c90:	08db      	lsrs	r3, r3, #3
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	4618      	mov	r0, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4403      	add	r3, r0
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	b2d2      	uxtb	r2, r2
 8004c9e:	701a      	strb	r2, [r3, #0]
            bp++;
 8004ca0:	8b7b      	ldrh	r3, [r7, #26]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	837b      	strh	r3, [r7, #26]
        }
        if ((bp%8U) == 0U)
 8004ca6:	8b7b      	ldrh	r3, [r7, #26]
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d115      	bne.n	8004cde <iso15693VICCDecode+0x12e>
        { /* Check for EOF */
            ISO_15693_DEBUG("ceof %hhx %hhx\n", inBuf[mp/8U], inBuf[mp/8+1]);
            if ( ((inBuf[mp/8U]   & 0xe0U) == 0xa0U)
 8004cb2:	8bbb      	ldrh	r3, [r7, #28]
 8004cb4:	08db      	lsrs	r3, r3, #3
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	461a      	mov	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004cc4:	2ba0      	cmp	r3, #160	; 0xa0
 8004cc6:	d10a      	bne.n	8004cde <iso15693VICCDecode+0x12e>
               &&(inBuf[(mp/8U)+1U] == 0x03U))
 8004cc8:	8bbb      	ldrh	r3, [r7, #28]
 8004cca:	08db      	lsrs	r3, r3, #3
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3301      	adds	r3, #1
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	d101      	bne.n	8004cde <iso15693VICCDecode+0x12e>
            { /* Now we know that it was 10111000 = EOF */
                ISO_15693_DEBUG("EOF\n");
                isEOF = true;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	767b      	strb	r3, [r7, #25]
            }
        }
        if ( ((0U == man) || (3U == man)) && !isEOF )
 8004cde:	7e3b      	ldrb	r3, [r7, #24]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <iso15693VICCDecode+0x13a>
 8004ce4:	7e3b      	ldrb	r3, [r7, #24]
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d10f      	bne.n	8004d0a <iso15693VICCDecode+0x15a>
 8004cea:	7e7b      	ldrb	r3, [r7, #25]
 8004cec:	f083 0301 	eor.w	r3, r3, #1
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d009      	beq.n	8004d0a <iso15693VICCDecode+0x15a>
        {  
            if (bp >= ignoreBits)
 8004cf6:	8b7a      	ldrh	r2, [r7, #26]
 8004cf8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d302      	bcc.n	8004d04 <iso15693VICCDecode+0x154>
            {
                err = ERR_RF_COLLISION;
 8004cfe:	231d      	movs	r3, #29
 8004d00:	83fb      	strh	r3, [r7, #30]
 8004d02:	e002      	b.n	8004d0a <iso15693VICCDecode+0x15a>
            }
            else
            {
                /* ignored collision: leave as 0 */
                bp++;
 8004d04:	8b7b      	ldrh	r3, [r7, #26]
 8004d06:	3301      	adds	r3, #1
 8004d08:	837b      	strh	r3, [r7, #26]
            }
        }
        if ( (bp >= (outBufLen * 8U)) || (err == ERR_RF_COLLISION) || isEOF )        
 8004d0a:	8b7a      	ldrh	r2, [r7, #26]
 8004d0c:	893b      	ldrh	r3, [r7, #8]
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d20f      	bcs.n	8004d34 <iso15693VICCDecode+0x184>
 8004d14:	8bfb      	ldrh	r3, [r7, #30]
 8004d16:	2b1d      	cmp	r3, #29
 8004d18:	d00c      	beq.n	8004d34 <iso15693VICCDecode+0x184>
 8004d1a:	7e7b      	ldrb	r3, [r7, #25]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d109      	bne.n	8004d34 <iso15693VICCDecode+0x184>
    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
 8004d20:	8bbb      	ldrh	r3, [r7, #28]
 8004d22:	3302      	adds	r3, #2
 8004d24:	83bb      	strh	r3, [r7, #28]
 8004d26:	8bba      	ldrh	r2, [r7, #28]
 8004d28:	897b      	ldrh	r3, [r7, #10]
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	3b02      	subs	r3, #2
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	f4ff af6d 	bcc.w	8004c0e <iso15693VICCDecode+0x5e>
        { /* Don't write beyond the end */
            break;
        }
    }

    *outBufPos = (bp / 8U);
 8004d34:	8b7b      	ldrh	r3, [r7, #26]
 8004d36:	08db      	lsrs	r3, r3, #3
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	801a      	strh	r2, [r3, #0]
    *bitsBeforeCol = bp;
 8004d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d40:	8b7a      	ldrh	r2, [r7, #26]
 8004d42:	801a      	strh	r2, [r3, #0]

    if (err != ERR_NONE) 
 8004d44:	8bfb      	ldrh	r3, [r7, #30]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <iso15693VICCDecode+0x19e>
    {
        return err;
 8004d4a:	8bfb      	ldrh	r3, [r7, #30]
 8004d4c:	e04a      	b.n	8004de4 <iso15693VICCDecode+0x234>
    }

    if ((bp%8U) != 0U)
 8004d4e:	8b7b      	ldrh	r3, [r7, #26]
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <iso15693VICCDecode+0x1ae>
    {
        return ERR_CRC;
 8004d5a:	2315      	movs	r3, #21
 8004d5c:	e042      	b.n	8004de4 <iso15693VICCDecode+0x234>
    }

    if (*outBufPos > 2U)
 8004d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d60:	881b      	ldrh	r3, [r3, #0]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d93b      	bls.n	8004dde <iso15693VICCDecode+0x22e>
    {
        /* finally, check crc */
        ISO_15693_DEBUG("Calculate CRC, val: 0x%x, outBufLen: ", *outBuf);
        ISO_15693_DEBUG("0x%x ", *outBufPos - 2);
        
        crc = rfalCrcCalculateCcitt(((picopassMode) ? 0xE012U : 0xFFFFU), outBuf, *outBufPos - 2U);
 8004d66:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <iso15693VICCDecode+0x1c4>
 8004d6e:	f24e 0012 	movw	r0, #57362	; 0xe012
 8004d72:	e001      	b.n	8004d78 <iso15693VICCDecode+0x1c8>
 8004d74:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	3b02      	subs	r3, #2
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	461a      	mov	r2, r3
 8004d82:	6879      	ldr	r1, [r7, #4]
 8004d84:	f7ff fd1e 	bl	80047c4 <rfalCrcCalculateCcitt>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	82fb      	strh	r3, [r7, #22]
        crc = (uint16_t)((picopassMode) ? crc : ~crc);
 8004d8c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004d90:	f083 0301 	eor.w	r3, r3, #1
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <iso15693VICCDecode+0x1f2>
 8004d9a:	8afb      	ldrh	r3, [r7, #22]
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	e000      	b.n	8004da4 <iso15693VICCDecode+0x1f4>
 8004da2:	8afb      	ldrh	r3, [r7, #22]
 8004da4:	82fb      	strh	r3, [r7, #22]
        
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 8004da6:	8afb      	ldrh	r3, [r7, #22]
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dac:	8812      	ldrh	r2, [r2, #0]
 8004dae:	3a02      	subs	r2, #2
 8004db0:	6879      	ldr	r1, [r7, #4]
 8004db2:	440a      	add	r2, r1
 8004db4:	7812      	ldrb	r2, [r2, #0]
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d10e      	bne.n	8004dd8 <iso15693VICCDecode+0x228>
                (((crc >> 8U) & 0xffU) == outBuf[*outBufPos-1U]))
 8004dba:	8afb      	ldrh	r3, [r7, #22]
 8004dbc:	0a1b      	lsrs	r3, r3, #8
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dc4:	8812      	ldrh	r2, [r2, #0]
 8004dc6:	3a01      	subs	r2, #1
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	440a      	add	r2, r1
 8004dcc:	7812      	ldrb	r2, [r2, #0]
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d102      	bne.n	8004dd8 <iso15693VICCDecode+0x228>
        {
            err = ERR_NONE;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	83fb      	strh	r3, [r7, #30]
 8004dd6:	e004      	b.n	8004de2 <iso15693VICCDecode+0x232>
        }
        else
        {
            ISO_15693_DEBUG("error! Expected: 0x%x, got ", crc);
            ISO_15693_DEBUG("0x%hhx 0x%hhx\n", outBuf[*outBufPos-2], outBuf[*outBufPos-1]);
            err = ERR_CRC;
 8004dd8:	2315      	movs	r3, #21
 8004dda:	83fb      	strh	r3, [r7, #30]
 8004ddc:	e001      	b.n	8004de2 <iso15693VICCDecode+0x232>
        }
    }
    else
    {
        err = ERR_CRC;
 8004dde:	2315      	movs	r3, #21
 8004de0:	83fb      	strh	r3, [r7, #30]
    }

    return err;
 8004de2:	8bfb      	ldrh	r3, [r7, #30]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3720      	adds	r7, #32
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <iso15693PhyVCDCode1Of4>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of4(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b089      	sub	sp, #36	; 0x24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	607b      	str	r3, [r7, #4]
 8004df6:	4603      	mov	r3, r0
 8004df8:	73fb      	strb	r3, [r7, #15]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 4U) {
 8004e0c:	89bb      	ldrh	r3, [r7, #12]
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d801      	bhi.n	8004e16 <iso15693PhyVCDCode1Of4+0x2a>
        return ERR_NOMEM;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e038      	b.n	8004e88 <iso15693PhyVCDCode1Of4+0x9c>
    }

    tmp = data;
 8004e16:	7bfb      	ldrb	r3, [r7, #15]
 8004e18:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	83bb      	strh	r3, [r7, #28]
 8004e1e:	e02f      	b.n	8004e80 <iso15693PhyVCDCode1Of4+0x94>
    {
        switch (tmp & 0x3U)
 8004e20:	7ffb      	ldrb	r3, [r7, #31]
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d81a      	bhi.n	8004e60 <iso15693PhyVCDCode1Of4+0x74>
 8004e2a:	a201      	add	r2, pc, #4	; (adr r2, 8004e30 <iso15693PhyVCDCode1Of4+0x44>)
 8004e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e30:	08004e41 	.word	0x08004e41
 8004e34:	08004e49 	.word	0x08004e49
 8004e38:	08004e51 	.word	0x08004e51
 8004e3c:	08004e59 	.word	0x08004e59
        {
            case 0:
                *outbuf = ISO15693_DAT_00_1_4;
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	2202      	movs	r2, #2
 8004e44:	701a      	strb	r2, [r3, #0]
                break;
 8004e46:	e00c      	b.n	8004e62 <iso15693PhyVCDCode1Of4+0x76>
            case 1:
                *outbuf = ISO15693_DAT_01_1_4;
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	2208      	movs	r2, #8
 8004e4c:	701a      	strb	r2, [r3, #0]
                break;
 8004e4e:	e008      	b.n	8004e62 <iso15693PhyVCDCode1Of4+0x76>
            case 2:
                *outbuf = ISO15693_DAT_10_1_4;
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	2220      	movs	r2, #32
 8004e54:	701a      	strb	r2, [r3, #0]
                break;
 8004e56:	e004      	b.n	8004e62 <iso15693PhyVCDCode1Of4+0x76>
            case 3:
                *outbuf = ISO15693_DAT_11_1_4;
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	2280      	movs	r2, #128	; 0x80
 8004e5c:	701a      	strb	r2, [r3, #0]
                break;
 8004e5e:	e000      	b.n	8004e62 <iso15693PhyVCDCode1Of4+0x76>
            default:
                /* MISRA 16.4: mandatory default statement */
                break;
 8004e60:	bf00      	nop
        }
        outbuf++;
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	3301      	adds	r3, #1
 8004e66:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	801a      	strh	r2, [r3, #0]
        tmp >>= 2;
 8004e74:	7ffb      	ldrb	r3, [r7, #31]
 8004e76:	089b      	lsrs	r3, r3, #2
 8004e78:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 8004e7a:	8bbb      	ldrh	r3, [r7, #28]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	83bb      	strh	r3, [r7, #28]
 8004e80:	8bbb      	ldrh	r3, [r7, #28]
 8004e82:	2b03      	cmp	r3, #3
 8004e84:	d9cc      	bls.n	8004e20 <iso15693PhyVCDCode1Of4+0x34>
    }
    return err;
 8004e86:	8afb      	ldrh	r3, [r7, #22]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3724      	adds	r7, #36	; 0x24
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <iso15693PhyVCDCode1Of256>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of256(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b089      	sub	sp, #36	; 0x24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	607b      	str	r3, [r7, #4]
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	73fb      	strb	r3, [r7, #15]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 64U) {
 8004eb4:	89bb      	ldrh	r3, [r7, #12]
 8004eb6:	2b3f      	cmp	r3, #63	; 0x3f
 8004eb8:	d801      	bhi.n	8004ebe <iso15693PhyVCDCode1Of256+0x2a>
        return ERR_NOMEM;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e039      	b.n	8004f32 <iso15693PhyVCDCode1Of256+0x9e>
    }

    tmp = data;
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
 8004ec0:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	83bb      	strh	r3, [r7, #28]
 8004ec6:	e030      	b.n	8004f2a <iso15693PhyVCDCode1Of256+0x96>
    {
        switch (tmp)
 8004ec8:	7ffb      	ldrb	r3, [r7, #31]
 8004eca:	2b03      	cmp	r3, #3
 8004ecc:	d81a      	bhi.n	8004f04 <iso15693PhyVCDCode1Of256+0x70>
 8004ece:	a201      	add	r2, pc, #4	; (adr r2, 8004ed4 <iso15693PhyVCDCode1Of256+0x40>)
 8004ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed4:	08004ee5 	.word	0x08004ee5
 8004ed8:	08004eed 	.word	0x08004eed
 8004edc:	08004ef5 	.word	0x08004ef5
 8004ee0:	08004efd 	.word	0x08004efd
        {
            case 0:
                *outbuf = ISO15693_DAT_SLOT0_1_256;
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	701a      	strb	r2, [r3, #0]
                break;
 8004eea:	e00f      	b.n	8004f0c <iso15693PhyVCDCode1Of256+0x78>
            case 1:
                *outbuf = ISO15693_DAT_SLOT1_1_256;
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	2208      	movs	r2, #8
 8004ef0:	701a      	strb	r2, [r3, #0]
                break;
 8004ef2:	e00b      	b.n	8004f0c <iso15693PhyVCDCode1Of256+0x78>
            case 2:
                *outbuf = ISO15693_DAT_SLOT2_1_256;
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	701a      	strb	r2, [r3, #0]
                break;
 8004efa:	e007      	b.n	8004f0c <iso15693PhyVCDCode1Of256+0x78>
            case 3:
                *outbuf = ISO15693_DAT_SLOT3_1_256;
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	2280      	movs	r2, #128	; 0x80
 8004f00:	701a      	strb	r2, [r3, #0]
                break;
 8004f02:	e003      	b.n	8004f0c <iso15693PhyVCDCode1Of256+0x78>
            default:
                *outbuf = 0;
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	2200      	movs	r2, #0
 8004f08:	701a      	strb	r2, [r3, #0]
                break;               
 8004f0a:	bf00      	nop
        }
        outbuf++;
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	3301      	adds	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	801a      	strh	r2, [r3, #0]
        tmp -= 4U;
 8004f1e:	7ffb      	ldrb	r3, [r7, #31]
 8004f20:	3b04      	subs	r3, #4
 8004f22:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 8004f24:	8bbb      	ldrh	r3, [r7, #28]
 8004f26:	3301      	adds	r3, #1
 8004f28:	83bb      	strh	r3, [r7, #28]
 8004f2a:	8bbb      	ldrh	r3, [r7, #28]
 8004f2c:	2b3f      	cmp	r3, #63	; 0x3f
 8004f2e:	d9cb      	bls.n	8004ec8 <iso15693PhyVCDCode1Of256+0x34>
    }

    return err;
 8004f30:	8afb      	ldrh	r3, [r7, #22]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3724      	adds	r7, #36	; 0x24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop

08004f40 <isoDepClearCounters>:
 ******************************************************************************
 */

/*******************************************************************************/
static void isoDepClearCounters( void )
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
    gIsoDep.cntIRetrys   = 0;
 8004f44:	4b06      	ldr	r3, [pc, #24]	; (8004f60 <isoDepClearCounters+0x20>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	715a      	strb	r2, [r3, #5]
    gIsoDep.cntRRetrys   = 0;
 8004f4a:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <isoDepClearCounters+0x20>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	719a      	strb	r2, [r3, #6]
    gIsoDep.cntSRetrys   = 0;
 8004f50:	4b03      	ldr	r3, [pc, #12]	; (8004f60 <isoDepClearCounters+0x20>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	71da      	strb	r2, [r3, #7]
}
 8004f56:	bf00      	nop
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	200002fc 	.word	0x200002fc

08004f64 <isoDepTx>:

/*******************************************************************************/
static ReturnCode isoDepTx( uint8_t pcb, const uint8_t* txBuf, uint8_t *infBuf, uint16_t infLen, uint32_t fwt )
{
 8004f64:	b590      	push	{r4, r7, lr}
 8004f66:	b08b      	sub	sp, #44	; 0x2c
 8004f68:	af04      	add	r7, sp, #16
 8004f6a:	60b9      	str	r1, [r7, #8]
 8004f6c:	607a      	str	r2, [r7, #4]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	4603      	mov	r3, r0
 8004f72:	73fb      	strb	r3, [r7, #15]
 8004f74:	4613      	mov	r3, r2
 8004f76:	81bb      	strh	r3, [r7, #12]
    uint8_t    *txBlock;
    uint16_t   txBufLen;
    uint8_t    computedPcb;

    
    txBlock         = infBuf;                      /* Point to beginning of the INF, and go backwards     */
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	617b      	str	r3, [r7, #20]
    gIsoDep.lastPCB = pcb;                         /* Store the last PCB sent                             */
 8004f7c:	4a44      	ldr	r2, [pc, #272]	; (8005090 <isoDepTx+0x12c>)
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
 8004f80:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    
    
    if ( infLen > 0U )
 8004f84:	89bb      	ldrh	r3, [r7, #12]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d009      	beq.n	8004f9e <isoDepTx+0x3a>
    {
        if ( ((uint32_t)infBuf - (uint32_t)txBuf) < gIsoDep.hdrLen ) /* Check that we can fit the header in the given space */
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	4a3f      	ldr	r2, [pc, #252]	; (8005090 <isoDepTx+0x12c>)
 8004f92:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d201      	bcs.n	8004f9e <isoDepTx+0x3a>
        {
            return ERR_NOMEM;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e074      	b.n	8005088 <isoDepTx+0x124>
    }
    
    
    /*******************************************************************************/
    /* Compute optional PCB bits */
    computedPcb = pcb;
 8004f9e:	7bfb      	ldrb	r3, [r7, #15]
 8004fa0:	74fb      	strb	r3, [r7, #19]
    if ((gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) {   computedPcb |= ISODEP_PCB_DID_BIT;            }
 8004fa2:	4b3b      	ldr	r3, [pc, #236]	; (8005090 <isoDepTx+0x12c>)
 8004fa4:	78db      	ldrb	r3, [r3, #3]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d108      	bne.n	8004fbc <isoDepTx+0x58>
 8004faa:	4b39      	ldr	r3, [pc, #228]	; (8005090 <isoDepTx+0x12c>)
 8004fac:	78db      	ldrb	r3, [r3, #3]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d108      	bne.n	8004fc4 <isoDepTx+0x60>
 8004fb2:	4b37      	ldr	r3, [pc, #220]	; (8005090 <isoDepTx+0x12c>)
 8004fb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <isoDepTx+0x60>
 8004fbc:	7cfb      	ldrb	r3, [r7, #19]
 8004fbe:	f043 0308 	orr.w	r3, r3, #8
 8004fc2:	74fb      	strb	r3, [r7, #19]
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)                                                                  {   computedPcb |= ISODEP_PCB_NAD_BIT;            }
 8004fc4:	4b32      	ldr	r3, [pc, #200]	; (8005090 <isoDepTx+0x12c>)
 8004fc6:	791b      	ldrb	r3, [r3, #4]
 8004fc8:	2bff      	cmp	r3, #255	; 0xff
 8004fca:	d003      	beq.n	8004fd4 <isoDepTx+0x70>
 8004fcc:	7cfb      	ldrb	r3, [r7, #19]
 8004fce:	f043 0304 	orr.w	r3, r3, #4
 8004fd2:	74fb      	strb	r3, [r7, #19]
    if ((gIsoDep.isTxChaining) && (isoDep_PCBisIBlock(computedPcb)) )                                       {   computedPcb |= ISODEP_PCB_CHAINING_BIT;       } 
 8004fd4:	4b2e      	ldr	r3, [pc, #184]	; (8005090 <isoDepTx+0x12c>)
 8004fd6:	7c9b      	ldrb	r3, [r3, #18]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d008      	beq.n	8004fee <isoDepTx+0x8a>
 8004fdc:	7cfb      	ldrb	r3, [r7, #19]
 8004fde:	f003 03e2 	and.w	r3, r3, #226	; 0xe2
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d103      	bne.n	8004fee <isoDepTx+0x8a>
 8004fe6:	7cfb      	ldrb	r3, [r7, #19]
 8004fe8:	f043 0310 	orr.w	r3, r3, #16
 8004fec:	74fb      	strb	r3, [r7, #19]

    
    /*******************************************************************************/
    /* Compute Payload on the given txBuf, start by the PCB | DID | NAD | before INF */
    
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD) 
 8004fee:	4b28      	ldr	r3, [pc, #160]	; (8005090 <isoDepTx+0x12c>)
 8004ff0:	791b      	ldrb	r3, [r3, #4]
 8004ff2:	2bff      	cmp	r3, #255	; 0xff
 8004ff4:	d006      	beq.n	8005004 <isoDepTx+0xa0>
    {
        *(--txBlock) = gIsoDep.nad;                /* NAD is optional */
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	4b24      	ldr	r3, [pc, #144]	; (8005090 <isoDepTx+0x12c>)
 8004ffe:	791a      	ldrb	r2, [r3, #4]
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	701a      	strb	r2, [r3, #0]
    }
    
    if ( (gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) 
 8005004:	4b22      	ldr	r3, [pc, #136]	; (8005090 <isoDepTx+0x12c>)
 8005006:	78db      	ldrb	r3, [r3, #3]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d108      	bne.n	800501e <isoDepTx+0xba>
 800500c:	4b20      	ldr	r3, [pc, #128]	; (8005090 <isoDepTx+0x12c>)
 800500e:	78db      	ldrb	r3, [r3, #3]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10b      	bne.n	800502c <isoDepTx+0xc8>
 8005014:	4b1e      	ldr	r3, [pc, #120]	; (8005090 <isoDepTx+0x12c>)
 8005016:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800501a:	2b00      	cmp	r3, #0
 800501c:	d006      	beq.n	800502c <isoDepTx+0xc8>
    {
        *(--txBlock)  = gIsoDep.did;               /* DID is optional */
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	3b01      	subs	r3, #1
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	4b1a      	ldr	r3, [pc, #104]	; (8005090 <isoDepTx+0x12c>)
 8005026:	78da      	ldrb	r2, [r3, #3]
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	701a      	strb	r2, [r3, #0]
    }
    
    *(--txBlock)      = computedPcb;               /* PCB always present */
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	3b01      	subs	r3, #1
 8005030:	617b      	str	r3, [r7, #20]
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	7cfa      	ldrb	r2, [r7, #19]
 8005036:	701a      	strb	r2, [r3, #0]
    
    txBufLen = (infLen + (uint16_t)((uint32_t)infBuf - (uint32_t)txBlock)); /* Calculate overall buffer size */
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	b29a      	uxth	r2, r3
 8005040:	89bb      	ldrh	r3, [r7, #12]
 8005042:	4413      	add	r3, r2
 8005044:	823b      	strh	r3, [r7, #16]
    
    if ( txBufLen > (gIsoDep.fsx - ISODEP_CRC_LEN) )                        /* Check if msg length violates the maximum frame size FSC */
 8005046:	8a3a      	ldrh	r2, [r7, #16]
 8005048:	4b11      	ldr	r3, [pc, #68]	; (8005090 <isoDepTx+0x12c>)
 800504a:	8a1b      	ldrh	r3, [r3, #16]
 800504c:	3b02      	subs	r3, #2
 800504e:	429a      	cmp	r2, r3
 8005050:	d901      	bls.n	8005056 <isoDepTx+0xf2>
    {
        return ERR_NOTSUPP;
 8005052:	2318      	movs	r3, #24
 8005054:	e018      	b.n	8005088 <isoDepTx+0x124>
    }
        
    return rfalTransceiveBlockingTx( txBlock, txBufLen, gIsoDep.rxBuf, gIsoDep.rxBufLen, gIsoDep.rxLen, RFAL_TXRX_FLAGS_DEFAULT, ((gIsoDep.role == ISODEP_ROLE_PICC) ? RFAL_FWT_NONE : fwt ) );
 8005056:	4b0e      	ldr	r3, [pc, #56]	; (8005090 <isoDepTx+0x12c>)
 8005058:	6998      	ldr	r0, [r3, #24]
 800505a:	4b0d      	ldr	r3, [pc, #52]	; (8005090 <isoDepTx+0x12c>)
 800505c:	8bdc      	ldrh	r4, [r3, #30]
 800505e:	4b0c      	ldr	r3, [pc, #48]	; (8005090 <isoDepTx+0x12c>)
 8005060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005062:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <isoDepTx+0x12c>)
 8005064:	785b      	ldrb	r3, [r3, #1]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d001      	beq.n	800506e <isoDepTx+0x10a>
 800506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506c:	e001      	b.n	8005072 <isoDepTx+0x10e>
 800506e:	f04f 33ff 	mov.w	r3, #4294967295
 8005072:	8a39      	ldrh	r1, [r7, #16]
 8005074:	9302      	str	r3, [sp, #8]
 8005076:	2300      	movs	r3, #0
 8005078:	9301      	str	r3, [sp, #4]
 800507a:	9200      	str	r2, [sp, #0]
 800507c:	4623      	mov	r3, r4
 800507e:	4602      	mov	r2, r0
 8005080:	6978      	ldr	r0, [r7, #20]
 8005082:	f006 fbf3 	bl	800b86c <rfalTransceiveBlockingTx>
 8005086:	4603      	mov	r3, r0
}
 8005088:	4618      	mov	r0, r3
 800508a:	371c      	adds	r7, #28
 800508c:	46bd      	mov	sp, r7
 800508e:	bd90      	pop	{r4, r7, pc}
 8005090:	200002fc 	.word	0x200002fc

08005094 <isoDepHandleControlMsg>:

/*******************************************************************************/
static ReturnCode isoDepHandleControlMsg( rfalIsoDepControlMsg controlMsg, uint8_t param )
{
 8005094:	b590      	push	{r4, r7, lr}
 8005096:	b089      	sub	sp, #36	; 0x24
 8005098:	af02      	add	r7, sp, #8
 800509a:	4603      	mov	r3, r0
 800509c:	460a      	mov	r2, r1
 800509e:	71fb      	strb	r3, [r7, #7]
 80050a0:	4613      	mov	r3, r2
 80050a2:	71bb      	strb	r3, [r7, #6]
    uint8_t  pcb;   
    uint8_t  ctrlMsgBuf[ISODEP_CONTROLMSG_BUF_LEN];
    uint8_t  infLen;
    uint32_t fwtTemp;
    
    infLen  = 0;
 80050a4:	2300      	movs	r3, #0
 80050a6:	75bb      	strb	r3, [r7, #22]
    fwtTemp = (gIsoDep.fwt + gIsoDep.dFwt);
 80050a8:	4b56      	ldr	r3, [pc, #344]	; (8005204 <isoDepHandleControlMsg+0x170>)
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	4b55      	ldr	r3, [pc, #340]	; (8005204 <isoDepHandleControlMsg+0x170>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	4413      	add	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]
    ST_MEMSET( ctrlMsgBuf, 0x00, ISODEP_CONTROLMSG_BUF_LEN );
 80050b4:	f107 030c 	add.w	r3, r7, #12
 80050b8:	2204      	movs	r2, #4
 80050ba:	2100      	movs	r1, #0
 80050bc:	4618      	mov	r0, r3
 80050be:	f008 fc56 	bl	800d96e <memset>
    
    switch( controlMsg )
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	2b03      	cmp	r3, #3
 80050c6:	f200 8089 	bhi.w	80051dc <isoDepHandleControlMsg+0x148>
 80050ca:	a201      	add	r2, pc, #4	; (adr r2, 80050d0 <isoDepHandleControlMsg+0x3c>)
 80050cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d0:	080050e1 	.word	0x080050e1
 80050d4:	0800510d 	.word	0x0800510d
 80050d8:	08005139 	.word	0x08005139
 80050dc:	080051a9 	.word	0x080051a9
    {
        /*******************************************************************************/
        case ISODEP_R_ACK:
            
            if( gIsoDep.cntRRetrys++ > gIsoDep.maxRetriesR )
 80050e0:	4b48      	ldr	r3, [pc, #288]	; (8005204 <isoDepHandleControlMsg+0x170>)
 80050e2:	799b      	ldrb	r3, [r3, #6]
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	b2d1      	uxtb	r1, r2
 80050e8:	4a46      	ldr	r2, [pc, #280]	; (8005204 <isoDepHandleControlMsg+0x170>)
 80050ea:	7191      	strb	r1, [r2, #6]
 80050ec:	4a45      	ldr	r2, [pc, #276]	; (8005204 <isoDepHandleControlMsg+0x170>)
 80050ee:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d901      	bls.n	80050fa <isoDepHandleControlMsg+0x66>
            {
                return ERR_PROTO;
 80050f6:	230b      	movs	r3, #11
 80050f8:	e080      	b.n	80051fc <isoDepHandleControlMsg+0x168>
            }
            
            pcb = isoDep_PCBRACK( gIsoDep.blockNumber );
 80050fa:	4b42      	ldr	r3, [pc, #264]	; (8005204 <isoDepHandleControlMsg+0x170>)
 80050fc:	789b      	ldrb	r3, [r3, #2]
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	b2db      	uxtb	r3, r3
 8005104:	f063 035d 	orn	r3, r3, #93	; 0x5d
 8005108:	75fb      	strb	r3, [r7, #23]
            break;
 800510a:	e069      	b.n	80051e0 <isoDepHandleControlMsg+0x14c>
            
        /*******************************************************************************/
        case ISODEP_R_NAK:
            if( gIsoDep.cntRRetrys++ > gIsoDep.maxRetriesR )
 800510c:	4b3d      	ldr	r3, [pc, #244]	; (8005204 <isoDepHandleControlMsg+0x170>)
 800510e:	799b      	ldrb	r3, [r3, #6]
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	b2d1      	uxtb	r1, r2
 8005114:	4a3b      	ldr	r2, [pc, #236]	; (8005204 <isoDepHandleControlMsg+0x170>)
 8005116:	7191      	strb	r1, [r2, #6]
 8005118:	4a3a      	ldr	r2, [pc, #232]	; (8005204 <isoDepHandleControlMsg+0x170>)
 800511a:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 800511e:	4293      	cmp	r3, r2
 8005120:	d901      	bls.n	8005126 <isoDepHandleControlMsg+0x92>
            {
                return ERR_TIMEOUT;
 8005122:	2304      	movs	r3, #4
 8005124:	e06a      	b.n	80051fc <isoDepHandleControlMsg+0x168>
            }
            
            pcb = isoDep_PCBRNAK( gIsoDep.blockNumber );            
 8005126:	4b37      	ldr	r3, [pc, #220]	; (8005204 <isoDepHandleControlMsg+0x170>)
 8005128:	789b      	ldrb	r3, [r3, #2]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	b2db      	uxtb	r3, r3
 8005130:	f063 034d 	orn	r3, r3, #77	; 0x4d
 8005134:	75fb      	strb	r3, [r7, #23]
            break;
 8005136:	e053      	b.n	80051e0 <isoDepHandleControlMsg+0x14c>
            
        /*******************************************************************************/
        case ISODEP_S_WTX:
            if( gIsoDep.cntSRetrys++ > gIsoDep.maxRetriesS )
 8005138:	4b32      	ldr	r3, [pc, #200]	; (8005204 <isoDepHandleControlMsg+0x170>)
 800513a:	79db      	ldrb	r3, [r3, #7]
 800513c:	1c5a      	adds	r2, r3, #1
 800513e:	b2d1      	uxtb	r1, r2
 8005140:	4a30      	ldr	r2, [pc, #192]	; (8005204 <isoDepHandleControlMsg+0x170>)
 8005142:	71d1      	strb	r1, [r2, #7]
 8005144:	4a2f      	ldr	r2, [pc, #188]	; (8005204 <isoDepHandleControlMsg+0x170>)
 8005146:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
 800514a:	4293      	cmp	r3, r2
 800514c:	d901      	bls.n	8005152 <isoDepHandleControlMsg+0xbe>
            {
                return ERR_PROTO;
 800514e:	230b      	movs	r3, #11
 8005150:	e054      	b.n	80051fc <isoDepHandleControlMsg+0x168>
            }
            
            /* Check if WTXM is valid */
            if( ! isoDep_isWTXMValid(param) )
 8005152:	79bb      	ldrb	r3, [r7, #6]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <isoDepHandleControlMsg+0xca>
 8005158:	79bb      	ldrb	r3, [r7, #6]
 800515a:	2b3b      	cmp	r3, #59	; 0x3b
 800515c:	d901      	bls.n	8005162 <isoDepHandleControlMsg+0xce>
            {
                return ERR_PROTO;
 800515e:	230b      	movs	r3, #11
 8005160:	e04c      	b.n	80051fc <isoDepHandleControlMsg+0x168>
            }
            
            if( gIsoDep.role == ISODEP_ROLE_PCD )
 8005162:	4b28      	ldr	r3, [pc, #160]	; (8005204 <isoDepHandleControlMsg+0x170>)
 8005164:	785b      	ldrb	r3, [r3, #1]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d111      	bne.n	800518e <isoDepHandleControlMsg+0xfa>
            {
                /* Calculate temp Wait Time eXtension */ 
                fwtTemp = (gIsoDep.fwt * param);
 800516a:	4b26      	ldr	r3, [pc, #152]	; (8005204 <isoDepHandleControlMsg+0x170>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	79ba      	ldrb	r2, [r7, #6]
 8005170:	fb02 f303 	mul.w	r3, r2, r3
 8005174:	613b      	str	r3, [r7, #16]
                fwtTemp = MIN( RFAL_ISODEP_MAX_FWT, fwtTemp );
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800517c:	bf28      	it	cs
 800517e:	f04f 6380 	movcs.w	r3, #67108864	; 0x4000000
 8005182:	613b      	str	r3, [r7, #16]
                fwtTemp += gIsoDep.dFwt;
 8005184:	4b1f      	ldr	r3, [pc, #124]	; (8005204 <isoDepHandleControlMsg+0x170>)
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4413      	add	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
            }
            
            pcb = ISODEP_PCB_SWTX;
 800518e:	23f2      	movs	r3, #242	; 0xf2
 8005190:	75fb      	strb	r3, [r7, #23]
            ctrlMsgBuf[ RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN + infLen++] = param;
 8005192:	7dbb      	ldrb	r3, [r7, #22]
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	75ba      	strb	r2, [r7, #22]
 8005198:	3302      	adds	r3, #2
 800519a:	f107 0218 	add.w	r2, r7, #24
 800519e:	4413      	add	r3, r2
 80051a0:	79ba      	ldrb	r2, [r7, #6]
 80051a2:	f803 2c0c 	strb.w	r2, [r3, #-12]
            break;
 80051a6:	e01b      	b.n	80051e0 <isoDepHandleControlMsg+0x14c>
            
        /*******************************************************************************/
        case ISODEP_S_DSL:
            if( gIsoDep.cntSRetrys++ > gIsoDep.maxRetriesS )
 80051a8:	4b16      	ldr	r3, [pc, #88]	; (8005204 <isoDepHandleControlMsg+0x170>)
 80051aa:	79db      	ldrb	r3, [r3, #7]
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	b2d1      	uxtb	r1, r2
 80051b0:	4a14      	ldr	r2, [pc, #80]	; (8005204 <isoDepHandleControlMsg+0x170>)
 80051b2:	71d1      	strb	r1, [r2, #7]
 80051b4:	4a13      	ldr	r2, [pc, #76]	; (8005204 <isoDepHandleControlMsg+0x170>)
 80051b6:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d901      	bls.n	80051c2 <isoDepHandleControlMsg+0x12e>
            {
                return ERR_PROTO;
 80051be:	230b      	movs	r3, #11
 80051c0:	e01c      	b.n	80051fc <isoDepHandleControlMsg+0x168>
            }
            
            if( gIsoDep.role == ISODEP_ROLE_PCD )
 80051c2:	4b10      	ldr	r3, [pc, #64]	; (8005204 <isoDepHandleControlMsg+0x170>)
 80051c4:	785b      	ldrb	r3, [r3, #1]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d105      	bne.n	80051d6 <isoDepHandleControlMsg+0x142>
            {
                /* Digital 1.0 - 13.2.7.3 Poller must wait fwtDEACTIVATION */
                fwtTemp = ISODEP_FWT_DEACTIVATION;
 80051ca:	f44f 338c 	mov.w	r3, #71680	; 0x11800
 80051ce:	613b      	str	r3, [r7, #16]
                gIsoDep.state = ISODEP_ST_PCD_WAIT_DSL;
 80051d0:	4b0c      	ldr	r3, [pc, #48]	; (8005204 <isoDepHandleControlMsg+0x170>)
 80051d2:	2203      	movs	r2, #3
 80051d4:	701a      	strb	r2, [r3, #0]
            }
            pcb = ISODEP_PCB_SDSL;
 80051d6:	23c2      	movs	r3, #194	; 0xc2
 80051d8:	75fb      	strb	r3, [r7, #23]
            break;
 80051da:	e001      	b.n	80051e0 <isoDepHandleControlMsg+0x14c>
        
        /*******************************************************************************/
        default:
            return ERR_INTERNAL;
 80051dc:	230c      	movs	r3, #12
 80051de:	e00d      	b.n	80051fc <isoDepHandleControlMsg+0x168>
    }
    
    return isoDepTx( pcb, ctrlMsgBuf, &ctrlMsgBuf[RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN], infLen, fwtTemp );
 80051e0:	7dbb      	ldrb	r3, [r7, #22]
 80051e2:	b29c      	uxth	r4, r3
 80051e4:	f107 030c 	add.w	r3, r7, #12
 80051e8:	1c9a      	adds	r2, r3, #2
 80051ea:	f107 010c 	add.w	r1, r7, #12
 80051ee:	7df8      	ldrb	r0, [r7, #23]
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	4623      	mov	r3, r4
 80051f6:	f7ff feb5 	bl	8004f64 <isoDepTx>
 80051fa:	4603      	mov	r3, r0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	371c      	adds	r7, #28
 8005200:	46bd      	mov	sp, r7
 8005202:	bd90      	pop	{r4, r7, pc}
 8005204:	200002fc 	.word	0x200002fc

08005208 <rfalIsoDepInitialize>:
 */


/*******************************************************************************/
void rfalIsoDepInitialize( void )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
    gIsoDep.state        = ISODEP_ST_IDLE;
 800520c:	4b26      	ldr	r3, [pc, #152]	; (80052a8 <rfalIsoDepInitialize+0xa0>)
 800520e:	2200      	movs	r2, #0
 8005210:	701a      	strb	r2, [r3, #0]
    gIsoDep.role         = ISODEP_ROLE_PCD;
 8005212:	4b25      	ldr	r3, [pc, #148]	; (80052a8 <rfalIsoDepInitialize+0xa0>)
 8005214:	2200      	movs	r2, #0
 8005216:	705a      	strb	r2, [r3, #1]
    gIsoDep.did          = RFAL_ISODEP_NO_DID;
 8005218:	4b23      	ldr	r3, [pc, #140]	; (80052a8 <rfalIsoDepInitialize+0xa0>)
 800521a:	2200      	movs	r2, #0
 800521c:	70da      	strb	r2, [r3, #3]
    gIsoDep.nad          = RFAL_ISODEP_NO_NAD;
 800521e:	4b22      	ldr	r3, [pc, #136]	; (80052a8 <rfalIsoDepInitialize+0xa0>)
 8005220:	22ff      	movs	r2, #255	; 0xff
 8005222:	711a      	strb	r2, [r3, #4]
    gIsoDep.blockNumber  = 0;
 8005224:	4b20      	ldr	r3, [pc, #128]	; (80052a8 <rfalIsoDepInitialize+0xa0>)
 8005226:	2200      	movs	r2, #0
 8005228:	709a      	strb	r2, [r3, #2]
    gIsoDep.isTxChaining = false;
 800522a:	4b1f      	ldr	r3, [pc, #124]	; (80052a8 <rfalIsoDepInitialize+0xa0>)
 800522c:	2200      	movs	r2, #0
 800522e:	749a      	strb	r2, [r3, #18]
    gIsoDep.isRxChaining = false;
 8005230:	4b1d      	ldr	r3, [pc, #116]	; (80052a8 <rfalIsoDepInitialize+0xa0>)
 8005232:	2200      	movs	r2, #0
 8005234:	74da      	strb	r2, [r3, #19]
    gIsoDep.lastDID00    = false;
 8005236:	4b1c      	ldr	r3, [pc, #112]	; (80052a8 <rfalIsoDepInitialize+0xa0>)
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    gIsoDep.lastPCB      = ISODEP_PCB_INVALID;
 800523e:	4b1a      	ldr	r3, [pc, #104]	; (80052a8 <rfalIsoDepInitialize+0xa0>)
 8005240:	2240      	movs	r2, #64	; 0x40
 8005242:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    gIsoDep.fsx          = (uint16_t)RFAL_ISODEP_FSX_16;
 8005246:	4b18      	ldr	r3, [pc, #96]	; (80052a8 <rfalIsoDepInitialize+0xa0>)
 8005248:	2210      	movs	r2, #16
 800524a:	821a      	strh	r2, [r3, #16]
    gIsoDep.ourFsx       = (uint16_t)RFAL_ISODEP_FSX_16;
 800524c:	4b16      	ldr	r3, [pc, #88]	; (80052a8 <rfalIsoDepInitialize+0xa0>)
 800524e:	2210      	movs	r2, #16
 8005250:	845a      	strh	r2, [r3, #34]	; 0x22
    gIsoDep.hdrLen       = RFAL_ISODEP_PCB_LEN;
 8005252:	4b15      	ldr	r3, [pc, #84]	; (80052a8 <rfalIsoDepInitialize+0xa0>)
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    
    gIsoDep.rxLen        = NULL;
 800525a:	4b13      	ldr	r3, [pc, #76]	; (80052a8 <rfalIsoDepInitialize+0xa0>)
 800525c:	2200      	movs	r2, #0
 800525e:	62da      	str	r2, [r3, #44]	; 0x2c
    gIsoDep.rxBuf        = NULL;
 8005260:	4b11      	ldr	r3, [pc, #68]	; (80052a8 <rfalIsoDepInitialize+0xa0>)
 8005262:	2200      	movs	r2, #0
 8005264:	619a      	str	r2, [r3, #24]
    
    gIsoDep.isTxPending  = false;
 8005266:	4b10      	ldr	r3, [pc, #64]	; (80052a8 <rfalIsoDepInitialize+0xa0>)
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    gIsoDep.isWait4WTX   = false;
 800526e:	4b0e      	ldr	r3, [pc, #56]	; (80052a8 <rfalIsoDepInitialize+0xa0>)
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    gIsoDep.compMode       = RFAL_COMPLIANCE_MODE_NFC;
 8005276:	4b0c      	ldr	r3, [pc, #48]	; (80052a8 <rfalIsoDepInitialize+0xa0>)
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    gIsoDep.maxRetriesR    = RFAL_ISODEP_MAX_R_RETRYS;
 800527e:	4b0a      	ldr	r3, [pc, #40]	; (80052a8 <rfalIsoDepInitialize+0xa0>)
 8005280:	2203      	movs	r2, #3
 8005282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    gIsoDep.maxRetriesS    = RFAL_ISODEP_MAX_S_RETRYS;
 8005286:	4b08      	ldr	r3, [pc, #32]	; (80052a8 <rfalIsoDepInitialize+0xa0>)
 8005288:	2203      	movs	r2, #3
 800528a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    gIsoDep.maxRetriesI    = RFAL_ISODEP_MAX_I_RETRYS;
 800528e:	4b06      	ldr	r3, [pc, #24]	; (80052a8 <rfalIsoDepInitialize+0xa0>)
 8005290:	2202      	movs	r2, #2
 8005292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    gIsoDep.maxRetriesRATS = RFAL_ISODEP_RATS_RETRIES;
 8005296:	4b04      	ldr	r3, [pc, #16]	; (80052a8 <rfalIsoDepInitialize+0xa0>)
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    
    isoDepClearCounters();
 800529e:	f7ff fe4f 	bl	8004f40 <isoDepClearCounters>
}
 80052a2:	bf00      	nop
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	200002fc 	.word	0x200002fc

080052ac <isoDepDataExchangePCD>:


#if RFAL_FEATURE_ISO_DEP_POLL
/*******************************************************************************/
static ReturnCode isoDepDataExchangePCD( uint16_t *outActRxLen, bool *outIsChaining )
{
 80052ac:	b5b0      	push	{r4, r5, r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
    ReturnCode ret;
    uint8_t    rxPCB;
    
    /* Check out parameters */
    if( (outActRxLen == NULL) || (outIsChaining == NULL) )
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <isoDepDataExchangePCD+0x16>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <isoDepDataExchangePCD+0x1a>
    {
        return ERR_PARAM;
 80052c2:	2307      	movs	r3, #7
 80052c4:	e294      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
    }    
    
    *outIsChaining = false;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2200      	movs	r2, #0
 80052ca:	701a      	strb	r2, [r3, #0]
        
    /* Calculate header required and check if the buffers InfPositions are suitable */    
    gIsoDep.hdrLen = RFAL_ISODEP_PCB_LEN;
 80052cc:	4bb6      	ldr	r3, [pc, #728]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    if (gIsoDep.did != RFAL_ISODEP_NO_DID)  { gIsoDep.hdrLen  += RFAL_ISODEP_DID_LEN;  }
 80052d4:	4bb4      	ldr	r3, [pc, #720]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 80052d6:	78db      	ldrb	r3, [r3, #3]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d007      	beq.n	80052ec <isoDepDataExchangePCD+0x40>
 80052dc:	4bb2      	ldr	r3, [pc, #712]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 80052de:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80052e2:	3301      	adds	r3, #1
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	4bb0      	ldr	r3, [pc, #704]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 80052e8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)  { gIsoDep.hdrLen  += RFAL_ISODEP_NAD_LEN;  }
 80052ec:	4bae      	ldr	r3, [pc, #696]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 80052ee:	791b      	ldrb	r3, [r3, #4]
 80052f0:	2bff      	cmp	r3, #255	; 0xff
 80052f2:	d007      	beq.n	8005304 <isoDepDataExchangePCD+0x58>
 80052f4:	4bac      	ldr	r3, [pc, #688]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 80052f6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80052fa:	3301      	adds	r3, #1
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	4baa      	ldr	r3, [pc, #680]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 8005300:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    
    /* check if there is enough space before the infPos to append ISO-DEP headers on rx and tx */
    if( (gIsoDep.rxBufInfPos < gIsoDep.hdrLen) || (gIsoDep.txBufInfPos < gIsoDep.hdrLen) )
 8005304:	4ba8      	ldr	r3, [pc, #672]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 8005306:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800530a:	4ba7      	ldr	r3, [pc, #668]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 800530c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005310:	429a      	cmp	r2, r3
 8005312:	d307      	bcc.n	8005324 <isoDepDataExchangePCD+0x78>
 8005314:	4ba4      	ldr	r3, [pc, #656]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 8005316:	f893 2020 	ldrb.w	r2, [r3, #32]
 800531a:	4ba3      	ldr	r3, [pc, #652]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 800531c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005320:	429a      	cmp	r2, r3
 8005322:	d201      	bcs.n	8005328 <isoDepDataExchangePCD+0x7c>
    {
        return ERR_PARAM;
 8005324:	2307      	movs	r3, #7
 8005326:	e263      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
    }
    
    /*******************************************************************************/
    /* Wait until SFGT has been fulfilled (as a PCD) */
    if(gIsoDep.SFGTTimer != 0U)
 8005328:	4b9f      	ldr	r3, [pc, #636]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 800532a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00c      	beq.n	800534a <isoDepDataExchangePCD+0x9e>
    {
        if( !isoDepTimerisExpired( gIsoDep.SFGTTimer ) )
 8005330:	4b9d      	ldr	r3, [pc, #628]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 8005332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005334:	4618      	mov	r0, r3
 8005336:	f7fd f9e1 	bl	80026fc <timerIsExpired>
 800533a:	4603      	mov	r3, r0
 800533c:	f083 0301 	eor.w	r3, r3, #1
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <isoDepDataExchangePCD+0x9e>
        {
            return ERR_BUSY;
 8005346:	2302      	movs	r3, #2
 8005348:	e252      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
        }
    }
    /* Once done, clear SFGT timer */
    gIsoDep.SFGTTimer = 0;
 800534a:	4b97      	ldr	r3, [pc, #604]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 800534c:	2200      	movs	r2, #0
 800534e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    
    /*******************************************************************************/
    switch( gIsoDep.state )
 8005350:	4b95      	ldr	r3, [pc, #596]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b03      	cmp	r3, #3
 8005356:	f200 8249 	bhi.w	80057ec <isoDepDataExchangePCD+0x540>
 800535a:	a201      	add	r2, pc, #4	; (adr r2, 8005360 <isoDepDataExchangePCD+0xb4>)
 800535c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005360:	08005371 	.word	0x08005371
 8005364:	08005375 	.word	0x08005375
 8005368:	080053c3 	.word	0x080053c3
 800536c:	080053c3 	.word	0x080053c3
    {
        /*******************************************************************************/
        case ISODEP_ST_IDLE:
            return ERR_NONE;
 8005370:	2300      	movs	r3, #0
 8005372:	e23d      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
        
        /*******************************************************************************/
        case ISODEP_ST_PCD_TX:
            ret = isoDepTx( isoDep_PCBIBlock( gIsoDep.blockNumber ), gIsoDep.txBuf, &gIsoDep.txBuf[gIsoDep.txBufInfPos], gIsoDep.txBufLen, (gIsoDep.fwt + gIsoDep.dFwt) );
 8005374:	4b8c      	ldr	r3, [pc, #560]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 8005376:	789b      	ldrb	r3, [r3, #2]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	b2db      	uxtb	r3, r3
 800537e:	f043 0302 	orr.w	r3, r3, #2
 8005382:	b2d8      	uxtb	r0, r3
 8005384:	4b88      	ldr	r3, [pc, #544]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 8005386:	6959      	ldr	r1, [r3, #20]
 8005388:	4b87      	ldr	r3, [pc, #540]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	4a86      	ldr	r2, [pc, #536]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 800538e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005392:	189c      	adds	r4, r3, r2
 8005394:	4b84      	ldr	r3, [pc, #528]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 8005396:	8b9d      	ldrh	r5, [r3, #28]
 8005398:	4b83      	ldr	r3, [pc, #524]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	4b82      	ldr	r3, [pc, #520]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	4413      	add	r3, r2
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	462b      	mov	r3, r5
 80053a6:	4622      	mov	r2, r4
 80053a8:	f7ff fddc 	bl	8004f64 <isoDepTx>
 80053ac:	4603      	mov	r3, r0
 80053ae:	81fb      	strh	r3, [r7, #14]
            switch( ret )
 80053b0:	89fb      	ldrh	r3, [r7, #14]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d103      	bne.n	80053be <isoDepDataExchangePCD+0x112>
            {
              case ERR_NONE:
                  gIsoDep.state = ISODEP_ST_PCD_RX;
 80053b6:	4b7c      	ldr	r3, [pc, #496]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 80053b8:	2202      	movs	r2, #2
 80053ba:	701a      	strb	r2, [r3, #0]
                  break;
 80053bc:	e001      	b.n	80053c2 <isoDepDataExchangePCD+0x116>
              
              default:
                  return ret;
 80053be:	89fb      	ldrh	r3, [r7, #14]
 80053c0:	e216      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
          
        /*******************************************************************************/
        case ISODEP_ST_PCD_WAIT_DSL:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
        case ISODEP_ST_PCD_RX:
                      
            ret = rfalGetTransceiveStatus();
 80053c2:	f006 fb09 	bl	800b9d8 <rfalGetTransceiveStatus>
 80053c6:	4603      	mov	r3, r0
 80053c8:	81fb      	strh	r3, [r7, #14]
            switch( ret )
 80053ca:	89fb      	ldrh	r3, [r7, #14]
 80053cc:	2b28      	cmp	r3, #40	; 0x28
 80053ce:	f200 8082 	bhi.w	80054d6 <isoDepDataExchangePCD+0x22a>
 80053d2:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <isoDepDataExchangePCD+0x12c>)
 80053d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d8:	080054db 	.word	0x080054db
 80053dc:	080054d7 	.word	0x080054d7
 80053e0:	080054d3 	.word	0x080054d3
 80053e4:	080054d7 	.word	0x080054d7
 80053e8:	0800547d 	.word	0x0800547d
 80053ec:	080054d7 	.word	0x080054d7
 80053f0:	080054d7 	.word	0x080054d7
 80053f4:	080054d7 	.word	0x080054d7
 80053f8:	080054d7 	.word	0x080054d7
 80053fc:	0800547d 	.word	0x0800547d
 8005400:	080054d7 	.word	0x080054d7
 8005404:	080054d7 	.word	0x080054d7
 8005408:	080054d7 	.word	0x080054d7
 800540c:	080054d7 	.word	0x080054d7
 8005410:	080054d7 	.word	0x080054d7
 8005414:	080054d7 	.word	0x080054d7
 8005418:	080054d7 	.word	0x080054d7
 800541c:	080054d7 	.word	0x080054d7
 8005420:	080054d7 	.word	0x080054d7
 8005424:	080054d7 	.word	0x080054d7
 8005428:	080054d7 	.word	0x080054d7
 800542c:	0800547d 	.word	0x0800547d
 8005430:	080054d7 	.word	0x080054d7
 8005434:	080054d7 	.word	0x080054d7
 8005438:	080054d7 	.word	0x080054d7
 800543c:	080054d7 	.word	0x080054d7
 8005440:	080054d7 	.word	0x080054d7
 8005444:	0800547d 	.word	0x0800547d
 8005448:	080054d7 	.word	0x080054d7
 800544c:	080054d7 	.word	0x080054d7
 8005450:	080054d7 	.word	0x080054d7
 8005454:	080054d7 	.word	0x080054d7
 8005458:	080054d7 	.word	0x080054d7
 800545c:	080054d7 	.word	0x080054d7
 8005460:	080054d7 	.word	0x080054d7
 8005464:	080054d7 	.word	0x080054d7
 8005468:	080054d7 	.word	0x080054d7
 800546c:	080054d7 	.word	0x080054d7
 8005470:	080054d7 	.word	0x080054d7
 8005474:	080054d7 	.word	0x080054d7
 8005478:	0800547d 	.word	0x0800547d
                case ERR_CRC:
                case ERR_PAR:
                case ERR_FRAMING:          /* added to handle test cases scenario TC_POL_NFCB_T4AT_BI_82_x_y & TC_POL_NFCB_T4BT_BI_82_x_y */
                case ERR_INCOMPLETE_BYTE:  /* added to handle test cases scenario TC_POL_NFCB_T4AT_BI_82_x_y & TC_POL_NFCB_T4BT_BI_82_x_y  */
                    
                    if( gIsoDep.isRxChaining )
 800547c:	4b4a      	ldr	r3, [pc, #296]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 800547e:	7cdb      	ldrb	r3, [r3, #19]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <isoDepDataExchangePCD+0x1ee>
                    {   /* Rule 5 - In PICC chaining when a invalid/timeout occurs -> R-ACK */                        
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 8005484:	2100      	movs	r1, #0
 8005486:	2000      	movs	r0, #0
 8005488:	f7ff fe04 	bl	8005094 <isoDepHandleControlMsg>
 800548c:	4603      	mov	r3, r0
 800548e:	81fb      	strh	r3, [r7, #14]
 8005490:	89fb      	ldrh	r3, [r7, #14]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d01b      	beq.n	80054ce <isoDepDataExchangePCD+0x222>
 8005496:	89fb      	ldrh	r3, [r7, #14]
 8005498:	e1aa      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
                    }
                    else if( gIsoDep.state == ISODEP_ST_PCD_WAIT_DSL )
 800549a:	4b43      	ldr	r3, [pc, #268]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	2b03      	cmp	r3, #3
 80054a0:	d10a      	bne.n	80054b8 <isoDepDataExchangePCD+0x20c>
                    {   /* Rule 8 - If s-Deselect response fails MAY retransmit */
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM ) );
 80054a2:	2100      	movs	r1, #0
 80054a4:	2003      	movs	r0, #3
 80054a6:	f7ff fdf5 	bl	8005094 <isoDepHandleControlMsg>
 80054aa:	4603      	mov	r3, r0
 80054ac:	81fb      	strh	r3, [r7, #14]
 80054ae:	89fb      	ldrh	r3, [r7, #14]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00c      	beq.n	80054ce <isoDepDataExchangePCD+0x222>
 80054b4:	89fb      	ldrh	r3, [r7, #14]
 80054b6:	e19b      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
                    }
                    else
                    {   /* Rule 4 - When a invalid block or timeout occurs -> R-NACK */
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM ) );
 80054b8:	2100      	movs	r1, #0
 80054ba:	2001      	movs	r0, #1
 80054bc:	f7ff fdea 	bl	8005094 <isoDepHandleControlMsg>
 80054c0:	4603      	mov	r3, r0
 80054c2:	81fb      	strh	r3, [r7, #14]
 80054c4:	89fb      	ldrh	r3, [r7, #14]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d001      	beq.n	80054ce <isoDepDataExchangePCD+0x222>
 80054ca:	89fb      	ldrh	r3, [r7, #14]
 80054cc:	e190      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
                    }
                    return ERR_BUSY;
 80054ce:	2302      	movs	r3, #2
 80054d0:	e18e      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
                    
                case ERR_NONE:
                    break;
                    
                case ERR_BUSY:
                    return ERR_BUSY;  /* Debug purposes */
 80054d2:	2302      	movs	r3, #2
 80054d4:	e18c      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
                    
                default:
                    return ret;
 80054d6:	89fb      	ldrh	r3, [r7, #14]
 80054d8:	e18a      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
                    break;
 80054da:	bf00      	nop
            
            /*******************************************************************************/
            /* No error, process incoming msg                                              */
            /*******************************************************************************/
            
            (*outActRxLen) = rfalConvBitsToBytes( *outActRxLen );
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	3307      	adds	r3, #7
 80054e2:	08db      	lsrs	r3, r3, #3
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	801a      	strh	r2, [r3, #0]
            
            
            /* Check rcvd msg length, cannot be less then the expected header */
            if( ((*outActRxLen) < gIsoDep.hdrLen) || ((*outActRxLen) >= gIsoDep.ourFsx) )
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	881a      	ldrh	r2, [r3, #0]
 80054ee:	4b2e      	ldr	r3, [pc, #184]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 80054f0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d305      	bcc.n	8005506 <isoDepDataExchangePCD+0x25a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	881a      	ldrh	r2, [r3, #0]
 80054fe:	4b2a      	ldr	r3, [pc, #168]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 8005500:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005502:	429a      	cmp	r2, r3
 8005504:	d301      	bcc.n	800550a <isoDepDataExchangePCD+0x25e>
            {
                return ERR_PROTO;
 8005506:	230b      	movs	r3, #11
 8005508:	e172      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
            }
            
            /* Grab rcvd PCB */
            rxPCB = gIsoDep.rxBuf[ ISODEP_PCB_POS ];
 800550a:	4b27      	ldr	r3, [pc, #156]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	737b      	strb	r3, [r7, #13]
            
            
            /* EMVCo doesn't allow usage of for CID or NAD   EMVCo 2.6 TAble 10.2 */
            if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && ( isoDep_PCBhasDID(rxPCB) || isoDep_PCBhasNAD(rxPCB)) )
 8005512:	4b25      	ldr	r3, [pc, #148]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 8005514:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005518:	2b01      	cmp	r3, #1
 800551a:	d10b      	bne.n	8005534 <isoDepDataExchangePCD+0x288>
 800551c:	7b7b      	ldrb	r3, [r7, #13]
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b00      	cmp	r3, #0
 8005524:	d104      	bne.n	8005530 <isoDepDataExchangePCD+0x284>
 8005526:	7b7b      	ldrb	r3, [r7, #13]
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <isoDepDataExchangePCD+0x288>
            {
                return ERR_PROTO;
 8005530:	230b      	movs	r3, #11
 8005532:	e15d      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
            }
            
            /* If we are expecting DID, check if PCB signals its presence and if device ID match*/
            if( (gIsoDep.did != RFAL_ISODEP_NO_DID) && ( !isoDep_PCBhasDID(rxPCB) || (gIsoDep.did != gIsoDep.rxBuf[ ISODEP_DID_POS ])) )
 8005534:	4b1c      	ldr	r3, [pc, #112]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 8005536:	78db      	ldrb	r3, [r3, #3]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00e      	beq.n	800555a <isoDepDataExchangePCD+0x2ae>
 800553c:	7b7b      	ldrb	r3, [r7, #13]
 800553e:	f003 0308 	and.w	r3, r3, #8
 8005542:	2b00      	cmp	r3, #0
 8005544:	d007      	beq.n	8005556 <isoDepDataExchangePCD+0x2aa>
 8005546:	4b18      	ldr	r3, [pc, #96]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 8005548:	78da      	ldrb	r2, [r3, #3]
 800554a:	4b17      	ldr	r3, [pc, #92]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	3301      	adds	r3, #1
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d001      	beq.n	800555a <isoDepDataExchangePCD+0x2ae>
            {
                return ERR_PROTO;
 8005556:	230b      	movs	r3, #11
 8005558:	e14a      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
            
            
            /*******************************************************************************/
            /* Process S-Block                                                             */
            /*******************************************************************************/
            if( isoDep_PCBisSBlock(rxPCB) )
 800555a:	7b7b      	ldrb	r3, [r7, #13]
 800555c:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 8005560:	2bc2      	cmp	r3, #194	; 0xc2
 8005562:	d137      	bne.n	80055d4 <isoDepDataExchangePCD+0x328>
            {
                /* Check if is a Wait Time eXtension */
                if( isoDep_PCBisSWTX(rxPCB) )
 8005564:	7b7b      	ldrb	r3, [r7, #13]
 8005566:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 800556a:	2bc2      	cmp	r3, #194	; 0xc2
 800556c:	d11e      	bne.n	80055ac <isoDepDataExchangePCD+0x300>
 800556e:	7b7b      	ldrb	r3, [r7, #13]
 8005570:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005574:	2b30      	cmp	r3, #48	; 0x30
 8005576:	d119      	bne.n	80055ac <isoDepDataExchangePCD+0x300>
                {
                    /* Rule 3 - respond to S-block: get 1st INF byte S(STW): Power + WTXM */
                    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_WTX, isoDep_GetWTXM(gIsoDep.rxBuf[gIsoDep.hdrLen]) ) );                    
 8005578:	4b0b      	ldr	r3, [pc, #44]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	4a0a      	ldr	r2, [pc, #40]	; (80055a8 <isoDepDataExchangePCD+0x2fc>)
 800557e:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8005582:	4413      	add	r3, r2
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800558a:	b2db      	uxtb	r3, r3
 800558c:	4619      	mov	r1, r3
 800558e:	2002      	movs	r0, #2
 8005590:	f7ff fd80 	bl	8005094 <isoDepHandleControlMsg>
 8005594:	4603      	mov	r3, r0
 8005596:	81fb      	strh	r3, [r7, #14]
 8005598:	89fb      	ldrh	r3, [r7, #14]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <isoDepDataExchangePCD+0x2f6>
 800559e:	89fb      	ldrh	r3, [r7, #14]
 80055a0:	e126      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
                    return ERR_BUSY;
 80055a2:	2302      	movs	r3, #2
 80055a4:	e124      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
 80055a6:	bf00      	nop
 80055a8:	200002fc 	.word	0x200002fc
                }
                
                /* Check if is a deselect response */
                if( isoDep_PCBisSDeselect(rxPCB) )
 80055ac:	7b7b      	ldrb	r3, [r7, #13]
 80055ae:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 80055b2:	2bc2      	cmp	r3, #194	; 0xc2
 80055b4:	d10c      	bne.n	80055d0 <isoDepDataExchangePCD+0x324>
 80055b6:	7b7b      	ldrb	r3, [r7, #13]
 80055b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d107      	bne.n	80055d0 <isoDepDataExchangePCD+0x324>
                {
                    if( gIsoDep.state == ISODEP_ST_PCD_WAIT_DSL )
 80055c0:	4b8d      	ldr	r3, [pc, #564]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	2b03      	cmp	r3, #3
 80055c6:	d103      	bne.n	80055d0 <isoDepDataExchangePCD+0x324>
                    {
                        rfalIsoDepInitialize();         /* Session finished reInit vars */
 80055c8:	f7ff fe1e 	bl	8005208 <rfalIsoDepInitialize>
                        return ERR_NONE;
 80055cc:	2300      	movs	r3, #0
 80055ce:	e10f      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
                    
                    /* Deselect response not expected  */
                    /* fall through to PROTO error */
                }
                /* Unexpected S-Block */
                return ERR_PROTO;
 80055d0:	230b      	movs	r3, #11
 80055d2:	e10d      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
            }
            
            /*******************************************************************************/
            /* Process R-Block                                                             */
            /*******************************************************************************/
            else if( isoDep_PCBisRBlock(rxPCB) )
 80055d4:	7b7b      	ldrb	r3, [r7, #13]
 80055d6:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 80055da:	2ba2      	cmp	r3, #162	; 0xa2
 80055dc:	d141      	bne.n	8005662 <isoDepDataExchangePCD+0x3b6>
            {
                if( isoDep_PCBisRACK(rxPCB) )                            /* Check if is a R-ACK */
 80055de:	7b7b      	ldrb	r3, [r7, #13]
 80055e0:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 80055e4:	2ba2      	cmp	r3, #162	; 0xa2
 80055e6:	d13a      	bne.n	800565e <isoDepDataExchangePCD+0x3b2>
 80055e8:	7b7b      	ldrb	r3, [r7, #13]
 80055ea:	f003 0310 	and.w	r3, r3, #16
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d135      	bne.n	800565e <isoDepDataExchangePCD+0x3b2>
                {
                    if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )     /* Expected block number  */
 80055f2:	7b7b      	ldrb	r3, [r7, #13]
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	4a7f      	ldr	r2, [pc, #508]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 80055fa:	7892      	ldrb	r2, [r2, #2]
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d119      	bne.n	8005634 <isoDepDataExchangePCD+0x388>
                    {
                        /* Rule B - ACK with expected bn -> Increment block number */
                        gIsoDep.blockNumber = isoDep_PCBNextBN( gIsoDep.blockNumber );
 8005600:	4b7d      	ldr	r3, [pc, #500]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 8005602:	789b      	ldrb	r3, [r3, #2]
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	bf0c      	ite	eq
 800560e:	2301      	moveq	r3, #1
 8005610:	2300      	movne	r3, #0
 8005612:	b2db      	uxtb	r3, r3
 8005614:	461a      	mov	r2, r3
 8005616:	4b78      	ldr	r3, [pc, #480]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 8005618:	709a      	strb	r2, [r3, #2]
                                                
                        /* R-ACK only allowed when PCD chaining */
                        if( !gIsoDep.isTxChaining )
 800561a:	4b77      	ldr	r3, [pc, #476]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 800561c:	7c9b      	ldrb	r3, [r3, #18]
 800561e:	f083 0301 	eor.w	r3, r3, #1
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	d001      	beq.n	800562c <isoDepDataExchangePCD+0x380>
                        {
                            return ERR_PROTO;
 8005628:	230b      	movs	r3, #11
 800562a:	e0e1      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
                        }
                        
                        /* Rule 7 - Chaining transaction done, continue chaining */
                        isoDepClearCounters();
 800562c:	f7ff fc88 	bl	8004f40 <isoDepClearCounters>
                        return ERR_NONE;  /* This block has been transmitted */
 8005630:	2300      	movs	r3, #0
 8005632:	e0dd      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
                    }
                    else
                    {
                        /* Rule 6 - R-ACK with wrong block number retransmit */
                        if( gIsoDep.cntIRetrys++ < gIsoDep.maxRetriesI )
 8005634:	4b70      	ldr	r3, [pc, #448]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 8005636:	795b      	ldrb	r3, [r3, #5]
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	b2d1      	uxtb	r1, r2
 800563c:	4a6e      	ldr	r2, [pc, #440]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 800563e:	7151      	strb	r1, [r2, #5]
 8005640:	4a6d      	ldr	r2, [pc, #436]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 8005642:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8005646:	4293      	cmp	r3, r2
 8005648:	d207      	bcs.n	800565a <isoDepDataExchangePCD+0x3ae>
                        {
                            gIsoDep.cntRRetrys = 0;            /* Clear R counter only */
 800564a:	4b6b      	ldr	r3, [pc, #428]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 800564c:	2200      	movs	r2, #0
 800564e:	719a      	strb	r2, [r3, #6]
                            gIsoDep.state = ISODEP_ST_PCD_TX;
 8005650:	4b69      	ldr	r3, [pc, #420]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 8005652:	2201      	movs	r2, #1
 8005654:	701a      	strb	r2, [r3, #0]
                            return ERR_BUSY;
 8005656:	2302      	movs	r3, #2
 8005658:	e0ca      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
                        }
                        return ERR_PROTO;
 800565a:	230b      	movs	r3, #11
 800565c:	e0c8      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
                    }
                }
                else  /* Unexcpected R-Block */
                {
                    return ERR_PROTO;
 800565e:	230b      	movs	r3, #11
 8005660:	e0c6      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
            }
            
            /*******************************************************************************/
            /* Process I-Block                                                             */
            /*******************************************************************************/
            else if( isoDep_PCBisIBlock(rxPCB) )
 8005662:	7b7b      	ldrb	r3, [r7, #13]
 8005664:	f003 03e2 	and.w	r3, r3, #226	; 0xe2
 8005668:	2b02      	cmp	r3, #2
 800566a:	f040 80bd 	bne.w	80057e8 <isoDepDataExchangePCD+0x53c>
            {
                /*******************************************************************************/
                /* is PICC performing chaining                                                 */
                if( isoDep_PCBisChaining(rxPCB) )
 800566e:	7b7b      	ldrb	r3, [r7, #13]
 8005670:	f003 0310 	and.w	r3, r3, #16
 8005674:	2b00      	cmp	r3, #0
 8005676:	d05e      	beq.n	8005736 <isoDepDataExchangePCD+0x48a>
                {
                    gIsoDep.isRxChaining = true;
 8005678:	4b5f      	ldr	r3, [pc, #380]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 800567a:	2201      	movs	r2, #1
 800567c:	74da      	strb	r2, [r3, #19]
                    *outIsChaining       = true;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2201      	movs	r2, #1
 8005682:	701a      	strb	r2, [r3, #0]
                    
                    if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 8005684:	7b7b      	ldrb	r3, [r7, #13]
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	4a5b      	ldr	r2, [pc, #364]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 800568c:	7892      	ldrb	r2, [r2, #2]
 800568e:	4293      	cmp	r3, r2
 8005690:	d144      	bne.n	800571c <isoDepDataExchangePCD+0x470>
                    {
                        /* Rule B - ACK with correct block number -> Increase Block number */
                        isoDep_ToggleBN( gIsoDep.blockNumber );
 8005692:	4b59      	ldr	r3, [pc, #356]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 8005694:	789b      	ldrb	r3, [r3, #2]
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	bf0c      	ite	eq
 80056a0:	2301      	moveq	r3, #1
 80056a2:	2300      	movne	r3, #0
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	461a      	mov	r2, r3
 80056a8:	4b53      	ldr	r3, [pc, #332]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 80056aa:	709a      	strb	r2, [r3, #2]
                        
                        isoDepClearCounters();  /* Clear counters in case R counter is already at max */
 80056ac:	f7ff fc48 	bl	8004f40 <isoDepClearCounters>
                        
                        /* Rule 2 - Send ACK */
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 80056b0:	2100      	movs	r1, #0
 80056b2:	2000      	movs	r0, #0
 80056b4:	f7ff fcee 	bl	8005094 <isoDepHandleControlMsg>
 80056b8:	4603      	mov	r3, r0
 80056ba:	81fb      	strh	r3, [r7, #14]
 80056bc:	89fb      	ldrh	r3, [r7, #14]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <isoDepDataExchangePCD+0x41a>
 80056c2:	89fb      	ldrh	r3, [r7, #14]
 80056c4:	e094      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
                        
                        /* Received I-Block with chaining, send current data to DH */
                        
                        /* remove ISO DEP header, check is necessary to move the INF data on the buffer */
                        *outActRxLen -= gIsoDep.hdrLen;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	881a      	ldrh	r2, [r3, #0]
 80056ca:	4b4b      	ldr	r3, [pc, #300]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 80056cc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	801a      	strh	r2, [r3, #0]
                        if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*outActRxLen > 0U) )
 80056da:	4b47      	ldr	r3, [pc, #284]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 80056dc:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80056e0:	4b45      	ldr	r3, [pc, #276]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 80056e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d014      	beq.n	8005714 <isoDepDataExchangePCD+0x468>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d010      	beq.n	8005714 <isoDepDataExchangePCD+0x468>
                        {
                            ST_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *outActRxLen );
 80056f2:	4b41      	ldr	r3, [pc, #260]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	4a40      	ldr	r2, [pc, #256]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 80056f8:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80056fc:	1898      	adds	r0, r3, r2
 80056fe:	4b3e      	ldr	r3, [pc, #248]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	4a3d      	ldr	r2, [pc, #244]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 8005704:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8005708:	1899      	adds	r1, r3, r2
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	f008 f914 	bl	800d93c <memmove>
                        }
                        
                        isoDepClearCounters();
 8005714:	f7ff fc14 	bl	8004f40 <isoDepClearCounters>
                        return ERR_AGAIN;       /* Send Again signalling to run again, but some chaining data has arrived */
 8005718:	230d      	movs	r3, #13
 800571a:	e069      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
                    }
                    else
                    {
                        /* Rule 5 - PICC chaining invalid I-Block -> R-ACK */
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );                        
 800571c:	2100      	movs	r1, #0
 800571e:	2000      	movs	r0, #0
 8005720:	f7ff fcb8 	bl	8005094 <isoDepHandleControlMsg>
 8005724:	4603      	mov	r3, r0
 8005726:	81fb      	strh	r3, [r7, #14]
 8005728:	89fb      	ldrh	r3, [r7, #14]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <isoDepDataExchangePCD+0x486>
 800572e:	89fb      	ldrh	r3, [r7, #14]
 8005730:	e05e      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
                    }
                    return ERR_BUSY;
 8005732:	2302      	movs	r3, #2
 8005734:	e05c      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
                }
                
                gIsoDep.isRxChaining = false; /* clear PICC chaining flag */                
 8005736:	4b30      	ldr	r3, [pc, #192]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 8005738:	2200      	movs	r2, #0
 800573a:	74da      	strb	r2, [r3, #19]
                
                if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 800573c:	7b7b      	ldrb	r3, [r7, #13]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	4a2d      	ldr	r2, [pc, #180]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 8005744:	7892      	ldrb	r2, [r2, #2]
 8005746:	4293      	cmp	r3, r2
 8005748:	d13a      	bne.n	80057c0 <isoDepDataExchangePCD+0x514>
                {
                    /* Rule B - I-Block with correct block number -> Increase Block number */
                    isoDep_ToggleBN( gIsoDep.blockNumber );
 800574a:	4b2b      	ldr	r3, [pc, #172]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 800574c:	789b      	ldrb	r3, [r3, #2]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b00      	cmp	r3, #0
 8005756:	bf0c      	ite	eq
 8005758:	2301      	moveq	r3, #1
 800575a:	2300      	movne	r3, #0
 800575c:	b2db      	uxtb	r3, r3
 800575e:	461a      	mov	r2, r3
 8005760:	4b25      	ldr	r3, [pc, #148]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 8005762:	709a      	strb	r2, [r3, #2]
                    
                    /* I-Block transaction done successfully */
                    
                    /* remove ISO DEP header, check is necessary to move the INF data on the buffer */
                    *outActRxLen -= gIsoDep.hdrLen;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	881a      	ldrh	r2, [r3, #0]
 8005768:	4b23      	ldr	r3, [pc, #140]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 800576a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800576e:	b29b      	uxth	r3, r3
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	b29a      	uxth	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	801a      	strh	r2, [r3, #0]
                    if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*outActRxLen > 0U) )
 8005778:	4b1f      	ldr	r3, [pc, #124]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 800577a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800577e:	4b1e      	ldr	r3, [pc, #120]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 8005780:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005784:	429a      	cmp	r2, r3
 8005786:	d014      	beq.n	80057b2 <isoDepDataExchangePCD+0x506>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d010      	beq.n	80057b2 <isoDepDataExchangePCD+0x506>
                    {
                        ST_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *outActRxLen );
 8005790:	4b19      	ldr	r3, [pc, #100]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	4a18      	ldr	r2, [pc, #96]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 8005796:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800579a:	1898      	adds	r0, r3, r2
 800579c:	4b16      	ldr	r3, [pc, #88]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	4a15      	ldr	r2, [pc, #84]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 80057a2:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 80057a6:	1899      	adds	r1, r3, r2
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	461a      	mov	r2, r3
 80057ae:	f008 f8c5 	bl	800d93c <memmove>
                    }
                    
                    gIsoDep.state = ISODEP_ST_IDLE;
 80057b2:	4b11      	ldr	r3, [pc, #68]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	701a      	strb	r2, [r3, #0]
                    isoDepClearCounters();
 80057b8:	f7ff fbc2 	bl	8004f40 <isoDepClearCounters>
                    return ERR_NONE;
 80057bc:	2300      	movs	r3, #0
 80057be:	e017      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
                }
                else
                {
                    if( (gIsoDep.compMode != RFAL_COMPLIANCE_MODE_ISO) )
 80057c0:	4b0d      	ldr	r3, [pc, #52]	; (80057f8 <isoDepDataExchangePCD+0x54c>)
 80057c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d001      	beq.n	80057ce <isoDepDataExchangePCD+0x522>
                    {
                        /* Invalid Block (not chaining) -> Raise error   Digital 1.1  15.2.6.4   EMVCo 2.6  10.3.5.4 */
                        return ERR_PROTO;
 80057ca:	230b      	movs	r3, #11
 80057cc:	e010      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
                    }

                    /* Rule 4 - Invalid Block -> R-NAK */
                    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM ) );
 80057ce:	2100      	movs	r1, #0
 80057d0:	2001      	movs	r0, #1
 80057d2:	f7ff fc5f 	bl	8005094 <isoDepHandleControlMsg>
 80057d6:	4603      	mov	r3, r0
 80057d8:	81fb      	strh	r3, [r7, #14]
 80057da:	89fb      	ldrh	r3, [r7, #14]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <isoDepDataExchangePCD+0x538>
 80057e0:	89fb      	ldrh	r3, [r7, #14]
 80057e2:	e005      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
                    return ERR_BUSY;
 80057e4:	2302      	movs	r3, #2
 80057e6:	e003      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
                }
            }
            else /* not S/R/I - Block */
            {
                return ERR_PROTO;
 80057e8:	230b      	movs	r3, #11
 80057ea:	e001      	b.n	80057f0 <isoDepDataExchangePCD+0x544>
            /* fall through */
          
        /*******************************************************************************/
        default:               /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            /* MISRA 16.4: no empty default (comment will suffice) */
            break;
 80057ec:	bf00      	nop
    }
    
    return ERR_INTERNAL;
 80057ee:	230c      	movs	r3, #12
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bdb0      	pop	{r4, r5, r7, pc}
 80057f8:	200002fc 	.word	0x200002fc

080057fc <rfalIsoDepDeselect>:

/*******************************************************************************/
ReturnCode rfalIsoDepDeselect( void )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
    bool       dummyB;
    
    /*******************************************************************************/
    /* Check if  rx parameters have been set before, otherwise use global variable *
     * To cope with a Deselect after RATS\ATTRIB without any I-Block exchanged     */
    if( (gIsoDep.rxLen == NULL) || (gIsoDep.rxBuf == NULL) )
 8005802:	4b23      	ldr	r3, [pc, #140]	; (8005890 <rfalIsoDepDeselect+0x94>)
 8005804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <rfalIsoDepDeselect+0x16>
 800580a:	4b21      	ldr	r3, [pc, #132]	; (8005890 <rfalIsoDepDeselect+0x94>)
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d110      	bne.n	8005834 <rfalIsoDepDeselect+0x38>
    {
        /* Using local vars would be safe as rfalIsoDepInitialize will clear the   *
         * reference to local vars before exiting (no EXIT_ON_ERR),                *
         * but MISRA 18.6 3217 would be still be flagged. Using static variables   */
        gIsoDep.rxLen       = &gIsoDep.ctrlRxLen;
 8005812:	4b1f      	ldr	r3, [pc, #124]	; (8005890 <rfalIsoDepDeselect+0x94>)
 8005814:	4a1f      	ldr	r2, [pc, #124]	; (8005894 <rfalIsoDepDeselect+0x98>)
 8005816:	62da      	str	r2, [r3, #44]	; 0x2c
        gIsoDep.rxBuf       = gIsoDep.ctrlRxBuf;
 8005818:	4b1d      	ldr	r3, [pc, #116]	; (8005890 <rfalIsoDepDeselect+0x94>)
 800581a:	4a1f      	ldr	r2, [pc, #124]	; (8005898 <rfalIsoDepDeselect+0x9c>)
 800581c:	619a      	str	r2, [r3, #24]
        
        gIsoDep.rxBufLen    = ISODEP_CONTROLMSG_BUF_LEN;
 800581e:	4b1c      	ldr	r3, [pc, #112]	; (8005890 <rfalIsoDepDeselect+0x94>)
 8005820:	2204      	movs	r2, #4
 8005822:	83da      	strh	r2, [r3, #30]
        gIsoDep.rxBufInfPos = (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 8005824:	4b1a      	ldr	r3, [pc, #104]	; (8005890 <rfalIsoDepDeselect+0x94>)
 8005826:	2202      	movs	r2, #2
 8005828:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gIsoDep.txBufInfPos = (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 800582c:	4b18      	ldr	r3, [pc, #96]	; (8005890 <rfalIsoDepDeselect+0x94>)
 800582e:	2202      	movs	r2, #2
 8005830:	f883 2020 	strb.w	r2, [r3, #32]
    
    
    /*******************************************************************************/
    /* The Deselect process is being done blocking, Digital 1.0 - 13.2.7.1 MUST wait response and retry*/
    /* Set the maximum reruns while we will wait for a response */
    cntRerun = ISODEP_MAX_RERUNS;
 8005834:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8005838:	607b      	str	r3, [r7, #4]
    
    /* Send DSL request and run protocol until get a response, error or "timeout" */    
    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM ));
 800583a:	2100      	movs	r1, #0
 800583c:	2003      	movs	r0, #3
 800583e:	f7ff fc29 	bl	8005094 <isoDepHandleControlMsg>
 8005842:	4603      	mov	r3, r0
 8005844:	807b      	strh	r3, [r7, #2]
 8005846:	887b      	ldrh	r3, [r7, #2]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d001      	beq.n	8005850 <rfalIsoDepDeselect+0x54>
 800584c:	887b      	ldrh	r3, [r7, #2]
 800584e:	e01a      	b.n	8005886 <rfalIsoDepDeselect+0x8a>
    do{
        ret = isoDepDataExchangePCD( gIsoDep.rxLen, &dummyB );
 8005850:	4b0f      	ldr	r3, [pc, #60]	; (8005890 <rfalIsoDepDeselect+0x94>)
 8005852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005854:	1c7a      	adds	r2, r7, #1
 8005856:	4611      	mov	r1, r2
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff fd27 	bl	80052ac <isoDepDataExchangePCD>
 800585e:	4603      	mov	r3, r0
 8005860:	807b      	strh	r3, [r7, #2]
        rfalWorker();
 8005862:	f006 f8cb 	bl	800b9fc <rfalWorker>
    }
    while( ((cntRerun--) != 0U) && (ret == ERR_BUSY) );
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	1e5a      	subs	r2, r3, #1
 800586a:	607a      	str	r2, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <rfalIsoDepDeselect+0x7a>
 8005870:	887b      	ldrh	r3, [r7, #2]
 8005872:	2b02      	cmp	r3, #2
 8005874:	d0ec      	beq.n	8005850 <rfalIsoDepDeselect+0x54>
        
    rfalIsoDepInitialize();
 8005876:	f7ff fcc7 	bl	8005208 <rfalIsoDepInitialize>
    return ((cntRerun == 0U) ? ERR_TIMEOUT : ret);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d001      	beq.n	8005884 <rfalIsoDepDeselect+0x88>
 8005880:	887b      	ldrh	r3, [r7, #2]
 8005882:	e000      	b.n	8005886 <rfalIsoDepDeselect+0x8a>
 8005884:	2304      	movs	r3, #4
}
 8005886:	4618      	mov	r0, r3
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	200002fc 	.word	0x200002fc
 8005894:	20000346 	.word	0x20000346
 8005898:	20000341 	.word	0x20000341

0800589c <rfalIsoDepFWI2FWT>:
#endif /* RFAL_FEATURE_ISO_DEP_POLL */


/*******************************************************************************/
uint32_t rfalIsoDepFWI2FWT( uint8_t fwi )
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	4603      	mov	r3, r0
 80058a4:	71fb      	strb	r3, [r7, #7]
    uint32_t result;
    uint8_t  tmpFWI;
    
    tmpFWI = fwi;
 80058a6:	79fb      	ldrb	r3, [r7, #7]
 80058a8:	73fb      	strb	r3, [r7, #15]
    
    /* RFU values -> take the default value  
     * Digital 1.0  11.6.2.17  FWI[1,14]
     * Digital 1.1  7.6.2.22   FWI[0,14]
     * EMVCo 2.6    Table A.5  FWI[0,14] */
    if( tmpFWI > ISODEP_FWI_MAX )
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
 80058ac:	2b0e      	cmp	r3, #14
 80058ae:	d901      	bls.n	80058b4 <rfalIsoDepFWI2FWT+0x18>
    {
        tmpFWI = RFAL_ISODEP_FWI_DEFAULT;
 80058b0:	2304      	movs	r3, #4
 80058b2:	73fb      	strb	r3, [r7, #15]
    }

    /* FWT = (256 x 16/fC) x 2^FWI => 2^(FWI+12)  Digital 1.1  13.8.1 & 7.9.1 */
    
    result = ((uint32_t)1U << (tmpFWI + 12U));
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
 80058b6:	330c      	adds	r3, #12
 80058b8:	2201      	movs	r2, #1
 80058ba:	fa02 f303 	lsl.w	r3, r2, r3
 80058be:	60bb      	str	r3, [r7, #8]
    result = MIN( RFAL_ISODEP_MAX_FWT, result);  /* Maximum Frame Waiting Time must be fulfilled */
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058c6:	bf28      	it	cs
 80058c8:	f04f 6380 	movcs.w	r3, #67108864	; 0x4000000
 80058cc:	60bb      	str	r3, [r7, #8]
    
    return result;
 80058ce:	68bb      	ldr	r3, [r7, #8]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <rfalIsoDepFSxI2FSx>:


/*******************************************************************************/
uint16_t rfalIsoDepFSxI2FSx( uint8_t FSxI )
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	4603      	mov	r3, r0
 80058e4:	71fb      	strb	r3, [r7, #7]
    uint16_t fsx;
    uint8_t  fsi;
    
    /* Enforce maximum FSxI/FSx allowed - NFC Forum and EMVCo differ */
    fsi = (( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV ) ? MIN( FSxI, RFAL_ISODEP_FSDI_MAX_EMV ) : MIN( FSxI, RFAL_ISODEP_FSDI_MAX_NFC ));
 80058e6:	4b34      	ldr	r3, [pc, #208]	; (80059b8 <rfalIsoDepFSxI2FSx+0xdc>)
 80058e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d105      	bne.n	80058fc <rfalIsoDepFSxI2FSx+0x20>
 80058f0:	79fb      	ldrb	r3, [r7, #7]
 80058f2:	2b0c      	cmp	r3, #12
 80058f4:	bf28      	it	cs
 80058f6:	230c      	movcs	r3, #12
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	e004      	b.n	8005906 <rfalIsoDepFSxI2FSx+0x2a>
 80058fc:	79fb      	ldrb	r3, [r7, #7]
 80058fe:	2b08      	cmp	r3, #8
 8005900:	bf28      	it	cs
 8005902:	2308      	movcs	r3, #8
 8005904:	b2db      	uxtb	r3, r3
 8005906:	737b      	strb	r3, [r7, #13]
    
    switch( fsi )
 8005908:	7b7b      	ldrb	r3, [r7, #13]
 800590a:	2b0c      	cmp	r3, #12
 800590c:	d848      	bhi.n	80059a0 <rfalIsoDepFSxI2FSx+0xc4>
 800590e:	a201      	add	r2, pc, #4	; (adr r2, 8005914 <rfalIsoDepFSxI2FSx+0x38>)
 8005910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005914:	08005949 	.word	0x08005949
 8005918:	0800594f 	.word	0x0800594f
 800591c:	08005955 	.word	0x08005955
 8005920:	0800595b 	.word	0x0800595b
 8005924:	08005961 	.word	0x08005961
 8005928:	08005967 	.word	0x08005967
 800592c:	0800596d 	.word	0x0800596d
 8005930:	08005973 	.word	0x08005973
 8005934:	08005979 	.word	0x08005979
 8005938:	08005981 	.word	0x08005981
 800593c:	08005989 	.word	0x08005989
 8005940:	08005991 	.word	0x08005991
 8005944:	08005999 	.word	0x08005999
    {
        case (uint8_t)RFAL_ISODEP_FSXI_16:           fsx = (uint16_t)RFAL_ISODEP_FSX_16;   break;
 8005948:	2310      	movs	r3, #16
 800594a:	81fb      	strh	r3, [r7, #14]
 800594c:	e02c      	b.n	80059a8 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_24:           fsx = (uint16_t)RFAL_ISODEP_FSX_24;   break;
 800594e:	2318      	movs	r3, #24
 8005950:	81fb      	strh	r3, [r7, #14]
 8005952:	e029      	b.n	80059a8 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_32:           fsx = (uint16_t)RFAL_ISODEP_FSX_32;   break;
 8005954:	2320      	movs	r3, #32
 8005956:	81fb      	strh	r3, [r7, #14]
 8005958:	e026      	b.n	80059a8 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_40:           fsx = (uint16_t)RFAL_ISODEP_FSX_40;   break;
 800595a:	2328      	movs	r3, #40	; 0x28
 800595c:	81fb      	strh	r3, [r7, #14]
 800595e:	e023      	b.n	80059a8 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_48:           fsx = (uint16_t)RFAL_ISODEP_FSX_48;   break;
 8005960:	2330      	movs	r3, #48	; 0x30
 8005962:	81fb      	strh	r3, [r7, #14]
 8005964:	e020      	b.n	80059a8 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_64:           fsx = (uint16_t)RFAL_ISODEP_FSX_64;   break;
 8005966:	2340      	movs	r3, #64	; 0x40
 8005968:	81fb      	strh	r3, [r7, #14]
 800596a:	e01d      	b.n	80059a8 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_96:           fsx = (uint16_t)RFAL_ISODEP_FSX_96;   break;
 800596c:	2360      	movs	r3, #96	; 0x60
 800596e:	81fb      	strh	r3, [r7, #14]
 8005970:	e01a      	b.n	80059a8 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_128:          fsx = (uint16_t)RFAL_ISODEP_FSX_128;  break;
 8005972:	2380      	movs	r3, #128	; 0x80
 8005974:	81fb      	strh	r3, [r7, #14]
 8005976:	e017      	b.n	80059a8 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_256:          fsx = (uint16_t)RFAL_ISODEP_FSX_256;  break;
 8005978:	f44f 7380 	mov.w	r3, #256	; 0x100
 800597c:	81fb      	strh	r3, [r7, #14]
 800597e:	e013      	b.n	80059a8 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_512:          fsx = (uint16_t)RFAL_ISODEP_FSX_512;  break;
 8005980:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005984:	81fb      	strh	r3, [r7, #14]
 8005986:	e00f      	b.n	80059a8 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_1024:         fsx = (uint16_t)RFAL_ISODEP_FSX_1024; break;
 8005988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800598c:	81fb      	strh	r3, [r7, #14]
 800598e:	e00b      	b.n	80059a8 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_2048:         fsx = (uint16_t)RFAL_ISODEP_FSX_2048; break;
 8005990:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005994:	81fb      	strh	r3, [r7, #14]
 8005996:	e007      	b.n	80059a8 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_4096:         fsx = (uint16_t)RFAL_ISODEP_FSX_4096; break;
 8005998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800599c:	81fb      	strh	r3, [r7, #14]
 800599e:	e003      	b.n	80059a8 <rfalIsoDepFSxI2FSx+0xcc>
        default:                                     fsx = (uint16_t)RFAL_ISODEP_FSX_256;  break;
 80059a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059a4:	81fb      	strh	r3, [r7, #14]
 80059a6:	bf00      	nop
    }
    return fsx;
 80059a8:	89fb      	ldrh	r3, [r7, #14]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	200002fc 	.word	0x200002fc

080059bc <rfalIsoDepGetTransceiveStatus>:
}


/*******************************************************************************/
ReturnCode rfalIsoDepGetTransceiveStatus( void )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	af00      	add	r7, sp, #0
    if( gIsoDep.role == ISODEP_ROLE_PICC)
 80059c0:	4b08      	ldr	r3, [pc, #32]	; (80059e4 <rfalIsoDepGetTransceiveStatus+0x28>)
 80059c2:	785b      	ldrb	r3, [r3, #1]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d101      	bne.n	80059cc <rfalIsoDepGetTransceiveStatus+0x10>
    {
#if RFAL_FEATURE_ISO_DEP_LISTEN
        return isoDepDataExchangePICC();
#else
        return ERR_NOTSUPP;
 80059c8:	2318      	movs	r3, #24
 80059ca:	e008      	b.n	80059de <rfalIsoDepGetTransceiveStatus+0x22>
#endif /* RFAL_FEATURE_ISO_DEP_LISTEN */
    }
    else
    {
#if RFAL_FEATURE_ISO_DEP_POLL
        return isoDepDataExchangePCD( gIsoDep.rxLen, gIsoDep.rxChaining );
 80059cc:	4b05      	ldr	r3, [pc, #20]	; (80059e4 <rfalIsoDepGetTransceiveStatus+0x28>)
 80059ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d0:	4b04      	ldr	r3, [pc, #16]	; (80059e4 <rfalIsoDepGetTransceiveStatus+0x28>)
 80059d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d4:	4619      	mov	r1, r3
 80059d6:	4610      	mov	r0, r2
 80059d8:	f7ff fc68 	bl	80052ac <isoDepDataExchangePCD>
 80059dc:	4603      	mov	r3, r0
#else
        return ERR_NOTSUPP;
#endif /* RFAL_FEATURE_ISO_DEP_POLL */
    }
}
 80059de:	4618      	mov	r0, r3
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	200002fc 	.word	0x200002fc

080059e8 <rfalIsoDepRATS>:

#if RFAL_FEATURE_NFCA

/*******************************************************************************/
ReturnCode rfalIsoDepRATS( rfalIsoDepFSxI FSDI, uint8_t DID, rfalIsoDepAts *ats , uint8_t *atsLen)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08a      	sub	sp, #40	; 0x28
 80059ec:	af04      	add	r7, sp, #16
 80059ee:	60ba      	str	r2, [r7, #8]
 80059f0:	607b      	str	r3, [r7, #4]
 80059f2:	4603      	mov	r3, r0
 80059f4:	73fb      	strb	r3, [r7, #15]
 80059f6:	460b      	mov	r3, r1
 80059f8:	73bb      	strb	r3, [r7, #14]
    uint16_t       rcvLen;
    ReturnCode     ret;
    rfalIsoDepRats ratsReq;
    
    if( ats == NULL )
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <rfalIsoDepRATS+0x1c>
    {
        return ERR_PARAM;
 8005a00:	2307      	movs	r3, #7
 8005a02:	e03c      	b.n	8005a7e <rfalIsoDepRATS+0x96>
    }
    
    /*******************************************************************************/
    /* Compose RATS */
    ratsReq.CMD   = RFAL_ISODEP_CMD_RATS;
 8005a04:	23e0      	movs	r3, #224	; 0xe0
 8005a06:	743b      	strb	r3, [r7, #16]
    ratsReq.PARAM = (((uint8_t)FSDI << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) | (DID & RFAL_ISODEP_RATS_PARAM_DID_MASK);
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	7bbb      	ldrb	r3, [r7, #14]
 8005a10:	f003 030f 	and.w	r3, r3, #15
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	4313      	orrs	r3, r2
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	747b      	strb	r3, [r7, #17]
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&ratsReq, sizeof(rfalIsoDepRats), (uint8_t*)ats, sizeof(rfalIsoDepAts), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 8005a1c:	f107 0010 	add.w	r0, r7, #16
 8005a20:	4b19      	ldr	r3, [pc, #100]	; (8005a88 <rfalIsoDepRATS+0xa0>)
 8005a22:	9302      	str	r3, [sp, #8]
 8005a24:	2300      	movs	r3, #0
 8005a26:	9301      	str	r3, [sp, #4]
 8005a28:	f107 0314 	add.w	r3, r7, #20
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	2314      	movs	r3, #20
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	2102      	movs	r1, #2
 8005a34:	f005 ff7c 	bl	800b930 <rfalTransceiveBlockingTxRx>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	82fb      	strh	r3, [r7, #22]
    
    if( ret == ERR_NONE )
 8005a3c:	8afb      	ldrh	r3, [r7, #22]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d115      	bne.n	8005a6e <rfalIsoDepRATS+0x86>
    {
        /* Check for valid ATS length  Digital 1.1  13.6.2.1 & 13.6.2.3 */
        if( (rcvLen < RFAL_ISODEP_ATS_MIN_LEN) || (rcvLen > RFAL_ISODEP_ATS_MAX_LEN) || (ats->TL != rcvLen) )
 8005a42:	8abb      	ldrh	r3, [r7, #20]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d008      	beq.n	8005a5a <rfalIsoDepRATS+0x72>
 8005a48:	8abb      	ldrh	r3, [r7, #20]
 8005a4a:	2b14      	cmp	r3, #20
 8005a4c:	d805      	bhi.n	8005a5a <rfalIsoDepRATS+0x72>
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	8abb      	ldrh	r3, [r7, #20]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d001      	beq.n	8005a5e <rfalIsoDepRATS+0x76>
        {
            return ERR_PROTO;
 8005a5a:	230b      	movs	r3, #11
 8005a5c:	e00f      	b.n	8005a7e <rfalIsoDepRATS+0x96>
        }
        
        /* Assign our FSx, in case the a Deselect is send without Transceive */
        gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)FSDI );
 8005a5e:	7bfb      	ldrb	r3, [r7, #15]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff ff3b 	bl	80058dc <rfalIsoDepFSxI2FSx>
 8005a66:	4603      	mov	r3, r0
 8005a68:	461a      	mov	r2, r3
 8005a6a:	4b08      	ldr	r3, [pc, #32]	; (8005a8c <rfalIsoDepRATS+0xa4>)
 8005a6c:	845a      	strh	r2, [r3, #34]	; 0x22
    }
    
    /* Check and assign if ATS length was requested (length also available on TL) */
    if( atsLen != NULL )
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <rfalIsoDepRATS+0x94>
    {
        *atsLen = (uint8_t)rcvLen;
 8005a74:	8abb      	ldrh	r3, [r7, #20]
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	701a      	strb	r2, [r3, #0]
    }
    
    return ret;
 8005a7c:	8afb      	ldrh	r3, [r7, #22]
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3718      	adds	r7, #24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	00046780 	.word	0x00046780
 8005a8c:	200002fc 	.word	0x200002fc

08005a90 <rfalIsoDepPPS>:


/*******************************************************************************/
ReturnCode rfalIsoDepPPS( uint8_t DID, rfalBitRate DSI, rfalBitRate DRI, rfalIsoDepPpsRes *ppsRes )
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b088      	sub	sp, #32
 8005a94:	af04      	add	r7, sp, #16
 8005a96:	603b      	str	r3, [r7, #0]
 8005a98:	4603      	mov	r3, r0
 8005a9a:	71fb      	strb	r3, [r7, #7]
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	71bb      	strb	r3, [r7, #6]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	717b      	strb	r3, [r7, #5]
    uint16_t         rcvLen;
    ReturnCode       ret;
    rfalIsoDepPpsReq ppsReq;
    
    if( (ppsRes == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d008      	beq.n	8005abc <rfalIsoDepPPS+0x2c>
 8005aaa:	79bb      	ldrb	r3, [r7, #6]
 8005aac:	2b03      	cmp	r3, #3
 8005aae:	d805      	bhi.n	8005abc <rfalIsoDepPPS+0x2c>
 8005ab0:	797b      	ldrb	r3, [r7, #5]
 8005ab2:	2b03      	cmp	r3, #3
 8005ab4:	d802      	bhi.n	8005abc <rfalIsoDepPPS+0x2c>
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
 8005ab8:	2b0e      	cmp	r3, #14
 8005aba:	d901      	bls.n	8005ac0 <rfalIsoDepPPS+0x30>
    {
        return ERR_PARAM;
 8005abc:	2307      	movs	r3, #7
 8005abe:	e033      	b.n	8005b28 <rfalIsoDepPPS+0x98>
    }
    
    /*******************************************************************************/
    /* Compose PPS Request */
    ppsReq.PPSS = (RFAL_ISODEP_PPS_SB | (DID & RFAL_ISODEP_PPS_SB_DID_MASK));
 8005ac0:	79fb      	ldrb	r3, [r7, #7]
 8005ac2:	f003 030f 	and.w	r3, r3, #15
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	723b      	strb	r3, [r7, #8]
    ppsReq.PPS0 = RFAL_ISODEP_PPS_PPS0_PPS1_PRESENT;
 8005ad0:	2311      	movs	r3, #17
 8005ad2:	727b      	strb	r3, [r7, #9]
    ppsReq.PPS1 = (RFAL_ISODEP_PPS_PPS1 | ((((uint8_t)DSI<<RFAL_ISODEP_PPS_PPS1_DSI_SHIFT) | (uint8_t)DRI) & RFAL_ISODEP_PPS_PPS1_DXI_MASK)); 
 8005ad4:	79bb      	ldrb	r3, [r7, #6]
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	b25a      	sxtb	r2, r3
 8005ada:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	b25b      	sxtb	r3, r3
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	f003 030f 	and.w	r3, r3, #15
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	72bb      	strb	r3, [r7, #10]
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 8005aec:	f107 0008 	add.w	r0, r7, #8
 8005af0:	4b0f      	ldr	r3, [pc, #60]	; (8005b30 <rfalIsoDepPPS+0xa0>)
 8005af2:	9302      	str	r3, [sp, #8]
 8005af4:	2300      	movs	r3, #0
 8005af6:	9301      	str	r3, [sp, #4]
 8005af8:	f107 030c 	add.w	r3, r7, #12
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	2301      	movs	r3, #1
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	2103      	movs	r1, #3
 8005b04:	f005 ff14 	bl	800b930 <rfalTransceiveBlockingTxRx>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	81fb      	strh	r3, [r7, #14]
    
    if( ret == ERR_NONE )
 8005b0c:	89fb      	ldrh	r3, [r7, #14]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d109      	bne.n	8005b26 <rfalIsoDepPPS+0x96>
    {
        /* Check for valid PPS Response   */
        if( (rcvLen != RFAL_ISODEP_PPS_RES_LEN) || (ppsRes->PPSS != ppsReq.PPSS) )
 8005b12:	89bb      	ldrh	r3, [r7, #12]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d104      	bne.n	8005b22 <rfalIsoDepPPS+0x92>
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	781a      	ldrb	r2, [r3, #0]
 8005b1c:	7a3b      	ldrb	r3, [r7, #8]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d001      	beq.n	8005b26 <rfalIsoDepPPS+0x96>
        {
            return ERR_PROTO;
 8005b22:	230b      	movs	r3, #11
 8005b24:	e000      	b.n	8005b28 <rfalIsoDepPPS+0x98>
        }
    }
    return ret;
 8005b26:	89fb      	ldrh	r3, [r7, #14]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	00046780 	.word	0x00046780

08005b34 <rfalIsoDepATTRIB>:

#if RFAL_FEATURE_NFCB

/*******************************************************************************/
ReturnCode rfalIsoDepATTRIB( const uint8_t* nfcid0, uint8_t PARAM1, rfalBitRate DSI, rfalBitRate DRI, rfalIsoDepFSxI FSDI, uint8_t PARAM3, uint8_t DID, const uint8_t* HLInfo, uint8_t HLInfoLen, uint32_t fwt, rfalIsoDepAttribRes *attribRes, uint8_t *attribResLen )
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b092      	sub	sp, #72	; 0x48
 8005b38:	af04      	add	r7, sp, #16
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	4608      	mov	r0, r1
 8005b3e:	4611      	mov	r1, r2
 8005b40:	461a      	mov	r2, r3
 8005b42:	4603      	mov	r3, r0
 8005b44:	70fb      	strb	r3, [r7, #3]
 8005b46:	460b      	mov	r3, r1
 8005b48:	70bb      	strb	r3, [r7, #2]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	707b      	strb	r3, [r7, #1]
    uint16_t            rcvLen;
    ReturnCode          ret;
    rfalIsoDepAttribCmd attribCmd;
    
    
    if( (attribRes == NULL) || (attribResLen == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 8005b4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00c      	beq.n	8005b6e <rfalIsoDepATTRIB+0x3a>
 8005b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d009      	beq.n	8005b6e <rfalIsoDepATTRIB+0x3a>
 8005b5a:	78bb      	ldrb	r3, [r7, #2]
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	d806      	bhi.n	8005b6e <rfalIsoDepATTRIB+0x3a>
 8005b60:	787b      	ldrb	r3, [r7, #1]
 8005b62:	2b03      	cmp	r3, #3
 8005b64:	d803      	bhi.n	8005b6e <rfalIsoDepATTRIB+0x3a>
 8005b66:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005b6a:	2b0e      	cmp	r3, #14
 8005b6c:	d901      	bls.n	8005b72 <rfalIsoDepATTRIB+0x3e>
    {
        return ERR_NONE;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	e066      	b.n	8005c40 <rfalIsoDepATTRIB+0x10c>
    }
    
    /*******************************************************************************/
    /* Compose ATTRIB command */
    attribCmd.cmd          = RFAL_ISODEP_CMD_ATTRIB;
 8005b72:	231d      	movs	r3, #29
 8005b74:	723b      	strb	r3, [r7, #8]
    attribCmd.Param.PARAM1 = PARAM1;
 8005b76:	78fb      	ldrb	r3, [r7, #3]
 8005b78:	737b      	strb	r3, [r7, #13]
    attribCmd.Param.PARAM2 = ( ((((uint8_t)DSI<<RFAL_ISODEP_ATTRIB_PARAM2_DSI_SHIFT) | ((uint8_t)DRI<<RFAL_ISODEP_ATTRIB_PARAM2_DRI_SHIFT)) & RFAL_ISODEP_ATTRIB_PARAM2_DXI_MASK) | ((uint8_t)FSDI & RFAL_ISODEP_ATTRIB_PARAM2_FSDI_MASK) );
 8005b7a:	78bb      	ldrb	r3, [r7, #2]
 8005b7c:	019b      	lsls	r3, r3, #6
 8005b7e:	b25a      	sxtb	r2, r3
 8005b80:	787b      	ldrb	r3, [r7, #1]
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	b25b      	sxtb	r3, r3
 8005b86:	4313      	orrs	r3, r2
 8005b88:	b25b      	sxtb	r3, r3
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	f023 030f 	bic.w	r3, r3, #15
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005b96:	f003 030f 	and.w	r3, r3, #15
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	73bb      	strb	r3, [r7, #14]
    attribCmd.Param.PARAM3 = PARAM3;
 8005ba2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005ba6:	73fb      	strb	r3, [r7, #15]
    attribCmd.Param.PARAM4 = (DID & RFAL_ISODEP_ATTRIB_PARAM4_DID_MASK);
 8005ba8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005bac:	f003 030f 	and.w	r3, r3, #15
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	743b      	strb	r3, [r7, #16]
    ST_MEMCPY(attribCmd.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f8c7 3009 	str.w	r3, [r7, #9]
    
    /* Append the Higher layer Info if provided */
    if( (HLInfo != NULL) && (HLInfoLen > 0U) )
 8005bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d011      	beq.n	8005be6 <rfalIsoDepATTRIB+0xb2>
 8005bc2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00d      	beq.n	8005be6 <rfalIsoDepATTRIB+0xb2>
    {
        ST_MEMCPY(attribCmd.HLInfo, HLInfo, MIN(HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN) );
 8005bca:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005bce:	2b20      	cmp	r3, #32
 8005bd0:	bf28      	it	cs
 8005bd2:	2320      	movcs	r3, #32
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	f107 0308 	add.w	r3, r7, #8
 8005bdc:	3309      	adds	r3, #9
 8005bde:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005be0:	4618      	mov	r0, r3
 8005be2:	f007 fea0 	bl	800d926 <memcpy>
    }
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&attribCmd, (RFAL_ISODEP_ATTRIB_HDR_LEN + MIN((uint16_t)HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN)), (uint8_t*)attribRes, sizeof(rfalIsoDepAttribRes), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 8005be6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005bea:	2b20      	cmp	r3, #32
 8005bec:	bf28      	it	cs
 8005bee:	2320      	movcs	r3, #32
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	3309      	adds	r3, #9
 8005bf6:	b299      	uxth	r1, r3
 8005bf8:	f107 0008 	add.w	r0, r7, #8
 8005bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bfe:	9302      	str	r3, [sp, #8]
 8005c00:	2300      	movs	r3, #0
 8005c02:	9301      	str	r3, [sp, #4]
 8005c04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	2321      	movs	r3, #33	; 0x21
 8005c0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c0e:	f005 fe8f 	bl	800b930 <rfalTransceiveBlockingTxRx>
 8005c12:	4603      	mov	r3, r0
 8005c14:	86fb      	strh	r3, [r7, #54]	; 0x36
       
    *attribResLen = (uint8_t)rcvLen;
 8005c16:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c1c:	701a      	strb	r2, [r3, #0]
    
    if( ret == ERR_NONE )
 8005c1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10c      	bne.n	8005c3e <rfalIsoDepATTRIB+0x10a>
    {
        /* Check a for valid ATTRIB Response   Digital 1.1  15.6.2.1 */
        if( (rcvLen < RFAL_ISODEP_ATTRIB_RES_HDR_LEN) || ((attribRes->mbliDid & RFAL_ISODEP_ATTRIB_RES_DID_MASK) != DID) )
 8005c24:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d007      	beq.n	8005c3a <rfalIsoDepATTRIB+0x106>
 8005c2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	f003 020f 	and.w	r2, r3, #15
 8005c32:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d001      	beq.n	8005c3e <rfalIsoDepATTRIB+0x10a>
        {
           return ERR_PROTO;
 8005c3a:	230b      	movs	r3, #11
 8005c3c:	e000      	b.n	8005c40 <rfalIsoDepATTRIB+0x10c>
        }
    }
   
   return ret;
 8005c3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3738      	adds	r7, #56	; 0x38
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <rfalIsoDepPollAHandleActivation>:

#if RFAL_FEATURE_NFCA

/*******************************************************************************/
ReturnCode rfalIsoDepPollAHandleActivation( rfalIsoDepFSxI FSDI, uint8_t DID, rfalBitRate maxBR, rfalIsoDepDevice *isoDepDev )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	603b      	str	r3, [r7, #0]
 8005c50:	4603      	mov	r3, r0
 8005c52:	71fb      	strb	r3, [r7, #7]
 8005c54:	460b      	mov	r3, r1
 8005c56:	71bb      	strb	r3, [r7, #6]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	717b      	strb	r3, [r7, #5]
    uint8_t          RATSretries;
    uint8_t          msgIt;
    ReturnCode       ret;
    rfalIsoDepPpsRes ppsRes;
    
    if( isoDepDev == NULL )
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <rfalIsoDepPollAHandleActivation+0x1e>
    {
        return ERR_PARAM;
 8005c62:	2307      	movs	r3, #7
 8005c64:	e143      	b.n	8005eee <rfalIsoDepPollAHandleActivation+0x2a6>
    }
    
    /* Enable EMD handling according   Digital 1.1  4.1.1.1 ; EMVCo 2.6  4.9.2 */
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 8005c66:	2002      	movs	r0, #2
 8005c68:	f005 fbc8 	bl	800b3fc <rfalSetErrorHandling>
    
    RATSretries = gIsoDep.maxRetriesRATS;
 8005c6c:	4ba2      	ldr	r3, [pc, #648]	; (8005ef8 <rfalIsoDepPollAHandleActivation+0x2b0>)
 8005c6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c72:	73fb      	strb	r3, [r7, #15]
    /***************************************************************************/
    /* Send RATS                                                               */
    do
    {
        /* Digital 1.1 13.7.1.1 and ISO 14443-4 5.6.1.1 - Upon a failed RATS it may be retransmited [0,1] */
        ret = rfalIsoDepRATS( FSDI, DID, &isoDepDev->activation.A.Listener.ATS, &isoDepDev->activation.A.Listener.ATSLen );
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	3314      	adds	r3, #20
 8005c7a:	79b9      	ldrb	r1, [r7, #6]
 8005c7c:	79f8      	ldrb	r0, [r7, #7]
 8005c7e:	f7ff feb3 	bl	80059e8 <rfalIsoDepRATS>
 8005c82:	4603      	mov	r3, r0
 8005c84:	81bb      	strh	r3, [r7, #12]
        
        /* EMVCo 2.6  9.6.1.1 & 9.6.1.2  If a timeout error is detected retransmit, on transmission error abort */
        if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && (ret != ERR_NONE) && (ret != ERR_TIMEOUT) )
 8005c86:	4b9c      	ldr	r3, [pc, #624]	; (8005ef8 <rfalIsoDepPollAHandleActivation+0x2b0>)
 8005c88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d105      	bne.n	8005c9c <rfalIsoDepPollAHandleActivation+0x54>
 8005c90:	89bb      	ldrh	r3, [r7, #12]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d002      	beq.n	8005c9c <rfalIsoDepPollAHandleActivation+0x54>
 8005c96:	89bb      	ldrh	r3, [r7, #12]
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d10b      	bne.n	8005cb4 <rfalIsoDepPollAHandleActivation+0x6c>
        {
            break;
        }
        
        platformDelay(1);
 8005c9c:	2001      	movs	r0, #1
 8005c9e:	f7fc fdb5 	bl	800280c <HAL_Delay>
    }
    while( ((RATSretries--) != 0U) && (ret != ERR_NONE) );
 8005ca2:	7bfb      	ldrb	r3, [r7, #15]
 8005ca4:	1e5a      	subs	r2, r3, #1
 8005ca6:	73fa      	strb	r2, [r7, #15]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d004      	beq.n	8005cb6 <rfalIsoDepPollAHandleActivation+0x6e>
 8005cac:	89bb      	ldrh	r3, [r7, #12]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1e0      	bne.n	8005c74 <rfalIsoDepPollAHandleActivation+0x2c>
 8005cb2:	e000      	b.n	8005cb6 <rfalIsoDepPollAHandleActivation+0x6e>
            break;
 8005cb4:	bf00      	nop
    
    
    /* Switch between NFC Forum and ISO14443-4 behaviour #595
     *   ISO14443-4  5.6.1  If RATS fails, a Deactivation sequence should be performed as defined on clause 8  
     *   Activity 1.1  9.6  Device Deactivation Activity is to be only performed when there's an active device */
    if( ret != ERR_NONE )
 8005cb6:	89bb      	ldrh	r3, [r7, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d008      	beq.n	8005cce <rfalIsoDepPollAHandleActivation+0x86>
    {
        if( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_ISO )
 8005cbc:	4b8e      	ldr	r3, [pc, #568]	; (8005ef8 <rfalIsoDepPollAHandleActivation+0x2b0>)
 8005cbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d101      	bne.n	8005cca <rfalIsoDepPollAHandleActivation+0x82>
        {
            rfalIsoDepDeselect();
 8005cc6:	f7ff fd99 	bl	80057fc <rfalIsoDepDeselect>
        }
        return ret;
 8005cca:	89bb      	ldrh	r3, [r7, #12]
 8005ccc:	e10f      	b.n	8005eee <rfalIsoDepPollAHandleActivation+0x2a6>
    }
    
    /*******************************************************************************/
    /* Process ATS Response                                                        */
    isoDepDev->info.FWI  = RFAL_ISODEP_FWI_DEFAULT; /* Default value   EMVCo 2.6  5.7.2.6  */
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2204      	movs	r2, #4
 8005cd2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    isoDepDev->info.SFGI = 0;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	639a      	str	r2, [r3, #56]	; 0x38
    isoDepDev->info.MBL  = 0;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	645a      	str	r2, [r3, #68]	; 0x44
    isoDepDev->info.DSI  = RFAL_BR_106;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    isoDepDev->info.DRI  = RFAL_BR_106;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    isoDepDev->info.FSxI = (uint8_t)RFAL_ISODEP_FSXI_32;     /* FSC default value is 32 bytes  ISO14443-A  5.2.3 */
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2202      	movs	r2, #2
 8005cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    
    /*******************************************************************************/
    /* Check for ATS optional fields                                               */
    if( isoDepDev->activation.A.Listener.ATS.TL > RFAL_ISODEP_ATS_MIN_LEN )
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d973      	bls.n	8005dea <rfalIsoDepPollAHandleActivation+0x1a2>
    {
        msgIt = RFAL_ISODEP_ATS_MIN_LEN;
 8005d02:	2301      	movs	r3, #1
 8005d04:	73bb      	strb	r3, [r7, #14]
        
        /* Format byte T0 is optional, if present assign FSDI */
        isoDepDev->info.FSxI = (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_FSCI_MASK);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	785b      	ldrb	r3, [r3, #1]
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        /* T0 has already been processed, always the same position */
        msgIt++; 
 8005d16:	7bbb      	ldrb	r3, [r7, #14]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	73bb      	strb	r3, [r7, #14]
        
        /* Check if TA is present */
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TA_PRESENCE_MASK) != 0U )
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	785b      	ldrb	r3, [r3, #1]
 8005d20:	f003 0310 	and.w	r3, r3, #16
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00d      	beq.n	8005d44 <rfalIsoDepPollAHandleActivation+0xfc>
        {
            rfalIsoDepCalcBitRate( maxBR, ((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt++], &isoDepDev->info.DSI, &isoDepDev->info.DRI );
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	7bbb      	ldrb	r3, [r7, #14]
 8005d2c:	1c59      	adds	r1, r3, #1
 8005d2e:	73b9      	strb	r1, [r7, #14]
 8005d30:	4413      	add	r3, r2
 8005d32:	7819      	ldrb	r1, [r3, #0]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	3349      	adds	r3, #73	; 0x49
 8005d3e:	7978      	ldrb	r0, [r7, #5]
 8005d40:	f000 f9f8 	bl	8006134 <rfalIsoDepCalcBitRate>
        }
        
        /* Check if TB is present */
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TB_PRESENCE_MASK) != 0U )
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	785b      	ldrb	r3, [r3, #1]
 8005d48:	f003 0320 	and.w	r3, r3, #32
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d018      	beq.n	8005d82 <rfalIsoDepPollAHandleActivation+0x13a>
        {
            isoDepDev->info.SFGI  = ((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt++];
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	7bbb      	ldrb	r3, [r7, #14]
 8005d54:	1c59      	adds	r1, r3, #1
 8005d56:	73b9      	strb	r1, [r7, #14]
 8005d58:	4413      	add	r3, r2
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	639a      	str	r2, [r3, #56]	; 0x38
            isoDepDev->info.FWI   = (uint8_t)((isoDepDev->info.SFGI >> RFAL_ISODEP_ATS_TB_FWI_SHIFT) & RFAL_ISODEP_ATS_FWI_MASK);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d66:	091b      	lsrs	r3, r3, #4
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	f003 030f 	and.w	r3, r3, #15
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            isoDepDev->info.SFGI &= RFAL_ISODEP_ATS_TB_SFGI_MASK;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7a:	f003 020f 	and.w	r2, r3, #15
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	639a      	str	r2, [r3, #56]	; 0x38
        }
        
        /* Check if TC is present */
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TC_PRESENCE_MASK) != 0U )
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	785b      	ldrb	r3, [r3, #1]
 8005d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d02d      	beq.n	8005dea <rfalIsoDepPollAHandleActivation+0x1a2>
        {
            /* Check for Protocol features support */
            /* Advanced protocol features defined on Digital 1.0 Table 69, removed after */
            isoDepDev->info.supAdFt = (((((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt]   & RFAL_ISODEP_ATS_TC_ADV_FEAT) != 0U)  ? true : false);
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	7bbb      	ldrb	r3, [r7, #14]
 8005d92:	4413      	add	r3, r2
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	091b      	lsrs	r3, r3, #4
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	bf14      	ite	ne
 8005da0:	2301      	movne	r3, #1
 8005da2:	2300      	moveq	r3, #0
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            isoDepDev->info.supDID  = (((((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt]   & RFAL_ISODEP_ATS_TC_DID)      != 0U)  ? true : false);
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	7bbb      	ldrb	r3, [r7, #14]
 8005db0:	4413      	add	r3, r2
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	085b      	lsrs	r3, r3, #1
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	bf14      	ite	ne
 8005dbe:	2301      	movne	r3, #1
 8005dc0:	2300      	moveq	r3, #0
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            isoDepDev->info.supNAD  = (((((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt++] & RFAL_ISODEP_ATS_TC_NAD)      != 0U)  ? true : false);
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	7bbb      	ldrb	r3, [r7, #14]
 8005dce:	1c59      	adds	r1, r3, #1
 8005dd0:	73b9      	strb	r1, [r7, #14]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	bf14      	ite	ne
 8005dde:	2301      	movne	r3, #1
 8005de0:	2300      	moveq	r3, #0
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        }
    }
    
    isoDepDev->info.FSx  = rfalIsoDepFSxI2FSx(isoDepDev->info.FSxI);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7ff fd73 	bl	80058dc <rfalIsoDepFSxI2FSx>
 8005df6:	4603      	mov	r3, r0
 8005df8:	461a      	mov	r2, r3
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    
    isoDepDev->info.SFGT = rfalIsoDepSFGI2SFGT( (uint8_t)isoDepDev->info.SFGI );
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 fa38 	bl	800627c <rfalIsoDepSFGI2SFGT>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	63da      	str	r2, [r3, #60]	; 0x3c
    isoDepTimerStart( gIsoDep.SFGTTimer, isoDepDev->info.SFGT );
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7fc fc61 	bl	80026e0 <timerCalculateTimer>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	4b35      	ldr	r3, [pc, #212]	; (8005ef8 <rfalIsoDepPollAHandleActivation+0x2b0>)
 8005e22:	63da      	str	r2, [r3, #60]	; 0x3c
    
    isoDepDev->info.FWT  = rfalIsoDepFWI2FWT( isoDepDev->info.FWI );
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7ff fd36 	bl	800589c <rfalIsoDepFWI2FWT>
 8005e30:	4602      	mov	r2, r0
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	631a      	str	r2, [r3, #48]	; 0x30
    isoDepDev->info.dFWT = RFAL_ISODEP_DFWT_20;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8005e3c:	635a      	str	r2, [r3, #52]	; 0x34
    
    isoDepDev->info.DID = ( (isoDepDev->info.supDID) ? DID : RFAL_ISODEP_NO_DID);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <rfalIsoDepPollAHandleActivation+0x204>
 8005e48:	79ba      	ldrb	r2, [r7, #6]
 8005e4a:	e000      	b.n	8005e4e <rfalIsoDepPollAHandleActivation+0x206>
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    isoDepDev->info.NAD = RFAL_ISODEP_NO_NAD;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	22ff      	movs	r2, #255	; 0xff
 8005e58:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
    
    
    /*******************************************************************************/
    /* If higher bit rates are supported by both devices, send PPS                 */
    if( (isoDepDev->info.DSI != RFAL_BR_106) || (isoDepDev->info.DRI != RFAL_BR_106) )
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d104      	bne.n	8005e70 <rfalIsoDepPollAHandleActivation+0x228>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d030      	beq.n	8005ed2 <rfalIsoDepPollAHandleActivation+0x28a>
    {
        /* Wait until SFGT has been fulfilled */
        while( !isoDepTimerisExpired( gIsoDep.SFGTTimer ) ) { /* MISRA 15.6: mandatory brackets */ };
 8005e70:	bf00      	nop
 8005e72:	4b21      	ldr	r3, [pc, #132]	; (8005ef8 <rfalIsoDepPollAHandleActivation+0x2b0>)
 8005e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fc fc40 	bl	80026fc <timerIsExpired>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	f083 0301 	eor.w	r3, r3, #1
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1f4      	bne.n	8005e72 <rfalIsoDepPollAHandleActivation+0x22a>
        
        ret = rfalIsoDepPPS( isoDepDev->info.DID, isoDepDev->info.DSI, isoDepDev->info.DRI, &ppsRes );
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8005e9a:	f107 0308 	add.w	r3, r7, #8
 8005e9e:	f7ff fdf7 	bl	8005a90 <rfalIsoDepPPS>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	81bb      	strh	r3, [r7, #12]
        
        if( ret == ERR_NONE )
 8005ea6:	89bb      	ldrh	r3, [r7, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10a      	bne.n	8005ec2 <rfalIsoDepPollAHandleActivation+0x27a>
        {
            /* DSI code the divisor from PICC to PCD */
            /* DRI code the divisor from PCD to PICC */
            rfalSetBitRate( isoDepDev->info.DRI, isoDepDev->info.DSI );
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005eb8:	4619      	mov	r1, r3
 8005eba:	4610      	mov	r0, r2
 8005ebc:	f005 f816 	bl	800aeec <rfalSetBitRate>
 8005ec0:	e007      	b.n	8005ed2 <rfalIsoDepPollAHandleActivation+0x28a>
        }
        else
        {
            isoDepDev->info.DSI = RFAL_BR_106;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            isoDepDev->info.DRI = RFAL_BR_106;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        }
    }
    
    /*******************************************************************************/
    /* Store already FS info,  rfalIsoDepGetMaxInfLen() may be called before setting TxRx params */
    gIsoDep.fsx    = isoDepDev->info.FSx;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8005ed8:	4b07      	ldr	r3, [pc, #28]	; (8005ef8 <rfalIsoDepPollAHandleActivation+0x2b0>)
 8005eda:	821a      	strh	r2, [r3, #16]
    gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)FSDI );
 8005edc:	79fb      	ldrb	r3, [r7, #7]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7ff fcfc 	bl	80058dc <rfalIsoDepFSxI2FSx>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	4b03      	ldr	r3, [pc, #12]	; (8005ef8 <rfalIsoDepPollAHandleActivation+0x2b0>)
 8005eea:	845a      	strh	r2, [r3, #34]	; 0x22
    
    return ERR_NONE;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	200002fc 	.word	0x200002fc

08005efc <rfalIsoDepPollBHandleActivation>:

#if RFAL_FEATURE_NFCB

/*******************************************************************************/
ReturnCode rfalIsoDepPollBHandleActivation( rfalIsoDepFSxI FSDI, uint8_t DID, rfalBitRate maxBR, uint8_t PARAM1, const rfalNfcbListenDevice *nfcbDev, const uint8_t* HLInfo, uint8_t HLInfoLen, rfalIsoDepDevice *isoDepDev )
{
 8005efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005efe:	b08d      	sub	sp, #52	; 0x34
 8005f00:	af08      	add	r7, sp, #32
 8005f02:	4604      	mov	r4, r0
 8005f04:	4608      	mov	r0, r1
 8005f06:	4611      	mov	r1, r2
 8005f08:	461a      	mov	r2, r3
 8005f0a:	4623      	mov	r3, r4
 8005f0c:	71fb      	strb	r3, [r7, #7]
 8005f0e:	4603      	mov	r3, r0
 8005f10:	71bb      	strb	r3, [r7, #6]
 8005f12:	460b      	mov	r3, r1
 8005f14:	717b      	strb	r3, [r7, #5]
 8005f16:	4613      	mov	r3, r2
 8005f18:	713b      	strb	r3, [r7, #4]
    ReturnCode ret;
    uint8_t    mbli;
    
    /***************************************************************************/
    /* Initialize ISO-DEP Device with info from SENSB_RES                      */
    isoDepDev->info.FWI     = ((nfcbDev->sensbRes.protInfo.FwiAdcFo >> RFAL_NFCB_SENSB_RES_FWI_SHIFT) & RFAL_NFCB_SENSB_RES_FWI_MASK);
 8005f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1c:	7b1b      	ldrb	r3, [r3, #12]
 8005f1e:	091b      	lsrs	r3, r3, #4
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    isoDepDev->info.FWT     = rfalIsoDepFWI2FWT( isoDepDev->info.FWI );
 8005f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7ff fcb4 	bl	800589c <rfalIsoDepFWI2FWT>
 8005f34:	4602      	mov	r2, r0
 8005f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f38:	631a      	str	r2, [r3, #48]	; 0x30
    isoDepDev->info.dFWT    = RFAL_NFCB_DFWT;
 8005f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8005f40:	635a      	str	r2, [r3, #52]	; 0x34
    isoDepDev->info.SFGI    = (((uint32_t)nfcbDev->sensbRes.protInfo.SFGI >> RFAL_NFCB_SENSB_RES_SFGI_SHIFT) & RFAL_NFCB_SENSB_RES_SFGI_MASK);
 8005f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f44:	7b5b      	ldrb	r3, [r3, #13]
 8005f46:	091b      	lsrs	r3, r3, #4
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	f003 020f 	and.w	r2, r3, #15
 8005f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f50:	639a      	str	r2, [r3, #56]	; 0x38
    isoDepDev->info.SFGT    = rfalIsoDepSFGI2SFGT( (uint8_t)isoDepDev->info.SFGI );
 8005f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 f98f 	bl	800627c <rfalIsoDepSFGI2SFGT>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f62:	63da      	str	r2, [r3, #60]	; 0x3c
    isoDepDev->info.FSxI    = ((nfcbDev->sensbRes.protInfo.FsciProType >> RFAL_NFCB_SENSB_RES_FSCI_SHIFT) & RFAL_NFCB_SENSB_RES_FSCI_MASK);
 8005f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f66:	7adb      	ldrb	r3, [r3, #11]
 8005f68:	091b      	lsrs	r3, r3, #4
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    isoDepDev->info.FSx     = rfalIsoDepFSxI2FSx(isoDepDev->info.FSxI);
 8005f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7ff fcaf 	bl	80058dc <rfalIsoDepFSxI2FSx>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	461a      	mov	r2, r3
 8005f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f84:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    isoDepDev->info.DID     = DID;
 8005f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f8a:	79ba      	ldrb	r2, [r7, #6]
 8005f8c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    isoDepDev->info.supDID  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_DID_MASK ) != 0U) ? true : false);
 8005f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f92:	7b1b      	ldrb	r3, [r3, #12]
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	bf14      	ite	ne
 8005f9c:	2301      	movne	r3, #1
 8005f9e:	2300      	moveq	r3, #0
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    isoDepDev->info.supNAD  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_NAD_MASK ) != 0U) ? true : false);
 8005fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005faa:	7b1b      	ldrb	r3, [r3, #12]
 8005fac:	085b      	lsrs	r3, r3, #1
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	bf14      	ite	ne
 8005fb6:	2301      	movne	r3, #1
 8005fb8:	2300      	moveq	r3, #0
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fbe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    
    
    /* Check if DID requested is supported by PICC */
    if( (DID != RFAL_ISODEP_NO_DID) && (!isoDepDev->info.supDID) )
 8005fc2:	79bb      	ldrb	r3, [r7, #6]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d009      	beq.n	8005fdc <rfalIsoDepPollBHandleActivation+0xe0>
 8005fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fca:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005fce:	f083 0301 	eor.w	r3, r3, #1
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <rfalIsoDepPollBHandleActivation+0xe0>
    {
        return ERR_PARAM;
 8005fd8:	2307      	movs	r3, #7
 8005fda:	e0a4      	b.n	8006126 <rfalIsoDepPollBHandleActivation+0x22a>
    }
    
    /* Enable EMD handling according   Digital 2.1  4.1.1.1 ; EMVCo 3.0  4.9.2 */
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 8005fdc:	2002      	movs	r0, #2
 8005fde:	f005 fa0d 	bl	800b3fc <rfalSetErrorHandling>
    
    /***************************************************************************/
    /* Set FDT Poll to be used on upcoming communications                      */
    if( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV )
 8005fe2:	4b53      	ldr	r3, [pc, #332]	; (8006130 <rfalIsoDepPollBHandleActivation+0x234>)
 8005fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d104      	bne.n	8005ff6 <rfalIsoDepPollBHandleActivation+0xfa>
    {
        /* Disregard Minimum TR2 returned by PICC, always use FDTb MIN   EMVCo 3.0  6.3.2.10  */
        rfalSetFDTPoll( RFAL_FDT_POLL_NFCB_POLLER );
 8005fec:	f641 207c 	movw	r0, #6780	; 0x1a7c
 8005ff0:	f005 fa14 	bl	800b41c <rfalSetFDTPoll>
 8005ff4:	e00d      	b.n	8006012 <rfalIsoDepPollBHandleActivation+0x116>
    }
    else
    {
        /* Apply minimum TR2 from SENSB_RES   Digital 2.1  7.6.2.23 */
        rfalSetFDTPoll( rfalNfcbTR2ToFDT(((nfcbDev->sensbRes.protInfo.FsciProType >>RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) & RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK)) );
 8005ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff8:	7adb      	ldrb	r3, [r3, #11]
 8005ffa:	085b      	lsrs	r3, r3, #1
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	f003 0303 	and.w	r3, r3, #3
 8006002:	b2db      	uxtb	r3, r3
 8006004:	4618      	mov	r0, r3
 8006006:	f004 f977 	bl	800a2f8 <rfalNfcbTR2ToFDT>
 800600a:	4603      	mov	r3, r0
 800600c:	4618      	mov	r0, r3
 800600e:	f005 fa05 	bl	800b41c <rfalSetFDTPoll>
    }
    
    
    /* Calculate max Bit Rate */
    rfalIsoDepCalcBitRate( maxBR, nfcbDev->sensbRes.protInfo.BRC, &isoDepDev->info.DSI, &isoDepDev->info.DRI );
 8006012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006014:	7a99      	ldrb	r1, [r3, #10]
 8006016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006018:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800601c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800601e:	3349      	adds	r3, #73	; 0x49
 8006020:	7978      	ldrb	r0, [r7, #5]
 8006022:	f000 f887 	bl	8006134 <rfalIsoDepCalcBitRate>
    
    /***************************************************************************/
    /* Send ATTRIB Command                                                     */
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 8006026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006028:	1c9d      	adds	r5, r3, #2
                           (((nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_ADC_ADV_FEATURE_MASK) != 0U) ? PARAM1 : RFAL_ISODEP_ATTRIB_REQ_PARAM1_DEFAULT),
 800602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602c:	7b1b      	ldrb	r3, [r3, #12]
 800602e:	f003 0308 	and.w	r3, r3, #8
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <rfalIsoDepPollBHandleActivation+0x13e>
 8006036:	793c      	ldrb	r4, [r7, #4]
 8006038:	e000      	b.n	800603c <rfalIsoDepPollBHandleActivation+0x140>
 800603a:	2400      	movs	r4, #0
 800603c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603e:	f893 6048 	ldrb.w	r6, [r3, #72]	; 0x48
 8006042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006044:	f893 c049 	ldrb.w	ip, [r3, #73]	; 0x49
                           isoDepDev->info.DSI,
                           isoDepDev->info.DRI,
                           FSDI,
                           (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK : (nfcbDev->sensbRes.protInfo.FsciProType & ( (RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK<<RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) | RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK)),  /* EMVCo 2.6 6.4.1.9 */
 8006048:	4b39      	ldr	r3, [pc, #228]	; (8006130 <rfalIsoDepPollBHandleActivation+0x234>)
 800604a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 800604e:	2b01      	cmp	r3, #1
 8006050:	d005      	beq.n	800605e <rfalIsoDepPollBHandleActivation+0x162>
                           (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK : (nfcbDev->sensbRes.protInfo.FsciProType & ( (RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK<<RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) | RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK)),  /* EMVCo 2.6 6.4.1.9 */
 8006052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006054:	7adb      	ldrb	r3, [r3, #11]
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 8006056:	f003 0307 	and.w	r3, r3, #7
 800605a:	b2db      	uxtb	r3, r3
 800605c:	e000      	b.n	8006060 <rfalIsoDepPollBHandleActivation+0x164>
 800605e:	2301      	movs	r3, #1
                           DID,
                           HLInfo,
                           HLInfoLen,
                           (isoDepDev->info.FWT + isoDepDev->info.dFWT),
 8006060:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006062:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006064:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006066:	6b52      	ldr	r2, [r2, #52]	; 0x34
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 8006068:	440a      	add	r2, r1
 800606a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800606c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800606e:	3021      	adds	r0, #33	; 0x21
 8006070:	9007      	str	r0, [sp, #28]
 8006072:	9106      	str	r1, [sp, #24]
 8006074:	9205      	str	r2, [sp, #20]
 8006076:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800607a:	9204      	str	r2, [sp, #16]
 800607c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800607e:	9203      	str	r2, [sp, #12]
 8006080:	79ba      	ldrb	r2, [r7, #6]
 8006082:	9202      	str	r2, [sp, #8]
 8006084:	9301      	str	r3, [sp, #4]
 8006086:	79fb      	ldrb	r3, [r7, #7]
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	4663      	mov	r3, ip
 800608c:	4632      	mov	r2, r6
 800608e:	4621      	mov	r1, r4
 8006090:	4628      	mov	r0, r5
 8006092:	f7ff fd4f 	bl	8005b34 <rfalIsoDepATTRIB>
 8006096:	4603      	mov	r3, r0
 8006098:	81fb      	strh	r3, [r7, #14]
                           &isoDepDev->activation.B.Listener.ATTRIB_RESLen
                         );
    
    /***************************************************************************/
    /* Process ATTRIB Response                                                 */
    if( ret == ERR_NONE )
 800609a:	89fb      	ldrh	r3, [r7, #14]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d12c      	bne.n	80060fa <rfalIsoDepPollBHandleActivation+0x1fe>
    {
        /* Digital 1.1 14.6.2.3 - Check if received DID match */
        if( (isoDepDev->activation.B.Listener.ATTRIB_RES.mbliDid & RFAL_ISODEP_ATTRIB_RES_DID_MASK) != DID )
 80060a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	f003 020f 	and.w	r2, r3, #15
 80060a8:	79bb      	ldrb	r3, [r7, #6]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d001      	beq.n	80060b2 <rfalIsoDepPollBHandleActivation+0x1b6>
        {
            return ERR_PROTO;
 80060ae:	230b      	movs	r3, #11
 80060b0:	e039      	b.n	8006126 <rfalIsoDepPollBHandleActivation+0x22a>
        }
                
        /* Retrieve MBLI and calculate new FDS/MBL (Maximum Buffer Length) */
        mbli = ((isoDepDev->activation.B.Listener.ATTRIB_RES.mbliDid >> RFAL_ISODEP_ATTRIB_RES_MBLI_SHIFT) & RFAL_ISODEP_ATTRIB_RES_MBLI_MASK);
 80060b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	091b      	lsrs	r3, r3, #4
 80060b8:	737b      	strb	r3, [r7, #13]
        if( mbli > 0U)
 80060ba:	7b7b      	ldrb	r3, [r7, #13]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d008      	beq.n	80060d2 <rfalIsoDepPollBHandleActivation+0x1d6>
        {
            /* Digital 1.1  14.6.2  Calculate Maximum Buffer Length MBL = FSC x 2^(MBLI-1) */
            isoDepDev->info.MBL = (isoDepDev->info.FSx * ((uint32_t)1U<<(mbli-1U)));
 80060c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80060c6:	461a      	mov	r2, r3
 80060c8:	7b7b      	ldrb	r3, [r7, #13]
 80060ca:	3b01      	subs	r3, #1
 80060cc:	409a      	lsls	r2, r3
 80060ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d0:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* DSI code the divisor from PICC to PCD */
        /* DRI code the divisor from PCD to PICC */
        rfalSetBitRate( isoDepDev->info.DRI, isoDepDev->info.DSI );
 80060d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d4:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 80060d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060da:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80060de:	4619      	mov	r1, r3
 80060e0:	4610      	mov	r0, r2
 80060e2:	f004 ff03 	bl	800aeec <rfalSetBitRate>
        {
            /* REMARK: SoF EoF TR0 and TR1 are not passed on to RF layer */
        }
        
        /* Start the SFGT timer */
        isoDepTimerStart( gIsoDep.SFGTTimer, isoDepDev->info.SFGT );
 80060e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7fc faf7 	bl	80026e0 <timerCalculateTimer>
 80060f2:	4602      	mov	r2, r0
 80060f4:	4b0e      	ldr	r3, [pc, #56]	; (8006130 <rfalIsoDepPollBHandleActivation+0x234>)
 80060f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80060f8:	e007      	b.n	800610a <rfalIsoDepPollBHandleActivation+0x20e>
    }
    else
    {
        isoDepDev->info.DSI = RFAL_BR_106;
 80060fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        isoDepDev->info.DRI = RFAL_BR_106;
 8006102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    }
    
    /*******************************************************************************/
    /* Store already FS info,  rfalIsoDepGetMaxInfLen() may be called before setting TxRx params */
    gIsoDep.fsx    = isoDepDev->info.FSx;
 800610a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800610c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8006110:	4b07      	ldr	r3, [pc, #28]	; (8006130 <rfalIsoDepPollBHandleActivation+0x234>)
 8006112:	821a      	strh	r2, [r3, #16]
    gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)FSDI );
 8006114:	79fb      	ldrb	r3, [r7, #7]
 8006116:	4618      	mov	r0, r3
 8006118:	f7ff fbe0 	bl	80058dc <rfalIsoDepFSxI2FSx>
 800611c:	4603      	mov	r3, r0
 800611e:	461a      	mov	r2, r3
 8006120:	4b03      	ldr	r3, [pc, #12]	; (8006130 <rfalIsoDepPollBHandleActivation+0x234>)
 8006122:	845a      	strh	r2, [r3, #34]	; 0x22
    
    return ret;
 8006124:	89fb      	ldrh	r3, [r7, #14]
}
 8006126:	4618      	mov	r0, r3
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800612e:	bf00      	nop
 8006130:	200002fc 	.word	0x200002fc

08006134 <rfalIsoDepCalcBitRate>:
}


/*******************************************************************************/
static void rfalIsoDepCalcBitRate( rfalBitRate maxAllowedBR, uint8_t piccBRCapability, rfalBitRate *dsi, rfalBitRate *dri )
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	60ba      	str	r2, [r7, #8]
 800613c:	607b      	str	r3, [r7, #4]
 800613e:	4603      	mov	r3, r0
 8006140:	73fb      	strb	r3, [r7, #15]
 8006142:	460b      	mov	r3, r1
 8006144:	73bb      	strb	r3, [r7, #14]
    uint8_t     dsiMask;
    int8_t      i;
    bool        bitrateFound;
    rfalBitRate curMaxBR;
    
    curMaxBR = maxAllowedBR;
 8006146:	7bfb      	ldrb	r3, [r7, #15]
 8006148:	757b      	strb	r3, [r7, #21]
    
    do
    {
        bitrateFound = true;
 800614a:	2301      	movs	r3, #1
 800614c:	75bb      	strb	r3, [r7, #22]
        
        (*dsi) = RFAL_BR_106;
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2200      	movs	r2, #0
 8006152:	701a      	strb	r2, [r3, #0]
        (*dri) = RFAL_BR_106;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	701a      	strb	r2, [r3, #0]
        
        /* Digital 1.0  5.6.2.5 & 11.6.2.14: A received RFU value of b4 = 1b MUST be interpreted as if b7 to b1 ? 0000000b (only 106 kbits/s in both direction) */
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) )
 800615a:	7bbb      	ldrb	r3, [r7, #14]
 800615c:	f003 0308 	and.w	r3, r3, #8
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	f040 8083 	bne.w	800626e <rfalIsoDepCalcBitRate+0x13a>
 8006168:	7d7b      	ldrb	r3, [r7, #21]
 800616a:	2b03      	cmp	r3, #3
 800616c:	d87f      	bhi.n	800626e <rfalIsoDepCalcBitRate+0x13a>
            return;
        }
        
        /***************************************************************************/
        /* Determine Listen->Poll bit rate */
        dsiMask = (piccBRCapability & RFAL_ISODEP_BSI_MASK);
 800616e:	7bbb      	ldrb	r3, [r7, #14]
 8006170:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006174:	753b      	strb	r3, [r7, #20]
        for( i = 2; i >= 0; i-- )  // Check supported bit rate from the highest 
 8006176:	2302      	movs	r3, #2
 8006178:	75fb      	strb	r3, [r7, #23]
 800617a:	e019      	b.n	80061b0 <rfalIsoDepCalcBitRate+0x7c>
        {
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 800617c:	7d3a      	ldrb	r2, [r7, #20]
 800617e:	7dfb      	ldrb	r3, [r7, #23]
 8006180:	4619      	mov	r1, r3
 8006182:	2310      	movs	r3, #16
 8006184:	408b      	lsls	r3, r1
 8006186:	4013      	ands	r3, r2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00b      	beq.n	80061a4 <rfalIsoDepCalcBitRate+0x70>
 800618c:	7dfb      	ldrb	r3, [r7, #23]
 800618e:	1c5a      	adds	r2, r3, #1
 8006190:	7d7b      	ldrb	r3, [r7, #21]
 8006192:	429a      	cmp	r2, r3
 8006194:	d806      	bhi.n	80061a4 <rfalIsoDepCalcBitRate+0x70>
            {
                uint8_t newdsi = ((uint8_t) i) + 1U;
 8006196:	7dfb      	ldrb	r3, [r7, #23]
 8006198:	3301      	adds	r3, #1
 800619a:	74fb      	strb	r3, [r7, #19]
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	7cfa      	ldrb	r2, [r7, #19]
 80061a0:	701a      	strb	r2, [r3, #0]
                break;
 80061a2:	e009      	b.n	80061b8 <rfalIsoDepCalcBitRate+0x84>
        for( i = 2; i >= 0; i-- )  // Check supported bit rate from the highest 
 80061a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	3b01      	subs	r3, #1
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	75fb      	strb	r3, [r7, #23]
 80061b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	dae1      	bge.n	800617c <rfalIsoDepCalcBitRate+0x48>
            }
        }
        
        /***************************************************************************/
        /* Determine Poll->Listen bit rate */ 
        driMask = (piccBRCapability & RFAL_ISODEP_BRI_MASK);
 80061b8:	7bbb      	ldrb	r3, [r7, #14]
 80061ba:	f003 0307 	and.w	r3, r3, #7
 80061be:	74bb      	strb	r3, [r7, #18]
        for( i = 2; i >= 0; i-- )  /* Check supported bit rate from the highest */ 
 80061c0:	2302      	movs	r3, #2
 80061c2:	75fb      	strb	r3, [r7, #23]
 80061c4:	e018      	b.n	80061f8 <rfalIsoDepCalcBitRate+0xc4>
        {
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 80061c6:	7cbb      	ldrb	r3, [r7, #18]
 80061c8:	7dfa      	ldrb	r2, [r7, #23]
 80061ca:	40d3      	lsrs	r3, r2
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00b      	beq.n	80061ec <rfalIsoDepCalcBitRate+0xb8>
 80061d4:	7dfb      	ldrb	r3, [r7, #23]
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	7d7b      	ldrb	r3, [r7, #21]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d806      	bhi.n	80061ec <rfalIsoDepCalcBitRate+0xb8>
            {
                uint8_t newdri = ((uint8_t) i) + 1U;
 80061de:	7dfb      	ldrb	r3, [r7, #23]
 80061e0:	3301      	adds	r3, #1
 80061e2:	747b      	strb	r3, [r7, #17]
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	7c7a      	ldrb	r2, [r7, #17]
 80061e8:	701a      	strb	r2, [r3, #0]
                break;
 80061ea:	e009      	b.n	8006200 <rfalIsoDepCalcBitRate+0xcc>
        for( i = 2; i >= 0; i-- )  /* Check supported bit rate from the highest */ 
 80061ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	3b01      	subs	r3, #1
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	75fb      	strb	r3, [r7, #23]
 80061f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	dae2      	bge.n	80061c6 <rfalIsoDepCalcBitRate+0x92>
        
        /***************************************************************************/
        /* Check if different bit rate is supported */
        
        /* Digital 1.0 Table 67: if b8=1b, then only the same bit rate divisor for both directions is supported */
        if( (piccBRCapability & RFAL_ISODEP_SAME_BITRATE_MASK) != 0U )
 8006200:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006204:	2b00      	cmp	r3, #0
 8006206:	da2a      	bge.n	800625e <rfalIsoDepCalcBitRate+0x12a>
        {   
            (*dsi) = MIN((*dsi), (*dri));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	781a      	ldrb	r2, [r3, #0]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	4293      	cmp	r3, r2
 8006212:	bf28      	it	cs
 8006214:	4613      	movcs	r3, r2
 8006216:	b2da      	uxtb	r2, r3
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	701a      	strb	r2, [r3, #0]
            (*dri) = (*dsi);
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	781a      	ldrb	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	701a      	strb	r2, [r3, #0]
            /* Check that the baudrate is supported */
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d018      	beq.n	800625e <rfalIsoDepCalcBitRate+0x12a>
 800622c:	7d3a      	ldrb	r2, [r7, #20]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	3b01      	subs	r3, #1
 8006234:	2110      	movs	r1, #16
 8006236:	fa01 f303 	lsl.w	r3, r1, r3
 800623a:	4013      	ands	r3, r2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d009      	beq.n	8006254 <rfalIsoDepCalcBitRate+0x120>
 8006240:	7cba      	ldrb	r2, [r7, #18]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	3b01      	subs	r3, #1
 8006248:	fa22 f303 	lsr.w	r3, r2, r3
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	d104      	bne.n	800625e <rfalIsoDepCalcBitRate+0x12a>
            {
                bitrateFound = false;
 8006254:	2300      	movs	r3, #0
 8006256:	75bb      	strb	r3, [r7, #22]
                curMaxBR     = (*dsi); /* set allowed bitrate to be lowest and determine bit rate again */
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	757b      	strb	r3, [r7, #21]
            }
        }
    } while (!(bitrateFound));
 800625e:	7dbb      	ldrb	r3, [r7, #22]
 8006260:	f083 0301 	eor.w	r3, r3, #1
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	f47f af6f 	bne.w	800614a <rfalIsoDepCalcBitRate+0x16>
 800626c:	e000      	b.n	8006270 <rfalIsoDepCalcBitRate+0x13c>
            return;
 800626e:	bf00      	nop
    
}
 8006270:	371c      	adds	r7, #28
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
	...

0800627c <rfalIsoDepSFGI2SFGT>:

/*******************************************************************************/
static uint32_t rfalIsoDepSFGI2SFGT( uint8_t sfgi )
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	4603      	mov	r3, r0
 8006284:	71fb      	strb	r3, [r7, #7]
    uint32_t sfgt;
    uint8_t tmpSFGI;
    
    tmpSFGI = sfgi;
 8006286:	79fb      	ldrb	r3, [r7, #7]
 8006288:	72fb      	strb	r3, [r7, #11]
 
    if (tmpSFGI > ISODEP_SFGI_MAX)
 800628a:	7afb      	ldrb	r3, [r7, #11]
 800628c:	2b0e      	cmp	r3, #14
 800628e:	d901      	bls.n	8006294 <rfalIsoDepSFGI2SFGT+0x18>
    {
        tmpSFGI = ISODEP_SFGI_MIN;
 8006290:	2300      	movs	r3, #0
 8006292:	72fb      	strb	r3, [r7, #11]
    }
        
    if (tmpSFGI != ISODEP_SFGI_MIN)
 8006294:	7afb      	ldrb	r3, [r7, #11]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00b      	beq.n	80062b2 <rfalIsoDepSFGI2SFGT+0x36>
    {
        /* If sfgi != 0 wait SFGT + dSFGT   Digital 1.1  13.8.2.1 */
        sfgt  = isoDepCalcSGFT(sfgi) + isoDepCalcdSGFT(sfgi);
 800629a:	79fb      	ldrb	r3, [r7, #7]
 800629c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80062a0:	409a      	lsls	r2, r3
 80062a2:	79fb      	ldrb	r3, [r7, #7]
 80062a4:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80062a8:	fa01 f303 	lsl.w	r3, r1, r3
 80062ac:	4413      	add	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	e002      	b.n	80062b8 <rfalIsoDepSFGI2SFGT+0x3c>
    }
    /* Otherwise use FDTPoll min Digital  1.1  13.8.2.3*/
    else
    {
        sfgt = RFAL_FDT_POLL_NFCA_POLLER;
 80062b2:	f641 237c 	movw	r3, #6780	; 0x1a7c
 80062b6:	60fb      	str	r3, [r7, #12]
    }

    /* Convert carrier cycles to milli seconds */
    return (rfalConv1fcToMs(sfgt) + 1U);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	4a05      	ldr	r2, [pc, #20]	; (80062d0 <rfalIsoDepSFGI2SFGT+0x54>)
 80062bc:	fba2 2303 	umull	r2, r3, r2, r3
 80062c0:	0b1b      	lsrs	r3, r3, #12
 80062c2:	3301      	adds	r3, #1
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	4d542005 	.word	0x4d542005

080062d4 <rfalNfcInitialize>:
#endif /* RFAL_FEATURE_LISTEN_MODE*/


/*******************************************************************************/
ReturnCode rfalNfcInitialize( void )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
    ReturnCode err;
    
    gNfcDev.state = RFAL_NFC_STATE_NOTINIT;
 80062da:	4b0b      	ldr	r3, [pc, #44]	; (8006308 <rfalNfcInitialize+0x34>)
 80062dc:	2200      	movs	r2, #0
 80062de:	701a      	strb	r2, [r3, #0]
    
    rfalAnalogConfigInitialize();              /* Initialize RFAL's Analog Configs */
 80062e0:	f7fe f954 	bl	800458c <rfalAnalogConfigInitialize>
    EXIT_ON_ERR( err, rfalInitialize() );      /* Initialize RFAL */
 80062e4:	f004 fc54 	bl	800ab90 <rfalInitialize>
 80062e8:	4603      	mov	r3, r0
 80062ea:	80fb      	strh	r3, [r7, #6]
 80062ec:	88fb      	ldrh	r3, [r7, #6]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <rfalNfcInitialize+0x22>
 80062f2:	88fb      	ldrh	r3, [r7, #6]
 80062f4:	e003      	b.n	80062fe <rfalNfcInitialize+0x2a>

    gNfcDev.state = RFAL_NFC_STATE_IDLE;         /* Go to initialized */
 80062f6:	4b04      	ldr	r3, [pc, #16]	; (8006308 <rfalNfcInitialize+0x34>)
 80062f8:	2201      	movs	r2, #1
 80062fa:	701a      	strb	r2, [r3, #0]
    return ERR_NONE;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	20000384 	.word	0x20000384

0800630c <rfalNfcDiscover>:

/*******************************************************************************/
ReturnCode rfalNfcDiscover( const rfalNfcDiscoverParam *disParams )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
    /* Check if initialization has been performed */
    if( gNfcDev.state != RFAL_NFC_STATE_IDLE )
 8006314:	4b45      	ldr	r3, [pc, #276]	; (800642c <rfalNfcDiscover+0x120>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d001      	beq.n	8006320 <rfalNfcDiscover+0x14>
    {
        return ERR_WRONG_STATE;
 800631c:	2321      	movs	r3, #33	; 0x21
 800631e:	e081      	b.n	8006424 <rfalNfcDiscover+0x118>
    }
    
    /* Check valid parameters */
    if( (disParams == NULL) || (disParams->devLimit > RFAL_NFC_MAX_DEVICES) || (disParams->devLimit == 0U)                                                ||
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d025      	beq.n	8006372 <rfalNfcDiscover+0x66>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	799b      	ldrb	r3, [r3, #6]
 800632a:	2b05      	cmp	r3, #5
 800632c:	d821      	bhi.n	8006372 <rfalNfcDiscover+0x66>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	799b      	ldrb	r3, [r3, #6]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d01d      	beq.n	8006372 <rfalNfcDiscover+0x66>
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )        ||
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	885b      	ldrh	r3, [r3, #2]
 800633a:	f003 0304 	and.w	r3, r3, #4
    if( (disParams == NULL) || (disParams->devLimit > RFAL_NFC_MAX_DEVICES) || (disParams->devLimit == 0U)                                                ||
 800633e:	2b00      	cmp	r3, #0
 8006340:	d007      	beq.n	8006352 <rfalNfcDiscover+0x46>
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )        ||
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	79db      	ldrb	r3, [r3, #7]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d003      	beq.n	8006352 <rfalNfcDiscover+0x46>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	79db      	ldrb	r3, [r3, #7]
 800634e:	2b02      	cmp	r3, #2
 8006350:	d10f      	bne.n	8006372 <rfalNfcDiscover+0x66>
        ( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && (disParams->ap2pBR > RFAL_BR_424)) || (disParams->GBLen > RFAL_NFCDEP_GB_MAX_LEN)) )
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	885b      	ldrh	r3, [r3, #2]
 8006356:	f003 0310 	and.w	r3, r3, #16
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )        ||
 800635a:	2b00      	cmp	r3, #0
 800635c:	d004      	beq.n	8006368 <rfalNfcDiscover+0x5c>
        ( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && (disParams->ap2pBR > RFAL_BR_424)) || (disParams->GBLen > RFAL_NFCDEP_GB_MAX_LEN)) )
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006364:	2b02      	cmp	r3, #2
 8006366:	d804      	bhi.n	8006372 <rfalNfcDiscover+0x66>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800636e:	2b30      	cmp	r3, #48	; 0x30
 8006370:	d901      	bls.n	8006376 <rfalNfcDiscover+0x6a>
    {
        return ERR_PARAM;
 8006372:	2307      	movs	r3, #7
 8006374:	e056      	b.n	8006424 <rfalNfcDiscover+0x118>
    {
        return ERR_DISABLED;   /*  PRQA S  2880 # MISRA 2.1 - Unreachable code due to configuration option being set/unset  */ 
    }
    
    /* Initialize context for discovery */
    gNfcDev.activeDev       = NULL;
 8006376:	4b2d      	ldr	r3, [pc, #180]	; (800642c <rfalNfcDiscover+0x120>)
 8006378:	2200      	movs	r2, #0
 800637a:	609a      	str	r2, [r3, #8]
    gNfcDev.techsFound      = RFAL_NFC_TECH_NONE;
 800637c:	4b2b      	ldr	r3, [pc, #172]	; (800642c <rfalNfcDiscover+0x120>)
 800637e:	2200      	movs	r2, #0
 8006380:	805a      	strh	r2, [r3, #2]
    gNfcDev.devCnt          = 0;
 8006382:	4b2a      	ldr	r3, [pc, #168]	; (800642c <rfalNfcDiscover+0x120>)
 8006384:	2200      	movs	r2, #0
 8006386:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
    gNfcDev.discRestart     = true;
 800638a:	4b28      	ldr	r3, [pc, #160]	; (800642c <rfalNfcDiscover+0x120>)
 800638c:	2201      	movs	r2, #1
 800638e:	f883 22f2 	strb.w	r2, [r3, #754]	; 0x2f2
    gNfcDev.disc            = *disParams;
 8006392:	4b26      	ldr	r3, [pc, #152]	; (800642c <rfalNfcDiscover+0x120>)
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	330c      	adds	r3, #12
 8006398:	4611      	mov	r1, r2
 800639a:	2284      	movs	r2, #132	; 0x84
 800639c:	4618      	mov	r0, r3
 800639e:	f007 fac2 	bl	800d926 <memcpy>
    
    
    /* Calculate Listen Mask */
    gNfcDev.lmMask  = 0U;
 80063a2:	4b22      	ldr	r3, [pc, #136]	; (800642c <rfalNfcDiscover+0x120>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_A) != 0U) ? RFAL_LM_MASK_NFCA : 0U);
 80063aa:	4b20      	ldr	r3, [pc, #128]	; (800642c <rfalNfcDiscover+0x120>)
 80063ac:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 80063b0:	4b1e      	ldr	r3, [pc, #120]	; (800642c <rfalNfcDiscover+0x120>)
 80063b2:	89db      	ldrh	r3, [r3, #14]
 80063b4:	089b      	lsrs	r3, r3, #2
 80063b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ba:	4313      	orrs	r3, r2
 80063bc:	4a1b      	ldr	r2, [pc, #108]	; (800642c <rfalNfcDiscover+0x120>)
 80063be:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_B) != 0U) ? RFAL_LM_MASK_NFCB : 0U);
 80063c2:	4b1a      	ldr	r3, [pc, #104]	; (800642c <rfalNfcDiscover+0x120>)
 80063c4:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 80063c8:	4b18      	ldr	r3, [pc, #96]	; (800642c <rfalNfcDiscover+0x120>)
 80063ca:	89db      	ldrh	r3, [r3, #14]
 80063cc:	089b      	lsrs	r3, r3, #2
 80063ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063d2:	4313      	orrs	r3, r2
 80063d4:	4a15      	ldr	r2, [pc, #84]	; (800642c <rfalNfcDiscover+0x120>)
 80063d6:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_F) != 0U) ? RFAL_LM_MASK_NFCF : 0U);
 80063da:	4b14      	ldr	r3, [pc, #80]	; (800642c <rfalNfcDiscover+0x120>)
 80063dc:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 80063e0:	4b12      	ldr	r3, [pc, #72]	; (800642c <rfalNfcDiscover+0x120>)
 80063e2:	89db      	ldrh	r3, [r3, #14]
 80063e4:	089b      	lsrs	r3, r3, #2
 80063e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063ea:	4313      	orrs	r3, r2
 80063ec:	4a0f      	ldr	r2, [pc, #60]	; (800642c <rfalNfcDiscover+0x120>)
 80063ee:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_AP2P) != 0U) ? RFAL_LM_MASK_ACTIVE_P2P : 0U);
 80063f2:	4b0e      	ldr	r3, [pc, #56]	; (800642c <rfalNfcDiscover+0x120>)
 80063f4:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 80063f8:	4b0c      	ldr	r3, [pc, #48]	; (800642c <rfalNfcDiscover+0x120>)
 80063fa:	89db      	ldrh	r3, [r3, #14]
 80063fc:	b21b      	sxth	r3, r3
 80063fe:	109b      	asrs	r3, r3, #2
 8006400:	b21b      	sxth	r3, r3
 8006402:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006406:	4313      	orrs	r3, r2
 8006408:	4a08      	ldr	r2, [pc, #32]	; (800642c <rfalNfcDiscover+0x120>)
 800640a:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    
#if !RFAL_FEATURE_LISTEN_MODE
    /* Check if Listen Mode is supported/Enabled */
    if( gNfcDev.lmMask != 0U )
 800640e:	4b07      	ldr	r3, [pc, #28]	; (800642c <rfalNfcDiscover+0x120>)
 8006410:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8006414:	2b00      	cmp	r3, #0
 8006416:	d001      	beq.n	800641c <rfalNfcDiscover+0x110>
    {
        return ERR_NOTSUPP;
 8006418:	2318      	movs	r3, #24
 800641a:	e003      	b.n	8006424 <rfalNfcDiscover+0x118>
    }
#endif
    
    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;
 800641c:	4b03      	ldr	r3, [pc, #12]	; (800642c <rfalNfcDiscover+0x120>)
 800641e:	2202      	movs	r2, #2
 8006420:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	20000384 	.word	0x20000384

08006430 <rfalNfcDeactivate>:

/*******************************************************************************/
ReturnCode rfalNfcDeactivate( bool discovery )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	4603      	mov	r3, r0
 8006438:	71fb      	strb	r3, [r7, #7]
    /* Check for valid state */
    if( gNfcDev.state <= RFAL_NFC_STATE_IDLE )
 800643a:	4b0d      	ldr	r3, [pc, #52]	; (8006470 <rfalNfcDeactivate+0x40>)
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d801      	bhi.n	8006446 <rfalNfcDeactivate+0x16>
    {
        return ERR_WRONG_STATE;
 8006442:	2321      	movs	r3, #33	; 0x21
 8006444:	e010      	b.n	8006468 <rfalNfcDeactivate+0x38>
    }
    
    /* Check if discovery is to continue afterwards */
    if( discovery == true )
 8006446:	79fb      	ldrb	r3, [r7, #7]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d007      	beq.n	800645c <rfalNfcDeactivate+0x2c>
    {
        /* If so let the state machine continue*/
        gNfcDev.discRestart = discovery;
 800644c:	4a08      	ldr	r2, [pc, #32]	; (8006470 <rfalNfcDeactivate+0x40>)
 800644e:	79fb      	ldrb	r3, [r7, #7]
 8006450:	f882 32f2 	strb.w	r3, [r2, #754]	; 0x2f2
        gNfcDev.state       = RFAL_NFC_STATE_DEACTIVATION;
 8006454:	4b06      	ldr	r3, [pc, #24]	; (8006470 <rfalNfcDeactivate+0x40>)
 8006456:	2222      	movs	r2, #34	; 0x22
 8006458:	701a      	strb	r2, [r3, #0]
 800645a:	e004      	b.n	8006466 <rfalNfcDeactivate+0x36>
    }
    else
    {
        /* Otherwise deactivate immediately and go to IDLE */
        rfalNfcDeactivation();
 800645c:	f001 f9aa 	bl	80077b4 <rfalNfcDeactivation>
        gNfcDev.state = RFAL_NFC_STATE_IDLE;
 8006460:	4b03      	ldr	r3, [pc, #12]	; (8006470 <rfalNfcDeactivate+0x40>)
 8006462:	2201      	movs	r2, #1
 8006464:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3708      	adds	r7, #8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	20000384 	.word	0x20000384

08006474 <rfalNfcSelect>:

/*******************************************************************************/
ReturnCode rfalNfcSelect( uint8_t devIdx )
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	4603      	mov	r3, r0
 800647c:	71fb      	strb	r3, [r7, #7]
    /* Check for valid state */
    if( gNfcDev.state != RFAL_NFC_STATE_POLL_SELECT )
 800647e:	4b09      	ldr	r3, [pc, #36]	; (80064a4 <rfalNfcSelect+0x30>)
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	2b0c      	cmp	r3, #12
 8006484:	d001      	beq.n	800648a <rfalNfcSelect+0x16>
    {
        return ERR_WRONG_STATE;
 8006486:	2321      	movs	r3, #33	; 0x21
 8006488:	e006      	b.n	8006498 <rfalNfcSelect+0x24>
    }
    
    gNfcDev.selDevIdx = devIdx;
 800648a:	4a06      	ldr	r2, [pc, #24]	; (80064a4 <rfalNfcSelect+0x30>)
 800648c:	79fb      	ldrb	r3, [r7, #7]
 800648e:	71d3      	strb	r3, [r2, #7]
    gNfcDev.state     = RFAL_NFC_STATE_POLL_ACTIVATION;
 8006490:	4b04      	ldr	r3, [pc, #16]	; (80064a4 <rfalNfcSelect+0x30>)
 8006492:	220d      	movs	r2, #13
 8006494:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	20000384 	.word	0x20000384

080064a8 <rfalNfcGetState>:

/*******************************************************************************/
rfalNfcState rfalNfcGetState( void )
{
 80064a8:	b480      	push	{r7}
 80064aa:	af00      	add	r7, sp, #0
    return gNfcDev.state;
 80064ac:	4b03      	ldr	r3, [pc, #12]	; (80064bc <rfalNfcGetState+0x14>)
 80064ae:	781b      	ldrb	r3, [r3, #0]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	20000384 	.word	0x20000384

080064c0 <rfalNfcGetDevicesFound>:

/*******************************************************************************/
ReturnCode rfalNfcGetDevicesFound( rfalNfcDevice **devList, uint8_t *devCnt )
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
    /* Check for valid state */
    if( gNfcDev.state < RFAL_NFC_STATE_POLL_SELECT )
 80064ca:	4b0e      	ldr	r3, [pc, #56]	; (8006504 <rfalNfcGetDevicesFound+0x44>)
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	2b0b      	cmp	r3, #11
 80064d0:	d801      	bhi.n	80064d6 <rfalNfcGetDevicesFound+0x16>
    {
        return ERR_WRONG_STATE;
 80064d2:	2321      	movs	r3, #33	; 0x21
 80064d4:	e010      	b.n	80064f8 <rfalNfcGetDevicesFound+0x38>
    }
    
    /* Check valid parameters */
    if( (devList == NULL) || (devCnt == NULL) )
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <rfalNfcGetDevicesFound+0x22>
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <rfalNfcGetDevicesFound+0x26>
    {
        return ERR_PARAM;
 80064e2:	2307      	movs	r3, #7
 80064e4:	e008      	b.n	80064f8 <rfalNfcGetDevicesFound+0x38>
    }
    
    *devCnt  = gNfcDev.devCnt;
 80064e6:	4b07      	ldr	r3, [pc, #28]	; (8006504 <rfalNfcGetDevicesFound+0x44>)
 80064e8:	f893 22e8 	ldrb.w	r2, [r3, #744]	; 0x2e8
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	701a      	strb	r2, [r3, #0]
    *devList = gNfcDev.devList;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a05      	ldr	r2, [pc, #20]	; (8006508 <rfalNfcGetDevicesFound+0x48>)
 80064f4:	601a      	str	r2, [r3, #0]
    
    return ERR_NONE;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	20000384 	.word	0x20000384
 8006508:	20000414 	.word	0x20000414

0800650c <rfalNfcGetActiveDevice>:

/*******************************************************************************/
ReturnCode rfalNfcGetActiveDevice( rfalNfcDevice **dev )
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
    /* Check for valid state */
    if( gNfcDev.state < RFAL_NFC_STATE_ACTIVATED )
 8006514:	4b10      	ldr	r3, [pc, #64]	; (8006558 <rfalNfcGetActiveDevice+0x4c>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	2b1d      	cmp	r3, #29
 800651a:	d801      	bhi.n	8006520 <rfalNfcGetActiveDevice+0x14>
    {
        return ERR_WRONG_STATE;
 800651c:	2321      	movs	r3, #33	; 0x21
 800651e:	e014      	b.n	800654a <rfalNfcGetActiveDevice+0x3e>
    }
    
    /* Check valid parameter */
    if( dev == NULL )
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <rfalNfcGetActiveDevice+0x1e>
    {
        return ERR_PARAM;
 8006526:	2307      	movs	r3, #7
 8006528:	e00f      	b.n	800654a <rfalNfcGetActiveDevice+0x3e>
    }
    
    /* Check for valid state */
    if( (gNfcDev.devCnt == 0U) || (gNfcDev.activeDev == NULL)  )
 800652a:	4b0b      	ldr	r3, [pc, #44]	; (8006558 <rfalNfcGetActiveDevice+0x4c>)
 800652c:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8006530:	2b00      	cmp	r3, #0
 8006532:	d003      	beq.n	800653c <rfalNfcGetActiveDevice+0x30>
 8006534:	4b08      	ldr	r3, [pc, #32]	; (8006558 <rfalNfcGetActiveDevice+0x4c>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <rfalNfcGetActiveDevice+0x34>
    {
        return ERR_REQUEST;
 800653c:	2305      	movs	r3, #5
 800653e:	e004      	b.n	800654a <rfalNfcGetActiveDevice+0x3e>
    }
    
    *dev = gNfcDev.activeDev;
 8006540:	4b05      	ldr	r3, [pc, #20]	; (8006558 <rfalNfcGetActiveDevice+0x4c>)
 8006542:	689a      	ldr	r2, [r3, #8]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	601a      	str	r2, [r3, #0]
    return ERR_NONE;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	20000384 	.word	0x20000384

0800655c <rfalNfcWorker>:

/*******************************************************************************/
void rfalNfcWorker( void )
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
    ReturnCode err;
   
    rfalWorker();                                                                     /* Execute RFAL process  */
 8006562:	f005 fa4b 	bl	800b9fc <rfalWorker>
    
    switch( gNfcDev.state )
 8006566:	4bb6      	ldr	r3, [pc, #728]	; (8006840 <rfalNfcWorker+0x2e4>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b22      	cmp	r3, #34	; 0x22
 800656c:	f200 8153 	bhi.w	8006816 <rfalNfcWorker+0x2ba>
 8006570:	a201      	add	r2, pc, #4	; (adr r2, 8006578 <rfalNfcWorker+0x1c>)
 8006572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006576:	bf00      	nop
 8006578:	08006817 	.word	0x08006817
 800657c:	08006817 	.word	0x08006817
 8006580:	08006605 	.word	0x08006605
 8006584:	08006673 	.word	0x08006673
 8006588:	08006817 	.word	0x08006817
 800658c:	08006817 	.word	0x08006817
 8006590:	08006817 	.word	0x08006817
 8006594:	08006817 	.word	0x08006817
 8006598:	08006817 	.word	0x08006817
 800659c:	08006817 	.word	0x08006817
 80065a0:	080066a1 	.word	0x080066a1
 80065a4:	080066ed 	.word	0x080066ed
 80065a8:	08006817 	.word	0x08006817
 80065ac:	08006749 	.word	0x08006749
 80065b0:	08006817 	.word	0x08006817
 80065b4:	08006817 	.word	0x08006817
 80065b8:	08006817 	.word	0x08006817
 80065bc:	08006817 	.word	0x08006817
 80065c0:	08006817 	.word	0x08006817
 80065c4:	08006817 	.word	0x08006817
 80065c8:	080067f9 	.word	0x080067f9
 80065cc:	08006817 	.word	0x08006817
 80065d0:	08006817 	.word	0x08006817
 80065d4:	08006817 	.word	0x08006817
 80065d8:	08006817 	.word	0x08006817
 80065dc:	08006817 	.word	0x08006817
 80065e0:	08006817 	.word	0x08006817
 80065e4:	08006817 	.word	0x08006817
 80065e8:	08006817 	.word	0x08006817
 80065ec:	08006817 	.word	0x08006817
 80065f0:	08006817 	.word	0x08006817
 80065f4:	0800677d 	.word	0x0800677d
 80065f8:	08006817 	.word	0x08006817
 80065fc:	08006817 	.word	0x08006817
 8006600:	080067cb 	.word	0x080067cb
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_START_DISCOVERY:
        
            /* Initialize context for discovery cycle */
            gNfcDev.devCnt      = 0;
 8006604:	4b8e      	ldr	r3, [pc, #568]	; (8006840 <rfalNfcWorker+0x2e4>)
 8006606:	2200      	movs	r2, #0
 8006608:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            gNfcDev.selDevIdx   = 0;
 800660c:	4b8c      	ldr	r3, [pc, #560]	; (8006840 <rfalNfcWorker+0x2e4>)
 800660e:	2200      	movs	r2, #0
 8006610:	71da      	strb	r2, [r3, #7]
            gNfcDev.techsFound  = RFAL_NFC_TECH_NONE;
 8006612:	4b8b      	ldr	r3, [pc, #556]	; (8006840 <rfalNfcWorker+0x2e4>)
 8006614:	2200      	movs	r2, #0
 8006616:	805a      	strh	r2, [r3, #2]
            gNfcDev.techs2do    = gNfcDev.disc.techs2Find;
 8006618:	4b89      	ldr	r3, [pc, #548]	; (8006840 <rfalNfcWorker+0x2e4>)
 800661a:	89da      	ldrh	r2, [r3, #14]
 800661c:	4b88      	ldr	r3, [pc, #544]	; (8006840 <rfalNfcWorker+0x2e4>)
 800661e:	809a      	strh	r2, [r3, #4]
            gNfcDev.state       = RFAL_NFC_STATE_POLL_TECHDETECT;
 8006620:	4b87      	ldr	r3, [pc, #540]	; (8006840 <rfalNfcWorker+0x2e4>)
 8006622:	220a      	movs	r2, #10
 8006624:	701a      	strb	r2, [r3, #0]
        
        #if RFAL_FEATURE_WAKEUP_MODE    
            /* Check if Low power Wake-Up is to be performed */
            if( gNfcDev.disc.wakeupEnabled )
 8006626:	4b86      	ldr	r3, [pc, #536]	; (8006840 <rfalNfcWorker+0x2e4>)
 8006628:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 80f4 	beq.w	800681a <rfalNfcWorker+0x2be>
            {
                /* Initialize Low power Wake-up mode and wait */
                err = rfalWakeUpModeStart( (gNfcDev.disc.wakeupConfigDefault ? NULL : &gNfcDev.disc.wakeupConfig) );
 8006632:	4b83      	ldr	r3, [pc, #524]	; (8006840 <rfalNfcWorker+0x2e4>)
 8006634:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8006638:	2b00      	cmp	r3, #0
 800663a:	d001      	beq.n	8006640 <rfalNfcWorker+0xe4>
 800663c:	2300      	movs	r3, #0
 800663e:	e000      	b.n	8006642 <rfalNfcWorker+0xe6>
 8006640:	4b80      	ldr	r3, [pc, #512]	; (8006844 <rfalNfcWorker+0x2e8>)
 8006642:	4618      	mov	r0, r3
 8006644:	f006 fc6e 	bl	800cf24 <rfalWakeUpModeStart>
 8006648:	4603      	mov	r3, r0
 800664a:	80fb      	strh	r3, [r7, #6]
                if( err == ERR_NONE )
 800664c:	88fb      	ldrh	r3, [r7, #6]
 800664e:	2b00      	cmp	r3, #0
 8006650:	f040 80e3 	bne.w	800681a <rfalNfcWorker+0x2be>
                {
                    gNfcDev.state = RFAL_NFC_STATE_WAKEUP_MODE;
 8006654:	4b7a      	ldr	r3, [pc, #488]	; (8006840 <rfalNfcWorker+0x2e4>)
 8006656:	2203      	movs	r2, #3
 8006658:	701a      	strb	r2, [r3, #0]
                    rfalNfcNfcNotify( gNfcDev.state );                                /* Notify caller that WU was started */
 800665a:	4b79      	ldr	r3, [pc, #484]	; (8006840 <rfalNfcWorker+0x2e4>)
 800665c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 80db 	beq.w	800681a <rfalNfcWorker+0x2be>
 8006664:	4b76      	ldr	r3, [pc, #472]	; (8006840 <rfalNfcWorker+0x2e4>)
 8006666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006668:	4a75      	ldr	r2, [pc, #468]	; (8006840 <rfalNfcWorker+0x2e4>)
 800666a:	7812      	ldrb	r2, [r2, #0]
 800666c:	4610      	mov	r0, r2
 800666e:	4798      	blx	r3
                }
            }
        #endif /* RFAL_FEATURE_WAKEUP_MODE */
            break;
 8006670:	e0d3      	b.n	800681a <rfalNfcWorker+0x2be>
        /*******************************************************************************/
        case RFAL_NFC_STATE_WAKEUP_MODE:
            
    #if RFAL_FEATURE_WAKEUP_MODE
            /* Check if the Wake-up mode has woke */
            if( rfalWakeUpModeHasWoke() )
 8006672:	f006 fe25 	bl	800d2c0 <rfalWakeUpModeHasWoke>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 80d0 	beq.w	800681e <rfalNfcWorker+0x2c2>
            {
                rfalWakeUpModeStop();                                                 /* Disable Wake-up mode           */
 800667e:	f006 fe6f 	bl	800d360 <rfalWakeUpModeStop>
                gNfcDev.state = RFAL_NFC_STATE_POLL_TECHDETECT;                       /* Go to Technology detection     */
 8006682:	4b6f      	ldr	r3, [pc, #444]	; (8006840 <rfalNfcWorker+0x2e4>)
 8006684:	220a      	movs	r2, #10
 8006686:	701a      	strb	r2, [r3, #0]
                
                rfalNfcNfcNotify( gNfcDev.state );                                    /* Notify caller that WU has woke */
 8006688:	4b6d      	ldr	r3, [pc, #436]	; (8006840 <rfalNfcWorker+0x2e4>)
 800668a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 80c6 	beq.w	800681e <rfalNfcWorker+0x2c2>
 8006692:	4b6b      	ldr	r3, [pc, #428]	; (8006840 <rfalNfcWorker+0x2e4>)
 8006694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006696:	4a6a      	ldr	r2, [pc, #424]	; (8006840 <rfalNfcWorker+0x2e4>)
 8006698:	7812      	ldrb	r2, [r2, #0]
 800669a:	4610      	mov	r0, r2
 800669c:	4798      	blx	r3
            }
    #endif /* RFAL_FEATURE_WAKEUP_MODE */

            break;
 800669e:	e0be      	b.n	800681e <rfalNfcWorker+0x2c2>
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_TECHDETECT:
            
            /* Start total duration timer */
            gNfcDev.discTmr = (uint32_t)platformTimerCreate( gNfcDev.disc.totalDuration );
 80066a0:	4b67      	ldr	r3, [pc, #412]	; (8006840 <rfalNfcWorker+0x2e4>)
 80066a2:	8a1b      	ldrh	r3, [r3, #16]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7fc f81b 	bl	80026e0 <timerCalculateTimer>
 80066aa:	4602      	mov	r2, r0
 80066ac:	4b64      	ldr	r3, [pc, #400]	; (8006840 <rfalNfcWorker+0x2e4>)
 80066ae:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
        
            err = rfalNfcPollTechDetetection();                                       /* Perform Technology Detection                         */
 80066b2:	f000 f929 	bl	8006908 <rfalNfcPollTechDetetection>
 80066b6:	4603      	mov	r3, r0
 80066b8:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )                                                     /* Wait until all technologies are performed            */
 80066ba:	88fb      	ldrh	r3, [r7, #6]
 80066bc:	2b02      	cmp	r3, #2
 80066be:	f000 80b0 	beq.w	8006822 <rfalNfcWorker+0x2c6>
            {
                if( ( err != ERR_NONE) || (gNfcDev.techsFound == RFAL_NFC_TECH_NONE) )/* Check if any error occurred or no techs were found   */
 80066c2:	88fb      	ldrh	r3, [r7, #6]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d103      	bne.n	80066d0 <rfalNfcWorker+0x174>
 80066c8:	4b5d      	ldr	r3, [pc, #372]	; (8006840 <rfalNfcWorker+0x2e4>)
 80066ca:	885b      	ldrh	r3, [r3, #2]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d105      	bne.n	80066dc <rfalNfcWorker+0x180>
                {
                    rfalFieldOff();
 80066d0:	f004 ff5e 	bl	800b590 <rfalFieldOff>
                    gNfcDev.state = RFAL_NFC_STATE_LISTEN_TECHDETECT;                 /* Nothing found as poller, go to listener */
 80066d4:	4b5a      	ldr	r3, [pc, #360]	; (8006840 <rfalNfcWorker+0x2e4>)
 80066d6:	2214      	movs	r2, #20
 80066d8:	701a      	strb	r2, [r3, #0]
                    break;
 80066da:	e0ad      	b.n	8006838 <rfalNfcWorker+0x2dc>
                }
                
                gNfcDev.techs2do = gNfcDev.techsFound;                                /* Store the found technologies for collision resolution */
 80066dc:	4b58      	ldr	r3, [pc, #352]	; (8006840 <rfalNfcWorker+0x2e4>)
 80066de:	885a      	ldrh	r2, [r3, #2]
 80066e0:	4b57      	ldr	r3, [pc, #348]	; (8006840 <rfalNfcWorker+0x2e4>)
 80066e2:	809a      	strh	r2, [r3, #4]
                gNfcDev.state    = RFAL_NFC_STATE_POLL_COLAVOIDANCE;                  /* One or more devices found, go to Collision Avoidance  */
 80066e4:	4b56      	ldr	r3, [pc, #344]	; (8006840 <rfalNfcWorker+0x2e4>)
 80066e6:	220b      	movs	r2, #11
 80066e8:	701a      	strb	r2, [r3, #0]
            }
            break;
 80066ea:	e09a      	b.n	8006822 <rfalNfcWorker+0x2c6>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_COLAVOIDANCE:
        
            err = rfalNfcPollCollResolution();                                        /* Resolve any eventual collision                       */
 80066ec:	f000 fa9a 	bl	8006c24 <rfalNfcPollCollResolution>
 80066f0:	4603      	mov	r3, r0
 80066f2:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )                                                     /* Wait until all technologies are performed            */
 80066f4:	88fb      	ldrh	r3, [r7, #6]
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	f000 8095 	beq.w	8006826 <rfalNfcWorker+0x2ca>
            {
                if( (err != ERR_NONE) || (gNfcDev.devCnt == 0U) )                     /* Check if any error occurred or no devices were found */
 80066fc:	88fb      	ldrh	r3, [r7, #6]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d104      	bne.n	800670c <rfalNfcWorker+0x1b0>
 8006702:	4b4f      	ldr	r3, [pc, #316]	; (8006840 <rfalNfcWorker+0x2e4>)
 8006704:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8006708:	2b00      	cmp	r3, #0
 800670a:	d103      	bne.n	8006714 <rfalNfcWorker+0x1b8>
                {
                    gNfcDev.state = RFAL_NFC_STATE_DEACTIVATION;
 800670c:	4b4c      	ldr	r3, [pc, #304]	; (8006840 <rfalNfcWorker+0x2e4>)
 800670e:	2222      	movs	r2, #34	; 0x22
 8006710:	701a      	strb	r2, [r3, #0]
                    break;                                                            /* Unable to retrieve any device, restart loop          */
 8006712:	e091      	b.n	8006838 <rfalNfcWorker+0x2dc>
                }
                
                /* Check if more than one device has been found */
                if( gNfcDev.devCnt > 1U )
 8006714:	4b4a      	ldr	r3, [pc, #296]	; (8006840 <rfalNfcWorker+0x2e4>)
 8006716:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800671a:	2b01      	cmp	r3, #1
 800671c:	d90d      	bls.n	800673a <rfalNfcWorker+0x1de>
                {
                    /* If more than one device was found inform upper layer to choose which one to activate */
                    if( gNfcDev.disc.notifyCb != NULL )
 800671e:	4b48      	ldr	r3, [pc, #288]	; (8006840 <rfalNfcWorker+0x2e4>)
 8006720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006722:	2b00      	cmp	r3, #0
 8006724:	d009      	beq.n	800673a <rfalNfcWorker+0x1de>
                    {
                        gNfcDev.state = RFAL_NFC_STATE_POLL_SELECT;
 8006726:	4b46      	ldr	r3, [pc, #280]	; (8006840 <rfalNfcWorker+0x2e4>)
 8006728:	220c      	movs	r2, #12
 800672a:	701a      	strb	r2, [r3, #0]
                        gNfcDev.disc.notifyCb( gNfcDev.state );
 800672c:	4b44      	ldr	r3, [pc, #272]	; (8006840 <rfalNfcWorker+0x2e4>)
 800672e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006730:	4a43      	ldr	r2, [pc, #268]	; (8006840 <rfalNfcWorker+0x2e4>)
 8006732:	7812      	ldrb	r2, [r2, #0]
 8006734:	4610      	mov	r0, r2
 8006736:	4798      	blx	r3
                        break;
 8006738:	e07e      	b.n	8006838 <rfalNfcWorker+0x2dc>
                    }
                }
                
                /* If only one device or no callback has been set, activate the first device found */
                gNfcDev.selDevIdx = 0U;
 800673a:	4b41      	ldr	r3, [pc, #260]	; (8006840 <rfalNfcWorker+0x2e4>)
 800673c:	2200      	movs	r2, #0
 800673e:	71da      	strb	r2, [r3, #7]
                gNfcDev.state = RFAL_NFC_STATE_POLL_ACTIVATION;
 8006740:	4b3f      	ldr	r3, [pc, #252]	; (8006840 <rfalNfcWorker+0x2e4>)
 8006742:	220d      	movs	r2, #13
 8006744:	701a      	strb	r2, [r3, #0]
            }
            break;
 8006746:	e06e      	b.n	8006826 <rfalNfcWorker+0x2ca>
        
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_ACTIVATION:
            
            if( rfalNfcPollActivation( gNfcDev.selDevIdx ) != ERR_NONE )              /* Activate selected device           */
 8006748:	4b3d      	ldr	r3, [pc, #244]	; (8006840 <rfalNfcWorker+0x2e4>)
 800674a:	79db      	ldrb	r3, [r3, #7]
 800674c:	4618      	mov	r0, r3
 800674e:	f000 fd3b 	bl	80071c8 <rfalNfcPollActivation>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d003      	beq.n	8006760 <rfalNfcWorker+0x204>
            {
                gNfcDev.state = RFAL_NFC_STATE_DEACTIVATION;                          /* If Activation failed, restart loop */
 8006758:	4b39      	ldr	r3, [pc, #228]	; (8006840 <rfalNfcWorker+0x2e4>)
 800675a:	2222      	movs	r2, #34	; 0x22
 800675c:	701a      	strb	r2, [r3, #0]
                break;
 800675e:	e06b      	b.n	8006838 <rfalNfcWorker+0x2dc>
            }
            
            gNfcDev.state = RFAL_NFC_STATE_ACTIVATED;                                 /* Device has been properly activated */
 8006760:	4b37      	ldr	r3, [pc, #220]	; (8006840 <rfalNfcWorker+0x2e4>)
 8006762:	221e      	movs	r2, #30
 8006764:	701a      	strb	r2, [r3, #0]
            rfalNfcNfcNotify( gNfcDev.state );                                        /* Inform upper layer that a device has been activated */
 8006766:	4b36      	ldr	r3, [pc, #216]	; (8006840 <rfalNfcWorker+0x2e4>)
 8006768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800676a:	2b00      	cmp	r3, #0
 800676c:	d05d      	beq.n	800682a <rfalNfcWorker+0x2ce>
 800676e:	4b34      	ldr	r3, [pc, #208]	; (8006840 <rfalNfcWorker+0x2e4>)
 8006770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006772:	4a33      	ldr	r2, [pc, #204]	; (8006840 <rfalNfcWorker+0x2e4>)
 8006774:	7812      	ldrb	r2, [r2, #0]
 8006776:	4610      	mov	r0, r2
 8006778:	4798      	blx	r3
            break;
 800677a:	e056      	b.n	800682a <rfalNfcWorker+0x2ce>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_DATAEXCHANGE:

            rfalNfcDataExchangeGetStatus();                                           /* Run the internal state machine */
 800677c:	f000 f864 	bl	8006848 <rfalNfcDataExchangeGetStatus>
            
            if( gNfcDev.dataExErr != ERR_BUSY )                                       /* If Dataexchange has terminated */
 8006780:	4b2f      	ldr	r3, [pc, #188]	; (8006840 <rfalNfcWorker+0x2e4>)
 8006782:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 8006786:	2b02      	cmp	r3, #2
 8006788:	d00c      	beq.n	80067a4 <rfalNfcWorker+0x248>
            {
                gNfcDev.state = RFAL_NFC_STATE_DATAEXCHANGE_DONE;                     /* Go to done state               */
 800678a:	4b2d      	ldr	r3, [pc, #180]	; (8006840 <rfalNfcWorker+0x2e4>)
 800678c:	2221      	movs	r2, #33	; 0x21
 800678e:	701a      	strb	r2, [r3, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 8006790:	4b2b      	ldr	r3, [pc, #172]	; (8006840 <rfalNfcWorker+0x2e4>)
 8006792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006794:	2b00      	cmp	r3, #0
 8006796:	d005      	beq.n	80067a4 <rfalNfcWorker+0x248>
 8006798:	4b29      	ldr	r3, [pc, #164]	; (8006840 <rfalNfcWorker+0x2e4>)
 800679a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800679c:	4a28      	ldr	r2, [pc, #160]	; (8006840 <rfalNfcWorker+0x2e4>)
 800679e:	7812      	ldrb	r2, [r2, #0]
 80067a0:	4610      	mov	r0, r2
 80067a2:	4798      	blx	r3
            }
            if( gNfcDev.dataExErr == ERR_SLEEP_REQ )                                  /* Check if Listen mode has to go to Sleep */
 80067a4:	4b26      	ldr	r3, [pc, #152]	; (8006840 <rfalNfcWorker+0x2e4>)
 80067a6:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 80067aa:	2b20      	cmp	r3, #32
 80067ac:	d13f      	bne.n	800682e <rfalNfcWorker+0x2d2>
            {
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_SLEEP;                          /* Go to Listen Sleep state       */
 80067ae:	4b24      	ldr	r3, [pc, #144]	; (8006840 <rfalNfcWorker+0x2e4>)
 80067b0:	2217      	movs	r2, #23
 80067b2:	701a      	strb	r2, [r3, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 80067b4:	4b22      	ldr	r3, [pc, #136]	; (8006840 <rfalNfcWorker+0x2e4>)
 80067b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d038      	beq.n	800682e <rfalNfcWorker+0x2d2>
 80067bc:	4b20      	ldr	r3, [pc, #128]	; (8006840 <rfalNfcWorker+0x2e4>)
 80067be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067c0:	4a1f      	ldr	r2, [pc, #124]	; (8006840 <rfalNfcWorker+0x2e4>)
 80067c2:	7812      	ldrb	r2, [r2, #0]
 80067c4:	4610      	mov	r0, r2
 80067c6:	4798      	blx	r3
            }
            break;
 80067c8:	e031      	b.n	800682e <rfalNfcWorker+0x2d2>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_DEACTIVATION:
            
            rfalNfcDeactivation();                                                    /* Deactivate current device */
 80067ca:	f000 fff3 	bl	80077b4 <rfalNfcDeactivation>
        
            gNfcDev.state = ((gNfcDev.discRestart) ? RFAL_NFC_STATE_START_DISCOVERY : RFAL_NFC_STATE_IDLE);
 80067ce:	4b1c      	ldr	r3, [pc, #112]	; (8006840 <rfalNfcWorker+0x2e4>)
 80067d0:	f893 32f2 	ldrb.w	r3, [r3, #754]	; 0x2f2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <rfalNfcWorker+0x280>
 80067d8:	2202      	movs	r2, #2
 80067da:	e000      	b.n	80067de <rfalNfcWorker+0x282>
 80067dc:	2201      	movs	r2, #1
 80067de:	4b18      	ldr	r3, [pc, #96]	; (8006840 <rfalNfcWorker+0x2e4>)
 80067e0:	701a      	strb	r2, [r3, #0]
            rfalNfcNfcNotify( gNfcDev.state );                                        /* Notify caller             */
 80067e2:	4b17      	ldr	r3, [pc, #92]	; (8006840 <rfalNfcWorker+0x2e4>)
 80067e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d023      	beq.n	8006832 <rfalNfcWorker+0x2d6>
 80067ea:	4b15      	ldr	r3, [pc, #84]	; (8006840 <rfalNfcWorker+0x2e4>)
 80067ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067ee:	4a14      	ldr	r2, [pc, #80]	; (8006840 <rfalNfcWorker+0x2e4>)
 80067f0:	7812      	ldrb	r2, [r2, #0]
 80067f2:	4610      	mov	r0, r2
 80067f4:	4798      	blx	r3
            break;
 80067f6:	e01c      	b.n	8006832 <rfalNfcWorker+0x2d6>
        
        /*******************************************************************************/
        case RFAL_NFC_STATE_LISTEN_TECHDETECT:
            
            if( platformTimerIsExpired( gNfcDev.discTmr ) )
 80067f8:	4b11      	ldr	r3, [pc, #68]	; (8006840 <rfalNfcWorker+0x2e4>)
 80067fa:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80067fe:	4618      	mov	r0, r3
 8006800:	f7fb ff7c 	bl	80026fc <timerIsExpired>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d015      	beq.n	8006836 <rfalNfcWorker+0x2da>
            {
                #if RFAL_FEATURE_LISTEN_MODE
                    rfalListenStop();
                #else
                    rfalFieldOff();
 800680a:	f004 fec1 	bl	800b590 <rfalFieldOff>
                #endif /* RFAL_FEATURE_LISTEN_MODE */
                
                gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                       /* Restart the discovery loop */
 800680e:	4b0c      	ldr	r3, [pc, #48]	; (8006840 <rfalNfcWorker+0x2e4>)
 8006810:	2202      	movs	r2, #2
 8006812:	701a      	strb	r2, [r3, #0]
                break;
 8006814:	e010      	b.n	8006838 <rfalNfcWorker+0x2dc>
        /*******************************************************************************/
        case RFAL_NFC_STATE_ACTIVATED:
        case RFAL_NFC_STATE_POLL_SELECT:
        case RFAL_NFC_STATE_DATAEXCHANGE_DONE:
        default:
            return;
 8006816:	bf00      	nop
 8006818:	e00e      	b.n	8006838 <rfalNfcWorker+0x2dc>
            break;
 800681a:	bf00      	nop
 800681c:	e00c      	b.n	8006838 <rfalNfcWorker+0x2dc>
            break;
 800681e:	bf00      	nop
 8006820:	e00a      	b.n	8006838 <rfalNfcWorker+0x2dc>
            break;
 8006822:	bf00      	nop
 8006824:	e008      	b.n	8006838 <rfalNfcWorker+0x2dc>
            break;
 8006826:	bf00      	nop
 8006828:	e006      	b.n	8006838 <rfalNfcWorker+0x2dc>
            break;
 800682a:	bf00      	nop
 800682c:	e004      	b.n	8006838 <rfalNfcWorker+0x2dc>
            break;
 800682e:	bf00      	nop
 8006830:	e002      	b.n	8006838 <rfalNfcWorker+0x2dc>
            break;
 8006832:	bf00      	nop
 8006834:	e000      	b.n	8006838 <rfalNfcWorker+0x2dc>
            break;
 8006836:	bf00      	nop
    }
}
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20000384 	.word	0x20000384
 8006844:	200003fe 	.word	0x200003fe

08006848 <rfalNfcDataExchangeGetStatus>:
}


/*******************************************************************************/
ReturnCode rfalNfcDataExchangeGetStatus( void )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	af00      	add	r7, sp, #0
    /*******************************************************************************/
    /* Check if it's the first frame received in Listen mode */
    if( gNfcDev.state == RFAL_NFC_STATE_ACTIVATED )
 800684c:	4b2d      	ldr	r3, [pc, #180]	; (8006904 <rfalNfcDataExchangeGetStatus+0xbc>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	2b1e      	cmp	r3, #30
 8006852:	d114      	bne.n	800687e <rfalNfcDataExchangeGetStatus+0x36>
    {
        /* Continue data exchange as normal */
        gNfcDev.dataExErr = ERR_BUSY;
 8006854:	4b2b      	ldr	r3, [pc, #172]	; (8006904 <rfalNfcDataExchangeGetStatus+0xbc>)
 8006856:	2202      	movs	r2, #2
 8006858:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
        gNfcDev.state     = RFAL_NFC_STATE_DATAEXCHANGE;
 800685c:	4b29      	ldr	r3, [pc, #164]	; (8006904 <rfalNfcDataExchangeGetStatus+0xbc>)
 800685e:	221f      	movs	r2, #31
 8006860:	701a      	strb	r2, [r3, #0]
        
        /* Check if we performing in T3T CE */
        if( (gNfcDev.activeDev->type == RFAL_NFC_POLL_TYPE_NFCF) && (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_RF) )
 8006862:	4b28      	ldr	r3, [pc, #160]	; (8006904 <rfalNfcDataExchangeGetStatus+0xbc>)
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	2b0c      	cmp	r3, #12
 800686a:	d108      	bne.n	800687e <rfalNfcDataExchangeGetStatus+0x36>
 800686c:	4b25      	ldr	r3, [pc, #148]	; (8006904 <rfalNfcDataExchangeGetStatus+0xbc>)
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	7f5b      	ldrb	r3, [r3, #29]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d103      	bne.n	800687e <rfalNfcDataExchangeGetStatus+0x36>
        {
            /* The first frame has been retrieved by rfalListenMode, flag data immediately                  */
            /* Can only call rfalGetTransceiveStatus() after starting a transceive with rfalStartTransceive */
            gNfcDev.dataExErr = ERR_NONE;
 8006876:	4b23      	ldr	r3, [pc, #140]	; (8006904 <rfalNfcDataExchangeGetStatus+0xbc>)
 8006878:	2200      	movs	r2, #0
 800687a:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
    }
    
    
    /*******************************************************************************/
    /* Check if we are in we have been placed to sleep, and return last error     */
    if( gNfcDev.state == RFAL_NFC_STATE_LISTEN_SLEEP )
 800687e:	4b21      	ldr	r3, [pc, #132]	; (8006904 <rfalNfcDataExchangeGetStatus+0xbc>)
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	2b17      	cmp	r3, #23
 8006884:	d103      	bne.n	800688e <rfalNfcDataExchangeGetStatus+0x46>
    {
        return gNfcDev.dataExErr;                                /* ERR_SLEEP_REQ */
 8006886:	4b1f      	ldr	r3, [pc, #124]	; (8006904 <rfalNfcDataExchangeGetStatus+0xbc>)
 8006888:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 800688c:	e038      	b.n	8006900 <rfalNfcDataExchangeGetStatus+0xb8>
    }

    
    /*******************************************************************************/    
    /* Check if Data exchange has been started */
    if( (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE) && (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE_DONE)  )
 800688e:	4b1d      	ldr	r3, [pc, #116]	; (8006904 <rfalNfcDataExchangeGetStatus+0xbc>)
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	2b1f      	cmp	r3, #31
 8006894:	d005      	beq.n	80068a2 <rfalNfcDataExchangeGetStatus+0x5a>
 8006896:	4b1b      	ldr	r3, [pc, #108]	; (8006904 <rfalNfcDataExchangeGetStatus+0xbc>)
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	2b21      	cmp	r3, #33	; 0x21
 800689c:	d001      	beq.n	80068a2 <rfalNfcDataExchangeGetStatus+0x5a>
    {
        return ERR_WRONG_STATE;
 800689e:	2321      	movs	r3, #33	; 0x21
 80068a0:	e02e      	b.n	8006900 <rfalNfcDataExchangeGetStatus+0xb8>
    }
    
    /* Check if Data exchange is still ongoing */
    if( gNfcDev.dataExErr == ERR_BUSY )
 80068a2:	4b18      	ldr	r3, [pc, #96]	; (8006904 <rfalNfcDataExchangeGetStatus+0xbc>)
 80068a4:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d125      	bne.n	80068f8 <rfalNfcDataExchangeGetStatus+0xb0>
    {
        switch( gNfcDev.activeDev->rfInterface )
 80068ac:	4b15      	ldr	r3, [pc, #84]	; (8006904 <rfalNfcDataExchangeGetStatus+0xbc>)
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	7f5b      	ldrb	r3, [r3, #29]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d00b      	beq.n	80068ce <rfalNfcDataExchangeGetStatus+0x86>
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d011      	beq.n	80068de <rfalNfcDataExchangeGetStatus+0x96>
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d117      	bne.n	80068ee <rfalNfcDataExchangeGetStatus+0xa6>
        {
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_RF:
                gNfcDev.dataExErr = rfalGetTransceiveStatus();
 80068be:	f005 f88b 	bl	800b9d8 <rfalGetTransceiveStatus>
 80068c2:	4603      	mov	r3, r0
 80068c4:	461a      	mov	r2, r3
 80068c6:	4b0f      	ldr	r3, [pc, #60]	; (8006904 <rfalNfcDataExchangeGetStatus+0xbc>)
 80068c8:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
                break;
 80068cc:	e015      	b.n	80068fa <rfalNfcDataExchangeGetStatus+0xb2>
        
        #if RFAL_FEATURE_ISO_DEP
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_ISODEP:
                gNfcDev.dataExErr = rfalIsoDepGetTransceiveStatus();
 80068ce:	f7ff f875 	bl	80059bc <rfalIsoDepGetTransceiveStatus>
 80068d2:	4603      	mov	r3, r0
 80068d4:	461a      	mov	r2, r3
 80068d6:	4b0b      	ldr	r3, [pc, #44]	; (8006904 <rfalNfcDataExchangeGetStatus+0xbc>)
 80068d8:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
                break;
 80068dc:	e00d      	b.n	80068fa <rfalNfcDataExchangeGetStatus+0xb2>
        #endif /* RFAL_FEATURE_ISO_DEP */
                
            /*******************************************************************************/
        #if RFAL_FEATURE_NFC_DEP
            case RFAL_NFC_INTERFACE_NFCDEP:
                gNfcDev.dataExErr = rfalNfcDepGetTransceiveStatus();
 80068de:	f002 fe1f 	bl	8009520 <rfalNfcDepGetTransceiveStatus>
 80068e2:	4603      	mov	r3, r0
 80068e4:	461a      	mov	r2, r3
 80068e6:	4b07      	ldr	r3, [pc, #28]	; (8006904 <rfalNfcDataExchangeGetStatus+0xbc>)
 80068e8:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
                break;
 80068ec:	e005      	b.n	80068fa <rfalNfcDataExchangeGetStatus+0xb2>
        #endif /* RFAL_FEATURE_NFC_DEP */
                
            /*******************************************************************************/
            default:
                gNfcDev.dataExErr = ERR_PARAM;
 80068ee:	4b05      	ldr	r3, [pc, #20]	; (8006904 <rfalNfcDataExchangeGetStatus+0xbc>)
 80068f0:	2207      	movs	r2, #7
 80068f2:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
                break;
 80068f6:	e000      	b.n	80068fa <rfalNfcDataExchangeGetStatus+0xb2>
            /* If set Sleep was succesfull keep restore the Sleep request signal */
            gNfcDev.dataExErr = ERR_SLEEP_REQ;
        }
    #endif /* RFAL_FEATURE_LISTEN_MODE */
        
    }
 80068f8:	bf00      	nop
    
    return gNfcDev.dataExErr;
 80068fa:	4b02      	ldr	r3, [pc, #8]	; (8006904 <rfalNfcDataExchangeGetStatus+0xbc>)
 80068fc:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
}
 8006900:	4618      	mov	r0, r3
 8006902:	bd80      	pop	{r7, pc}
 8006904:	20000384 	.word	0x20000384

08006908 <rfalNfcPollTechDetetection>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollTechDetetection( void )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b08a      	sub	sp, #40	; 0x28
 800690c:	af00      	add	r7, sp, #0
    ReturnCode           err;
    
    err = ERR_NONE;
 800690e:	2300      	movs	r3, #0
 8006910:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    
    /*******************************************************************************/
    /* AP2P Technology Detection                                                   */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_AP2P) != 0U) )
 8006912:	4ba3      	ldr	r3, [pc, #652]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 8006914:	89db      	ldrh	r3, [r3, #14]
 8006916:	f003 0310 	and.w	r3, r3, #16
 800691a:	2b00      	cmp	r3, #0
 800691c:	d05a      	beq.n	80069d4 <rfalNfcPollTechDetetection+0xcc>
 800691e:	4ba0      	ldr	r3, [pc, #640]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 8006920:	889b      	ldrh	r3, [r3, #4]
 8006922:	f003 0310 	and.w	r3, r3, #16
 8006926:	2b00      	cmp	r3, #0
 8006928:	d054      	beq.n	80069d4 <rfalNfcPollTechDetetection+0xcc>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_AP2P;
 800692a:	4b9d      	ldr	r3, [pc, #628]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 800692c:	889b      	ldrh	r3, [r3, #4]
 800692e:	f023 0310 	bic.w	r3, r3, #16
 8006932:	b29a      	uxth	r2, r3
 8006934:	4b9a      	ldr	r3, [pc, #616]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 8006936:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFC_DEP
    
        EXIT_ON_ERR( err, rfalSetMode( RFAL_MODE_POLL_ACTIVE_P2P, gNfcDev.disc.ap2pBR, gNfcDev.disc.ap2pBR ) );
 8006938:	4b99      	ldr	r3, [pc, #612]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 800693a:	f893 104f 	ldrb.w	r1, [r3, #79]	; 0x4f
 800693e:	4b98      	ldr	r3, [pc, #608]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 8006940:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8006944:	461a      	mov	r2, r3
 8006946:	2009      	movs	r0, #9
 8006948:	f004 f9be 	bl	800acc8 <rfalSetMode>
 800694c:	4603      	mov	r3, r0
 800694e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006950:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <rfalNfcPollTechDetetection+0x52>
 8006956:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006958:	e15d      	b.n	8006c16 <rfalNfcPollTechDetetection+0x30e>
        rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 800695a:	2001      	movs	r0, #1
 800695c:	f004 fd4e 	bl	800b3fc <rfalSetErrorHandling>
        rfalSetFDTListen( RFAL_FDT_LISTEN_AP2P_POLLER );
 8006960:	2040      	movs	r0, #64	; 0x40
 8006962:	f004 fd71 	bl	800b448 <rfalSetFDTListen>
        rfalSetFDTPoll( RFAL_TIMING_NONE );
 8006966:	2000      	movs	r0, #0
 8006968:	f004 fd58 	bl	800b41c <rfalSetFDTPoll>
        rfalSetGT( RFAL_GT_AP2P_ADJUSTED );
 800696c:	488d      	ldr	r0, [pc, #564]	; (8006ba4 <rfalNfcPollTechDetetection+0x29c>)
 800696e:	f004 fd7f 	bl	800b470 <rfalSetGT>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                     /* Turns the Field On and starts GT timer */
 8006972:	f004 fdab 	bl	800b4cc <rfalFieldOnAndStartGT>
 8006976:	4603      	mov	r3, r0
 8006978:	84fb      	strh	r3, [r7, #38]	; 0x26
 800697a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800697c:	2b00      	cmp	r3, #0
 800697e:	d001      	beq.n	8006984 <rfalNfcPollTechDetetection+0x7c>
 8006980:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006982:	e148      	b.n	8006c16 <rfalNfcPollTechDetetection+0x30e>
        
        err = rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_ACTIVE, NULL, 0 );/* Poll for NFC-A devices */
 8006984:	2300      	movs	r3, #0
 8006986:	2200      	movs	r2, #0
 8006988:	2101      	movs	r1, #1
 800698a:	4887      	ldr	r0, [pc, #540]	; (8006ba8 <rfalNfcPollTechDetetection+0x2a0>)
 800698c:	f000 fec8 	bl	8007720 <rfalNfcNfcDepActivate>
 8006990:	4603      	mov	r3, r0
 8006992:	84fb      	strh	r3, [r7, #38]	; 0x26
        if( err == ERR_NONE )
 8006994:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006996:	2b00      	cmp	r3, #0
 8006998:	d118      	bne.n	80069cc <rfalNfcPollTechDetetection+0xc4>
        {
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_AP2P;
 800699a:	4b81      	ldr	r3, [pc, #516]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 800699c:	885b      	ldrh	r3, [r3, #2]
 800699e:	f043 0310 	orr.w	r3, r3, #16
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	4b7e      	ldr	r3, [pc, #504]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 80069a6:	805a      	strh	r2, [r3, #2]
            
            gNfcDev.devList->type        = RFAL_NFC_LISTEN_TYPE_AP2P;
 80069a8:	4b7d      	ldr	r3, [pc, #500]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 80069aa:	2205      	movs	r2, #5
 80069ac:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
            gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_NFCDEP;
 80069b0:	4b7b      	ldr	r3, [pc, #492]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 80069b2:	2202      	movs	r2, #2
 80069b4:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
            gNfcDev.devCnt++;
 80069b8:	4b79      	ldr	r3, [pc, #484]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 80069ba:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80069be:	3301      	adds	r3, #1
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	4b77      	ldr	r3, [pc, #476]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 80069c4:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            
            return ERR_NONE;
 80069c8:	2300      	movs	r3, #0
 80069ca:	e124      	b.n	8006c16 <rfalNfcPollTechDetetection+0x30e>
        }
        
        rfalFieldOff();
 80069cc:	f004 fde0 	bl	800b590 <rfalFieldOff>
        return ERR_BUSY;
 80069d0:	2302      	movs	r3, #2
 80069d2:	e120      	b.n	8006c16 <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive NFC-A Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_A) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_A) != 0U) )
 80069d4:	4b72      	ldr	r3, [pc, #456]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 80069d6:	89db      	ldrh	r3, [r3, #14]
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d034      	beq.n	8006a4a <rfalNfcPollTechDetetection+0x142>
 80069e0:	4b6f      	ldr	r3, [pc, #444]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 80069e2:	889b      	ldrh	r3, [r3, #4]
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d02e      	beq.n	8006a4a <rfalNfcPollTechDetetection+0x142>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_A;
 80069ec:	4b6c      	ldr	r3, [pc, #432]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 80069ee:	889b      	ldrh	r3, [r3, #4]
 80069f0:	f023 0301 	bic.w	r3, r3, #1
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	4b6a      	ldr	r3, [pc, #424]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 80069f8:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFCA
        {
            rfalNfcaSensRes sensRes;            
        
            EXIT_ON_ERR( err, rfalNfcaPollerInitialize() );                            /* Initialize RFAL for NFC-A */
 80069fa:	f002 fdc1 	bl	8009580 <rfalNfcaPollerInitialize>
 80069fe:	4603      	mov	r3, r0
 8006a00:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006a02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d001      	beq.n	8006a0c <rfalNfcPollTechDetetection+0x104>
 8006a08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a0a:	e104      	b.n	8006c16 <rfalNfcPollTechDetetection+0x30e>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                               /* Turns the Field On and starts GT timer */
 8006a0c:	f004 fd5e 	bl	800b4cc <rfalFieldOnAndStartGT>
 8006a10:	4603      	mov	r3, r0
 8006a12:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006a14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <rfalNfcPollTechDetetection+0x116>
 8006a1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a1c:	e0fb      	b.n	8006c16 <rfalNfcPollTechDetetection+0x30e>
                                                                                       
            err = rfalNfcaPollerTechnologyDetection( gNfcDev.disc.compMode, &sensRes );/* Poll for NFC-A devices */
 8006a1e:	4b60      	ldr	r3, [pc, #384]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 8006a20:	7b1b      	ldrb	r3, [r3, #12]
 8006a22:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006a26:	4611      	mov	r1, r2
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f002 fdf6 	bl	800961a <rfalNfcaPollerTechnologyDetection>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 8006a32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d106      	bne.n	8006a46 <rfalNfcPollTechDetetection+0x13e>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_A;
 8006a38:	4b59      	ldr	r3, [pc, #356]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 8006a3a:	885b      	ldrh	r3, [r3, #2]
 8006a3c:	f043 0301 	orr.w	r3, r3, #1
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	4b57      	ldr	r3, [pc, #348]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 8006a44:	805a      	strh	r2, [r3, #2]
            }
            
            return ERR_BUSY;
 8006a46:	2302      	movs	r3, #2
 8006a48:	e0e5      	b.n	8006c16 <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive NFC-B Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_B) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_B) != 0U) )
 8006a4a:	4b55      	ldr	r3, [pc, #340]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 8006a4c:	89db      	ldrh	r3, [r3, #14]
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d035      	beq.n	8006ac2 <rfalNfcPollTechDetetection+0x1ba>
 8006a56:	4b52      	ldr	r3, [pc, #328]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 8006a58:	889b      	ldrh	r3, [r3, #4]
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d02f      	beq.n	8006ac2 <rfalNfcPollTechDetetection+0x1ba>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_B;
 8006a62:	4b4f      	ldr	r3, [pc, #316]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 8006a64:	889b      	ldrh	r3, [r3, #4]
 8006a66:	f023 0302 	bic.w	r3, r3, #2
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	4b4c      	ldr	r3, [pc, #304]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 8006a6e:	809a      	strh	r2, [r3, #4]
    #if RFAL_FEATURE_NFCB
        {
            rfalNfcbSensbRes sensbRes;
            uint8_t          sensbResLen;            
        
            EXIT_ON_ERR( err, rfalNfcbPollerInitialize() );                           /* Initialize RFAL for NFC-B */
 8006a70:	f003 f98c 	bl	8009d8c <rfalNfcbPollerInitialize>
 8006a74:	4603      	mov	r3, r0
 8006a76:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006a78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <rfalNfcPollTechDetetection+0x17a>
 8006a7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a80:	e0c9      	b.n	8006c16 <rfalNfcPollTechDetetection+0x30e>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                              /* As field is already On only starts GT timer */
 8006a82:	f004 fd23 	bl	800b4cc <rfalFieldOnAndStartGT>
 8006a86:	4603      	mov	r3, r0
 8006a88:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006a8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <rfalNfcPollTechDetetection+0x18c>
 8006a90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a92:	e0c0      	b.n	8006c16 <rfalNfcPollTechDetetection+0x30e>
                                                                                                       
            err = rfalNfcbPollerTechnologyDetection( gNfcDev.disc.compMode, &sensbRes, &sensbResLen ); /* Poll for NFC-B devices */
 8006a94:	4b42      	ldr	r3, [pc, #264]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 8006a96:	7b1b      	ldrb	r3, [r3, #12]
 8006a98:	f107 0213 	add.w	r2, r7, #19
 8006a9c:	f107 0114 	add.w	r1, r7, #20
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f003 fa85 	bl	8009fb0 <rfalNfcbPollerTechnologyDetection>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 8006aaa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d106      	bne.n	8006abe <rfalNfcPollTechDetetection+0x1b6>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_B;
 8006ab0:	4b3b      	ldr	r3, [pc, #236]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 8006ab2:	885b      	ldrh	r3, [r3, #2]
 8006ab4:	f043 0302 	orr.w	r3, r3, #2
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	4b39      	ldr	r3, [pc, #228]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 8006abc:	805a      	strh	r2, [r3, #2]
            }
            
            return ERR_BUSY;
 8006abe:	2302      	movs	r3, #2
 8006ac0:	e0a9      	b.n	8006c16 <rfalNfcPollTechDetetection+0x30e>
    }
    
    /*******************************************************************************/
    /* Passive NFC-F Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_F) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_F) != 0U) )
 8006ac2:	4b37      	ldr	r3, [pc, #220]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 8006ac4:	89db      	ldrh	r3, [r3, #14]
 8006ac6:	f003 0304 	and.w	r3, r3, #4
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d031      	beq.n	8006b32 <rfalNfcPollTechDetetection+0x22a>
 8006ace:	4b34      	ldr	r3, [pc, #208]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 8006ad0:	889b      	ldrh	r3, [r3, #4]
 8006ad2:	f003 0304 	and.w	r3, r3, #4
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d02b      	beq.n	8006b32 <rfalNfcPollTechDetetection+0x22a>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_F;
 8006ada:	4b31      	ldr	r3, [pc, #196]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 8006adc:	889b      	ldrh	r3, [r3, #4]
 8006ade:	f023 0304 	bic.w	r3, r3, #4
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	4b2e      	ldr	r3, [pc, #184]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 8006ae6:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFCF
    
        EXIT_ON_ERR( err, rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR ) );          /* Initialize RFAL for NFC-F */
 8006ae8:	4b2d      	ldr	r3, [pc, #180]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 8006aea:	7cdb      	ldrb	r3, [r3, #19]
 8006aec:	4618      	mov	r0, r3
 8006aee:	f003 fd23 	bl	800a538 <rfalNfcfPollerInitialize>
 8006af2:	4603      	mov	r3, r0
 8006af4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006af6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d001      	beq.n	8006b00 <rfalNfcPollTechDetetection+0x1f8>
 8006afc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006afe:	e08a      	b.n	8006c16 <rfalNfcPollTechDetetection+0x30e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* As field is already On only starts GT timer */
 8006b00:	f004 fce4 	bl	800b4cc <rfalFieldOnAndStartGT>
 8006b04:	4603      	mov	r3, r0
 8006b06:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006b08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d001      	beq.n	8006b12 <rfalNfcPollTechDetetection+0x20a>
 8006b0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b10:	e081      	b.n	8006c16 <rfalNfcPollTechDetetection+0x30e>
                                                                                      
        err = rfalNfcfPollerCheckPresence();                                          /* Poll for NFC-F devices */
 8006b12:	f003 fd5f 	bl	800a5d4 <rfalNfcfPollerCheckPresence>
 8006b16:	4603      	mov	r3, r0
 8006b18:	84fb      	strh	r3, [r7, #38]	; 0x26
        if( err == ERR_NONE )
 8006b1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d106      	bne.n	8006b2e <rfalNfcPollTechDetetection+0x226>
        {
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_F;
 8006b20:	4b1f      	ldr	r3, [pc, #124]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 8006b22:	885b      	ldrh	r3, [r3, #2]
 8006b24:	f043 0304 	orr.w	r3, r3, #4
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	4b1d      	ldr	r3, [pc, #116]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 8006b2c:	805a      	strh	r2, [r3, #2]
        }
        
        return ERR_BUSY;
 8006b2e:	2302      	movs	r3, #2
 8006b30:	e071      	b.n	8006c16 <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive NFC-V Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_V) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_V) != 0U) )
 8006b32:	4b1b      	ldr	r3, [pc, #108]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 8006b34:	89db      	ldrh	r3, [r3, #14]
 8006b36:	f003 0308 	and.w	r3, r3, #8
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d036      	beq.n	8006bac <rfalNfcPollTechDetetection+0x2a4>
 8006b3e:	4b18      	ldr	r3, [pc, #96]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 8006b40:	889b      	ldrh	r3, [r3, #4]
 8006b42:	f003 0308 	and.w	r3, r3, #8
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d030      	beq.n	8006bac <rfalNfcPollTechDetetection+0x2a4>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_V;
 8006b4a:	4b15      	ldr	r3, [pc, #84]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 8006b4c:	889b      	ldrh	r3, [r3, #4]
 8006b4e:	f023 0308 	bic.w	r3, r3, #8
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	4b12      	ldr	r3, [pc, #72]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 8006b56:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFCV
        {
            rfalNfcvInventoryRes invRes;
        
            EXIT_ON_ERR( err, rfalNfcvPollerInitialize() );                               /* Initialize RFAL for NFC-V */
 8006b58:	f003 fdcc 	bl	800a6f4 <rfalNfcvPollerInitialize>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006b60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d001      	beq.n	8006b6a <rfalNfcPollTechDetetection+0x262>
 8006b66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b68:	e055      	b.n	8006c16 <rfalNfcPollTechDetetection+0x30e>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* As field is already On only starts GT timer */
 8006b6a:	f004 fcaf 	bl	800b4cc <rfalFieldOnAndStartGT>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006b72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d001      	beq.n	8006b7c <rfalNfcPollTechDetetection+0x274>
 8006b78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b7a:	e04c      	b.n	8006c16 <rfalNfcPollTechDetetection+0x30e>
                                                                                          
            err = rfalNfcvPollerCheckPresence( &invRes );                                 /* Poll for NFC-V devices */
 8006b7c:	1d3b      	adds	r3, r7, #4
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f003 fddc 	bl	800a73c <rfalNfcvPollerCheckPresence>
 8006b84:	4603      	mov	r3, r0
 8006b86:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 8006b88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d106      	bne.n	8006b9c <rfalNfcPollTechDetetection+0x294>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_V;
 8006b8e:	4b04      	ldr	r3, [pc, #16]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 8006b90:	885b      	ldrh	r3, [r3, #2]
 8006b92:	f043 0308 	orr.w	r3, r3, #8
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	4b01      	ldr	r3, [pc, #4]	; (8006ba0 <rfalNfcPollTechDetetection+0x298>)
 8006b9a:	805a      	strh	r2, [r3, #2]
            }
            
            return ERR_BUSY;
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	e03a      	b.n	8006c16 <rfalNfcPollTechDetetection+0x30e>
 8006ba0:	20000384 	.word	0x20000384
 8006ba4:	00063510 	.word	0x00063510
 8006ba8:	20000414 	.word	0x20000414
    
    
    /*******************************************************************************/
    /* Passive Proprietary Technology ST25TB                                       */
    /*******************************************************************************/  
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_ST25TB) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_ST25TB) != 0U) )
 8006bac:	4b1c      	ldr	r3, [pc, #112]	; (8006c20 <rfalNfcPollTechDetetection+0x318>)
 8006bae:	89db      	ldrh	r3, [r3, #14]
 8006bb0:	f003 0320 	and.w	r3, r3, #32
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d02d      	beq.n	8006c14 <rfalNfcPollTechDetetection+0x30c>
 8006bb8:	4b19      	ldr	r3, [pc, #100]	; (8006c20 <rfalNfcPollTechDetetection+0x318>)
 8006bba:	889b      	ldrh	r3, [r3, #4]
 8006bbc:	f003 0320 	and.w	r3, r3, #32
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d027      	beq.n	8006c14 <rfalNfcPollTechDetetection+0x30c>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_ST25TB;
 8006bc4:	4b16      	ldr	r3, [pc, #88]	; (8006c20 <rfalNfcPollTechDetetection+0x318>)
 8006bc6:	889b      	ldrh	r3, [r3, #4]
 8006bc8:	f023 0320 	bic.w	r3, r3, #32
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	4b14      	ldr	r3, [pc, #80]	; (8006c20 <rfalNfcPollTechDetetection+0x318>)
 8006bd0:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_ST25TB
        
        EXIT_ON_ERR( err, rfalSt25tbPollerInitialize() );                             /* Initialize RFAL for NFC-V */
 8006bd2:	f006 fc9c 	bl	800d50e <rfalSt25tbPollerInitialize>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006bda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d001      	beq.n	8006be4 <rfalNfcPollTechDetetection+0x2dc>
 8006be0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006be2:	e018      	b.n	8006c16 <rfalNfcPollTechDetetection+0x30e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* As field is already On only starts GT timer */
 8006be4:	f004 fc72 	bl	800b4cc <rfalFieldOnAndStartGT>
 8006be8:	4603      	mov	r3, r0
 8006bea:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006bec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d001      	beq.n	8006bf6 <rfalNfcPollTechDetetection+0x2ee>
 8006bf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006bf4:	e00f      	b.n	8006c16 <rfalNfcPollTechDetetection+0x30e>
        
        err = rfalSt25tbPollerCheckPresence( NULL );                                  /* Poll for ST25TB devices */
 8006bf6:	2000      	movs	r0, #0
 8006bf8:	f006 fc90 	bl	800d51c <rfalSt25tbPollerCheckPresence>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	84fb      	strh	r3, [r7, #38]	; 0x26
        if( err == ERR_NONE )
 8006c00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d106      	bne.n	8006c14 <rfalNfcPollTechDetetection+0x30c>
        {
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_ST25TB;
 8006c06:	4b06      	ldr	r3, [pc, #24]	; (8006c20 <rfalNfcPollTechDetetection+0x318>)
 8006c08:	885b      	ldrh	r3, [r3, #2]
 8006c0a:	f043 0320 	orr.w	r3, r3, #32
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	4b03      	ldr	r3, [pc, #12]	; (8006c20 <rfalNfcPollTechDetetection+0x318>)
 8006c12:	805a      	strh	r2, [r3, #2]
        }
        
    #endif /* RFAL_FEATURE_ST25TB */
    }
    
    return ERR_NONE;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3728      	adds	r7, #40	; 0x28
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	20000384 	.word	0x20000384

08006c24 <rfalNfcPollCollResolution>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollCollResolution( void )
{
 8006c24:	b5b0      	push	{r4, r5, r7, lr}
 8006c26:	b09e      	sub	sp, #120	; 0x78
 8006c28:	af00      	add	r7, sp, #0
    uint8_t    i;
    uint8_t    devCnt;
    ReturnCode err;
    
    err    = ERR_NONE;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
    devCnt = 0;
 8006c30:	2300      	movs	r3, #0
 8006c32:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    i      = 0;
 8006c36:	2300      	movs	r3, #0
 8006c38:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    NO_WARNING(err);
    NO_WARNING(devCnt);
    NO_WARNING(i);
    
    /* Check if device limit has been reached */
    if( gNfcDev.devCnt >= gNfcDev.disc.devLimit )
 8006c3c:	4bb6      	ldr	r3, [pc, #728]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006c3e:	f893 22e8 	ldrb.w	r2, [r3, #744]	; 0x2e8
 8006c42:	4bb5      	ldr	r3, [pc, #724]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006c44:	7c9b      	ldrb	r3, [r3, #18]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d301      	bcc.n	8006c4e <rfalNfcPollCollResolution+0x2a>
    {
        return ERR_NONE;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	e2b6      	b.n	80071bc <rfalNfcPollCollResolution+0x598>
    
    /*******************************************************************************/
    /* NFC-A Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCA
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_A) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_A) != 0U) )   /* If a NFC-A device was found/detected, perform Collision Resolution */
 8006c4e:	4bb2      	ldr	r3, [pc, #712]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006c50:	885b      	ldrh	r3, [r3, #2]
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 8085 	beq.w	8006d66 <rfalNfcPollCollResolution+0x142>
 8006c5c:	4bae      	ldr	r3, [pc, #696]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006c5e:	889b      	ldrh	r3, [r3, #4]
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d07e      	beq.n	8006d66 <rfalNfcPollCollResolution+0x142>
    {
        rfalNfcaListenDevice nfcaDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_A;
 8006c68:	4bab      	ldr	r3, [pc, #684]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006c6a:	889b      	ldrh	r3, [r3, #4]
 8006c6c:	f023 0301 	bic.w	r3, r3, #1
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	4ba9      	ldr	r3, [pc, #676]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006c74:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcaPollerInitialize());                                /* Initialize RFAL for NFC-A */
 8006c76:	f002 fc83 	bl	8009580 <rfalNfcaPollerInitialize>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8006c80:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d002      	beq.n	8006c8e <rfalNfcPollCollResolution+0x6a>
 8006c88:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006c8c:	e296      	b.n	80071bc <rfalNfcPollCollResolution+0x598>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 8006c8e:	f004 fc1d 	bl	800b4cc <rfalFieldOnAndStartGT>
 8006c92:	4603      	mov	r3, r0
 8006c94:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8006c98:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d002      	beq.n	8006ca6 <rfalNfcPollCollResolution+0x82>
 8006ca0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006ca4:	e28a      	b.n	80071bc <rfalNfcPollCollResolution+0x598>
        
        err = rfalNfcaPollerFullCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcaDevList, &devCnt );
 8006ca6:	4b9c      	ldr	r3, [pc, #624]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006ca8:	7b18      	ldrb	r0, [r3, #12]
 8006caa:	4b9b      	ldr	r3, [pc, #620]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006cac:	7c9a      	ldrb	r2, [r3, #18]
 8006cae:	4b9a      	ldr	r3, [pc, #616]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006cb0:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	b2d9      	uxtb	r1, r3
 8006cb8:	f107 0373 	add.w	r3, r7, #115	; 0x73
 8006cbc:	1d3a      	adds	r2, r7, #4
 8006cbe:	f002 fe9c 	bl	80099fa <rfalNfcaPollerFullCollisionResolution>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8006cc8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d148      	bne.n	8006d62 <rfalNfcPollCollResolution+0x13e>
 8006cd0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d044      	beq.n	8006d62 <rfalNfcPollCollResolution+0x13e>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 8006cd8:	2300      	movs	r3, #0
 8006cda:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006cde:	e03a      	b.n	8006d56 <rfalNfcPollCollResolution+0x132>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCA;
 8006ce0:	4b8d      	ldr	r3, [pc, #564]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006ce2:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	4a8b      	ldr	r2, [pc, #556]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006cea:	460b      	mov	r3, r1
 8006cec:	011b      	lsls	r3, r3, #4
 8006cee:	1a5b      	subs	r3, r3, r1
 8006cf0:	00db      	lsls	r3, r3, #3
 8006cf2:	4413      	add	r3, r2
 8006cf4:	3390      	adds	r3, #144	; 0x90
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 8006cfa:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8006cfe:	4b86      	ldr	r3, [pc, #536]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006d00:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8006d04:	4618      	mov	r0, r3
 8006d06:	4984      	ldr	r1, [pc, #528]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006d08:	4603      	mov	r3, r0
 8006d0a:	011b      	lsls	r3, r3, #4
 8006d0c:	1a1b      	subs	r3, r3, r0
 8006d0e:	00db      	lsls	r3, r3, #3
 8006d10:	440b      	add	r3, r1
 8006d12:	3390      	adds	r3, #144	; 0x90
 8006d14:	2116      	movs	r1, #22
 8006d16:	fb01 f202 	mul.w	r2, r1, r2
 8006d1a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006d1e:	440a      	add	r2, r1
 8006d20:	3a74      	subs	r2, #116	; 0x74
 8006d22:	3301      	adds	r3, #1
 8006d24:	6811      	ldr	r1, [r2, #0]
 8006d26:	6855      	ldr	r5, [r2, #4]
 8006d28:	6894      	ldr	r4, [r2, #8]
 8006d2a:	68d0      	ldr	r0, [r2, #12]
 8006d2c:	6019      	str	r1, [r3, #0]
 8006d2e:	605d      	str	r5, [r3, #4]
 8006d30:	609c      	str	r4, [r3, #8]
 8006d32:	60d8      	str	r0, [r3, #12]
 8006d34:	6911      	ldr	r1, [r2, #16]
 8006d36:	6119      	str	r1, [r3, #16]
 8006d38:	8a92      	ldrh	r2, [r2, #20]
 8006d3a:	829a      	strh	r2, [r3, #20]
                gNfcDev.devCnt++;
 8006d3c:	4b76      	ldr	r3, [pc, #472]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006d3e:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8006d42:	3301      	adds	r3, #1
 8006d44:	b2da      	uxtb	r2, r3
 8006d46:	4b74      	ldr	r3, [pc, #464]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006d48:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 8006d4c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006d50:	3301      	adds	r3, #1
 8006d52:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006d56:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8006d5a:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d3be      	bcc.n	8006ce0 <rfalNfcPollCollResolution+0xbc>
            }
        }
        
        return ERR_BUSY;
 8006d62:	2302      	movs	r3, #2
 8006d64:	e22a      	b.n	80071bc <rfalNfcPollCollResolution+0x598>
    
    /*******************************************************************************/
    /* NFC-B Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCB
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_B) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_B) != 0U) )   /* If a NFC-B device was found/detected, perform Collision Resolution */
 8006d66:	4b6c      	ldr	r3, [pc, #432]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006d68:	885b      	ldrh	r3, [r3, #2]
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 8085 	beq.w	8006e7e <rfalNfcPollCollResolution+0x25a>
 8006d74:	4b68      	ldr	r3, [pc, #416]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006d76:	889b      	ldrh	r3, [r3, #4]
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d07e      	beq.n	8006e7e <rfalNfcPollCollResolution+0x25a>
    {
        rfalNfcbListenDevice nfcbDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_B;
 8006d80:	4b65      	ldr	r3, [pc, #404]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006d82:	889b      	ldrh	r3, [r3, #4]
 8006d84:	f023 0302 	bic.w	r3, r3, #2
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	4b63      	ldr	r3, [pc, #396]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006d8c:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcbPollerInitialize());                                /* Initialize RFAL for NFC-B */
 8006d8e:	f002 fffd 	bl	8009d8c <rfalNfcbPollerInitialize>
 8006d92:	4603      	mov	r3, r0
 8006d94:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8006d98:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d002      	beq.n	8006da6 <rfalNfcPollCollResolution+0x182>
 8006da0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006da4:	e20a      	b.n	80071bc <rfalNfcPollCollResolution+0x598>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 8006da6:	f004 fb91 	bl	800b4cc <rfalFieldOnAndStartGT>
 8006daa:	4603      	mov	r3, r0
 8006dac:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8006db0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d002      	beq.n	8006dbe <rfalNfcPollCollResolution+0x19a>
 8006db8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006dbc:	e1fe      	b.n	80071bc <rfalNfcPollCollResolution+0x598>
        
        err = rfalNfcbPollerCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcbDevList, &devCnt );
 8006dbe:	4b56      	ldr	r3, [pc, #344]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006dc0:	7b18      	ldrb	r0, [r3, #12]
 8006dc2:	4b55      	ldr	r3, [pc, #340]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006dc4:	7c9a      	ldrb	r2, [r3, #18]
 8006dc6:	4b54      	ldr	r3, [pc, #336]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006dc8:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	b2d9      	uxtb	r1, r3
 8006dd0:	f107 0373 	add.w	r3, r7, #115	; 0x73
 8006dd4:	1d3a      	adds	r2, r7, #4
 8006dd6:	f003 f8fd 	bl	8009fd4 <rfalNfcbPollerCollisionResolution>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8006de0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d148      	bne.n	8006e7a <rfalNfcPollCollResolution+0x256>
 8006de8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d044      	beq.n	8006e7a <rfalNfcPollCollResolution+0x256>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 8006df0:	2300      	movs	r3, #0
 8006df2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006df6:	e03a      	b.n	8006e6e <rfalNfcPollCollResolution+0x24a>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCB;
 8006df8:	4b47      	ldr	r3, [pc, #284]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006dfa:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8006dfe:	4619      	mov	r1, r3
 8006e00:	4a45      	ldr	r2, [pc, #276]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006e02:	460b      	mov	r3, r1
 8006e04:	011b      	lsls	r3, r3, #4
 8006e06:	1a5b      	subs	r3, r3, r1
 8006e08:	00db      	lsls	r3, r3, #3
 8006e0a:	4413      	add	r3, r2
 8006e0c:	3390      	adds	r3, #144	; 0x90
 8006e0e:	2201      	movs	r2, #1
 8006e10:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 8006e12:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8006e16:	4b40      	ldr	r3, [pc, #256]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006e18:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	493e      	ldr	r1, [pc, #248]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006e20:	4603      	mov	r3, r0
 8006e22:	011b      	lsls	r3, r3, #4
 8006e24:	1a1b      	subs	r3, r3, r0
 8006e26:	00db      	lsls	r3, r3, #3
 8006e28:	440b      	add	r3, r1
 8006e2a:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8006e2e:	4613      	mov	r3, r2
 8006e30:	011b      	lsls	r3, r3, #4
 8006e32:	1a9b      	subs	r3, r3, r2
 8006e34:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8006e38:	4413      	add	r3, r2
 8006e3a:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 8006e3e:	1c4b      	adds	r3, r1, #1
 8006e40:	6814      	ldr	r4, [r2, #0]
 8006e42:	6850      	ldr	r0, [r2, #4]
 8006e44:	6891      	ldr	r1, [r2, #8]
 8006e46:	601c      	str	r4, [r3, #0]
 8006e48:	6058      	str	r0, [r3, #4]
 8006e4a:	6099      	str	r1, [r3, #8]
 8006e4c:	8991      	ldrh	r1, [r2, #12]
 8006e4e:	7b92      	ldrb	r2, [r2, #14]
 8006e50:	8199      	strh	r1, [r3, #12]
 8006e52:	739a      	strb	r2, [r3, #14]
                gNfcDev.devCnt++;
 8006e54:	4b30      	ldr	r3, [pc, #192]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006e56:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	4b2e      	ldr	r3, [pc, #184]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006e60:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 8006e64:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006e68:	3301      	adds	r3, #1
 8006e6a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006e6e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8006e72:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d3be      	bcc.n	8006df8 <rfalNfcPollCollResolution+0x1d4>
            }
        }
        
        return ERR_BUSY;
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	e19e      	b.n	80071bc <rfalNfcPollCollResolution+0x598>
    
    /*******************************************************************************/
    /* NFC-F Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCF
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_F) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_F) != 0U) )  /* If a NFC-F device was found/detected, perform Collision Resolution */
 8006e7e:	4b26      	ldr	r3, [pc, #152]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006e80:	885b      	ldrh	r3, [r3, #2]
 8006e82:	f003 0304 	and.w	r3, r3, #4
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f000 808f 	beq.w	8006faa <rfalNfcPollCollResolution+0x386>
 8006e8c:	4b22      	ldr	r3, [pc, #136]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006e8e:	889b      	ldrh	r3, [r3, #4]
 8006e90:	f003 0304 	and.w	r3, r3, #4
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 8088 	beq.w	8006faa <rfalNfcPollCollResolution+0x386>
    {
        rfalNfcfListenDevice nfcfDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_F;
 8006e9a:	4b1f      	ldr	r3, [pc, #124]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006e9c:	889b      	ldrh	r3, [r3, #4]
 8006e9e:	f023 0304 	bic.w	r3, r3, #4
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	4b1c      	ldr	r3, [pc, #112]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006ea6:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR ));           /* Initialize RFAL for NFC-F */
 8006ea8:	4b1b      	ldr	r3, [pc, #108]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006eaa:	7cdb      	ldrb	r3, [r3, #19]
 8006eac:	4618      	mov	r0, r3
 8006eae:	f003 fb43 	bl	800a538 <rfalNfcfPollerInitialize>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8006eb8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d002      	beq.n	8006ec6 <rfalNfcPollCollResolution+0x2a2>
 8006ec0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006ec4:	e17a      	b.n	80071bc <rfalNfcPollCollResolution+0x598>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 8006ec6:	f004 fb01 	bl	800b4cc <rfalFieldOnAndStartGT>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8006ed0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d002      	beq.n	8006ede <rfalNfcPollCollResolution+0x2ba>
 8006ed8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006edc:	e16e      	b.n	80071bc <rfalNfcPollCollResolution+0x598>
        
        err = rfalNfcfPollerCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcfDevList, &devCnt );
 8006ede:	4b0e      	ldr	r3, [pc, #56]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006ee0:	7b18      	ldrb	r0, [r3, #12]
 8006ee2:	4b0d      	ldr	r3, [pc, #52]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006ee4:	7c9a      	ldrb	r2, [r3, #18]
 8006ee6:	4b0c      	ldr	r3, [pc, #48]	; (8006f18 <rfalNfcPollCollResolution+0x2f4>)
 8006ee8:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	b2d9      	uxtb	r1, r3
 8006ef0:	f107 0373 	add.w	r3, r7, #115	; 0x73
 8006ef4:	1d3a      	adds	r2, r7, #4
 8006ef6:	f003 fb8d 	bl	800a614 <rfalNfcfPollerCollisionResolution>
 8006efa:	4603      	mov	r3, r0
 8006efc:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8006f00:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d14e      	bne.n	8006fa6 <rfalNfcPollCollResolution+0x382>
 8006f08:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d04a      	beq.n	8006fa6 <rfalNfcPollCollResolution+0x382>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8006f10:	2300      	movs	r3, #0
 8006f12:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006f16:	e040      	b.n	8006f9a <rfalNfcPollCollResolution+0x376>
 8006f18:	20000384 	.word	0x20000384
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCF;
 8006f1c:	4ba9      	ldr	r3, [pc, #676]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 8006f1e:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8006f22:	4619      	mov	r1, r3
 8006f24:	4aa7      	ldr	r2, [pc, #668]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 8006f26:	460b      	mov	r3, r1
 8006f28:	011b      	lsls	r3, r3, #4
 8006f2a:	1a5b      	subs	r3, r3, r1
 8006f2c:	00db      	lsls	r3, r3, #3
 8006f2e:	4413      	add	r3, r2
 8006f30:	3390      	adds	r3, #144	; 0x90
 8006f32:	2202      	movs	r2, #2
 8006f34:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 8006f36:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8006f3a:	4ba2      	ldr	r3, [pc, #648]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 8006f3c:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8006f40:	4618      	mov	r0, r3
 8006f42:	49a0      	ldr	r1, [pc, #640]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 8006f44:	4603      	mov	r3, r0
 8006f46:	011b      	lsls	r3, r3, #4
 8006f48:	1a1b      	subs	r3, r3, r0
 8006f4a:	00db      	lsls	r3, r3, #3
 8006f4c:	440b      	add	r3, r1
 8006f4e:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8006f52:	4613      	mov	r3, r2
 8006f54:	00db      	lsls	r3, r3, #3
 8006f56:	4413      	add	r3, r2
 8006f58:	005b      	lsls	r3, r3, #1
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8006f60:	4413      	add	r3, r2
 8006f62:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 8006f66:	1c4b      	adds	r3, r1, #1
 8006f68:	6815      	ldr	r5, [r2, #0]
 8006f6a:	6854      	ldr	r4, [r2, #4]
 8006f6c:	6890      	ldr	r0, [r2, #8]
 8006f6e:	68d1      	ldr	r1, [r2, #12]
 8006f70:	601d      	str	r5, [r3, #0]
 8006f72:	605c      	str	r4, [r3, #4]
 8006f74:	6098      	str	r0, [r3, #8]
 8006f76:	60d9      	str	r1, [r3, #12]
 8006f78:	8a11      	ldrh	r1, [r2, #16]
 8006f7a:	7c92      	ldrb	r2, [r2, #18]
 8006f7c:	8219      	strh	r1, [r3, #16]
 8006f7e:	749a      	strb	r2, [r3, #18]
                gNfcDev.devCnt++;
 8006f80:	4b90      	ldr	r3, [pc, #576]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 8006f82:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8006f86:	3301      	adds	r3, #1
 8006f88:	b2da      	uxtb	r2, r3
 8006f8a:	4b8e      	ldr	r3, [pc, #568]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 8006f8c:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8006f90:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006f94:	3301      	adds	r3, #1
 8006f96:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006f9a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8006f9e:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d3ba      	bcc.n	8006f1c <rfalNfcPollCollResolution+0x2f8>
            }
        }
        
        return ERR_BUSY;
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	e108      	b.n	80071bc <rfalNfcPollCollResolution+0x598>
    
    /*******************************************************************************/
    /* NFC-V Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCV
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_V) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_V) != 0U) )  /* If a NFC-V device was found/detected, perform Collision Resolution */
 8006faa:	4b86      	ldr	r3, [pc, #536]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 8006fac:	885b      	ldrh	r3, [r3, #2]
 8006fae:	f003 0308 	and.w	r3, r3, #8
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f000 8084 	beq.w	80070c0 <rfalNfcPollCollResolution+0x49c>
 8006fb8:	4b82      	ldr	r3, [pc, #520]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 8006fba:	889b      	ldrh	r3, [r3, #4]
 8006fbc:	f003 0308 	and.w	r3, r3, #8
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d07d      	beq.n	80070c0 <rfalNfcPollCollResolution+0x49c>
    {
        rfalNfcvListenDevice nfcvDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_V;
 8006fc4:	4b7f      	ldr	r3, [pc, #508]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 8006fc6:	889b      	ldrh	r3, [r3, #4]
 8006fc8:	f023 0308 	bic.w	r3, r3, #8
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	4b7d      	ldr	r3, [pc, #500]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 8006fd0:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcvPollerInitialize());                                /* Initialize RFAL for NFC-V */
 8006fd2:	f003 fb8f 	bl	800a6f4 <rfalNfcvPollerInitialize>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8006fdc:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d002      	beq.n	8006fea <rfalNfcPollCollResolution+0x3c6>
 8006fe4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006fe8:	e0e8      	b.n	80071bc <rfalNfcPollCollResolution+0x598>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 8006fea:	f004 fa6f 	bl	800b4cc <rfalFieldOnAndStartGT>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8006ff4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d002      	beq.n	8007002 <rfalNfcPollCollResolution+0x3de>
 8006ffc:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8007000:	e0dc      	b.n	80071bc <rfalNfcPollCollResolution+0x598>
        
        err = rfalNfcvPollerCollisionResolution( RFAL_COMPLIANCE_MODE_NFC, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcvDevList, &devCnt );
 8007002:	4b70      	ldr	r3, [pc, #448]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 8007004:	7c9a      	ldrb	r2, [r3, #18]
 8007006:	4b6f      	ldr	r3, [pc, #444]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 8007008:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	b2d9      	uxtb	r1, r3
 8007010:	f107 0373 	add.w	r3, r7, #115	; 0x73
 8007014:	1d3a      	adds	r2, r7, #4
 8007016:	2000      	movs	r0, #0
 8007018:	f003 fc14 	bl	800a844 <rfalNfcvPollerCollisionResolution>
 800701c:	4603      	mov	r3, r0
 800701e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8007022:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8007026:	2b00      	cmp	r3, #0
 8007028:	d148      	bne.n	80070bc <rfalNfcPollCollResolution+0x498>
 800702a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800702e:	2b00      	cmp	r3, #0
 8007030:	d044      	beq.n	80070bc <rfalNfcPollCollResolution+0x498>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8007032:	2300      	movs	r3, #0
 8007034:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007038:	e03a      	b.n	80070b0 <rfalNfcPollCollResolution+0x48c>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCV;
 800703a:	4b62      	ldr	r3, [pc, #392]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 800703c:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8007040:	4619      	mov	r1, r3
 8007042:	4a60      	ldr	r2, [pc, #384]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 8007044:	460b      	mov	r3, r1
 8007046:	011b      	lsls	r3, r3, #4
 8007048:	1a5b      	subs	r3, r3, r1
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	4413      	add	r3, r2
 800704e:	3390      	adds	r3, #144	; 0x90
 8007050:	2203      	movs	r2, #3
 8007052:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 8007054:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8007058:	4b5a      	ldr	r3, [pc, #360]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 800705a:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800705e:	4618      	mov	r0, r3
 8007060:	4958      	ldr	r1, [pc, #352]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 8007062:	4603      	mov	r3, r0
 8007064:	011b      	lsls	r3, r3, #4
 8007066:	1a1b      	subs	r3, r3, r0
 8007068:	00db      	lsls	r3, r3, #3
 800706a:	440b      	add	r3, r1
 800706c:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8007070:	4613      	mov	r3, r2
 8007072:	005b      	lsls	r3, r3, #1
 8007074:	4413      	add	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800707e:	4413      	add	r3, r2
 8007080:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 8007084:	1c4b      	adds	r3, r1, #1
 8007086:	6814      	ldr	r4, [r2, #0]
 8007088:	6850      	ldr	r0, [r2, #4]
 800708a:	6891      	ldr	r1, [r2, #8]
 800708c:	601c      	str	r4, [r3, #0]
 800708e:	6058      	str	r0, [r3, #4]
 8007090:	6099      	str	r1, [r3, #8]
 8007092:	7b12      	ldrb	r2, [r2, #12]
 8007094:	731a      	strb	r2, [r3, #12]
                gNfcDev.devCnt++;
 8007096:	4b4b      	ldr	r3, [pc, #300]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 8007098:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800709c:	3301      	adds	r3, #1
 800709e:	b2da      	uxtb	r2, r3
 80070a0:	4b48      	ldr	r3, [pc, #288]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 80070a2:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 80070a6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80070aa:	3301      	adds	r3, #1
 80070ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80070b0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80070b4:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d3be      	bcc.n	800703a <rfalNfcPollCollResolution+0x416>
            }
        }
        
        return ERR_BUSY;
 80070bc:	2302      	movs	r3, #2
 80070be:	e07d      	b.n	80071bc <rfalNfcPollCollResolution+0x598>
    
    /*******************************************************************************/
    /* ST25TB Collision Resolution                                                 */
    /*******************************************************************************/
#if RFAL_FEATURE_ST25TB
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_ST25TB) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_ST25TB) != 0U) ) /* If a ST25TB device was found/detected, perform Collision Resolution */
 80070c0:	4b40      	ldr	r3, [pc, #256]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 80070c2:	885b      	ldrh	r3, [r3, #2]
 80070c4:	f003 0320 	and.w	r3, r3, #32
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d076      	beq.n	80071ba <rfalNfcPollCollResolution+0x596>
 80070cc:	4b3d      	ldr	r3, [pc, #244]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 80070ce:	889b      	ldrh	r3, [r3, #4]
 80070d0:	f003 0320 	and.w	r3, r3, #32
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d070      	beq.n	80071ba <rfalNfcPollCollResolution+0x596>
    {
        rfalSt25tbListenDevice st25tbDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_ST25TB;
 80070d8:	4b3a      	ldr	r3, [pc, #232]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 80070da:	889b      	ldrh	r3, [r3, #4]
 80070dc:	f023 0320 	bic.w	r3, r3, #32
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	4b38      	ldr	r3, [pc, #224]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 80070e4:	809a      	strh	r2, [r3, #4]
        
        rfalSt25tbPollerInitialize();                                                 /* Initialize RFAL for ST25TB */
 80070e6:	f006 fa12 	bl	800d50e <rfalSt25tbPollerInitialize>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 80070ea:	f004 f9ef 	bl	800b4cc <rfalFieldOnAndStartGT>
 80070ee:	4603      	mov	r3, r0
 80070f0:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80070f4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d002      	beq.n	8007102 <rfalNfcPollCollResolution+0x4de>
 80070fc:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8007100:	e05c      	b.n	80071bc <rfalNfcPollCollResolution+0x598>
        
        err = rfalSt25tbPollerCollisionResolution( (gNfcDev.disc.devLimit - gNfcDev.devCnt), st25tbDevList, &devCnt );
 8007102:	4b30      	ldr	r3, [pc, #192]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 8007104:	7c9a      	ldrb	r2, [r3, #18]
 8007106:	4b2f      	ldr	r3, [pc, #188]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 8007108:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	b2db      	uxtb	r3, r3
 8007110:	f107 0273 	add.w	r2, r7, #115	; 0x73
 8007114:	1d39      	adds	r1, r7, #4
 8007116:	4618      	mov	r0, r3
 8007118:	f006 faf6 	bl	800d708 <rfalSt25tbPollerCollisionResolution>
 800711c:	4603      	mov	r3, r0
 800711e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8007122:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8007126:	2b00      	cmp	r3, #0
 8007128:	d145      	bne.n	80071b6 <rfalNfcPollCollResolution+0x592>
 800712a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800712e:	2b00      	cmp	r3, #0
 8007130:	d041      	beq.n	80071b6 <rfalNfcPollCollResolution+0x592>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8007132:	2300      	movs	r3, #0
 8007134:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007138:	e037      	b.n	80071aa <rfalNfcPollCollResolution+0x586>
            {
                gNfcDev.devList[gNfcDev.devCnt].type       = RFAL_NFC_LISTEN_TYPE_ST25TB;
 800713a:	4b22      	ldr	r3, [pc, #136]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 800713c:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8007140:	4619      	mov	r1, r3
 8007142:	4a20      	ldr	r2, [pc, #128]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 8007144:	460b      	mov	r3, r1
 8007146:	011b      	lsls	r3, r3, #4
 8007148:	1a5b      	subs	r3, r3, r1
 800714a:	00db      	lsls	r3, r3, #3
 800714c:	4413      	add	r3, r2
 800714e:	3390      	adds	r3, #144	; 0x90
 8007150:	2204      	movs	r2, #4
 8007152:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 8007154:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8007158:	4b1a      	ldr	r3, [pc, #104]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 800715a:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800715e:	4618      	mov	r0, r3
 8007160:	4918      	ldr	r1, [pc, #96]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 8007162:	4603      	mov	r3, r0
 8007164:	011b      	lsls	r3, r3, #4
 8007166:	1a1b      	subs	r3, r3, r0
 8007168:	00db      	lsls	r3, r3, #3
 800716a:	440b      	add	r3, r1
 800716c:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8007170:	4613      	mov	r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4413      	add	r3, r2
 8007176:	005b      	lsls	r3, r3, #1
 8007178:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800717c:	4413      	add	r3, r2
 800717e:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 8007182:	1c4b      	adds	r3, r1, #1
 8007184:	6810      	ldr	r0, [r2, #0]
 8007186:	6851      	ldr	r1, [r2, #4]
 8007188:	6018      	str	r0, [r3, #0]
 800718a:	6059      	str	r1, [r3, #4]
 800718c:	8912      	ldrh	r2, [r2, #8]
 800718e:	811a      	strh	r2, [r3, #8]
                gNfcDev.devCnt++;
 8007190:	4b0c      	ldr	r3, [pc, #48]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 8007192:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8007196:	3301      	adds	r3, #1
 8007198:	b2da      	uxtb	r2, r3
 800719a:	4b0a      	ldr	r3, [pc, #40]	; (80071c4 <rfalNfcPollCollResolution+0x5a0>)
 800719c:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 80071a0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80071a4:	3301      	adds	r3, #1
 80071a6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80071aa:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80071ae:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d3c1      	bcc.n	800713a <rfalNfcPollCollResolution+0x516>
            }
        }
        
        return ERR_BUSY;
 80071b6:	2302      	movs	r3, #2
 80071b8:	e000      	b.n	80071bc <rfalNfcPollCollResolution+0x598>
    }
#endif /* RFAL_FEATURE_ST25TB */
    
    return ERR_NONE;                                                                  /* All technologies have been performed */
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3778      	adds	r7, #120	; 0x78
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bdb0      	pop	{r4, r5, r7, pc}
 80071c4:	20000384 	.word	0x20000384

080071c8 <rfalNfcPollActivation>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollActivation( uint8_t devIt )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b08e      	sub	sp, #56	; 0x38
 80071cc:	af04      	add	r7, sp, #16
 80071ce:	4603      	mov	r3, r0
 80071d0:	71fb      	strb	r3, [r7, #7]
    ReturnCode err;
    
    err = ERR_NONE;
 80071d2:	2300      	movs	r3, #0
 80071d4:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    /* Supress warning when specific RFAL features have been disabled */
    NO_WARNING(err);
    
    if( devIt > gNfcDev.devCnt )
 80071d6:	4ba3      	ldr	r3, [pc, #652]	; (8007464 <rfalNfcPollActivation+0x29c>)
 80071d8:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80071dc:	79fa      	ldrb	r2, [r7, #7]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d901      	bls.n	80071e6 <rfalNfcPollActivation+0x1e>
    {
        return ERR_WRONG_STATE;
 80071e2:	2321      	movs	r3, #33	; 0x21
 80071e4:	e296      	b.n	8007714 <rfalNfcPollActivation+0x54c>
    }
    
    switch( gNfcDev.devList[devIt].type )
 80071e6:	79fa      	ldrb	r2, [r7, #7]
 80071e8:	499e      	ldr	r1, [pc, #632]	; (8007464 <rfalNfcPollActivation+0x29c>)
 80071ea:	4613      	mov	r3, r2
 80071ec:	011b      	lsls	r3, r3, #4
 80071ee:	1a9b      	subs	r3, r3, r2
 80071f0:	00db      	lsls	r3, r3, #3
 80071f2:	440b      	add	r3, r1
 80071f4:	3390      	adds	r3, #144	; 0x90
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	2b05      	cmp	r3, #5
 80071fa:	f200 827e 	bhi.w	80076fa <rfalNfcPollActivation+0x532>
 80071fe:	a201      	add	r2, pc, #4	; (adr r2, 8007204 <rfalNfcPollActivation+0x3c>)
 8007200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007204:	08007257 	.word	0x08007257
 8007208:	08007469 	.word	0x08007469
 800720c:	0800755d 	.word	0x0800755d
 8007210:	08007657 	.word	0x08007657
 8007214:	080076a9 	.word	0x080076a9
 8007218:	0800721d 	.word	0x0800721d
        /*******************************************************************************/
    #if RFAL_FEATURE_NFC_DEP
        case RFAL_NFC_LISTEN_TYPE_AP2P:
            /* Activation has already been perfomed (ATR_REQ) */
        
            gNfcDev.devList[devIt].nfcid     = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 800721c:	79f9      	ldrb	r1, [r7, #7]
 800721e:	79fa      	ldrb	r2, [r7, #7]
 8007220:	460b      	mov	r3, r1
 8007222:	011b      	lsls	r3, r3, #4
 8007224:	1a5b      	subs	r3, r3, r1
 8007226:	00db      	lsls	r3, r3, #3
 8007228:	33b0      	adds	r3, #176	; 0xb0
 800722a:	498e      	ldr	r1, [pc, #568]	; (8007464 <rfalNfcPollActivation+0x29c>)
 800722c:	440b      	add	r3, r1
 800722e:	1c99      	adds	r1, r3, #2
 8007230:	488c      	ldr	r0, [pc, #560]	; (8007464 <rfalNfcPollActivation+0x29c>)
 8007232:	4613      	mov	r3, r2
 8007234:	011b      	lsls	r3, r3, #4
 8007236:	1a9b      	subs	r3, r3, r2
 8007238:	00db      	lsls	r3, r3, #3
 800723a:	4403      	add	r3, r0
 800723c:	33a8      	adds	r3, #168	; 0xa8
 800723e:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen  = RFAL_NFCDEP_NFCID3_LEN;
 8007240:	79fa      	ldrb	r2, [r7, #7]
 8007242:	4988      	ldr	r1, [pc, #544]	; (8007464 <rfalNfcPollActivation+0x29c>)
 8007244:	4613      	mov	r3, r2
 8007246:	011b      	lsls	r3, r3, #4
 8007248:	1a9b      	subs	r3, r3, r2
 800724a:	00db      	lsls	r3, r3, #3
 800724c:	440b      	add	r3, r1
 800724e:	33ac      	adds	r3, #172	; 0xac
 8007250:	220a      	movs	r2, #10
 8007252:	701a      	strb	r2, [r3, #0]
            break;
 8007254:	e253      	b.n	80076fe <rfalNfcPollActivation+0x536>
        /* Passive NFC-A Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCA
        case RFAL_NFC_LISTEN_TYPE_NFCA:
            
            rfalNfcaPollerInitialize();
 8007256:	f002 f993 	bl	8009580 <rfalNfcaPollerInitialize>
            if( gNfcDev.devList[devIt].dev.nfca.isSleep )                             /* Check if desired device is in Sleep */
 800725a:	79fa      	ldrb	r2, [r7, #7]
 800725c:	4981      	ldr	r1, [pc, #516]	; (8007464 <rfalNfcPollActivation+0x29c>)
 800725e:	4613      	mov	r3, r2
 8007260:	011b      	lsls	r3, r3, #4
 8007262:	1a9b      	subs	r3, r3, r2
 8007264:	00db      	lsls	r3, r3, #3
 8007266:	440b      	add	r3, r1
 8007268:	33a6      	adds	r3, #166	; 0xa6
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d02a      	beq.n	80072c6 <rfalNfcPollActivation+0xfe>
            {
                rfalNfcaSensRes sensRes;
                rfalNfcaSelRes  selRes;
                
                EXIT_ON_ERR( err, rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_WUPA, &sensRes ) ); /* Wake up all cards  */
 8007270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007274:	4619      	mov	r1, r3
 8007276:	2052      	movs	r0, #82	; 0x52
 8007278:	f002 f9a6 	bl	80095c8 <rfalNfcaPollerCheckPresence>
 800727c:	4603      	mov	r3, r0
 800727e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007280:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007282:	2b00      	cmp	r3, #0
 8007284:	d001      	beq.n	800728a <rfalNfcPollActivation+0xc2>
 8007286:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007288:	e244      	b.n	8007714 <rfalNfcPollActivation+0x54c>
                EXIT_ON_ERR( err, rfalNfcaPollerSelect( gNfcDev.devList[devIt].dev.nfca.nfcId1, gNfcDev.devList[devIt].dev.nfca.nfcId1Len, &selRes ) ); /* Select specific device  */
 800728a:	79fa      	ldrb	r2, [r7, #7]
 800728c:	4613      	mov	r3, r2
 800728e:	011b      	lsls	r3, r3, #4
 8007290:	1a9b      	subs	r3, r3, r2
 8007292:	00db      	lsls	r3, r3, #3
 8007294:	3390      	adds	r3, #144	; 0x90
 8007296:	4a73      	ldr	r2, [pc, #460]	; (8007464 <rfalNfcPollActivation+0x29c>)
 8007298:	4413      	add	r3, r2
 800729a:	1d98      	adds	r0, r3, #6
 800729c:	79fa      	ldrb	r2, [r7, #7]
 800729e:	4971      	ldr	r1, [pc, #452]	; (8007464 <rfalNfcPollActivation+0x29c>)
 80072a0:	4613      	mov	r3, r2
 80072a2:	011b      	lsls	r3, r3, #4
 80072a4:	1a9b      	subs	r3, r3, r2
 80072a6:	00db      	lsls	r3, r3, #3
 80072a8:	440b      	add	r3, r1
 80072aa:	3395      	adds	r3, #149	; 0x95
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	f107 0220 	add.w	r2, r7, #32
 80072b2:	4619      	mov	r1, r3
 80072b4:	f002 fcbe 	bl	8009c34 <rfalNfcaPollerSelect>
 80072b8:	4603      	mov	r3, r0
 80072ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 80072bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <rfalNfcPollActivation+0xfe>
 80072c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80072c4:	e226      	b.n	8007714 <rfalNfcPollActivation+0x54c>
            }
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfca.nfcId1;
 80072c6:	79f9      	ldrb	r1, [r7, #7]
 80072c8:	79fa      	ldrb	r2, [r7, #7]
 80072ca:	460b      	mov	r3, r1
 80072cc:	011b      	lsls	r3, r3, #4
 80072ce:	1a5b      	subs	r3, r3, r1
 80072d0:	00db      	lsls	r3, r3, #3
 80072d2:	3390      	adds	r3, #144	; 0x90
 80072d4:	4963      	ldr	r1, [pc, #396]	; (8007464 <rfalNfcPollActivation+0x29c>)
 80072d6:	440b      	add	r3, r1
 80072d8:	1d99      	adds	r1, r3, #6
 80072da:	4862      	ldr	r0, [pc, #392]	; (8007464 <rfalNfcPollActivation+0x29c>)
 80072dc:	4613      	mov	r3, r2
 80072de:	011b      	lsls	r3, r3, #4
 80072e0:	1a9b      	subs	r3, r3, r2
 80072e2:	00db      	lsls	r3, r3, #3
 80072e4:	4403      	add	r3, r0
 80072e6:	33a8      	adds	r3, #168	; 0xa8
 80072e8:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = gNfcDev.devList[devIt].dev.nfca.nfcId1Len;
 80072ea:	79f9      	ldrb	r1, [r7, #7]
 80072ec:	79fa      	ldrb	r2, [r7, #7]
 80072ee:	485d      	ldr	r0, [pc, #372]	; (8007464 <rfalNfcPollActivation+0x29c>)
 80072f0:	460b      	mov	r3, r1
 80072f2:	011b      	lsls	r3, r3, #4
 80072f4:	1a5b      	subs	r3, r3, r1
 80072f6:	00db      	lsls	r3, r3, #3
 80072f8:	4403      	add	r3, r0
 80072fa:	3395      	adds	r3, #149	; 0x95
 80072fc:	7818      	ldrb	r0, [r3, #0]
 80072fe:	4959      	ldr	r1, [pc, #356]	; (8007464 <rfalNfcPollActivation+0x29c>)
 8007300:	4613      	mov	r3, r2
 8007302:	011b      	lsls	r3, r3, #4
 8007304:	1a9b      	subs	r3, r3, r2
 8007306:	00db      	lsls	r3, r3, #3
 8007308:	440b      	add	r3, r1
 800730a:	33ac      	adds	r3, #172	; 0xac
 800730c:	4602      	mov	r2, r0
 800730e:	701a      	strb	r2, [r3, #0]
            
            /*******************************************************************************/
            /* Perform protocol specific activation                                        */
            switch( gNfcDev.devList[devIt].dev.nfca.type )
 8007310:	79fa      	ldrb	r2, [r7, #7]
 8007312:	4954      	ldr	r1, [pc, #336]	; (8007464 <rfalNfcPollActivation+0x29c>)
 8007314:	4613      	mov	r3, r2
 8007316:	011b      	lsls	r3, r3, #4
 8007318:	1a9b      	subs	r3, r3, r2
 800731a:	00db      	lsls	r3, r3, #3
 800731c:	440b      	add	r3, r1
 800731e:	3391      	adds	r3, #145	; 0x91
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	2b20      	cmp	r3, #32
 8007324:	d03e      	beq.n	80073a4 <rfalNfcPollActivation+0x1dc>
 8007326:	2b20      	cmp	r3, #32
 8007328:	dc04      	bgt.n	8007334 <rfalNfcPollActivation+0x16c>
 800732a:	2b00      	cmp	r3, #0
 800732c:	d02f      	beq.n	800738e <rfalNfcPollActivation+0x1c6>
 800732e:	2b01      	cmp	r3, #1
 8007330:	d005      	beq.n	800733e <rfalNfcPollActivation+0x176>
 8007332:	e093      	b.n	800745c <rfalNfcPollActivation+0x294>
 8007334:	2b40      	cmp	r3, #64	; 0x40
 8007336:	d056      	beq.n	80073e6 <rfalNfcPollActivation+0x21e>
 8007338:	2b60      	cmp	r3, #96	; 0x60
 800733a:	d054      	beq.n	80073e6 <rfalNfcPollActivation+0x21e>
 800733c:	e08e      	b.n	800745c <rfalNfcPollActivation+0x294>
                /*******************************************************************************/
                case RFAL_NFCA_T1T:
                
                    /* No further activation needed for T1T (RID already performed) */
                
                    gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfca.ridRes.uid;
 800733e:	79f9      	ldrb	r1, [r7, #7]
 8007340:	79fa      	ldrb	r2, [r7, #7]
 8007342:	460b      	mov	r3, r1
 8007344:	011b      	lsls	r3, r3, #4
 8007346:	1a5b      	subs	r3, r3, r1
 8007348:	00db      	lsls	r3, r3, #3
 800734a:	3398      	adds	r3, #152	; 0x98
 800734c:	4945      	ldr	r1, [pc, #276]	; (8007464 <rfalNfcPollActivation+0x29c>)
 800734e:	440b      	add	r3, r1
 8007350:	f103 010a 	add.w	r1, r3, #10
 8007354:	4843      	ldr	r0, [pc, #268]	; (8007464 <rfalNfcPollActivation+0x29c>)
 8007356:	4613      	mov	r3, r2
 8007358:	011b      	lsls	r3, r3, #4
 800735a:	1a9b      	subs	r3, r3, r2
 800735c:	00db      	lsls	r3, r3, #3
 800735e:	4403      	add	r3, r0
 8007360:	33a8      	adds	r3, #168	; 0xa8
 8007362:	6019      	str	r1, [r3, #0]
                    gNfcDev.devList[devIt].nfcidLen = RFAL_T1T_UID_LEN;
 8007364:	79fa      	ldrb	r2, [r7, #7]
 8007366:	493f      	ldr	r1, [pc, #252]	; (8007464 <rfalNfcPollActivation+0x29c>)
 8007368:	4613      	mov	r3, r2
 800736a:	011b      	lsls	r3, r3, #4
 800736c:	1a9b      	subs	r3, r3, r2
 800736e:	00db      	lsls	r3, r3, #3
 8007370:	440b      	add	r3, r1
 8007372:	33ac      	adds	r3, #172	; 0xac
 8007374:	2204      	movs	r2, #4
 8007376:	701a      	strb	r2, [r3, #0]
                
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;
 8007378:	79fa      	ldrb	r2, [r7, #7]
 800737a:	493a      	ldr	r1, [pc, #232]	; (8007464 <rfalNfcPollActivation+0x29c>)
 800737c:	4613      	mov	r3, r2
 800737e:	011b      	lsls	r3, r3, #4
 8007380:	1a9b      	subs	r3, r3, r2
 8007382:	00db      	lsls	r3, r3, #3
 8007384:	440b      	add	r3, r1
 8007386:	33ad      	adds	r3, #173	; 0xad
 8007388:	2200      	movs	r2, #0
 800738a:	701a      	strb	r2, [r3, #0]
                    break;
 800738c:	e068      	b.n	8007460 <rfalNfcPollActivation+0x298>
                
                case RFAL_NFCA_T2T:
                    
                    /* No further activation needed for a T2T */

                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;
 800738e:	79fa      	ldrb	r2, [r7, #7]
 8007390:	4934      	ldr	r1, [pc, #208]	; (8007464 <rfalNfcPollActivation+0x29c>)
 8007392:	4613      	mov	r3, r2
 8007394:	011b      	lsls	r3, r3, #4
 8007396:	1a9b      	subs	r3, r3, r2
 8007398:	00db      	lsls	r3, r3, #3
 800739a:	440b      	add	r3, r1
 800739c:	33ad      	adds	r3, #173	; 0xad
 800739e:	2200      	movs	r2, #0
 80073a0:	701a      	strb	r2, [r3, #0]
                    break;
 80073a2:	e05d      	b.n	8007460 <rfalNfcPollActivation+0x298>
                /*******************************************************************************/
                case RFAL_NFCA_T4T:                                                   /* Device supports ISO-DEP */
                
                #if RFAL_FEATURE_ISO_DEP_POLL
                    /* Perform ISO-DEP (ISO14443-4) activation: RATS and PPS if supported */
                    rfalIsoDepInitialize();
 80073a4:	f7fd ff30 	bl	8005208 <rfalIsoDepInitialize>
                    EXIT_ON_ERR( err, rfalIsoDepPollAHandleActivation( (rfalIsoDepFSxI)RFAL_ISODEP_FSDI_DEFAULT, RFAL_ISODEP_NO_DID, RFAL_BR_424, &gNfcDev.devList[devIt].proto.isoDep ) );
 80073a8:	79fa      	ldrb	r2, [r7, #7]
 80073aa:	4613      	mov	r3, r2
 80073ac:	011b      	lsls	r3, r3, #4
 80073ae:	1a9b      	subs	r3, r3, r2
 80073b0:	00db      	lsls	r3, r3, #3
 80073b2:	33b0      	adds	r3, #176	; 0xb0
 80073b4:	4a2b      	ldr	r2, [pc, #172]	; (8007464 <rfalNfcPollActivation+0x29c>)
 80073b6:	4413      	add	r3, r2
 80073b8:	2202      	movs	r2, #2
 80073ba:	2100      	movs	r1, #0
 80073bc:	2008      	movs	r0, #8
 80073be:	f7fe fc43 	bl	8005c48 <rfalIsoDepPollAHandleActivation>
 80073c2:	4603      	mov	r3, r0
 80073c4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80073c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <rfalNfcPollActivation+0x208>
 80073cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80073ce:	e1a1      	b.n	8007714 <rfalNfcPollActivation+0x54c>
                    
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_ISODEP;   /* NFC-A T4T device activated */
 80073d0:	79fa      	ldrb	r2, [r7, #7]
 80073d2:	4924      	ldr	r1, [pc, #144]	; (8007464 <rfalNfcPollActivation+0x29c>)
 80073d4:	4613      	mov	r3, r2
 80073d6:	011b      	lsls	r3, r3, #4
 80073d8:	1a9b      	subs	r3, r3, r2
 80073da:	00db      	lsls	r3, r3, #3
 80073dc:	440b      	add	r3, r1
 80073de:	33ad      	adds	r3, #173	; 0xad
 80073e0:	2201      	movs	r2, #1
 80073e2:	701a      	strb	r2, [r3, #0]
                #else
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;       /* No ISO-DEP supported activate using RF interface */
                #endif /* RFAL_FEATURE_ISO_DEP_POLL */
                    break;
 80073e4:	e03c      	b.n	8007460 <rfalNfcPollActivation+0x298>
                case RFAL_NFCA_T4T_NFCDEP:                                            /* Device supports both T4T and NFC-DEP */
                case RFAL_NFCA_NFCDEP:                                                /* Device supports NFC-DEP */
                
                #if RFAL_FEATURE_NFC_DEP
                    /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
                    EXIT_ON_ERR( err, rfalNfcNfcDepActivate( &gNfcDev.devList[devIt], RFAL_NFCDEP_COMM_PASSIVE, NULL, 0 ) );
 80073e6:	79fa      	ldrb	r2, [r7, #7]
 80073e8:	4613      	mov	r3, r2
 80073ea:	011b      	lsls	r3, r3, #4
 80073ec:	1a9b      	subs	r3, r3, r2
 80073ee:	00db      	lsls	r3, r3, #3
 80073f0:	3390      	adds	r3, #144	; 0x90
 80073f2:	4a1c      	ldr	r2, [pc, #112]	; (8007464 <rfalNfcPollActivation+0x29c>)
 80073f4:	1898      	adds	r0, r3, r2
 80073f6:	2300      	movs	r3, #0
 80073f8:	2200      	movs	r2, #0
 80073fa:	2100      	movs	r1, #0
 80073fc:	f000 f990 	bl	8007720 <rfalNfcNfcDepActivate>
 8007400:	4603      	mov	r3, r0
 8007402:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007404:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <rfalNfcPollActivation+0x246>
 800740a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800740c:	e182      	b.n	8007714 <rfalNfcPollActivation+0x54c>
                
                    gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 800740e:	79f9      	ldrb	r1, [r7, #7]
 8007410:	79fa      	ldrb	r2, [r7, #7]
 8007412:	460b      	mov	r3, r1
 8007414:	011b      	lsls	r3, r3, #4
 8007416:	1a5b      	subs	r3, r3, r1
 8007418:	00db      	lsls	r3, r3, #3
 800741a:	33b0      	adds	r3, #176	; 0xb0
 800741c:	4911      	ldr	r1, [pc, #68]	; (8007464 <rfalNfcPollActivation+0x29c>)
 800741e:	440b      	add	r3, r1
 8007420:	1c99      	adds	r1, r3, #2
 8007422:	4810      	ldr	r0, [pc, #64]	; (8007464 <rfalNfcPollActivation+0x29c>)
 8007424:	4613      	mov	r3, r2
 8007426:	011b      	lsls	r3, r3, #4
 8007428:	1a9b      	subs	r3, r3, r2
 800742a:	00db      	lsls	r3, r3, #3
 800742c:	4403      	add	r3, r0
 800742e:	33a8      	adds	r3, #168	; 0xa8
 8007430:	6019      	str	r1, [r3, #0]
                    gNfcDev.devList[devIt].nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 8007432:	79fa      	ldrb	r2, [r7, #7]
 8007434:	490b      	ldr	r1, [pc, #44]	; (8007464 <rfalNfcPollActivation+0x29c>)
 8007436:	4613      	mov	r3, r2
 8007438:	011b      	lsls	r3, r3, #4
 800743a:	1a9b      	subs	r3, r3, r2
 800743c:	00db      	lsls	r3, r3, #3
 800743e:	440b      	add	r3, r1
 8007440:	33ac      	adds	r3, #172	; 0xac
 8007442:	220a      	movs	r2, #10
 8007444:	701a      	strb	r2, [r3, #0]
                
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_NFCDEP;   /* NFC-A P2P device activated */
 8007446:	79fa      	ldrb	r2, [r7, #7]
 8007448:	4906      	ldr	r1, [pc, #24]	; (8007464 <rfalNfcPollActivation+0x29c>)
 800744a:	4613      	mov	r3, r2
 800744c:	011b      	lsls	r3, r3, #4
 800744e:	1a9b      	subs	r3, r3, r2
 8007450:	00db      	lsls	r3, r3, #3
 8007452:	440b      	add	r3, r1
 8007454:	33ad      	adds	r3, #173	; 0xad
 8007456:	2202      	movs	r2, #2
 8007458:	701a      	strb	r2, [r3, #0]
                #else
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;       /* No NFC-DEP supported activate using RF interface */
                #endif /* RFAL_FEATURE_NFC_DEP */
                    break;
 800745a:	e001      	b.n	8007460 <rfalNfcPollActivation+0x298>
                
                /*******************************************************************************/
                default:
                    return ERR_WRONG_STATE;
 800745c:	2321      	movs	r3, #33	; 0x21
 800745e:	e159      	b.n	8007714 <rfalNfcPollActivation+0x54c>
            }
            break;
 8007460:	e14d      	b.n	80076fe <rfalNfcPollActivation+0x536>
 8007462:	bf00      	nop
 8007464:	20000384 	.word	0x20000384
        /* Passive NFC-B Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCB
        case RFAL_NFC_LISTEN_TYPE_NFCB:
            
            rfalNfcbPollerInitialize();
 8007468:	f002 fc90 	bl	8009d8c <rfalNfcbPollerInitialize>
            if( gNfcDev.devList[devIt].dev.nfcb.isSleep )                             /* Check if desired device is in Sleep */
 800746c:	79fa      	ldrb	r2, [r7, #7]
 800746e:	49ab      	ldr	r1, [pc, #684]	; (800771c <rfalNfcPollActivation+0x554>)
 8007470:	4613      	mov	r3, r2
 8007472:	011b      	lsls	r3, r3, #4
 8007474:	1a9b      	subs	r3, r3, r2
 8007476:	00db      	lsls	r3, r3, #3
 8007478:	440b      	add	r3, r1
 800747a:	339f      	adds	r3, #159	; 0x9f
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d007      	beq.n	8007492 <rfalNfcPollActivation+0x2ca>
            {
                rfalNfcbSensbRes sensbRes;
                uint8_t          sensbResLen;
                
                /* Wake up all cards. SENSB_RES may return collision but the NFCID0 is available to explicitly select NFC-B card via ATTRIB; so error will be ignored here */
                rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_ALLB_REQ, RFAL_NFCB_SLOT_NUM_1, &sensbRes, &sensbResLen );
 8007482:	f107 030f 	add.w	r3, r7, #15
 8007486:	f107 0210 	add.w	r2, r7, #16
 800748a:	2100      	movs	r1, #0
 800748c:	2008      	movs	r0, #8
 800748e:	f002 fca9 	bl	8009de4 <rfalNfcbPollerCheckPresence>
            }
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcb.sensbRes.nfcid0;
 8007492:	79f9      	ldrb	r1, [r7, #7]
 8007494:	79fa      	ldrb	r2, [r7, #7]
 8007496:	460b      	mov	r3, r1
 8007498:	011b      	lsls	r3, r3, #4
 800749a:	1a5b      	subs	r3, r3, r1
 800749c:	00db      	lsls	r3, r3, #3
 800749e:	3390      	adds	r3, #144	; 0x90
 80074a0:	499e      	ldr	r1, [pc, #632]	; (800771c <rfalNfcPollActivation+0x554>)
 80074a2:	440b      	add	r3, r1
 80074a4:	1cd9      	adds	r1, r3, #3
 80074a6:	489d      	ldr	r0, [pc, #628]	; (800771c <rfalNfcPollActivation+0x554>)
 80074a8:	4613      	mov	r3, r2
 80074aa:	011b      	lsls	r3, r3, #4
 80074ac:	1a9b      	subs	r3, r3, r2
 80074ae:	00db      	lsls	r3, r3, #3
 80074b0:	4403      	add	r3, r0
 80074b2:	33a8      	adds	r3, #168	; 0xa8
 80074b4:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCB_NFCID0_LEN;
 80074b6:	79fa      	ldrb	r2, [r7, #7]
 80074b8:	4998      	ldr	r1, [pc, #608]	; (800771c <rfalNfcPollActivation+0x554>)
 80074ba:	4613      	mov	r3, r2
 80074bc:	011b      	lsls	r3, r3, #4
 80074be:	1a9b      	subs	r3, r3, r2
 80074c0:	00db      	lsls	r3, r3, #3
 80074c2:	440b      	add	r3, r1
 80074c4:	33ac      	adds	r3, #172	; 0xac
 80074c6:	2204      	movs	r2, #4
 80074c8:	701a      	strb	r2, [r3, #0]
            
        #if RFAL_FEATURE_ISO_DEP_POLL
            /* Check if device supports  ISO-DEP (ISO14443-4) */
            if( (gNfcDev.devList[devIt].dev.nfcb.sensbRes.protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK) != 0U )
 80074ca:	79fa      	ldrb	r2, [r7, #7]
 80074cc:	4993      	ldr	r1, [pc, #588]	; (800771c <rfalNfcPollActivation+0x554>)
 80074ce:	4613      	mov	r3, r2
 80074d0:	011b      	lsls	r3, r3, #4
 80074d2:	1a9b      	subs	r3, r3, r2
 80074d4:	00db      	lsls	r3, r3, #3
 80074d6:	440b      	add	r3, r1
 80074d8:	339c      	adds	r3, #156	; 0x9c
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d030      	beq.n	8007546 <rfalNfcPollActivation+0x37e>
            {
                rfalIsoDepInitialize();
 80074e4:	f7fd fe90 	bl	8005208 <rfalIsoDepInitialize>
                /* Perform ISO-DEP (ISO14443-4) activation: RATS and PPS if supported    */
                EXIT_ON_ERR( err, rfalIsoDepPollBHandleActivation( (rfalIsoDepFSxI)RFAL_ISODEP_FSDI_DEFAULT, RFAL_ISODEP_NO_DID, RFAL_BR_424, 0x00, &gNfcDev.devList[devIt].dev.nfcb, NULL, 0, &gNfcDev.devList[devIt].proto.isoDep ) );
 80074e8:	79fa      	ldrb	r2, [r7, #7]
 80074ea:	4613      	mov	r3, r2
 80074ec:	011b      	lsls	r3, r3, #4
 80074ee:	1a9b      	subs	r3, r3, r2
 80074f0:	00db      	lsls	r3, r3, #3
 80074f2:	3390      	adds	r3, #144	; 0x90
 80074f4:	4a89      	ldr	r2, [pc, #548]	; (800771c <rfalNfcPollActivation+0x554>)
 80074f6:	4413      	add	r3, r2
 80074f8:	1c59      	adds	r1, r3, #1
 80074fa:	79fa      	ldrb	r2, [r7, #7]
 80074fc:	4613      	mov	r3, r2
 80074fe:	011b      	lsls	r3, r3, #4
 8007500:	1a9b      	subs	r3, r3, r2
 8007502:	00db      	lsls	r3, r3, #3
 8007504:	33b0      	adds	r3, #176	; 0xb0
 8007506:	4a85      	ldr	r2, [pc, #532]	; (800771c <rfalNfcPollActivation+0x554>)
 8007508:	4413      	add	r3, r2
 800750a:	9303      	str	r3, [sp, #12]
 800750c:	2300      	movs	r3, #0
 800750e:	9302      	str	r3, [sp, #8]
 8007510:	2300      	movs	r3, #0
 8007512:	9301      	str	r3, [sp, #4]
 8007514:	9100      	str	r1, [sp, #0]
 8007516:	2300      	movs	r3, #0
 8007518:	2202      	movs	r2, #2
 800751a:	2100      	movs	r1, #0
 800751c:	2008      	movs	r0, #8
 800751e:	f7fe fced 	bl	8005efc <rfalIsoDepPollBHandleActivation>
 8007522:	4603      	mov	r3, r0
 8007524:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007526:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <rfalNfcPollActivation+0x368>
 800752c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800752e:	e0f1      	b.n	8007714 <rfalNfcPollActivation+0x54c>
                
                gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_ISODEP;       /* NFC-B T4T device activated */
 8007530:	79fa      	ldrb	r2, [r7, #7]
 8007532:	497a      	ldr	r1, [pc, #488]	; (800771c <rfalNfcPollActivation+0x554>)
 8007534:	4613      	mov	r3, r2
 8007536:	011b      	lsls	r3, r3, #4
 8007538:	1a9b      	subs	r3, r3, r2
 800753a:	00db      	lsls	r3, r3, #3
 800753c:	440b      	add	r3, r1
 800753e:	33ad      	adds	r3, #173	; 0xad
 8007540:	2201      	movs	r2, #1
 8007542:	701a      	strb	r2, [r3, #0]
                break;
 8007544:	e0db      	b.n	80076fe <rfalNfcPollActivation+0x536>
            }
        #endif /* RFAL_FEATURE_ISO_DEP_POLL */
            
            gNfcDev.devList[devIt].rfInterface =  RFAL_NFC_INTERFACE_RF;              /* NFC-B device activated     */
 8007546:	79fa      	ldrb	r2, [r7, #7]
 8007548:	4974      	ldr	r1, [pc, #464]	; (800771c <rfalNfcPollActivation+0x554>)
 800754a:	4613      	mov	r3, r2
 800754c:	011b      	lsls	r3, r3, #4
 800754e:	1a9b      	subs	r3, r3, r2
 8007550:	00db      	lsls	r3, r3, #3
 8007552:	440b      	add	r3, r1
 8007554:	33ad      	adds	r3, #173	; 0xad
 8007556:	2200      	movs	r2, #0
 8007558:	701a      	strb	r2, [r3, #0]
            break;
 800755a:	e0d0      	b.n	80076fe <rfalNfcPollActivation+0x536>
        /* Passive NFC-F Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCF
        case RFAL_NFC_LISTEN_TYPE_NFCF:
            
            rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR );
 800755c:	4b6f      	ldr	r3, [pc, #444]	; (800771c <rfalNfcPollActivation+0x554>)
 800755e:	7cdb      	ldrb	r3, [r3, #19]
 8007560:	4618      	mov	r0, r3
 8007562:	f002 ffe9 	bl	800a538 <rfalNfcfPollerInitialize>
        
        #if RFAL_FEATURE_NFC_DEP
            if( rfalNfcfIsNfcDepSupported( &gNfcDev.devList[devIt].dev.nfcf ) )
 8007566:	79fa      	ldrb	r2, [r7, #7]
 8007568:	496c      	ldr	r1, [pc, #432]	; (800771c <rfalNfcPollActivation+0x554>)
 800756a:	4613      	mov	r3, r2
 800756c:	011b      	lsls	r3, r3, #4
 800756e:	1a9b      	subs	r3, r3, r2
 8007570:	00db      	lsls	r3, r3, #3
 8007572:	440b      	add	r3, r1
 8007574:	3393      	adds	r3, #147	; 0x93
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d145      	bne.n	8007608 <rfalNfcPollActivation+0x440>
 800757c:	79fa      	ldrb	r2, [r7, #7]
 800757e:	4967      	ldr	r1, [pc, #412]	; (800771c <rfalNfcPollActivation+0x554>)
 8007580:	4613      	mov	r3, r2
 8007582:	011b      	lsls	r3, r3, #4
 8007584:	1a9b      	subs	r3, r3, r2
 8007586:	00db      	lsls	r3, r3, #3
 8007588:	440b      	add	r3, r1
 800758a:	3394      	adds	r3, #148	; 0x94
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	2bfe      	cmp	r3, #254	; 0xfe
 8007590:	d13a      	bne.n	8007608 <rfalNfcPollActivation+0x440>
            {
                /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
                EXIT_ON_ERR( err, rfalNfcNfcDepActivate( &gNfcDev.devList[devIt], RFAL_NFCDEP_COMM_PASSIVE, NULL, 0 ) );
 8007592:	79fa      	ldrb	r2, [r7, #7]
 8007594:	4613      	mov	r3, r2
 8007596:	011b      	lsls	r3, r3, #4
 8007598:	1a9b      	subs	r3, r3, r2
 800759a:	00db      	lsls	r3, r3, #3
 800759c:	3390      	adds	r3, #144	; 0x90
 800759e:	4a5f      	ldr	r2, [pc, #380]	; (800771c <rfalNfcPollActivation+0x554>)
 80075a0:	1898      	adds	r0, r3, r2
 80075a2:	2300      	movs	r3, #0
 80075a4:	2200      	movs	r2, #0
 80075a6:	2100      	movs	r1, #0
 80075a8:	f000 f8ba 	bl	8007720 <rfalNfcNfcDepActivate>
 80075ac:	4603      	mov	r3, r0
 80075ae:	84fb      	strh	r3, [r7, #38]	; 0x26
 80075b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d001      	beq.n	80075ba <rfalNfcPollActivation+0x3f2>
 80075b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80075b8:	e0ac      	b.n	8007714 <rfalNfcPollActivation+0x54c>
                
                /* Set NFCID */
                gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 80075ba:	79f9      	ldrb	r1, [r7, #7]
 80075bc:	79fa      	ldrb	r2, [r7, #7]
 80075be:	460b      	mov	r3, r1
 80075c0:	011b      	lsls	r3, r3, #4
 80075c2:	1a5b      	subs	r3, r3, r1
 80075c4:	00db      	lsls	r3, r3, #3
 80075c6:	33b0      	adds	r3, #176	; 0xb0
 80075c8:	4954      	ldr	r1, [pc, #336]	; (800771c <rfalNfcPollActivation+0x554>)
 80075ca:	440b      	add	r3, r1
 80075cc:	1c99      	adds	r1, r3, #2
 80075ce:	4853      	ldr	r0, [pc, #332]	; (800771c <rfalNfcPollActivation+0x554>)
 80075d0:	4613      	mov	r3, r2
 80075d2:	011b      	lsls	r3, r3, #4
 80075d4:	1a9b      	subs	r3, r3, r2
 80075d6:	00db      	lsls	r3, r3, #3
 80075d8:	4403      	add	r3, r0
 80075da:	33a8      	adds	r3, #168	; 0xa8
 80075dc:	6019      	str	r1, [r3, #0]
                gNfcDev.devList[devIt].nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 80075de:	79fa      	ldrb	r2, [r7, #7]
 80075e0:	494e      	ldr	r1, [pc, #312]	; (800771c <rfalNfcPollActivation+0x554>)
 80075e2:	4613      	mov	r3, r2
 80075e4:	011b      	lsls	r3, r3, #4
 80075e6:	1a9b      	subs	r3, r3, r2
 80075e8:	00db      	lsls	r3, r3, #3
 80075ea:	440b      	add	r3, r1
 80075ec:	33ac      	adds	r3, #172	; 0xac
 80075ee:	220a      	movs	r2, #10
 80075f0:	701a      	strb	r2, [r3, #0]
                
                gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_NFCDEP;       /* NFC-F P2P device activated */
 80075f2:	79fa      	ldrb	r2, [r7, #7]
 80075f4:	4949      	ldr	r1, [pc, #292]	; (800771c <rfalNfcPollActivation+0x554>)
 80075f6:	4613      	mov	r3, r2
 80075f8:	011b      	lsls	r3, r3, #4
 80075fa:	1a9b      	subs	r3, r3, r2
 80075fc:	00db      	lsls	r3, r3, #3
 80075fe:	440b      	add	r3, r1
 8007600:	33ad      	adds	r3, #173	; 0xad
 8007602:	2202      	movs	r2, #2
 8007604:	701a      	strb	r2, [r3, #0]
                break;
 8007606:	e07a      	b.n	80076fe <rfalNfcPollActivation+0x536>
            }
        #endif /* RFAL_FEATURE_NFC_DEP */
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcf.sensfRes.NFCID2;
 8007608:	79f9      	ldrb	r1, [r7, #7]
 800760a:	79fa      	ldrb	r2, [r7, #7]
 800760c:	460b      	mov	r3, r1
 800760e:	011b      	lsls	r3, r3, #4
 8007610:	1a5b      	subs	r3, r3, r1
 8007612:	00db      	lsls	r3, r3, #3
 8007614:	3390      	adds	r3, #144	; 0x90
 8007616:	4941      	ldr	r1, [pc, #260]	; (800771c <rfalNfcPollActivation+0x554>)
 8007618:	440b      	add	r3, r1
 800761a:	1cd9      	adds	r1, r3, #3
 800761c:	483f      	ldr	r0, [pc, #252]	; (800771c <rfalNfcPollActivation+0x554>)
 800761e:	4613      	mov	r3, r2
 8007620:	011b      	lsls	r3, r3, #4
 8007622:	1a9b      	subs	r3, r3, r2
 8007624:	00db      	lsls	r3, r3, #3
 8007626:	4403      	add	r3, r0
 8007628:	33a8      	adds	r3, #168	; 0xa8
 800762a:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCF_NFCID2_LEN;
 800762c:	79fa      	ldrb	r2, [r7, #7]
 800762e:	493b      	ldr	r1, [pc, #236]	; (800771c <rfalNfcPollActivation+0x554>)
 8007630:	4613      	mov	r3, r2
 8007632:	011b      	lsls	r3, r3, #4
 8007634:	1a9b      	subs	r3, r3, r2
 8007636:	00db      	lsls	r3, r3, #3
 8007638:	440b      	add	r3, r1
 800763a:	33ac      	adds	r3, #172	; 0xac
 800763c:	2208      	movs	r2, #8
 800763e:	701a      	strb	r2, [r3, #0]
            
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* NFC-F T3T device activated */
 8007640:	79fa      	ldrb	r2, [r7, #7]
 8007642:	4936      	ldr	r1, [pc, #216]	; (800771c <rfalNfcPollActivation+0x554>)
 8007644:	4613      	mov	r3, r2
 8007646:	011b      	lsls	r3, r3, #4
 8007648:	1a9b      	subs	r3, r3, r2
 800764a:	00db      	lsls	r3, r3, #3
 800764c:	440b      	add	r3, r1
 800764e:	33ad      	adds	r3, #173	; 0xad
 8007650:	2200      	movs	r2, #0
 8007652:	701a      	strb	r2, [r3, #0]
            break;
 8007654:	e053      	b.n	80076fe <rfalNfcPollActivation+0x536>
        /* Passive NFC-V Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCV
        case RFAL_NFC_LISTEN_TYPE_NFCV:
            
            rfalNfcvPollerInitialize();
 8007656:	f003 f84d 	bl	800a6f4 <rfalNfcvPollerInitialize>
            
            /* No specific activation needed for a T5T */
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcv.InvRes.UID;
 800765a:	79f9      	ldrb	r1, [r7, #7]
 800765c:	79fa      	ldrb	r2, [r7, #7]
 800765e:	460b      	mov	r3, r1
 8007660:	011b      	lsls	r3, r3, #4
 8007662:	1a5b      	subs	r3, r3, r1
 8007664:	00db      	lsls	r3, r3, #3
 8007666:	3390      	adds	r3, #144	; 0x90
 8007668:	492c      	ldr	r1, [pc, #176]	; (800771c <rfalNfcPollActivation+0x554>)
 800766a:	440b      	add	r3, r1
 800766c:	1cd9      	adds	r1, r3, #3
 800766e:	482b      	ldr	r0, [pc, #172]	; (800771c <rfalNfcPollActivation+0x554>)
 8007670:	4613      	mov	r3, r2
 8007672:	011b      	lsls	r3, r3, #4
 8007674:	1a9b      	subs	r3, r3, r2
 8007676:	00db      	lsls	r3, r3, #3
 8007678:	4403      	add	r3, r0
 800767a:	33a8      	adds	r3, #168	; 0xa8
 800767c:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCV_UID_LEN;
 800767e:	79fa      	ldrb	r2, [r7, #7]
 8007680:	4926      	ldr	r1, [pc, #152]	; (800771c <rfalNfcPollActivation+0x554>)
 8007682:	4613      	mov	r3, r2
 8007684:	011b      	lsls	r3, r3, #4
 8007686:	1a9b      	subs	r3, r3, r2
 8007688:	00db      	lsls	r3, r3, #3
 800768a:	440b      	add	r3, r1
 800768c:	33ac      	adds	r3, #172	; 0xac
 800768e:	2208      	movs	r2, #8
 8007690:	701a      	strb	r2, [r3, #0]
        
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* NFC-V T5T device activated */
 8007692:	79fa      	ldrb	r2, [r7, #7]
 8007694:	4921      	ldr	r1, [pc, #132]	; (800771c <rfalNfcPollActivation+0x554>)
 8007696:	4613      	mov	r3, r2
 8007698:	011b      	lsls	r3, r3, #4
 800769a:	1a9b      	subs	r3, r3, r2
 800769c:	00db      	lsls	r3, r3, #3
 800769e:	440b      	add	r3, r1
 80076a0:	33ad      	adds	r3, #173	; 0xad
 80076a2:	2200      	movs	r2, #0
 80076a4:	701a      	strb	r2, [r3, #0]
            break;
 80076a6:	e02a      	b.n	80076fe <rfalNfcPollActivation+0x536>
        /* Passive ST25TB Activation                                                   */
        /*******************************************************************************/
    #if RFAL_FEATURE_ST25TB
        case RFAL_NFC_LISTEN_TYPE_ST25TB:
            
            rfalSt25tbPollerInitialize();
 80076a8:	f005 ff31 	bl	800d50e <rfalSt25tbPollerInitialize>
            
            /* No specific activation needed for a ST25TB */
        
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.st25tb.UID;
 80076ac:	79f9      	ldrb	r1, [r7, #7]
 80076ae:	79fa      	ldrb	r2, [r7, #7]
 80076b0:	460b      	mov	r3, r1
 80076b2:	011b      	lsls	r3, r3, #4
 80076b4:	1a5b      	subs	r3, r3, r1
 80076b6:	00db      	lsls	r3, r3, #3
 80076b8:	3390      	adds	r3, #144	; 0x90
 80076ba:	4918      	ldr	r1, [pc, #96]	; (800771c <rfalNfcPollActivation+0x554>)
 80076bc:	440b      	add	r3, r1
 80076be:	1c99      	adds	r1, r3, #2
 80076c0:	4816      	ldr	r0, [pc, #88]	; (800771c <rfalNfcPollActivation+0x554>)
 80076c2:	4613      	mov	r3, r2
 80076c4:	011b      	lsls	r3, r3, #4
 80076c6:	1a9b      	subs	r3, r3, r2
 80076c8:	00db      	lsls	r3, r3, #3
 80076ca:	4403      	add	r3, r0
 80076cc:	33a8      	adds	r3, #168	; 0xa8
 80076ce:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_ST25TB_UID_LEN;
 80076d0:	79fa      	ldrb	r2, [r7, #7]
 80076d2:	4912      	ldr	r1, [pc, #72]	; (800771c <rfalNfcPollActivation+0x554>)
 80076d4:	4613      	mov	r3, r2
 80076d6:	011b      	lsls	r3, r3, #4
 80076d8:	1a9b      	subs	r3, r3, r2
 80076da:	00db      	lsls	r3, r3, #3
 80076dc:	440b      	add	r3, r1
 80076de:	33ac      	adds	r3, #172	; 0xac
 80076e0:	2208      	movs	r2, #8
 80076e2:	701a      	strb	r2, [r3, #0]
        
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* ST25TB device activated */
 80076e4:	79fa      	ldrb	r2, [r7, #7]
 80076e6:	490d      	ldr	r1, [pc, #52]	; (800771c <rfalNfcPollActivation+0x554>)
 80076e8:	4613      	mov	r3, r2
 80076ea:	011b      	lsls	r3, r3, #4
 80076ec:	1a9b      	subs	r3, r3, r2
 80076ee:	00db      	lsls	r3, r3, #3
 80076f0:	440b      	add	r3, r1
 80076f2:	33ad      	adds	r3, #173	; 0xad
 80076f4:	2200      	movs	r2, #0
 80076f6:	701a      	strb	r2, [r3, #0]
            break;
 80076f8:	e001      	b.n	80076fe <rfalNfcPollActivation+0x536>
    #endif /* RFAL_FEATURE_ST25TB */
        
        /*******************************************************************************/
        default:
            return ERR_WRONG_STATE;
 80076fa:	2321      	movs	r3, #33	; 0x21
 80076fc:	e00a      	b.n	8007714 <rfalNfcPollActivation+0x54c>
    }
    
    gNfcDev.activeDev = &gNfcDev.devList[devIt];                                      /* Assign active device to be used further on */
 80076fe:	79fa      	ldrb	r2, [r7, #7]
 8007700:	4613      	mov	r3, r2
 8007702:	011b      	lsls	r3, r3, #4
 8007704:	1a9b      	subs	r3, r3, r2
 8007706:	00db      	lsls	r3, r3, #3
 8007708:	3390      	adds	r3, #144	; 0x90
 800770a:	4a04      	ldr	r2, [pc, #16]	; (800771c <rfalNfcPollActivation+0x554>)
 800770c:	4413      	add	r3, r2
 800770e:	4a03      	ldr	r2, [pc, #12]	; (800771c <rfalNfcPollActivation+0x554>)
 8007710:	6093      	str	r3, [r2, #8]
    return ERR_NONE;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3728      	adds	r7, #40	; 0x28
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	20000384 	.word	0x20000384

08007720 <rfalNfcNfcDepActivate>:
 * 
 ******************************************************************************
 */
#if RFAL_FEATURE_NFC_DEP
static ReturnCode rfalNfcNfcDepActivate( rfalNfcDevice *device, rfalNfcDepCommMode commMode, const uint8_t *atrReq, uint16_t atrReqLen )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b08a      	sub	sp, #40	; 0x28
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	607a      	str	r2, [r7, #4]
 800772a:	461a      	mov	r2, r3
 800772c:	460b      	mov	r3, r1
 800772e:	72fb      	strb	r3, [r7, #11]
 8007730:	4613      	mov	r3, r2
 8007732:	813b      	strh	r3, [r7, #8]
    rfalNfcDepAtrParam          initParam;
    
    /* If we are in Poll mode */
    if( rfalNfcIsRemDevListener( device->type ) )
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	2b05      	cmp	r3, #5
 800773a:	d82f      	bhi.n	800779c <rfalNfcNfcDepActivate+0x7c>
    {
        /*******************************************************************************/
        /* If Passive F use the NFCID2 retrieved from SENSF                            */
        if( device->type == RFAL_NFC_LISTEN_TYPE_NFCF )
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	2b02      	cmp	r3, #2
 8007742:	d105      	bne.n	8007750 <rfalNfcNfcDepActivate+0x30>
        {
            initParam.nfcid    = device->dev.nfcf.sensfRes.NFCID2;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	3303      	adds	r3, #3
 8007748:	617b      	str	r3, [r7, #20]
            initParam.nfcidLen = RFAL_NFCF_NFCID2_LEN;
 800774a:	2308      	movs	r3, #8
 800774c:	763b      	strb	r3, [r7, #24]
 800774e:	e003      	b.n	8007758 <rfalNfcNfcDepActivate+0x38>
        }
        else
        {
            initParam.nfcid    = gNfcDev.disc.nfcid3; 
 8007750:	4b15      	ldr	r3, [pc, #84]	; (80077a8 <rfalNfcNfcDepActivate+0x88>)
 8007752:	617b      	str	r3, [r7, #20]
            initParam.nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 8007754:	230a      	movs	r3, #10
 8007756:	763b      	strb	r3, [r7, #24]
        }    
        
        initParam.BS        = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8007758:	2300      	movs	r3, #0
 800775a:	76fb      	strb	r3, [r7, #27]
        initParam.BR        = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 800775c:	2300      	movs	r3, #0
 800775e:	773b      	strb	r3, [r7, #28]
        initParam.DID       = RFAL_NFCDEP_DID_NO;
 8007760:	2300      	movs	r3, #0
 8007762:	767b      	strb	r3, [r7, #25]
        initParam.NAD       = RFAL_NFCDEP_NAD_NO;
 8007764:	2300      	movs	r3, #0
 8007766:	76bb      	strb	r3, [r7, #26]
        initParam.LR        = RFAL_NFCDEP_LR_254;
 8007768:	2303      	movs	r3, #3
 800776a:	777b      	strb	r3, [r7, #29]
        initParam.GB        = gNfcDev.disc.GB;
 800776c:	4b0f      	ldr	r3, [pc, #60]	; (80077ac <rfalNfcNfcDepActivate+0x8c>)
 800776e:	623b      	str	r3, [r7, #32]
        initParam.GBLen     = gNfcDev.disc.GBLen;
 8007770:	4b0f      	ldr	r3, [pc, #60]	; (80077b0 <rfalNfcNfcDepActivate+0x90>)
 8007772:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007776:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        initParam.commMode  = commMode;
 800777a:	7afb      	ldrb	r3, [r7, #11]
 800777c:	743b      	strb	r3, [r7, #16]
        initParam.operParam = (RFAL_NFCDEP_OPER_FULL_MI_EN | RFAL_NFCDEP_OPER_EMPTY_DEP_DIS | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 800777e:	230e      	movs	r3, #14
 8007780:	747b      	strb	r3, [r7, #17]
        
        rfalNfcDepInitialize();
 8007782:	f001 fb43 	bl	8008e0c <rfalNfcDepInitialize>
        /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
        return rfalNfcDepInitiatorHandleActivation( &initParam, RFAL_BR_424, &device->proto.nfcDep );
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f103 0220 	add.w	r2, r3, #32
 800778c:	f107 0310 	add.w	r3, r7, #16
 8007790:	2102      	movs	r1, #2
 8007792:	4618      	mov	r0, r3
 8007794:	f001 fd58 	bl	8009248 <rfalNfcDepInitiatorHandleActivation>
 8007798:	4603      	mov	r3, r0
 800779a:	e000      	b.n	800779e <rfalNfcNfcDepActivate+0x7e>
    }
#endif  /* RFAL_FEATURE_LISTEN_MODE */
    
    else
    {
        return ERR_INTERNAL;
 800779c:	230c      	movs	r3, #12
    }
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3728      	adds	r7, #40	; 0x28
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	20000398 	.word	0x20000398
 80077ac:	200003a2 	.word	0x200003a2
 80077b0:	20000384 	.word	0x20000384

080077b4 <rfalNfcDeactivation>:
 * \return  ERR_XXXX  : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcDeactivation( void )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	af00      	add	r7, sp, #0
    /* Check if a device has been activated */
    if( gNfcDev.activeDev != NULL )
 80077b8:	4b11      	ldr	r3, [pc, #68]	; (8007800 <rfalNfcDeactivation+0x4c>)
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d011      	beq.n	80077e4 <rfalNfcDeactivation+0x30>
    {
        switch( gNfcDev.activeDev->rfInterface )
 80077c0:	4b0f      	ldr	r3, [pc, #60]	; (8007800 <rfalNfcDeactivation+0x4c>)
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	7f5b      	ldrb	r3, [r3, #29]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d004      	beq.n	80077d4 <rfalNfcDeactivation+0x20>
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d005      	beq.n	80077da <rfalNfcDeactivation+0x26>
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00a      	beq.n	80077e8 <rfalNfcDeactivation+0x34>
 80077d2:	e005      	b.n	80077e0 <rfalNfcDeactivation+0x2c>
                break;                                                                /* No specific deactivation to be performed */
            
            /*******************************************************************************/
        #if RFAL_FEATURE_ISO_DEP_POLL
            case RFAL_NFC_INTERFACE_ISODEP:
                rfalIsoDepDeselect();                                                 /* Send a Deselect to device */
 80077d4:	f7fe f812 	bl	80057fc <rfalIsoDepDeselect>
                break;
 80077d8:	e007      	b.n	80077ea <rfalNfcDeactivation+0x36>
        #endif /* RFAL_FEATURE_ISO_DEP_POLL */
                
            /*******************************************************************************/
        #if RFAL_FEATURE_NFC_DEP
            case RFAL_NFC_INTERFACE_NFCDEP:
                rfalNfcDepRLS();                                                      /* Send a Release to device */
 80077da:	f001 fcc9 	bl	8009170 <rfalNfcDepRLS>
                break;
 80077de:	e004      	b.n	80077ea <rfalNfcDeactivation+0x36>
        #endif /* RFAL_FEATURE_NFC_DEP */
                
            default:
                return ERR_REQUEST;
 80077e0:	2305      	movs	r3, #5
 80077e2:	e00a      	b.n	80077fa <rfalNfcDeactivation+0x46>
        }
    }
 80077e4:	bf00      	nop
 80077e6:	e000      	b.n	80077ea <rfalNfcDeactivation+0x36>
                break;                                                                /* No specific deactivation to be performed */
 80077e8:	bf00      	nop
    
    #if RFAL_FEATURE_WAKEUP_MODE
        rfalWakeUpModeStop();
 80077ea:	f005 fdb9 	bl	800d360 <rfalWakeUpModeStop>
    #endif /* RFAL_FEATURE_WAKEUP_MODE */
    
    #if RFAL_FEATURE_LISTEN_MODE
        rfalListenStop();
    #else
        rfalFieldOff();
 80077ee:	f003 fecf 	bl	800b590 <rfalFieldOff>
    #endif
    
    gNfcDev.activeDev = NULL;
 80077f2:	4b03      	ldr	r3, [pc, #12]	; (8007800 <rfalNfcDeactivation+0x4c>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	609a      	str	r2, [r3, #8]
    return ERR_NONE;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	20000384 	.word	0x20000384

08007804 <nfcipDxIsSupported>:
/*******************************************************************************/


/*******************************************************************************/
static bool nfcipDxIsSupported( uint8_t Dx, uint8_t BRx, uint8_t BSx )
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	4603      	mov	r3, r0
 800780c:	71fb      	strb	r3, [r7, #7]
 800780e:	460b      	mov	r3, r1
 8007810:	71bb      	strb	r3, [r7, #6]
 8007812:	4613      	mov	r3, r2
 8007814:	717b      	strb	r3, [r7, #5]
	uint8_t Bx;
	
	/* Take the min of the possible bit rates, we'll use one for both directions */
	Bx = MIN(BRx, BSx);
 8007816:	797a      	ldrb	r2, [r7, #5]
 8007818:	79bb      	ldrb	r3, [r7, #6]
 800781a:	4293      	cmp	r3, r2
 800781c:	bf28      	it	cs
 800781e:	4613      	movcs	r3, r2
 8007820:	73fb      	strb	r3, [r7, #15]
	
	/* Lower bit rates must be supported for P2P */
	if( (Dx <= (uint8_t)RFAL_NFCDEP_Dx_04_424) )
 8007822:	79fb      	ldrb	r3, [r7, #7]
 8007824:	2b02      	cmp	r3, #2
 8007826:	d801      	bhi.n	800782c <nfcipDxIsSupported+0x28>
	{
		return true;
 8007828:	2301      	movs	r3, #1
 800782a:	e008      	b.n	800783e <nfcipDxIsSupported+0x3a>
	}
	
	if( (Dx == (uint8_t)RFAL_NFCDEP_Dx_08_848) && (Bx >= (uint8_t)RFAL_NFCDEP_Bx_08_848) )
 800782c:	79fb      	ldrb	r3, [r7, #7]
 800782e:	2b03      	cmp	r3, #3
 8007830:	d104      	bne.n	800783c <nfcipDxIsSupported+0x38>
 8007832:	7bfb      	ldrb	r3, [r7, #15]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d001      	beq.n	800783c <nfcipDxIsSupported+0x38>
	{
		return true;
 8007838:	2301      	movs	r3, #1
 800783a:	e000      	b.n	800783e <nfcipDxIsSupported+0x3a>
	}

	return false;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
	...

0800784c <nfcipTxRx>:


/*******************************************************************************/
static ReturnCode nfcipTxRx( rfalNfcDepCmd cmd, uint8_t* txBuf, uint32_t fwt, uint8_t* paylBuf, uint8_t paylBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rxActLen )
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b088      	sub	sp, #32
 8007850:	af02      	add	r7, sp, #8
 8007852:	60b9      	str	r1, [r7, #8]
 8007854:	607a      	str	r2, [r7, #4]
 8007856:	603b      	str	r3, [r7, #0]
 8007858:	4603      	mov	r3, r0
 800785a:	73fb      	strb	r3, [r7, #15]
    ReturnCode ret;
    
    if( (cmd == NFCIP_CMD_DEP_REQ) || (cmd == NFCIP_CMD_DEP_RES) ) /* this method cannot be used for DEPs */
 800785c:	7bfb      	ldrb	r3, [r7, #15]
 800785e:	2b06      	cmp	r3, #6
 8007860:	d002      	beq.n	8007868 <nfcipTxRx+0x1c>
 8007862:	7bfb      	ldrb	r3, [r7, #15]
 8007864:	2b07      	cmp	r3, #7
 8007866:	d101      	bne.n	800786c <nfcipTxRx+0x20>
    {
        return ERR_PARAM;
 8007868:	2307      	movs	r3, #7
 800786a:	e030      	b.n	80078ce <nfcipTxRx+0x82>
    }
    
    /* Assign the global params for this TxRx */
    gNfcip.rxBuf       = rxBuf;
 800786c:	4a1a      	ldr	r2, [pc, #104]	; (80078d8 <nfcipTxRx+0x8c>)
 800786e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007870:	6653      	str	r3, [r2, #100]	; 0x64
    gNfcip.rxBufLen    = rxBufLen;
 8007872:	4a19      	ldr	r2, [pc, #100]	; (80078d8 <nfcipTxRx+0x8c>)
 8007874:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007876:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
    gNfcip.rxRcvdLen   = rxActLen;
 800787a:	4a17      	ldr	r2, [pc, #92]	; (80078d8 <nfcipTxRx+0x8c>)
 800787c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787e:	66d3      	str	r3, [r2, #108]	; 0x6c
    
    
    /*******************************************************************************/
	/* Transmission                                                                */
	/*******************************************************************************/
    if(txBuf != NULL)                                              /* if nothing to Tx, just do Rx */               
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d013      	beq.n	80078ae <nfcipTxRx+0x62>
    {
        EXIT_ON_ERR( ret, nfcipTx( cmd, txBuf, paylBuf, paylBufLen, 0, fwt ) ); 
 8007886:	f897 3020 	ldrb.w	r3, [r7, #32]
 800788a:	b29a      	uxth	r2, r3
 800788c:	7bf8      	ldrb	r0, [r7, #15]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	9301      	str	r3, [sp, #4]
 8007892:	2300      	movs	r3, #0
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	4613      	mov	r3, r2
 8007898:	683a      	ldr	r2, [r7, #0]
 800789a:	68b9      	ldr	r1, [r7, #8]
 800789c:	f000 ffb6 	bl	800880c <nfcipTx>
 80078a0:	4603      	mov	r3, r0
 80078a2:	82fb      	strh	r3, [r7, #22]
 80078a4:	8afb      	ldrh	r3, [r7, #22]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <nfcipTxRx+0x62>
 80078aa:	8afb      	ldrh	r3, [r7, #22]
 80078ac:	e00f      	b.n	80078ce <nfcipTxRx+0x82>
    }
    
    /*******************************************************************************/
	/* Reception                                                                   */
	/*******************************************************************************/
    ret = nfcipDataRx( true );
 80078ae:	2001      	movs	r0, #1
 80078b0:	f001 fdf2 	bl	8009498 <nfcipDataRx>
 80078b4:	4603      	mov	r3, r0
 80078b6:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 80078b8:	8afb      	ldrh	r3, [r7, #22]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d001      	beq.n	80078c2 <nfcipTxRx+0x76>
    {
        return ret;
 80078be:	8afb      	ldrh	r3, [r7, #22]
 80078c0:	e005      	b.n	80078ce <nfcipTxRx+0x82>
    }
    
    /*******************************************************************************/    
    *rxActLen = *rxBuf;                                      		/* Use LEN byte instead due to with/without CRC modes */
 80078c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ca:	801a      	strh	r2, [r3, #0]
    return ERR_NONE;                                         		/* Tx and Rx completed successfully                   */
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3718      	adds	r7, #24
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	20000884 	.word	0x20000884

080078dc <nfcipDEPControlMsg>:


/*******************************************************************************/
static ReturnCode nfcipDEPControlMsg( uint8_t pfb, uint8_t RTOX  )
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b08c      	sub	sp, #48	; 0x30
 80078e0:	af02      	add	r7, sp, #8
 80078e2:	4603      	mov	r3, r0
 80078e4:	460a      	mov	r2, r1
 80078e6:	71fb      	strb	r3, [r7, #7]
 80078e8:	4613      	mov	r3, r2
 80078ea:	71bb      	strb	r3, [r7, #6]


    /*******************************************************************************/
    /* Calculate Cmd and fwt to be used                                            */
    /*******************************************************************************/
    depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);        
 80078ec:	4b2a      	ldr	r3, [pc, #168]	; (8007998 <nfcipDEPControlMsg+0xbc>)
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d101      	bne.n	80078f8 <nfcipDEPControlMsg+0x1c>
 80078f4:	2307      	movs	r3, #7
 80078f6:	e000      	b.n	80078fa <nfcipDEPControlMsg+0x1e>
 80078f8:	2306      	movs	r3, #6
 80078fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    fwt    = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_NO_FWT : (nfcip_PFBisSTO( pfb ) ? ( (RTOX*gNfcip.cfg.fwt) + gNfcip.cfg.dFwt) : (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) ) );
 80078fe:	4b26      	ldr	r3, [pc, #152]	; (8007998 <nfcipDEPControlMsg+0xbc>)
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d018      	beq.n	8007938 <nfcipDEPControlMsg+0x5c>
 8007906:	79fb      	ldrb	r3, [r7, #7]
 8007908:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800790c:	2b80      	cmp	r3, #128	; 0x80
 800790e:	d10d      	bne.n	800792c <nfcipDEPControlMsg+0x50>
 8007910:	79fb      	ldrb	r3, [r7, #7]
 8007912:	f003 0310 	and.w	r3, r3, #16
 8007916:	2b00      	cmp	r3, #0
 8007918:	d008      	beq.n	800792c <nfcipDEPControlMsg+0x50>
 800791a:	79bb      	ldrb	r3, [r7, #6]
 800791c:	4a1e      	ldr	r2, [pc, #120]	; (8007998 <nfcipDEPControlMsg+0xbc>)
 800791e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007920:	fb02 f203 	mul.w	r2, r2, r3
 8007924:	4b1c      	ldr	r3, [pc, #112]	; (8007998 <nfcipDEPControlMsg+0xbc>)
 8007926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007928:	4413      	add	r3, r2
 800792a:	e007      	b.n	800793c <nfcipDEPControlMsg+0x60>
 800792c:	4b1a      	ldr	r3, [pc, #104]	; (8007998 <nfcipDEPControlMsg+0xbc>)
 800792e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007930:	4b19      	ldr	r3, [pc, #100]	; (8007998 <nfcipDEPControlMsg+0xbc>)
 8007932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007934:	4413      	add	r3, r2
 8007936:	e001      	b.n	800793c <nfcipDEPControlMsg+0x60>
 8007938:	f04f 33ff 	mov.w	r3, #4294967295
 800793c:	623b      	str	r3, [r7, #32]
    
    if( nfcip_PFBisSTO( pfb ) )
 800793e:	79fb      	ldrb	r3, [r7, #7]
 8007940:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007944:	2b80      	cmp	r3, #128	; 0x80
 8007946:	d116      	bne.n	8007976 <nfcipDEPControlMsg+0x9a>
 8007948:	79fb      	ldrb	r3, [r7, #7]
 800794a:	f003 0310 	and.w	r3, r3, #16
 800794e:	2b00      	cmp	r3, #0
 8007950:	d011      	beq.n	8007976 <nfcipDEPControlMsg+0x9a>
    {
        ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN] = RTOX;
 8007952:	79bb      	ldrb	r3, [r7, #6]
 8007954:	747b      	strb	r3, [r7, #17]
        return nfcipTx( depCmd, ctrlMsg, &ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN], sizeof(uint8_t), pfb, fwt );
 8007956:	f107 030c 	add.w	r3, r7, #12
 800795a:	1d5a      	adds	r2, r3, #5
 800795c:	f107 010c 	add.w	r1, r7, #12
 8007960:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8007964:	6a3b      	ldr	r3, [r7, #32]
 8007966:	9301      	str	r3, [sp, #4]
 8007968:	79fb      	ldrb	r3, [r7, #7]
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	2301      	movs	r3, #1
 800796e:	f000 ff4d 	bl	800880c <nfcipTx>
 8007972:	4603      	mov	r3, r0
 8007974:	e00c      	b.n	8007990 <nfcipDEPControlMsg+0xb4>
    }
    else
    {
        return nfcipTx( depCmd, ctrlMsg, NULL, 0, pfb, fwt );
 8007976:	f107 010c 	add.w	r1, r7, #12
 800797a:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 800797e:	6a3b      	ldr	r3, [r7, #32]
 8007980:	9301      	str	r3, [sp, #4]
 8007982:	79fb      	ldrb	r3, [r7, #7]
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	2300      	movs	r3, #0
 8007988:	2200      	movs	r2, #0
 800798a:	f000 ff3f 	bl	800880c <nfcipTx>
 800798e:	4603      	mov	r3, r0
    }
}
 8007990:	4618      	mov	r0, r3
 8007992:	3728      	adds	r7, #40	; 0x28
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	20000884 	.word	0x20000884

0800799c <nfcipClearCounters>:

/*******************************************************************************/
static void nfcipClearCounters( void )
{
 800799c:	b480      	push	{r7}
 800799e:	af00      	add	r7, sp, #0
    gNfcip.cntATNRetrys  = 0;
 80079a0:	4b0c      	ldr	r3, [pc, #48]	; (80079d4 <nfcipClearCounters+0x38>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
    gNfcip.cntNACKRetrys = 0;
 80079a8:	4b0a      	ldr	r3, [pc, #40]	; (80079d4 <nfcipClearCounters+0x38>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    gNfcip.cntTORetrys   = 0;
 80079b0:	4b08      	ldr	r3, [pc, #32]	; (80079d4 <nfcipClearCounters+0x38>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    gNfcip.cntTxRetrys   = 0;
 80079b8:	4b06      	ldr	r3, [pc, #24]	; (80079d4 <nfcipClearCounters+0x38>)
 80079ba:	2200      	movs	r2, #0
 80079bc:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    gNfcip.cntRTOXRetrys = 0;
 80079c0:	4b04      	ldr	r3, [pc, #16]	; (80079d4 <nfcipClearCounters+0x38>)
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 80079c8:	bf00      	nop
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	20000884 	.word	0x20000884

080079d8 <nfcipInitiatorHandleDEP>:

/*******************************************************************************/
static ReturnCode nfcipInitiatorHandleDEP( ReturnCode rxRes, uint16_t rxLen, uint16_t *outActRxLen, bool *outIsChaining )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60ba      	str	r2, [r7, #8]
 80079e0:	607b      	str	r3, [r7, #4]
 80079e2:	4603      	mov	r3, r0
 80079e4:	81fb      	strh	r3, [r7, #14]
 80079e6:	460b      	mov	r3, r1
 80079e8:	81bb      	strh	r3, [r7, #12]
    uint8_t    rxMsgIt;
    uint8_t    rxPFB;
    uint8_t    rxRTOX;
    uint8_t    optHdrLen;
    
    ret        = ERR_INTERNAL;
 80079ea:	230c      	movs	r3, #12
 80079ec:	82fb      	strh	r3, [r7, #22]
    rxMsgIt    = 0;
 80079ee:	2300      	movs	r3, #0
 80079f0:	757b      	strb	r3, [r7, #21]
    optHdrLen  = 0;
 80079f2:	2300      	movs	r3, #0
 80079f4:	753b      	strb	r3, [r7, #20]
    
    *outActRxLen    = 0;
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	2200      	movs	r2, #0
 80079fa:	801a      	strh	r2, [r3, #0]
    *outIsChaining  = false;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	701a      	strb	r2, [r3, #0]
    
    
    /*******************************************************************************/
    /* Handle reception errors                                                     */
    /*******************************************************************************/
    switch( rxRes )
 8007a02:	89fb      	ldrh	r3, [r7, #14]
 8007a04:	2b1d      	cmp	r3, #29
 8007a06:	f200 80c6 	bhi.w	8007b96 <nfcipInitiatorHandleDEP+0x1be>
 8007a0a:	a201      	add	r2, pc, #4	; (adr r2, 8007a10 <nfcipInitiatorHandleDEP+0x38>)
 8007a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a10:	08007b9b 	.word	0x08007b9b
 8007a14:	08007b97 	.word	0x08007b97
 8007a18:	08007b93 	.word	0x08007b93
 8007a1c:	08007b97 	.word	0x08007b97
 8007a20:	08007a89 	.word	0x08007a89
 8007a24:	08007b97 	.word	0x08007b97
 8007a28:	08007b97 	.word	0x08007b97
 8007a2c:	08007b97 	.word	0x08007b97
 8007a30:	08007b97 	.word	0x08007b97
 8007a34:	08007b4f 	.word	0x08007b4f
 8007a38:	08007b97 	.word	0x08007b97
 8007a3c:	08007b97 	.word	0x08007b97
 8007a40:	08007b97 	.word	0x08007b97
 8007a44:	08007b97 	.word	0x08007b97
 8007a48:	08007b97 	.word	0x08007b97
 8007a4c:	08007b97 	.word	0x08007b97
 8007a50:	08007b97 	.word	0x08007b97
 8007a54:	08007b97 	.word	0x08007b97
 8007a58:	08007b97 	.word	0x08007b97
 8007a5c:	08007b97 	.word	0x08007b97
 8007a60:	08007b97 	.word	0x08007b97
 8007a64:	08007b4f 	.word	0x08007b4f
 8007a68:	08007b97 	.word	0x08007b97
 8007a6c:	08007b97 	.word	0x08007b97
 8007a70:	08007b97 	.word	0x08007b97
 8007a74:	08007b97 	.word	0x08007b97
 8007a78:	08007b97 	.word	0x08007b97
 8007a7c:	08007b4f 	.word	0x08007b4f
 8007a80:	08007b97 	.word	0x08007b97
 8007a84:	08007b4f 	.word	0x08007b4f
        case ERR_TIMEOUT:
            
            nfcipLogI( " NFCIP(I) TIMEOUT  TORetrys:%d \r\n", gNfcip.cntTORetrys );
            
            /* Digital 1.0 14.15.5.6 - If nTO >= Max raise protocol error */
            if( gNfcip.cntTORetrys++ >= NFCIP_MAX_TO_RETRYS )
 8007a88:	4bac      	ldr	r3, [pc, #688]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007a8a:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8007a8e:	1c5a      	adds	r2, r3, #1
 8007a90:	b2d1      	uxtb	r1, r2
 8007a92:	4aaa      	ldr	r2, [pc, #680]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007a94:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d901      	bls.n	8007aa0 <nfcipInitiatorHandleDEP+0xc8>
            {
                return ERR_PROTO;
 8007a9c:	230b      	movs	r3, #11
 8007a9e:	e264      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
             * will be done #54. 
             * This is used to address the issue some devices that havea big TO. 
             * Normally LLCP layer has timeout already, and NFCIP layer is still
             * running error handling, retrying ATN/NACKs                                  */
            /*******************************************************************************/
            if( nfcipIsDeactivationPending() )
 8007aa0:	4ba6      	ldr	r3, [pc, #664]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d008      	beq.n	8007abc <nfcipInitiatorHandleDEP+0xe4>
 8007aaa:	4ba4      	ldr	r3, [pc, #656]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ab0:	4798      	blx	r3
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d001      	beq.n	8007abc <nfcipInitiatorHandleDEP+0xe4>
            {
                nfcipLogI( " skipping error recovery due deactivation pending \r\n");
                return ERR_TIMEOUT;
 8007ab8:	2304      	movs	r3, #4
 8007aba:	e256      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
            }
            
            /* Digital 1.0 14.15.5.6 1)  If last PDU was NACK */
            if( nfcip_PFBisRNACK(gNfcip.lastPFB) )
 8007abc:	4b9f      	ldr	r3, [pc, #636]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007abe:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007ac2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007ac6:	2b40      	cmp	r3, #64	; 0x40
 8007ac8:	d128      	bne.n	8007b1c <nfcipInitiatorHandleDEP+0x144>
 8007aca:	4b9c      	ldr	r3, [pc, #624]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007acc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007ad0:	f003 0310 	and.w	r3, r3, #16
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d021      	beq.n	8007b1c <nfcipInitiatorHandleDEP+0x144>
            {
                /* Digital 1.0 14.15.5.6 2)  if NACKs failed raise protocol error  */
                if( gNfcip.cntNACKRetrys++ >= NFCIP_MAX_NACK_RETRYS )
 8007ad8:	4b98      	ldr	r3, [pc, #608]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007ada:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007ade:	1c5a      	adds	r2, r3, #1
 8007ae0:	b2d1      	uxtb	r1, r2
 8007ae2:	4a96      	ldr	r2, [pc, #600]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007ae4:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d901      	bls.n	8007af0 <nfcipInitiatorHandleDEP+0x118>
                {
                    return ERR_PROTO;
 8007aec:	230b      	movs	r3, #11
 8007aee:	e23c      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
                }
                
                /* Send NACK */
                nfcipLogI( " NFCIP(I) Sending NACK retry: %d \r\n", gNfcip.cntNACKRetrys );
                EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_NACK(gNfcip.pni), 0 ) );
 8007af0:	4b92      	ldr	r3, [pc, #584]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007af2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007af6:	f003 0303 	and.w	r3, r3, #3
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2100      	movs	r1, #0
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7ff fee9 	bl	80078dc <nfcipDEPControlMsg>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	82fb      	strh	r3, [r7, #22]
 8007b0e:	8afb      	ldrh	r3, [r7, #22]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d001      	beq.n	8007b18 <nfcipInitiatorHandleDEP+0x140>
 8007b14:	8afb      	ldrh	r3, [r7, #22]
 8007b16:	e228      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
                return ERR_BUSY;
 8007b18:	2302      	movs	r3, #2
 8007b1a:	e226      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
            }
            
            nfcipLogI( " NFCIP(I) Checking if to send ATN  ATNRetrys: %d \r\n", gNfcip.cntATNRetrys );
            
            /* Digital 1.0 14.15.5.6 3)  Otherwise send ATN */                            
            if( gNfcip.cntATNRetrys++ >= NFCIP_MAX_NACK_RETRYS )
 8007b1c:	4b87      	ldr	r3, [pc, #540]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007b1e:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	b2d1      	uxtb	r1, r2
 8007b26:	4a85      	ldr	r2, [pc, #532]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007b28:	f882 105a 	strb.w	r1, [r2, #90]	; 0x5a
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d901      	bls.n	8007b34 <nfcipInitiatorHandleDEP+0x15c>
            {
                return ERR_PROTO;
 8007b30:	230b      	movs	r3, #11
 8007b32:	e21a      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
            }
                            
            /* Send ATN */
            nfcipLogI( " NFCIP(I) Sending ATN \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_ATN(), 0 ) );
 8007b34:	2100      	movs	r1, #0
 8007b36:	2080      	movs	r0, #128	; 0x80
 8007b38:	f7ff fed0 	bl	80078dc <nfcipDEPControlMsg>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	82fb      	strh	r3, [r7, #22]
 8007b40:	8afb      	ldrh	r3, [r7, #22]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d001      	beq.n	8007b4a <nfcipInitiatorHandleDEP+0x172>
 8007b46:	8afb      	ldrh	r3, [r7, #22]
 8007b48:	e20f      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
            return ERR_BUSY;
 8007b4a:	2302      	movs	r3, #2
 8007b4c:	e20d      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
                }
#endif /* 0 */
            }

            /* Digital 1.1 16.12.5.4  if NACKs failed raise Transmission error  */
            if( gNfcip.cntNACKRetrys++ >= NFCIP_MAX_NACK_RETRYS )
 8007b4e:	4b7b      	ldr	r3, [pc, #492]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007b50:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b54:	1c5a      	adds	r2, r3, #1
 8007b56:	b2d1      	uxtb	r1, r2
 8007b58:	4a78      	ldr	r2, [pc, #480]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007b5a:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	d901      	bls.n	8007b66 <nfcipInitiatorHandleDEP+0x18e>
            {
                return ERR_FRAMING;
 8007b62:	2309      	movs	r3, #9
 8007b64:	e201      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
            }
                            
            /* Send NACK */
            nfcipLogI( " NFCIP(I) Sending NACK  \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_NACK(gNfcip.pni), 0 ) );
 8007b66:	4b75      	ldr	r3, [pc, #468]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007b68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b6c:	f003 0303 	and.w	r3, r3, #3
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	2100      	movs	r1, #0
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7ff feae 	bl	80078dc <nfcipDEPControlMsg>
 8007b80:	4603      	mov	r3, r0
 8007b82:	82fb      	strh	r3, [r7, #22]
 8007b84:	8afb      	ldrh	r3, [r7, #22]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d001      	beq.n	8007b8e <nfcipInitiatorHandleDEP+0x1b6>
 8007b8a:	8afb      	ldrh	r3, [r7, #22]
 8007b8c:	e1ed      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
            return ERR_BUSY;
 8007b8e:	2302      	movs	r3, #2
 8007b90:	e1eb      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
            
        case ERR_NONE:
            break;
            
        case ERR_BUSY:
            return ERR_BUSY;  /* Debug purposes */
 8007b92:	2302      	movs	r3, #2
 8007b94:	e1e9      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
            
        default:
            nfcipLogW( " NFCIP(I) Error: %d \r\n", rxRes );
            return rxRes;
 8007b96:	89fb      	ldrh	r3, [r7, #14]
 8007b98:	e1e7      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
            break;
 8007b9a:	bf00      	nop
    /*******************************************************************************/
    /* Rx OK check if valid DEP PDU                                                */
    /*******************************************************************************/
    
    /* Due to different modes on ST25R391x (with/without CRC) use NFC-DEP LEN instead of bytes retrieved */
    nfcDepLen = gNfcip.rxBuf[rxMsgIt++];
 8007b9c:	4b67      	ldr	r3, [pc, #412]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007b9e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007ba0:	7d7b      	ldrb	r3, [r7, #21]
 8007ba2:	1c59      	adds	r1, r3, #1
 8007ba4:	7579      	strb	r1, [r7, #21]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	74fb      	strb	r3, [r7, #19]
    
    nfcipLogD( " NFCIP(I) rx OK: %d bytes \r\n", nfcDepLen );
    
    /* Digital 1.0 14.15.5.5 Protocol Error  */
    if( gNfcip.rxBuf[rxMsgIt++] != NFCIP_RES )
 8007bac:	4b63      	ldr	r3, [pc, #396]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007bae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007bb0:	7d7b      	ldrb	r3, [r7, #21]
 8007bb2:	1c59      	adds	r1, r3, #1
 8007bb4:	7579      	strb	r1, [r7, #21]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	2bd5      	cmp	r3, #213	; 0xd5
 8007bbc:	d001      	beq.n	8007bc2 <nfcipInitiatorHandleDEP+0x1ea>
    {
    	nfcipLogW( " NFCIP(I) error %02X instead of %02X \r\n", gNfcip.rxBuf[--rxMsgIt], NFCIP_RES );
        return ERR_PROTO;
 8007bbe:	230b      	movs	r3, #11
 8007bc0:	e1d3      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
    }
    
    /* Digital 1.0 14.15.5.5 Protocol Error  */
    if( gNfcip.rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_DEP_RES )
 8007bc2:	4b5e      	ldr	r3, [pc, #376]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007bc4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007bc6:	7d7b      	ldrb	r3, [r7, #21]
 8007bc8:	1c59      	adds	r1, r3, #1
 8007bca:	7579      	strb	r1, [r7, #21]
 8007bcc:	4413      	add	r3, r2
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	2b07      	cmp	r3, #7
 8007bd2:	d001      	beq.n	8007bd8 <nfcipInitiatorHandleDEP+0x200>
    {
    	nfcipLogW( " NFCIP(I) error %02X instead of %02X \r\n", gNfcip.rxBuf[--rxMsgIt], NFCIP_CMD_DEP_RES );
        return ERR_PROTO;
 8007bd4:	230b      	movs	r3, #11
 8007bd6:	e1c8      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
    }
    
    rxPFB = gNfcip.rxBuf[rxMsgIt++];
 8007bd8:	4b58      	ldr	r3, [pc, #352]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007bda:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007bdc:	7d7b      	ldrb	r3, [r7, #21]
 8007bde:	1c59      	adds	r1, r3, #1
 8007be0:	7579      	strb	r1, [r7, #21]
 8007be2:	4413      	add	r3, r2
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	74bb      	strb	r3, [r7, #18]
    
    /*******************************************************************************/
    /* Check for valid PFB type                                                    */
    if( !(nfcip_PFBisSPDU( rxPFB ) || nfcip_PFBisRPDU( rxPFB ) || nfcip_PFBisIPDU( rxPFB )) )
 8007be8:	7cbb      	ldrb	r3, [r7, #18]
 8007bea:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007bee:	2b80      	cmp	r3, #128	; 0x80
 8007bf0:	d00b      	beq.n	8007c0a <nfcipInitiatorHandleDEP+0x232>
 8007bf2:	7cbb      	ldrb	r3, [r7, #18]
 8007bf4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007bf8:	2b40      	cmp	r3, #64	; 0x40
 8007bfa:	d006      	beq.n	8007c0a <nfcipInitiatorHandleDEP+0x232>
 8007bfc:	7cbb      	ldrb	r3, [r7, #18]
 8007bfe:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d001      	beq.n	8007c0a <nfcipInitiatorHandleDEP+0x232>
    {
        return ERR_PROTO;
 8007c06:	230b      	movs	r3, #11
 8007c08:	e1af      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
    }
        
    /*******************************************************************************/
    /* Digital 1.0 14.8.2.1  check if DID is expected and match -> Protocol Error  */
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 8007c0a:	4b4c      	ldr	r3, [pc, #304]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007c0c:	78db      	ldrb	r3, [r3, #3]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d015      	beq.n	8007c3e <nfcipInitiatorHandleDEP+0x266>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || !nfcip_PFBhasDID( rxPFB ) )
 8007c12:	4b4a      	ldr	r3, [pc, #296]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007c14:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007c16:	7d7b      	ldrb	r3, [r7, #21]
 8007c18:	1c59      	adds	r1, r3, #1
 8007c1a:	7579      	strb	r1, [r7, #21]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	781a      	ldrb	r2, [r3, #0]
 8007c20:	4b46      	ldr	r3, [pc, #280]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007c22:	78db      	ldrb	r3, [r3, #3]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d104      	bne.n	8007c32 <nfcipInitiatorHandleDEP+0x25a>
 8007c28:	7cbb      	ldrb	r3, [r7, #18]
 8007c2a:	f003 0304 	and.w	r3, r3, #4
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d101      	bne.n	8007c36 <nfcipInitiatorHandleDEP+0x25e>
        {
            return ERR_PROTO;
 8007c32:	230b      	movs	r3, #11
 8007c34:	e199      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 8007c36:	7d3b      	ldrb	r3, [r7, #20]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	753b      	strb	r3, [r7, #20]
 8007c3c:	e006      	b.n	8007c4c <nfcipInitiatorHandleDEP+0x274>
    }
    else if( nfcip_PFBhasDID( rxPFB ) )                 /* DID not expected but rcv */
 8007c3e:	7cbb      	ldrb	r3, [r7, #18]
 8007c40:	f003 0304 	and.w	r3, r3, #4
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d001      	beq.n	8007c4c <nfcipInitiatorHandleDEP+0x274>
    {
        return ERR_PROTO;
 8007c48:	230b      	movs	r3, #11
 8007c4a:	e18e      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
        /* MISRA 15.7 - Empty else */
    }
    
    /*******************************************************************************/
    /* Digital 1.0 14.6.2.8 & 14.6.3.11 NAD must not be used  */
    if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO ) 
 8007c4c:	4b3b      	ldr	r3, [pc, #236]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007c4e:	791b      	ldrb	r3, [r3, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d015      	beq.n	8007c80 <nfcipInitiatorHandleDEP+0x2a8>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.nad) || !nfcip_PFBhasNAD( rxPFB ) )
 8007c54:	4b39      	ldr	r3, [pc, #228]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007c56:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007c58:	7d7b      	ldrb	r3, [r7, #21]
 8007c5a:	1c59      	adds	r1, r3, #1
 8007c5c:	7579      	strb	r1, [r7, #21]
 8007c5e:	4413      	add	r3, r2
 8007c60:	781a      	ldrb	r2, [r3, #0]
 8007c62:	4b36      	ldr	r3, [pc, #216]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007c64:	791b      	ldrb	r3, [r3, #4]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d104      	bne.n	8007c74 <nfcipInitiatorHandleDEP+0x29c>
 8007c6a:	7cbb      	ldrb	r3, [r7, #18]
 8007c6c:	f003 0308 	and.w	r3, r3, #8
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d101      	bne.n	8007c78 <nfcipInitiatorHandleDEP+0x2a0>
        {
            return ERR_PROTO;
 8007c74:	230b      	movs	r3, #11
 8007c76:	e178      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
        }        
        optHdrLen++;                                    /* Inc header optional field cnt*/
 8007c78:	7d3b      	ldrb	r3, [r7, #20]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	753b      	strb	r3, [r7, #20]
 8007c7e:	e006      	b.n	8007c8e <nfcipInitiatorHandleDEP+0x2b6>
    }
    else if( nfcip_PFBhasNAD( rxPFB ) )                 /* NAD not expected but rcv */
 8007c80:	7cbb      	ldrb	r3, [r7, #18]
 8007c82:	f003 0308 	and.w	r3, r3, #8
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <nfcipInitiatorHandleDEP+0x2b6>
    {
        return ERR_PROTO;
 8007c8a:	230b      	movs	r3, #11
 8007c8c:	e16d      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
    }
       
    /*******************************************************************************/
    /* Process R-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisRPDU( rxPFB ) )
 8007c8e:	7cbb      	ldrb	r3, [r7, #18]
 8007c90:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007c94:	2b40      	cmp	r3, #64	; 0x40
 8007c96:	d153      	bne.n	8007d40 <nfcipInitiatorHandleDEP+0x368>
    {
        /*******************************************************************************/
        /* R ACK                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisRACK( rxPFB ) )
 8007c98:	7cbb      	ldrb	r3, [r7, #18]
 8007c9a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007c9e:	2b40      	cmp	r3, #64	; 0x40
 8007ca0:	d14a      	bne.n	8007d38 <nfcipInitiatorHandleDEP+0x360>
 8007ca2:	7cbb      	ldrb	r3, [r7, #18]
 8007ca4:	f003 0310 	and.w	r3, r3, #16
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d145      	bne.n	8007d38 <nfcipInitiatorHandleDEP+0x360>
        {
            nfcipLogI( " NFCIP(I) Rcvd ACK  \r\n" );
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 8007cac:	4b23      	ldr	r3, [pc, #140]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007cae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	7cbb      	ldrb	r3, [r7, #18]
 8007cb6:	f003 0303 	and.w	r3, r3, #3
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d11c      	bne.n	8007cf8 <nfcipInitiatorHandleDEP+0x320>
            {
                /* 14.12.3.3 R-ACK with correct PNI -> Increment */
                gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 8007cbe:	4b1f      	ldr	r3, [pc, #124]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	f003 0303 	and.w	r3, r3, #3
 8007ccc:	b2da      	uxtb	r2, r3
 8007cce:	4b1b      	ldr	r3, [pc, #108]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007cd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                                
                /* R-ACK while not performing chaining -> Protocol error*/
                if( !gNfcip.isTxChaining )
 8007cd4:	4b19      	ldr	r3, [pc, #100]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007cd6:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8007cda:	f083 0301 	eor.w	r3, r3, #1
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d001      	beq.n	8007ce8 <nfcipInitiatorHandleDEP+0x310>
                {
                    return ERR_PROTO;
 8007ce4:	230b      	movs	r3, #11
 8007ce6:	e140      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
                }
                
                nfcipClearCounters();
 8007ce8:	f7ff fe58 	bl	800799c <nfcipClearCounters>
                gNfcip.state = NFCIP_ST_INIT_DEP_IDLE;
 8007cec:	4b13      	ldr	r3, [pc, #76]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007cee:	2204      	movs	r2, #4
 8007cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                return ERR_NONE;                            /* This block has been transmitted */
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	e138      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
            }
            else  /* Digital 1.0 14.12.4.5 ACK with wrong PNI Initiator may retransmit */
            {
                if( gNfcip.cntTxRetrys++ >= NFCIP_MAX_TX_RETRYS )
 8007cf8:	4b10      	ldr	r3, [pc, #64]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007cfa:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007cfe:	1c5a      	adds	r2, r3, #1
 8007d00:	b2d1      	uxtb	r1, r2
 8007d02:	4a0e      	ldr	r2, [pc, #56]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007d04:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d901      	bls.n	8007d10 <nfcipInitiatorHandleDEP+0x338>
                {
                    return ERR_PROTO;
 8007d0c:	230b      	movs	r3, #11
 8007d0e:	e12c      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
                /* Extended the MAY in Digital 1.0 14.12.4.5 to only reTransmit if the ACK
                 * is for the previous DEP, otherwise raise Protocol immediately 
                 * If the PNI difference is more than 1 it is worthless to reTransmit 3x
                 * and after raise the error                                              */
                
                if( nfcip_PNIDec( gNfcip.pni ) ==  nfcip_PBF_PNI( rxPFB ) )
 8007d10:	4b0a      	ldr	r3, [pc, #40]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007d12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d16:	3b01      	subs	r3, #1
 8007d18:	b2da      	uxtb	r2, r3
 8007d1a:	7cbb      	ldrb	r3, [r7, #18]
 8007d1c:	4053      	eors	r3, r2
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	f003 0303 	and.w	r3, r3, #3
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d105      	bne.n	8007d34 <nfcipInitiatorHandleDEP+0x35c>
                {
                    /* ReTransmit */
                    nfcipLogI( " NFCIP(I) Rcvd ACK prev PNI -> reTx \r\n" );
                    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 8007d28:	4b04      	ldr	r3, [pc, #16]	; (8007d3c <nfcipInitiatorHandleDEP+0x364>)
 8007d2a:	2205      	movs	r2, #5
 8007d2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    return ERR_BUSY;
 8007d30:	2302      	movs	r3, #2
 8007d32:	e11a      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
                }
                
                nfcipLogI( " NFCIP(I) Rcvd ACK unexpected far PNI -> Error \r\n" );
                return ERR_PROTO;
 8007d34:	230b      	movs	r3, #11
 8007d36:	e118      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
            }
        }
        else /* Digital 1.0 - 14.12.5.2 Target must never send NACK  */
        {            
            return ERR_PROTO;
 8007d38:	230b      	movs	r3, #11
 8007d3a:	e116      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
 8007d3c:	20000884 	.word	0x20000884
    }
    
    /*******************************************************************************/
    /* Process S-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisSPDU( rxPFB ) )                                
 8007d40:	7cbb      	ldrb	r3, [r7, #18]
 8007d42:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007d46:	2b80      	cmp	r3, #128	; 0x80
 8007d48:	f040 8094 	bne.w	8007e74 <nfcipInitiatorHandleDEP+0x49c>
    {
        nfcipLogI( " NFCIP(I) Rcvd S-PDU  \r\n" );
        /*******************************************************************************/
        /* S ATN                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisSATN( rxPFB ) )                         /* If is a S-ATN        */
 8007d4c:	7cbb      	ldrb	r3, [r7, #18]
 8007d4e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007d52:	2b80      	cmp	r3, #128	; 0x80
 8007d54:	d146      	bne.n	8007de4 <nfcipInitiatorHandleDEP+0x40c>
 8007d56:	7cbb      	ldrb	r3, [r7, #18]
 8007d58:	f003 0310 	and.w	r3, r3, #16
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d141      	bne.n	8007de4 <nfcipInitiatorHandleDEP+0x40c>
        {
            nfcipLogI( " NFCIP(I) Rcvd ATN  \r\n" );
            if( nfcip_PFBisSATN( gNfcip.lastPFB ) )            /* Check if is expected */
 8007d60:	4b84      	ldr	r3, [pc, #528]	; (8007f74 <nfcipInitiatorHandleDEP+0x59c>)
 8007d62:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007d66:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007d6a:	2b80      	cmp	r3, #128	; 0x80
 8007d6c:	d138      	bne.n	8007de0 <nfcipInitiatorHandleDEP+0x408>
 8007d6e:	4b81      	ldr	r3, [pc, #516]	; (8007f74 <nfcipInitiatorHandleDEP+0x59c>)
 8007d70:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007d74:	f003 0310 	and.w	r3, r3, #16
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d131      	bne.n	8007de0 <nfcipInitiatorHandleDEP+0x408>
            {  
                gNfcip.cntATNRetrys = 0;                       /* Clear ATN counter    */
 8007d7c:	4b7d      	ldr	r3, [pc, #500]	; (8007f74 <nfcipInitiatorHandleDEP+0x59c>)
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
                
                /* Although spec is not clear NFC Forum Digital test is expecting to
                 * retransmit upon receiving ATN_RES */
                if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 8007d84:	4b7b      	ldr	r3, [pc, #492]	; (8007f74 <nfcipInitiatorHandleDEP+0x59c>)
 8007d86:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007d8a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007d8e:	2b80      	cmp	r3, #128	; 0x80
 8007d90:	d114      	bne.n	8007dbc <nfcipInitiatorHandleDEP+0x3e4>
 8007d92:	4b78      	ldr	r3, [pc, #480]	; (8007f74 <nfcipInitiatorHandleDEP+0x59c>)
 8007d94:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007d98:	f003 0310 	and.w	r3, r3, #16
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00d      	beq.n	8007dbc <nfcipInitiatorHandleDEP+0x3e4>
                {
                    nfcipLogI( " NFCIP(I) Rcvd ATN  -> reTx RTOX_RES \r\n" );
                    EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), gNfcip.lastRTOX ) );
 8007da0:	4b74      	ldr	r3, [pc, #464]	; (8007f74 <nfcipInitiatorHandleDEP+0x59c>)
 8007da2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8007da6:	4619      	mov	r1, r3
 8007da8:	2090      	movs	r0, #144	; 0x90
 8007daa:	f7ff fd97 	bl	80078dc <nfcipDEPControlMsg>
 8007dae:	4603      	mov	r3, r0
 8007db0:	82fb      	strh	r3, [r7, #22]
 8007db2:	8afb      	ldrh	r3, [r7, #22]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d011      	beq.n	8007ddc <nfcipInitiatorHandleDEP+0x404>
 8007db8:	8afb      	ldrh	r3, [r7, #22]
 8007dba:	e0d6      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
                }
                else
                {
                    /* ReTransmit ? */
                    if( gNfcip.cntTxRetrys++ >= NFCIP_MAX_TX_RETRYS )
 8007dbc:	4b6d      	ldr	r3, [pc, #436]	; (8007f74 <nfcipInitiatorHandleDEP+0x59c>)
 8007dbe:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007dc2:	1c5a      	adds	r2, r3, #1
 8007dc4:	b2d1      	uxtb	r1, r2
 8007dc6:	4a6b      	ldr	r2, [pc, #428]	; (8007f74 <nfcipInitiatorHandleDEP+0x59c>)
 8007dc8:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d901      	bls.n	8007dd4 <nfcipInitiatorHandleDEP+0x3fc>
                    {
                        return ERR_PROTO;
 8007dd0:	230b      	movs	r3, #11
 8007dd2:	e0ca      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
                    }
                    
                    nfcipLogI( " NFCIP(I) Rcvd ATN  -> reTx  PNI: %d \r\n", gNfcip.pni );
                    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 8007dd4:	4b67      	ldr	r3, [pc, #412]	; (8007f74 <nfcipInitiatorHandleDEP+0x59c>)
 8007dd6:	2205      	movs	r2, #5
 8007dd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                }
                
                return ERR_BUSY;
 8007ddc:	2302      	movs	r3, #2
 8007dde:	e0c4      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
            }
            else                                               /* Digital 1.0  14.12.4.4 & 14.12.4.8 */
            {
                return ERR_PROTO;
 8007de0:	230b      	movs	r3, #11
 8007de2:	e0c2      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
            }
        }
        /*******************************************************************************/
        /* S TO                                                                        */
        /*******************************************************************************/
        else if( nfcip_PFBisSTO( rxPFB ) )                     /* If is a S-TO (RTOX)  */
 8007de4:	7cbb      	ldrb	r3, [r7, #18]
 8007de6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007dea:	2b80      	cmp	r3, #128	; 0x80
 8007dec:	d140      	bne.n	8007e70 <nfcipInitiatorHandleDEP+0x498>
 8007dee:	7cbb      	ldrb	r3, [r7, #18]
 8007df0:	f003 0310 	and.w	r3, r3, #16
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d03b      	beq.n	8007e70 <nfcipInitiatorHandleDEP+0x498>
        {
            nfcipLogI( " NFCIP(I) Rcvd TO  \r\n" );
            
            rxRTOX = gNfcip.rxBuf[rxMsgIt++];
 8007df8:	4b5e      	ldr	r3, [pc, #376]	; (8007f74 <nfcipInitiatorHandleDEP+0x59c>)
 8007dfa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007dfc:	7d7b      	ldrb	r3, [r7, #21]
 8007dfe:	1c59      	adds	r1, r3, #1
 8007e00:	7579      	strb	r1, [r7, #21]
 8007e02:	4413      	add	r3, r2
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	747b      	strb	r3, [r7, #17]
            
            /* Digital 1.1 16.12.4.3 - Initiator MAY stop accepting subsequent RTOX Req   *
             *                       - RTOX request to an ATN -> Protocol error           */
            if( (gNfcip.cntRTOXRetrys++ > NFCIP_MAX_RTOX_RETRYS) || nfcip_PFBisSATN( gNfcip.lastPFB ) )
 8007e08:	4b5a      	ldr	r3, [pc, #360]	; (8007f74 <nfcipInitiatorHandleDEP+0x59c>)
 8007e0a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007e0e:	1c5a      	adds	r2, r3, #1
 8007e10:	b2d1      	uxtb	r1, r2
 8007e12:	4a58      	ldr	r2, [pc, #352]	; (8007f74 <nfcipInitiatorHandleDEP+0x59c>)
 8007e14:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
 8007e18:	2b03      	cmp	r3, #3
 8007e1a:	d80d      	bhi.n	8007e38 <nfcipInitiatorHandleDEP+0x460>
 8007e1c:	4b55      	ldr	r3, [pc, #340]	; (8007f74 <nfcipInitiatorHandleDEP+0x59c>)
 8007e1e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007e22:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007e26:	2b80      	cmp	r3, #128	; 0x80
 8007e28:	d108      	bne.n	8007e3c <nfcipInitiatorHandleDEP+0x464>
 8007e2a:	4b52      	ldr	r3, [pc, #328]	; (8007f74 <nfcipInitiatorHandleDEP+0x59c>)
 8007e2c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007e30:	f003 0310 	and.w	r3, r3, #16
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d101      	bne.n	8007e3c <nfcipInitiatorHandleDEP+0x464>
            {
                return ERR_PROTO;
 8007e38:	230b      	movs	r3, #11
 8007e3a:	e096      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
            }
            
            /* Digital 1.1 16.8.4.1 RTOX must be between [1,59] */
            if( (rxRTOX < NFCIP_INIT_MIN_RTOX) || (rxRTOX > NFCIP_INIT_MAX_RTOX) )
 8007e3c:	7c7b      	ldrb	r3, [r7, #17]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d002      	beq.n	8007e48 <nfcipInitiatorHandleDEP+0x470>
 8007e42:	7c7b      	ldrb	r3, [r7, #17]
 8007e44:	2b3b      	cmp	r3, #59	; 0x3b
 8007e46:	d901      	bls.n	8007e4c <nfcipInitiatorHandleDEP+0x474>
            {
                return ERR_PROTO;
 8007e48:	230b      	movs	r3, #11
 8007e4a:	e08e      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
            }
            
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), rxRTOX ) );
 8007e4c:	7c7b      	ldrb	r3, [r7, #17]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	2090      	movs	r0, #144	; 0x90
 8007e52:	f7ff fd43 	bl	80078dc <nfcipDEPControlMsg>
 8007e56:	4603      	mov	r3, r0
 8007e58:	82fb      	strh	r3, [r7, #22]
 8007e5a:	8afb      	ldrh	r3, [r7, #22]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d001      	beq.n	8007e64 <nfcipInitiatorHandleDEP+0x48c>
 8007e60:	8afb      	ldrh	r3, [r7, #22]
 8007e62:	e082      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
            gNfcip.lastRTOX = rxRTOX;
 8007e64:	4a43      	ldr	r2, [pc, #268]	; (8007f74 <nfcipInitiatorHandleDEP+0x59c>)
 8007e66:	7c7b      	ldrb	r3, [r7, #17]
 8007e68:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
            
            return ERR_BUSY;
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	e07c      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
        }
        else
        {
            /* Unexpected S-PDU */
            return ERR_PROTO;                       /*  PRQA S  2880 # MISRA 2.1 - Guard code to prevent unexpected behavior */
 8007e70:	230b      	movs	r3, #11
 8007e72:	e07a      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
    }
    
    /*******************************************************************************/
    /* Process I-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisIPDU( rxPFB ) )
 8007e74:	7cbb      	ldrb	r3, [r7, #18]
 8007e76:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d174      	bne.n	8007f68 <nfcipInitiatorHandleDEP+0x590>
    {
        if( gNfcip.pni != nfcip_PBF_PNI( rxPFB ) )
 8007e7e:	4b3d      	ldr	r3, [pc, #244]	; (8007f74 <nfcipInitiatorHandleDEP+0x59c>)
 8007e80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e84:	461a      	mov	r2, r3
 8007e86:	7cbb      	ldrb	r3, [r7, #18]
 8007e88:	f003 0303 	and.w	r3, r3, #3
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d001      	beq.n	8007e94 <nfcipInitiatorHandleDEP+0x4bc>
        {
            nfcipLogI( " NFCIP(I) Rcvd IPDU wrong PNI     curPNI: %d rxPNI: %d \r\n", gNfcip.pni  , nfcip_PBF_PNI( rxPFB ) );
            return ERR_PROTO;
 8007e90:	230b      	movs	r3, #11
 8007e92:	e06a      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
        }
        
        nfcipLogD( " NFCIP(I) Rcvd IPDU OK    PNI: %d \r\n", gNfcip.pni );
        
        /* 14.12.3.3 I-PDU with correct PNI -> Increment */
        gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 8007e94:	4b37      	ldr	r3, [pc, #220]	; (8007f74 <nfcipInitiatorHandleDEP+0x59c>)
 8007e96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	f003 0303 	and.w	r3, r3, #3
 8007ea2:	b2da      	uxtb	r2, r3
 8007ea4:	4b33      	ldr	r3, [pc, #204]	; (8007f74 <nfcipInitiatorHandleDEP+0x59c>)
 8007ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                
        
        /* Successful data Exchange */
        nfcipClearCounters();
 8007eaa:	f7ff fd77 	bl	800799c <nfcipClearCounters>
        *outActRxLen  = ((uint16_t)nfcDepLen - RFAL_NFCDEP_DEP_HEADER - (uint16_t)optHdrLen);
 8007eae:	7cfb      	ldrb	r3, [r7, #19]
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	7d3b      	ldrb	r3, [r7, #20]
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	3b04      	subs	r3, #4
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	801a      	strh	r2, [r3, #0]
        
        if( (&gNfcip.rxBuf[gNfcip.rxBufPaylPos] != &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen]) && (*outActRxLen > 0U) )
 8007ec2:	4b2c      	ldr	r3, [pc, #176]	; (8007f74 <nfcipInitiatorHandleDEP+0x59c>)
 8007ec4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8007ec8:	461a      	mov	r2, r3
 8007eca:	7d3b      	ldrb	r3, [r7, #20]
 8007ecc:	3304      	adds	r3, #4
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d013      	beq.n	8007efa <nfcipInitiatorHandleDEP+0x522>
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	881b      	ldrh	r3, [r3, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00f      	beq.n	8007efa <nfcipInitiatorHandleDEP+0x522>
        {
            ST_MEMMOVE( &gNfcip.rxBuf[gNfcip.rxBufPaylPos], &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen], *outActRxLen );
 8007eda:	4b26      	ldr	r3, [pc, #152]	; (8007f74 <nfcipInitiatorHandleDEP+0x59c>)
 8007edc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ede:	4a25      	ldr	r2, [pc, #148]	; (8007f74 <nfcipInitiatorHandleDEP+0x59c>)
 8007ee0:	f892 2071 	ldrb.w	r2, [r2, #113]	; 0x71
 8007ee4:	1898      	adds	r0, r3, r2
 8007ee6:	4b23      	ldr	r3, [pc, #140]	; (8007f74 <nfcipInitiatorHandleDEP+0x59c>)
 8007ee8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007eea:	7d3b      	ldrb	r3, [r7, #20]
 8007eec:	3304      	adds	r3, #4
 8007eee:	18d1      	adds	r1, r2, r3
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	f005 fd21 	bl	800d93c <memmove>
        }

        /*******************************************************************************/
        /* Check if target is indicating chaining MI                                   */
        /*******************************************************************************/
        if( nfcip_PFBisIMI( rxPFB ) )
 8007efa:	7cbb      	ldrb	r3, [r7, #18]
 8007efc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d127      	bne.n	8007f54 <nfcipInitiatorHandleDEP+0x57c>
 8007f04:	7cbb      	ldrb	r3, [r7, #18]
 8007f06:	f003 0310 	and.w	r3, r3, #16
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d022      	beq.n	8007f54 <nfcipInitiatorHandleDEP+0x57c>
        {
            gNfcip.isRxChaining = true;
 8007f0e:	4b19      	ldr	r3, [pc, #100]	; (8007f74 <nfcipInitiatorHandleDEP+0x59c>)
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            *outIsChaining      = true;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	701a      	strb	r2, [r3, #0]
            
            nfcipLogD( " NFCIP(I) Rcvd IPDU OK w MI -> ACK \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 8007f1c:	4b15      	ldr	r3, [pc, #84]	; (8007f74 <nfcipInitiatorHandleDEP+0x59c>)
 8007f1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f22:	f003 0303 	and.w	r3, r3, #3
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f2c:	b2d8      	uxtb	r0, r3
 8007f2e:	4b11      	ldr	r3, [pc, #68]	; (8007f74 <nfcipInitiatorHandleDEP+0x59c>)
 8007f30:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007f32:	7d7b      	ldrb	r3, [r7, #21]
 8007f34:	1c59      	adds	r1, r3, #1
 8007f36:	7579      	strb	r1, [r7, #21]
 8007f38:	4413      	add	r3, r2
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	f7ff fccd 	bl	80078dc <nfcipDEPControlMsg>
 8007f42:	4603      	mov	r3, r0
 8007f44:	82fb      	strh	r3, [r7, #22]
 8007f46:	8afb      	ldrh	r3, [r7, #22]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d001      	beq.n	8007f50 <nfcipInitiatorHandleDEP+0x578>
 8007f4c:	8afb      	ldrh	r3, [r7, #22]
 8007f4e:	e00c      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
            
            return ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 8007f50:	230d      	movs	r3, #13
 8007f52:	e00a      	b.n	8007f6a <nfcipInitiatorHandleDEP+0x592>
        }
        else
        {
            gNfcip.isRxChaining = false;
 8007f54:	4b07      	ldr	r3, [pc, #28]	; (8007f74 <nfcipInitiatorHandleDEP+0x59c>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            gNfcip.state        = NFCIP_ST_INIT_DEP_IDLE;
 8007f5c:	4b05      	ldr	r3, [pc, #20]	; (8007f74 <nfcipInitiatorHandleDEP+0x59c>)
 8007f5e:	2204      	movs	r2, #4
 8007f60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            
            ret = ERR_NONE;    /* Data exchange done */
 8007f64:	2300      	movs	r3, #0
 8007f66:	82fb      	strh	r3, [r7, #22]
        }
    }
    return ret;
 8007f68:	8afb      	ldrh	r3, [r7, #22]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3718      	adds	r7, #24
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	20000884 	.word	0x20000884

08007f78 <nfcipTargetHandleRX>:


/*******************************************************************************/
static ReturnCode nfcipTargetHandleRX( ReturnCode rxRes, uint16_t *outActRxLen, bool *outIsChaining )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b08c      	sub	sp, #48	; 0x30
 8007f7c:	af04      	add	r7, sp, #16
 8007f7e:	4603      	mov	r3, r0
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
 8007f84:	81fb      	strh	r3, [r7, #14]
    uint8_t    rxPFB;
    uint8_t    optHdrLen;
    uint8_t    resBuf[RFAL_NFCDEP_HEADER_PAD + NFCIP_TARGET_RES_MAX];
        
    
    ret        = ERR_INTERNAL;
 8007f86:	230c      	movs	r3, #12
 8007f88:	83fb      	strh	r3, [r7, #30]
    rxMsgIt    = 0;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	777b      	strb	r3, [r7, #29]
    optHdrLen  = 0;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	773b      	strb	r3, [r7, #28]
    
    *outActRxLen    = 0;
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2200      	movs	r2, #0
 8007f96:	801a      	strh	r2, [r3, #0]
    *outIsChaining  = false;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	701a      	strb	r2, [r3, #0]
    
    
    /*******************************************************************************/
    /* Handle reception errors                                                     */
    /*******************************************************************************/
    switch( rxRes )
 8007f9e:	89fb      	ldrh	r3, [r7, #14]
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d007      	beq.n	8007fb4 <nfcipTargetHandleRX+0x3c>
 8007fa4:	2b25      	cmp	r3, #37	; 0x25
 8007fa6:	d002      	beq.n	8007fae <nfcipTargetHandleRX+0x36>
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d01c      	beq.n	8007fe6 <nfcipTargetHandleRX+0x6e>
 8007fac:	e005      	b.n	8007fba <nfcipTargetHandleRX+0x42>
        case ERR_NONE:
            break;
            
        case ERR_LINK_LOSS:
            nfcipLogW( " NFCIP(T) Error: %d \r\n", rxRes );
            return rxRes;
 8007fae:	89fb      	ldrh	r3, [r7, #14]
 8007fb0:	f000 bc23 	b.w	80087fa <nfcipTargetHandleRX+0x882>
            
        case ERR_BUSY:
            return ERR_BUSY;  /* Debug purposes */
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	f000 bc20 	b.w	80087fa <nfcipTargetHandleRX+0x882>
             * The Target MUST always stay in receive mode when a                          *
             * Transmission Error or a Protocol Error occurs.                              *
             *                                                                             *
             * Do not push Transmission/Protocol Errors to upper layer in Listen Mode #766 */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8007fba:	4ba1      	ldr	r3, [pc, #644]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 8007fbc:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8007fbe:	4ba0      	ldr	r3, [pc, #640]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 8007fc0:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 8007fc4:	4b9e      	ldr	r3, [pc, #632]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 8007fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fcc:	9202      	str	r2, [sp, #8]
 8007fce:	2204      	movs	r2, #4
 8007fd0:	9201      	str	r2, [sp, #4]
 8007fd2:	9300      	str	r3, [sp, #0]
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	460a      	mov	r2, r1
 8007fd8:	2100      	movs	r1, #0
 8007fda:	2000      	movs	r0, #0
 8007fdc:	f003 fc46 	bl	800b86c <rfalTransceiveBlockingTx>
            return ERR_BUSY;
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	f000 bc0a 	b.w	80087fa <nfcipTargetHandleRX+0x882>
            break;
 8007fe6:	bf00      	nop
    /*******************************************************************************/
    /* Rx OK check if valid DEP PDU                                                */
    /*******************************************************************************/
    
    /* Due to different modes on ST25R391x (with/without CRC) use NFC-DEP LEN instead of bytes retrieved */
    nfcDepLen = gNfcip.rxBuf[rxMsgIt++];
 8007fe8:	4b95      	ldr	r3, [pc, #596]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 8007fea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007fec:	7f7b      	ldrb	r3, [r7, #29]
 8007fee:	1c59      	adds	r1, r3, #1
 8007ff0:	7779      	strb	r1, [r7, #29]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	76fb      	strb	r3, [r7, #27]
        
    nfcipLogD( " NFCIP(T) rx OK: %d bytes \r\n", nfcDepLen );
    
    if( gNfcip.rxBuf[rxMsgIt++] != NFCIP_REQ )
 8007ff8:	4b91      	ldr	r3, [pc, #580]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 8007ffa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007ffc:	7f7b      	ldrb	r3, [r7, #29]
 8007ffe:	1c59      	adds	r1, r3, #1
 8008000:	7779      	strb	r1, [r7, #29]
 8008002:	4413      	add	r3, r2
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	2bd4      	cmp	r3, #212	; 0xd4
 8008008:	d014      	beq.n	8008034 <nfcipTargetHandleRX+0xbc>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800800a:	4b8d      	ldr	r3, [pc, #564]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 800800c:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800800e:	4b8c      	ldr	r3, [pc, #560]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 8008010:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 8008014:	4b8a      	ldr	r3, [pc, #552]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 8008016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008018:	f04f 32ff 	mov.w	r2, #4294967295
 800801c:	9202      	str	r2, [sp, #8]
 800801e:	2204      	movs	r2, #4
 8008020:	9201      	str	r2, [sp, #4]
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	4603      	mov	r3, r0
 8008026:	460a      	mov	r2, r1
 8008028:	2100      	movs	r1, #0
 800802a:	2000      	movs	r0, #0
 800802c:	f003 fc1e 	bl	800b86c <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore bad request */
 8008030:	2302      	movs	r3, #2
 8008032:	e3e2      	b.n	80087fa <nfcipTargetHandleRX+0x882>
    
    
    /*******************************************************************************/
    /* Check whether target rcvd a normal DEP or deactivation request              */
    /*******************************************************************************/
    switch( gNfcip.rxBuf[rxMsgIt++] )
 8008034:	4b82      	ldr	r3, [pc, #520]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 8008036:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008038:	7f7b      	ldrb	r3, [r7, #29]
 800803a:	1c59      	adds	r1, r3, #1
 800803c:	7779      	strb	r1, [r7, #29]
 800803e:	4413      	add	r3, r2
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	2b08      	cmp	r3, #8
 8008044:	d004      	beq.n	8008050 <nfcipTargetHandleRX+0xd8>
 8008046:	2b0a      	cmp	r3, #10
 8008048:	d02f      	beq.n	80080aa <nfcipTargetHandleRX+0x132>
 800804a:	2b06      	cmp	r3, #6
 800804c:	d06f      	beq.n	800812e <nfcipTargetHandleRX+0x1b6>
 800804e:	e059      	b.n	8008104 <nfcipTargetHandleRX+0x18c>
            
            nfcipLogI( " NFCIP(T) rx DSL \r\n" );
            
            /* Digital 1.0  14.9.1.2 If DID is used and incorrect ignore it */
            /* [Digital 1.0, 16.9.1.2]: If DID == 0, Target SHALL ignore DSL_REQ with DID */
            if (   (((gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_DID)) && (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO) )
 8008050:	4b7b      	ldr	r3, [pc, #492]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 8008052:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008054:	7f7b      	ldrb	r3, [r7, #29]
 8008056:	1c59      	adds	r1, r3, #1
 8008058:	7779      	strb	r1, [r7, #29]
 800805a:	4413      	add	r3, r2
 800805c:	781a      	ldrb	r2, [r3, #0]
 800805e:	4b78      	ldr	r3, [pc, #480]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 8008060:	78db      	ldrb	r3, [r3, #3]
 8008062:	429a      	cmp	r2, r3
 8008064:	d102      	bne.n	800806c <nfcipTargetHandleRX+0xf4>
 8008066:	7efb      	ldrb	r3, [r7, #27]
 8008068:	2b04      	cmp	r3, #4
 800806a:	d003      	beq.n	8008074 <nfcipTargetHandleRX+0xfc>
 800806c:	4b74      	ldr	r3, [pc, #464]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 800806e:	78db      	ldrb	r3, [r3, #3]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d106      	bne.n	8008082 <nfcipTargetHandleRX+0x10a>
                || ((gNfcip.cfg.did == RFAL_NFCDEP_DID_NO) && (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_NO_DID))
 8008074:	4b72      	ldr	r3, [pc, #456]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 8008076:	78db      	ldrb	r3, [r3, #3]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d104      	bne.n	8008086 <nfcipTargetHandleRX+0x10e>
 800807c:	7efb      	ldrb	r3, [r7, #27]
 800807e:	2b03      	cmp	r3, #3
 8008080:	d001      	beq.n	8008086 <nfcipTargetHandleRX+0x10e>
               )
            {
                nfcipLogI( " NFCIP(T) DSL wrong DID, ignoring \r\n" );
                return ERR_BUSY;
 8008082:	2302      	movs	r3, #2
 8008084:	e3b9      	b.n	80087fa <nfcipTargetHandleRX+0x882>
            }
            
            nfcipTx( NFCIP_CMD_DSL_RES, resBuf, NULL, 0, 0, NFCIP_NO_FWT );
 8008086:	f107 0114 	add.w	r1, r7, #20
 800808a:	f04f 33ff 	mov.w	r3, #4294967295
 800808e:	9301      	str	r3, [sp, #4]
 8008090:	2300      	movs	r3, #0
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	2300      	movs	r3, #0
 8008096:	2200      	movs	r2, #0
 8008098:	2009      	movs	r0, #9
 800809a:	f000 fbb7 	bl	800880c <nfcipTx>
            
            gNfcip.state = NFCIP_ST_TARG_DEP_SLEEP;
 800809e:	4b68      	ldr	r3, [pc, #416]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 80080a0:	2210      	movs	r2, #16
 80080a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_SLEEP_REQ;
 80080a6:	2320      	movs	r3, #32
 80080a8:	e3a7      	b.n	80087fa <nfcipTargetHandleRX+0x882>
            
            nfcipLogI( " NFCIP(T) rx RLS \r\n" );
            
            /* Digital 1.0  14.10.1.2 If DID is used and incorrect ignore it */
            /* [Digital 1.0, 16.10.2.2]: If DID == 0, Target SHALL ignore DSL_REQ with DID */
            if (   (((gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_DID)) && (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO) )
 80080aa:	4b65      	ldr	r3, [pc, #404]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 80080ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80080ae:	7f7b      	ldrb	r3, [r7, #29]
 80080b0:	1c59      	adds	r1, r3, #1
 80080b2:	7779      	strb	r1, [r7, #29]
 80080b4:	4413      	add	r3, r2
 80080b6:	781a      	ldrb	r2, [r3, #0]
 80080b8:	4b61      	ldr	r3, [pc, #388]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 80080ba:	78db      	ldrb	r3, [r3, #3]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d102      	bne.n	80080c6 <nfcipTargetHandleRX+0x14e>
 80080c0:	7efb      	ldrb	r3, [r7, #27]
 80080c2:	2b04      	cmp	r3, #4
 80080c4:	d003      	beq.n	80080ce <nfcipTargetHandleRX+0x156>
 80080c6:	4b5e      	ldr	r3, [pc, #376]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 80080c8:	78db      	ldrb	r3, [r3, #3]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d106      	bne.n	80080dc <nfcipTargetHandleRX+0x164>
                || ((gNfcip.cfg.did == RFAL_NFCDEP_DID_NO) && (nfcDepLen > RFAL_NFCDEP_DSL_RLS_LEN_NO_DID))
 80080ce:	4b5c      	ldr	r3, [pc, #368]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 80080d0:	78db      	ldrb	r3, [r3, #3]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d104      	bne.n	80080e0 <nfcipTargetHandleRX+0x168>
 80080d6:	7efb      	ldrb	r3, [r7, #27]
 80080d8:	2b03      	cmp	r3, #3
 80080da:	d901      	bls.n	80080e0 <nfcipTargetHandleRX+0x168>
               )
            {
                nfcipLogI( " NFCIP(T) RLS wrong DID, ignoring \r\n" );
                return ERR_BUSY;
 80080dc:	2302      	movs	r3, #2
 80080de:	e38c      	b.n	80087fa <nfcipTargetHandleRX+0x882>
            }
                
            nfcipTx( NFCIP_CMD_RLS_RES, resBuf, NULL, 0, 0, NFCIP_NO_FWT );
 80080e0:	f107 0114 	add.w	r1, r7, #20
 80080e4:	f04f 33ff 	mov.w	r3, #4294967295
 80080e8:	9301      	str	r3, [sp, #4]
 80080ea:	2300      	movs	r3, #0
 80080ec:	9300      	str	r3, [sp, #0]
 80080ee:	2300      	movs	r3, #0
 80080f0:	2200      	movs	r2, #0
 80080f2:	200b      	movs	r0, #11
 80080f4:	f000 fb8a 	bl	800880c <nfcipTx>
            
            gNfcip.state = NFCIP_ST_TARG_DEP_IDLE;
 80080f8:	4b51      	ldr	r3, [pc, #324]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 80080fa:	220c      	movs	r2, #12
 80080fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_RELEASE_REQ;
 8008100:	231f      	movs	r3, #31
 8008102:	e37a      	b.n	80087fa <nfcipTargetHandleRX+0x882>
        default:
            
            /* Don't go to NFCIP_ST_TARG_DEP_IDLE state as it needs to ignore this    *
             * invalid frame, and keep waiting for more frames                        */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8008104:	4b4e      	ldr	r3, [pc, #312]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 8008106:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8008108:	4b4d      	ldr	r3, [pc, #308]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 800810a:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 800810e:	4b4c      	ldr	r3, [pc, #304]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 8008110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008112:	f04f 32ff 	mov.w	r2, #4294967295
 8008116:	9202      	str	r2, [sp, #8]
 8008118:	2204      	movs	r2, #4
 800811a:	9201      	str	r2, [sp, #4]
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	4603      	mov	r3, r0
 8008120:	460a      	mov	r2, r1
 8008122:	2100      	movs	r1, #0
 8008124:	2000      	movs	r0, #0
 8008126:	f003 fba1 	bl	800b86c <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad frame */
 800812a:	2302      	movs	r3, #2
 800812c:	e365      	b.n	80087fa <nfcipTargetHandleRX+0x882>
            break;                                /* Continue to normal DEP processing */
 800812e:	bf00      	nop
    }
    
    /*******************************************************************************/
    
    rxPFB = gNfcip.rxBuf[rxMsgIt++];                    /* Store rcvd PFB  */
 8008130:	4b43      	ldr	r3, [pc, #268]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 8008132:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008134:	7f7b      	ldrb	r3, [r7, #29]
 8008136:	1c59      	adds	r1, r3, #1
 8008138:	7779      	strb	r1, [r7, #29]
 800813a:	4413      	add	r3, r2
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	76bb      	strb	r3, [r7, #26]
    
    /*******************************************************************************/
    /* Check for valid PFB type                                                    */
    if( !(nfcip_PFBisSPDU( rxPFB ) || nfcip_PFBisRPDU( rxPFB ) || nfcip_PFBisIPDU( rxPFB )) )
 8008140:	7ebb      	ldrb	r3, [r7, #26]
 8008142:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8008146:	2b80      	cmp	r3, #128	; 0x80
 8008148:	d01e      	beq.n	8008188 <nfcipTargetHandleRX+0x210>
 800814a:	7ebb      	ldrb	r3, [r7, #26]
 800814c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8008150:	2b40      	cmp	r3, #64	; 0x40
 8008152:	d019      	beq.n	8008188 <nfcipTargetHandleRX+0x210>
 8008154:	7ebb      	ldrb	r3, [r7, #26]
 8008156:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d014      	beq.n	8008188 <nfcipTargetHandleRX+0x210>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800815e:	4b38      	ldr	r3, [pc, #224]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 8008160:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8008162:	4b37      	ldr	r3, [pc, #220]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 8008164:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 8008168:	4b35      	ldr	r3, [pc, #212]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 800816a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800816c:	f04f 32ff 	mov.w	r2, #4294967295
 8008170:	9202      	str	r2, [sp, #8]
 8008172:	2204      	movs	r2, #4
 8008174:	9201      	str	r2, [sp, #4]
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	4603      	mov	r3, r0
 800817a:	460a      	mov	r2, r1
 800817c:	2100      	movs	r1, #0
 800817e:	2000      	movs	r0, #0
 8008180:	f003 fb74 	bl	800b86c <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore invalid PFB  */
 8008184:	2302      	movs	r3, #2
 8008186:	e338      	b.n	80087fa <nfcipTargetHandleRX+0x882>
    }
    
    /*******************************************************************************/   
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 8008188:	4b2d      	ldr	r3, [pc, #180]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 800818a:	78db      	ldrb	r3, [r3, #3]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d03d      	beq.n	800820c <nfcipTargetHandleRX+0x294>
    {
        if( !nfcip_PFBhasDID( rxPFB ) )
 8008190:	7ebb      	ldrb	r3, [r7, #26]
 8008192:	f003 0304 	and.w	r3, r3, #4
 8008196:	2b00      	cmp	r3, #0
 8008198:	d114      	bne.n	80081c4 <nfcipTargetHandleRX+0x24c>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800819a:	4b29      	ldr	r3, [pc, #164]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 800819c:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800819e:	4b28      	ldr	r3, [pc, #160]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 80081a0:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 80081a4:	4b26      	ldr	r3, [pc, #152]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 80081a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081a8:	f04f 32ff 	mov.w	r2, #4294967295
 80081ac:	9202      	str	r2, [sp, #8]
 80081ae:	2204      	movs	r2, #4
 80081b0:	9201      	str	r2, [sp, #4]
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	4603      	mov	r3, r0
 80081b6:	460a      	mov	r2, r1
 80081b8:	2100      	movs	r1, #0
 80081ba:	2000      	movs	r0, #0
 80081bc:	f003 fb56 	bl	800b86c <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad/missing DID  */
 80081c0:	2302      	movs	r3, #2
 80081c2:	e31a      	b.n	80087fa <nfcipTargetHandleRX+0x882>
        }
        if( gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did ) /* MISRA 13.5 */
 80081c4:	4b1e      	ldr	r3, [pc, #120]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 80081c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80081c8:	7f7b      	ldrb	r3, [r7, #29]
 80081ca:	1c59      	adds	r1, r3, #1
 80081cc:	7779      	strb	r1, [r7, #29]
 80081ce:	4413      	add	r3, r2
 80081d0:	781a      	ldrb	r2, [r3, #0]
 80081d2:	4b1b      	ldr	r3, [pc, #108]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 80081d4:	78db      	ldrb	r3, [r3, #3]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d014      	beq.n	8008204 <nfcipTargetHandleRX+0x28c>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80081da:	4b19      	ldr	r3, [pc, #100]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 80081dc:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80081de:	4b18      	ldr	r3, [pc, #96]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 80081e0:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 80081e4:	4b16      	ldr	r3, [pc, #88]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 80081e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081e8:	f04f 32ff 	mov.w	r2, #4294967295
 80081ec:	9202      	str	r2, [sp, #8]
 80081ee:	2204      	movs	r2, #4
 80081f0:	9201      	str	r2, [sp, #4]
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	4603      	mov	r3, r0
 80081f6:	460a      	mov	r2, r1
 80081f8:	2100      	movs	r1, #0
 80081fa:	2000      	movs	r0, #0
 80081fc:	f003 fb36 	bl	800b86c <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad/missing DID  */
 8008200:	2302      	movs	r3, #2
 8008202:	e2fa      	b.n	80087fa <nfcipTargetHandleRX+0x882>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 8008204:	7f3b      	ldrb	r3, [r7, #28]
 8008206:	3301      	adds	r3, #1
 8008208:	773b      	strb	r3, [r7, #28]
 800820a:	e01b      	b.n	8008244 <nfcipTargetHandleRX+0x2cc>
    }
    else if( nfcip_PFBhasDID( rxPFB ) )                 /* DID not expected but rcv     */
 800820c:	7ebb      	ldrb	r3, [r7, #26]
 800820e:	f003 0304 	and.w	r3, r3, #4
 8008212:	2b00      	cmp	r3, #0
 8008214:	d016      	beq.n	8008244 <nfcipTargetHandleRX+0x2cc>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8008216:	4b0a      	ldr	r3, [pc, #40]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 8008218:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800821a:	4b09      	ldr	r3, [pc, #36]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 800821c:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 8008220:	4b07      	ldr	r3, [pc, #28]	; (8008240 <nfcipTargetHandleRX+0x2c8>)
 8008222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008224:	f04f 32ff 	mov.w	r2, #4294967295
 8008228:	9202      	str	r2, [sp, #8]
 800822a:	2204      	movs	r2, #4
 800822c:	9201      	str	r2, [sp, #4]
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	4603      	mov	r3, r0
 8008232:	460a      	mov	r2, r1
 8008234:	2100      	movs	r1, #0
 8008236:	2000      	movs	r0, #0
 8008238:	f003 fb18 	bl	800b86c <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore unexpected DID  */
 800823c:	2302      	movs	r3, #2
 800823e:	e2dc      	b.n	80087fa <nfcipTargetHandleRX+0x882>
 8008240:	20000884 	.word	0x20000884
        /* MISRA 15.7 - Empty else */
    }
                                  
        
    /*******************************************************************************/
    if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO ) 
 8008244:	4bb5      	ldr	r3, [pc, #724]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 8008246:	791b      	ldrb	r3, [r3, #4]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d028      	beq.n	800829e <nfcipTargetHandleRX+0x326>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || !nfcip_PFBhasDID( rxPFB ) )
 800824c:	4bb3      	ldr	r3, [pc, #716]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 800824e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008250:	7f7b      	ldrb	r3, [r7, #29]
 8008252:	1c59      	adds	r1, r3, #1
 8008254:	7779      	strb	r1, [r7, #29]
 8008256:	4413      	add	r3, r2
 8008258:	781a      	ldrb	r2, [r3, #0]
 800825a:	4bb0      	ldr	r3, [pc, #704]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 800825c:	78db      	ldrb	r3, [r3, #3]
 800825e:	429a      	cmp	r2, r3
 8008260:	d104      	bne.n	800826c <nfcipTargetHandleRX+0x2f4>
 8008262:	7ebb      	ldrb	r3, [r7, #26]
 8008264:	f003 0304 	and.w	r3, r3, #4
 8008268:	2b00      	cmp	r3, #0
 800826a:	d114      	bne.n	8008296 <nfcipTargetHandleRX+0x31e>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800826c:	4bab      	ldr	r3, [pc, #684]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 800826e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8008270:	4baa      	ldr	r3, [pc, #680]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 8008272:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 8008276:	4ba9      	ldr	r3, [pc, #676]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 8008278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800827a:	f04f 32ff 	mov.w	r2, #4294967295
 800827e:	9202      	str	r2, [sp, #8]
 8008280:	2204      	movs	r2, #4
 8008282:	9201      	str	r2, [sp, #4]
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	4603      	mov	r3, r0
 8008288:	460a      	mov	r2, r1
 800828a:	2100      	movs	r1, #0
 800828c:	2000      	movs	r0, #0
 800828e:	f003 faed 	bl	800b86c <rfalTransceiveBlockingTx>
            return ERR_BUSY;                            /* ERR_PROTO - Ignore bad/missing DID  */
 8008292:	2302      	movs	r3, #2
 8008294:	e2b1      	b.n	80087fa <nfcipTargetHandleRX+0x882>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 8008296:	7f3b      	ldrb	r3, [r7, #28]
 8008298:	3301      	adds	r3, #1
 800829a:	773b      	strb	r3, [r7, #28]
 800829c:	e019      	b.n	80082d2 <nfcipTargetHandleRX+0x35a>
    }
    else if( nfcip_PFBhasNAD( rxPFB ) )                 /* NAD not expected but rcv */
 800829e:	7ebb      	ldrb	r3, [r7, #26]
 80082a0:	f003 0308 	and.w	r3, r3, #8
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d014      	beq.n	80082d2 <nfcipTargetHandleRX+0x35a>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80082a8:	4b9c      	ldr	r3, [pc, #624]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 80082aa:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80082ac:	4b9b      	ldr	r3, [pc, #620]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 80082ae:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 80082b2:	4b9a      	ldr	r3, [pc, #616]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 80082b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082b6:	f04f 32ff 	mov.w	r2, #4294967295
 80082ba:	9202      	str	r2, [sp, #8]
 80082bc:	2204      	movs	r2, #4
 80082be:	9201      	str	r2, [sp, #4]
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	4603      	mov	r3, r0
 80082c4:	460a      	mov	r2, r1
 80082c6:	2100      	movs	r1, #0
 80082c8:	2000      	movs	r0, #0
 80082ca:	f003 facf 	bl	800b86c <rfalTransceiveBlockingTx>
        return ERR_BUSY;                                /* ERR_PROTO - Ignore unexpected NAD  */
 80082ce:	2302      	movs	r3, #2
 80082d0:	e293      	b.n	80087fa <nfcipTargetHandleRX+0x882>
    
       
    /*******************************************************************************/
    /* Process R-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisRPDU( rxPFB ) )
 80082d2:	7ebb      	ldrb	r3, [r7, #26]
 80082d4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80082d8:	2b40      	cmp	r3, #64	; 0x40
 80082da:	f040 80c7 	bne.w	800846c <nfcipTargetHandleRX+0x4f4>
    {
        nfcipLogD( " NFCIP(T) Rcvd R-PDU  \r\n" );
        /*******************************************************************************/
        /* R ACK                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisRACK( rxPFB ) )
 80082de:	7ebb      	ldrb	r3, [r7, #26]
 80082e0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80082e4:	2b40      	cmp	r3, #64	; 0x40
 80082e6:	f040 8084 	bne.w	80083f2 <nfcipTargetHandleRX+0x47a>
 80082ea:	7ebb      	ldrb	r3, [r7, #26]
 80082ec:	f003 0310 	and.w	r3, r3, #16
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d17e      	bne.n	80083f2 <nfcipTargetHandleRX+0x47a>
        {
            nfcipLogI( " NFCIP(T) Rcvd ACK  \r\n" );
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 80082f4:	4b89      	ldr	r3, [pc, #548]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 80082f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082fa:	461a      	mov	r2, r3
 80082fc:	7ebb      	ldrb	r3, [r7, #26]
 80082fe:	f003 0303 	and.w	r3, r3, #3
 8008302:	429a      	cmp	r2, r3
 8008304:	d14a      	bne.n	800839c <nfcipTargetHandleRX+0x424>
            {
                /* R-ACK while not performing chaining -> Protocol error */
                if( !gNfcip.isTxChaining )
 8008306:	4b85      	ldr	r3, [pc, #532]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 8008308:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800830c:	f083 0301 	eor.w	r3, r3, #1
 8008310:	b2db      	uxtb	r3, r3
 8008312:	2b00      	cmp	r3, #0
 8008314:	d014      	beq.n	8008340 <nfcipTargetHandleRX+0x3c8>
                {
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8008316:	4b81      	ldr	r3, [pc, #516]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 8008318:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800831a:	4b80      	ldr	r3, [pc, #512]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 800831c:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 8008320:	4b7e      	ldr	r3, [pc, #504]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 8008322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008324:	f04f 32ff 	mov.w	r2, #4294967295
 8008328:	9202      	str	r2, [sp, #8]
 800832a:	2204      	movs	r2, #4
 800832c:	9201      	str	r2, [sp, #4]
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	4603      	mov	r3, r0
 8008332:	460a      	mov	r2, r1
 8008334:	2100      	movs	r1, #0
 8008336:	2000      	movs	r0, #0
 8008338:	f003 fa98 	bl	800b86c <rfalTransceiveBlockingTx>
                    return ERR_BUSY;                    /* ERR_PROTO - Ignore unexpected ACK  */
 800833c:	2302      	movs	r3, #2
 800833e:	e25c      	b.n	80087fa <nfcipTargetHandleRX+0x882>
                }
                
                /* This block has been transmitted and acknowledged, perform RTOX until next data is provided  */
                
                /* Digital 1.1  16.12.4.7 - If ACK rcvd continue with chaining or an RTOX */
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 8008340:	4b76      	ldr	r3, [pc, #472]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 8008342:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008346:	f003 030f 	and.w	r3, r3, #15
 800834a:	330c      	adds	r3, #12
 800834c:	2201      	movs	r2, #1
 800834e:	fa02 f303 	lsl.w	r3, r2, r3
 8008352:	4a73      	ldr	r2, [pc, #460]	; (8008520 <nfcipTargetHandleRX+0x5a8>)
 8008354:	fba2 2303 	umull	r2, r3, r2, r3
 8008358:	0b1b      	lsrs	r3, r3, #12
 800835a:	b29a      	uxth	r2, r3
 800835c:	4b6f      	ldr	r3, [pc, #444]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 800835e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008362:	f003 030f 	and.w	r3, r3, #15
 8008366:	330c      	adds	r3, #12
 8008368:	2101      	movs	r1, #1
 800836a:	fa01 f303 	lsl.w	r3, r1, r3
 800836e:	496c      	ldr	r1, [pc, #432]	; (8008520 <nfcipTargetHandleRX+0x5a8>)
 8008370:	fba1 1303 	umull	r1, r3, r1, r3
 8008374:	0b1b      	lsrs	r3, r3, #12
 8008376:	3301      	adds	r3, #1
 8008378:	08db      	lsrs	r3, r3, #3
 800837a:	b29b      	uxth	r3, r3
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	b29b      	uxth	r3, r3
 8008380:	3301      	adds	r3, #1
 8008382:	b29b      	uxth	r3, r3
 8008384:	4618      	mov	r0, r3
 8008386:	f7fa f9ab 	bl	80026e0 <timerCalculateTimer>
 800838a:	4602      	mov	r2, r0
 800838c:	4b63      	ldr	r3, [pc, #396]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 800838e:	67da      	str	r2, [r3, #124]	; 0x7c
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 8008390:	4b62      	ldr	r3, [pc, #392]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 8008392:	220e      	movs	r2, #14
 8008394:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                
                return ERR_NONE;                        /* This block has been transmitted */
 8008398:	2300      	movs	r3, #0
 800839a:	e22e      	b.n	80087fa <nfcipTargetHandleRX+0x882>
            }
            
            /* Digital 1.0 14.12.3.4 - If last send was ATN and rx PNI is minus 1 */
            else if( nfcip_PFBisSATN( gNfcip.lastPFB ) &&  (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB )) )    
 800839c:	4b5f      	ldr	r3, [pc, #380]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 800839e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80083a2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80083a6:	2b80      	cmp	r3, #128	; 0x80
 80083a8:	d15f      	bne.n	800846a <nfcipTargetHandleRX+0x4f2>
 80083aa:	4b5c      	ldr	r3, [pc, #368]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 80083ac:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80083b0:	f003 0310 	and.w	r3, r3, #16
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d158      	bne.n	800846a <nfcipTargetHandleRX+0x4f2>
 80083b8:	4b58      	ldr	r3, [pc, #352]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 80083ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083be:	3b01      	subs	r3, #1
 80083c0:	b2da      	uxtb	r2, r3
 80083c2:	7ebb      	ldrb	r3, [r7, #26]
 80083c4:	4053      	eors	r3, r2
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	f003 0303 	and.w	r3, r3, #3
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d14c      	bne.n	800846a <nfcipTargetHandleRX+0x4f2>
            {   
                nfcipLogI( " NFCIP(T) wrong PNI, last was ATN reTx  \r\n" );
                /* Spec says to leave current PNI as is, but will be Inc after Tx, remaining the same */
                gNfcip.pni = nfcip_PNIDec( gNfcip.pni );
 80083d0:	4b52      	ldr	r3, [pc, #328]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 80083d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083d6:	3b01      	subs	r3, #1
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	f003 0303 	and.w	r3, r3, #3
 80083de:	b2da      	uxtb	r2, r3
 80083e0:	4b4e      	ldr	r3, [pc, #312]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 80083e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                
                gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 80083e6:	4b4d      	ldr	r3, [pc, #308]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 80083e8:	220f      	movs	r2, #15
 80083ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                return ERR_BUSY;
 80083ee:	2302      	movs	r3, #2
 80083f0:	e203      	b.n	80087fa <nfcipTargetHandleRX+0x882>
        }
        /*******************************************************************************/
        /* R NACK                                                                      */
        /*******************************************************************************/
        /* ISO 18092 12.6.1.3.3 When rcv NACK if PNI = prev PNI sent ->  reTx          */
        else if( nfcip_PFBisRNACK( rxPFB ) && (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB ) ) )
 80083f2:	7ebb      	ldrb	r3, [r7, #26]
 80083f4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80083f8:	2b40      	cmp	r3, #64	; 0x40
 80083fa:	d121      	bne.n	8008440 <nfcipTargetHandleRX+0x4c8>
 80083fc:	7ebb      	ldrb	r3, [r7, #26]
 80083fe:	f003 0310 	and.w	r3, r3, #16
 8008402:	2b00      	cmp	r3, #0
 8008404:	d01c      	beq.n	8008440 <nfcipTargetHandleRX+0x4c8>
 8008406:	4b45      	ldr	r3, [pc, #276]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 8008408:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800840c:	3b01      	subs	r3, #1
 800840e:	b2da      	uxtb	r2, r3
 8008410:	7ebb      	ldrb	r3, [r7, #26]
 8008412:	4053      	eors	r3, r2
 8008414:	b2db      	uxtb	r3, r3
 8008416:	f003 0303 	and.w	r3, r3, #3
 800841a:	2b00      	cmp	r3, #0
 800841c:	d110      	bne.n	8008440 <nfcipTargetHandleRX+0x4c8>
        {
            nfcipLogI( " NFCIP(T) Rcvd NACK  \r\n" );
            
            gNfcip.pni = nfcip_PNIDec( gNfcip.pni );   /* Dec so that has the prev PNI */
 800841e:	4b3f      	ldr	r3, [pc, #252]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 8008420:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008424:	3b01      	subs	r3, #1
 8008426:	b2db      	uxtb	r3, r3
 8008428:	f003 0303 	and.w	r3, r3, #3
 800842c:	b2da      	uxtb	r2, r3
 800842e:	4b3b      	ldr	r3, [pc, #236]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 8008430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 8008434:	4b39      	ldr	r3, [pc, #228]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 8008436:	220f      	movs	r2, #15
 8008438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_BUSY;
 800843c:	2302      	movs	r3, #2
 800843e:	e1dc      	b.n	80087fa <nfcipTargetHandleRX+0x882>
        }
        else
        {        
            nfcipLogI( " NFCIP(T) Unexpected R-PDU \r\n" );
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8008440:	4b36      	ldr	r3, [pc, #216]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 8008442:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8008444:	4b35      	ldr	r3, [pc, #212]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 8008446:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 800844a:	4b34      	ldr	r3, [pc, #208]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 800844c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800844e:	f04f 32ff 	mov.w	r2, #4294967295
 8008452:	9202      	str	r2, [sp, #8]
 8008454:	2204      	movs	r2, #4
 8008456:	9201      	str	r2, [sp, #4]
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	4603      	mov	r3, r0
 800845c:	460a      	mov	r2, r1
 800845e:	2100      	movs	r1, #0
 8008460:	2000      	movs	r0, #0
 8008462:	f003 fa03 	bl	800b86c <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore unexpected R-PDU  */
 8008466:	2302      	movs	r3, #2
 8008468:	e1c7      	b.n	80087fa <nfcipTargetHandleRX+0x882>
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 800846a:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Process S-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisSPDU( rxPFB ) )
 800846c:	7ebb      	ldrb	r3, [r7, #26]
 800846e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8008472:	2b80      	cmp	r3, #128	; 0x80
 8008474:	f040 80af 	bne.w	80085d6 <nfcipTargetHandleRX+0x65e>
        
        /*******************************************************************************/
        /* S ATN                                                                       */
        /*******************************************************************************/
        /* ISO 18092 12.6.3 Attention                                                  */
        if( nfcip_PFBisSATN( rxPFB ) )                         /*    If is a S-ATN     */
 8008478:	7ebb      	ldrb	r3, [r7, #26]
 800847a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800847e:	2b80      	cmp	r3, #128	; 0x80
 8008480:	d111      	bne.n	80084a6 <nfcipTargetHandleRX+0x52e>
 8008482:	7ebb      	ldrb	r3, [r7, #26]
 8008484:	f003 0310 	and.w	r3, r3, #16
 8008488:	2b00      	cmp	r3, #0
 800848a:	d10c      	bne.n	80084a6 <nfcipTargetHandleRX+0x52e>
        {            
            nfcipLogI( " NFCIP(T) Rcvd ATN  curPNI: %d \r\n", gNfcip.pni );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_ATN(), 0 ) );
 800848c:	2100      	movs	r1, #0
 800848e:	2080      	movs	r0, #128	; 0x80
 8008490:	f7ff fa24 	bl	80078dc <nfcipDEPControlMsg>
 8008494:	4603      	mov	r3, r0
 8008496:	83fb      	strh	r3, [r7, #30]
 8008498:	8bfb      	ldrh	r3, [r7, #30]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <nfcipTargetHandleRX+0x52a>
 800849e:	8bfb      	ldrh	r3, [r7, #30]
 80084a0:	e1ab      	b.n	80087fa <nfcipTargetHandleRX+0x882>
            return ERR_BUSY;
 80084a2:	2302      	movs	r3, #2
 80084a4:	e1a9      	b.n	80087fa <nfcipTargetHandleRX+0x882>
        }
        
        /*******************************************************************************/
        /* S TO                                                                        */
        /*******************************************************************************/
        else if( nfcip_PFBisSTO( rxPFB ) )                     /* If is a S-TO (RTOX)  */
 80084a6:	7ebb      	ldrb	r3, [r7, #26]
 80084a8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80084ac:	2b80      	cmp	r3, #128	; 0x80
 80084ae:	d17c      	bne.n	80085aa <nfcipTargetHandleRX+0x632>
 80084b0:	7ebb      	ldrb	r3, [r7, #26]
 80084b2:	f003 0310 	and.w	r3, r3, #16
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d077      	beq.n	80085aa <nfcipTargetHandleRX+0x632>
        {
            if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 80084ba:	4b18      	ldr	r3, [pc, #96]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 80084bc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80084c0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80084c4:	2b80      	cmp	r3, #128	; 0x80
 80084c6:	f040 8085 	bne.w	80085d4 <nfcipTargetHandleRX+0x65c>
 80084ca:	4b14      	ldr	r3, [pc, #80]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 80084cc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80084d0:	f003 0310 	and.w	r3, r3, #16
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d07d      	beq.n	80085d4 <nfcipTargetHandleRX+0x65c>
            {
                nfcipLogI( " NFCIP(T) Rcvd TO  \r\n" );
                
                /* Digital 1.1  16.8.4.6  RTOX value in RES different that in REQ -> Protocol Error */
                if( gNfcip.lastRTOX != gNfcip.rxBuf[rxMsgIt++] )
 80084d8:	4b10      	ldr	r3, [pc, #64]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 80084da:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 80084de:	4b0f      	ldr	r3, [pc, #60]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 80084e0:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80084e2:	7f7b      	ldrb	r3, [r7, #29]
 80084e4:	1c58      	adds	r0, r3, #1
 80084e6:	7778      	strb	r0, [r7, #29]
 80084e8:	440b      	add	r3, r1
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d019      	beq.n	8008524 <nfcipTargetHandleRX+0x5ac>
                {
                    nfcipLogI( " NFCIP(T) Mismatched RTOX value \r\n" );
                    
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80084f0:	4b0a      	ldr	r3, [pc, #40]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 80084f2:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80084f4:	4b09      	ldr	r3, [pc, #36]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 80084f6:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 80084fa:	4b08      	ldr	r3, [pc, #32]	; (800851c <nfcipTargetHandleRX+0x5a4>)
 80084fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008502:	9202      	str	r2, [sp, #8]
 8008504:	2204      	movs	r2, #4
 8008506:	9201      	str	r2, [sp, #4]
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	4603      	mov	r3, r0
 800850c:	460a      	mov	r2, r1
 800850e:	2100      	movs	r1, #0
 8008510:	2000      	movs	r0, #0
 8008512:	f003 f9ab 	bl	800b86c <rfalTransceiveBlockingTx>
                    return ERR_BUSY; /* ERR_PROTO - Ignore unexpected RTOX value  */
 8008516:	2302      	movs	r3, #2
 8008518:	e16f      	b.n	80087fa <nfcipTargetHandleRX+0x882>
 800851a:	bf00      	nop
 800851c:	20000884 	.word	0x20000884
 8008520:	4d542005 	.word	0x4d542005
                }
                
                /* Clear waiting for RTOX Ack Flag */
                gNfcip.isWait4RTOX = false;
 8008524:	4bb7      	ldr	r3, [pc, #732]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 8008526:	2200      	movs	r2, #0
 8008528:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
                
                /* Check if a Tx is already pending */
                if( gNfcip.isTxPending )
 800852c:	4bb5      	ldr	r3, [pc, #724]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 800852e:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8008532:	2b00      	cmp	r3, #0
 8008534:	d005      	beq.n	8008542 <nfcipTargetHandleRX+0x5ca>
                {
                    nfcipLogW( " NFCIP(T) Tx pending, go immediately to TX \r\n" );
                    
                    gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 8008536:	4bb3      	ldr	r3, [pc, #716]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 8008538:	220f      	movs	r2, #15
 800853a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    return ERR_BUSY;
 800853e:	2302      	movs	r3, #2
 8008540:	e15b      	b.n	80087fa <nfcipTargetHandleRX+0x882>
                }
                
                /* Start RTOX timer and change to check state  */
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( gNfcip.lastRTOX * rfalNfcDepWT2RWT(gNfcip.cfg.to ) ) ) );
 8008542:	4bb0      	ldr	r3, [pc, #704]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 8008544:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8008548:	461a      	mov	r2, r3
 800854a:	4bae      	ldr	r3, [pc, #696]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 800854c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008550:	f003 030f 	and.w	r3, r3, #15
 8008554:	330c      	adds	r3, #12
 8008556:	fa02 f303 	lsl.w	r3, r2, r3
 800855a:	4aab      	ldr	r2, [pc, #684]	; (8008808 <nfcipTargetHandleRX+0x890>)
 800855c:	fba2 2303 	umull	r2, r3, r2, r3
 8008560:	0b1b      	lsrs	r3, r3, #12
 8008562:	b29a      	uxth	r2, r3
 8008564:	4ba7      	ldr	r3, [pc, #668]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 8008566:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800856a:	4619      	mov	r1, r3
 800856c:	4ba5      	ldr	r3, [pc, #660]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 800856e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008572:	f003 030f 	and.w	r3, r3, #15
 8008576:	330c      	adds	r3, #12
 8008578:	fa01 f303 	lsl.w	r3, r1, r3
 800857c:	49a2      	ldr	r1, [pc, #648]	; (8008808 <nfcipTargetHandleRX+0x890>)
 800857e:	fba1 1303 	umull	r1, r3, r1, r3
 8008582:	0b1b      	lsrs	r3, r3, #12
 8008584:	3301      	adds	r3, #1
 8008586:	08db      	lsrs	r3, r3, #3
 8008588:	b29b      	uxth	r3, r3
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	b29b      	uxth	r3, r3
 800858e:	3301      	adds	r3, #1
 8008590:	b29b      	uxth	r3, r3
 8008592:	4618      	mov	r0, r3
 8008594:	f7fa f8a4 	bl	80026e0 <timerCalculateTimer>
 8008598:	4602      	mov	r2, r0
 800859a:	4b9a      	ldr	r3, [pc, #616]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 800859c:	67da      	str	r2, [r3, #124]	; 0x7c
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 800859e:	4b99      	ldr	r3, [pc, #612]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 80085a0:	220e      	movs	r2, #14
 80085a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                
                return ERR_BUSY;
 80085a6:	2302      	movs	r3, #2
 80085a8:	e127      	b.n	80087fa <nfcipTargetHandleRX+0x882>
        else
        {
            /* Unexpected S-PDU */
            nfcipLogI( " NFCIP(T) Unexpected S-PDU \r\n" );         /*  PRQA S  2880 # MISRA 2.1 - Guard code to prevent unexpected behavior */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80085aa:	4b96      	ldr	r3, [pc, #600]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 80085ac:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80085ae:	4b95      	ldr	r3, [pc, #596]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 80085b0:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 80085b4:	4b93      	ldr	r3, [pc, #588]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 80085b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085b8:	f04f 32ff 	mov.w	r2, #4294967295
 80085bc:	9202      	str	r2, [sp, #8]
 80085be:	2204      	movs	r2, #4
 80085c0:	9201      	str	r2, [sp, #4]
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	4603      	mov	r3, r0
 80085c6:	460a      	mov	r2, r1
 80085c8:	2100      	movs	r1, #0
 80085ca:	2000      	movs	r0, #0
 80085cc:	f003 f94e 	bl	800b86c <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore unexpected S-PDU  */
 80085d0:	2302      	movs	r3, #2
 80085d2:	e112      	b.n	80087fa <nfcipTargetHandleRX+0x882>
            if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 80085d4:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Process I-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisIPDU( rxPFB ) )
 80085d6:	7ebb      	ldrb	r3, [r7, #26]
 80085d8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f040 810b 	bne.w	80087f8 <nfcipTargetHandleRX+0x880>
    {
        if( gNfcip.pni != nfcip_PBF_PNI( rxPFB ) )
 80085e2:	4b88      	ldr	r3, [pc, #544]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 80085e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085e8:	461a      	mov	r2, r3
 80085ea:	7ebb      	ldrb	r3, [r7, #26]
 80085ec:	f003 0303 	and.w	r3, r3, #3
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d06f      	beq.n	80086d4 <nfcipTargetHandleRX+0x75c>
        {
            nfcipLogI( " NFCIP(T) Rcvd IPDU wrong PNI     curPNI: %d rxPNI: %d \r\n", gNfcip.pni, nfcip_PBF_PNI( rxPFB ) );
            
            /* Digital 1.1 16.12.3.4 - If last send was ATN and rx PNI is minus 1 */
            if( nfcip_PFBisSATN(gNfcip.lastPFB ) &&  (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB )) ) 
 80085f4:	4b83      	ldr	r3, [pc, #524]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 80085f6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80085fa:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80085fe:	2b80      	cmp	r3, #128	; 0x80
 8008600:	d153      	bne.n	80086aa <nfcipTargetHandleRX+0x732>
 8008602:	4b80      	ldr	r3, [pc, #512]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 8008604:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8008608:	f003 0310 	and.w	r3, r3, #16
 800860c:	2b00      	cmp	r3, #0
 800860e:	d14c      	bne.n	80086aa <nfcipTargetHandleRX+0x732>
 8008610:	4b7c      	ldr	r3, [pc, #496]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 8008612:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008616:	3b01      	subs	r3, #1
 8008618:	b2da      	uxtb	r2, r3
 800861a:	7ebb      	ldrb	r3, [r7, #26]
 800861c:	4053      	eors	r3, r2
 800861e:	b2db      	uxtb	r3, r3
 8008620:	f003 0303 	and.w	r3, r3, #3
 8008624:	2b00      	cmp	r3, #0
 8008626:	d140      	bne.n	80086aa <nfcipTargetHandleRX+0x732>
            {
                /* Spec says to leave current PNI as is, but will be Inc after Data Tx, remaining the same */
                gNfcip.pni = nfcip_PNIDec(gNfcip.pni);
 8008628:	4b76      	ldr	r3, [pc, #472]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 800862a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800862e:	3b01      	subs	r3, #1
 8008630:	b2db      	uxtb	r3, r3
 8008632:	f003 0303 	and.w	r3, r3, #3
 8008636:	b2da      	uxtb	r2, r3
 8008638:	4b72      	ldr	r3, [pc, #456]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 800863a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                
                if( nfcip_PFBisIMI( rxPFB ) )
 800863e:	7ebb      	ldrb	r3, [r7, #26]
 8008640:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d12a      	bne.n	800869e <nfcipTargetHandleRX+0x726>
 8008648:	7ebb      	ldrb	r3, [r7, #26]
 800864a:	f003 0310 	and.w	r3, r3, #16
 800864e:	2b00      	cmp	r3, #0
 8008650:	d025      	beq.n	800869e <nfcipTargetHandleRX+0x726>
                {
                    nfcipLogI( " NFCIP(T) PNI = prevPNI && ATN before && chaining -> send ACK  \r\n" );
                    EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 8008652:	4b6c      	ldr	r3, [pc, #432]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 8008654:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008658:	f003 0303 	and.w	r3, r3, #3
 800865c:	b2db      	uxtb	r3, r3
 800865e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008662:	b2d8      	uxtb	r0, r3
 8008664:	4b67      	ldr	r3, [pc, #412]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 8008666:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008668:	7f7b      	ldrb	r3, [r7, #29]
 800866a:	1c59      	adds	r1, r3, #1
 800866c:	7779      	strb	r1, [r7, #29]
 800866e:	4413      	add	r3, r2
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	4619      	mov	r1, r3
 8008674:	f7ff f932 	bl	80078dc <nfcipDEPControlMsg>
 8008678:	4603      	mov	r3, r0
 800867a:	83fb      	strh	r3, [r7, #30]
 800867c:	8bfb      	ldrh	r3, [r7, #30]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <nfcipTargetHandleRX+0x70e>
 8008682:	8bfb      	ldrh	r3, [r7, #30]
 8008684:	e0b9      	b.n	80087fa <nfcipTargetHandleRX+0x882>
                    
                    /* Digital 1.1 16.12.3.4 (...) leave the current PNI unchanged afterwards */
                    gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 8008686:	4b5f      	ldr	r3, [pc, #380]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 8008688:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800868c:	3301      	adds	r3, #1
 800868e:	b2db      	uxtb	r3, r3
 8008690:	f003 0303 	and.w	r3, r3, #3
 8008694:	b2da      	uxtb	r2, r3
 8008696:	4b5b      	ldr	r3, [pc, #364]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 8008698:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800869c:	e003      	b.n	80086a6 <nfcipTargetHandleRX+0x72e>
                }
                else
                {
                    nfcipLogI( " NFCIP(T) PNI = prevPNI && ATN before -> reTx last I-PDU  \r\n" );
                    gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 800869e:	4b59      	ldr	r3, [pc, #356]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 80086a0:	220f      	movs	r2, #15
 80086a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                }
                
                return ERR_BUSY;
 80086a6:	2302      	movs	r3, #2
 80086a8:	e0a7      	b.n	80087fa <nfcipTargetHandleRX+0x882>
            }
                        
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80086aa:	4b56      	ldr	r3, [pc, #344]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 80086ac:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80086ae:	4b55      	ldr	r3, [pc, #340]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 80086b0:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 80086b4:	4b53      	ldr	r3, [pc, #332]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 80086b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086b8:	f04f 32ff 	mov.w	r2, #4294967295
 80086bc:	9202      	str	r2, [sp, #8]
 80086be:	2204      	movs	r2, #4
 80086c0:	9201      	str	r2, [sp, #4]
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	4603      	mov	r3, r0
 80086c6:	460a      	mov	r2, r1
 80086c8:	2100      	movs	r1, #0
 80086ca:	2000      	movs	r0, #0
 80086cc:	f003 f8ce 	bl	800b86c <rfalTransceiveBlockingTx>
            return ERR_BUSY;            /* ERR_PROTO - Ignore bad PNI value  */
 80086d0:	2302      	movs	r3, #2
 80086d2:	e092      	b.n	80087fa <nfcipTargetHandleRX+0x882>
        nfcipLogD( " NFCIP(T) Rcvd IPDU OK PNI: %d  \r\n", gNfcip.pni );
        
        /*******************************************************************************/
        /* Successful data exchange                                                    */
        /*******************************************************************************/
        *outActRxLen  = ((uint16_t)nfcDepLen - RFAL_NFCDEP_DEP_HEADER - (uint16_t)optHdrLen);
 80086d4:	7efb      	ldrb	r3, [r7, #27]
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	7f3b      	ldrb	r3, [r7, #28]
 80086da:	b29b      	uxth	r3, r3
 80086dc:	1ad3      	subs	r3, r2, r3
 80086de:	b29b      	uxth	r3, r3
 80086e0:	3b04      	subs	r3, #4
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	801a      	strh	r2, [r3, #0]
        
        nfcipClearCounters();
 80086e8:	f7ff f958 	bl	800799c <nfcipClearCounters>

        if( (&gNfcip.rxBuf[gNfcip.rxBufPaylPos] != &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen]) && (*outActRxLen > 0U) )
 80086ec:	4b45      	ldr	r3, [pc, #276]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 80086ee:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80086f2:	461a      	mov	r2, r3
 80086f4:	7f3b      	ldrb	r3, [r7, #28]
 80086f6:	3304      	adds	r3, #4
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d013      	beq.n	8008724 <nfcipTargetHandleRX+0x7ac>
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	881b      	ldrh	r3, [r3, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00f      	beq.n	8008724 <nfcipTargetHandleRX+0x7ac>
        {
            ST_MEMMOVE( &gNfcip.rxBuf[gNfcip.rxBufPaylPos], &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen], *outActRxLen );
 8008704:	4b3f      	ldr	r3, [pc, #252]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 8008706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008708:	4a3e      	ldr	r2, [pc, #248]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 800870a:	f892 2071 	ldrb.w	r2, [r2, #113]	; 0x71
 800870e:	1898      	adds	r0, r3, r2
 8008710:	4b3c      	ldr	r3, [pc, #240]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 8008712:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008714:	7f3b      	ldrb	r3, [r7, #28]
 8008716:	3304      	adds	r3, #4
 8008718:	18d1      	adds	r1, r2, r3
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	881b      	ldrh	r3, [r3, #0]
 800871e:	461a      	mov	r2, r3
 8008720:	f005 f90c 	bl	800d93c <memmove>
        
        
        /*******************************************************************************/
        /* Check if Initiator is indicating chaining MI                                */
        /*******************************************************************************/
        if( nfcip_PFBisIMI( rxPFB ) )
 8008724:	7ebb      	ldrb	r3, [r7, #26]
 8008726:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d132      	bne.n	8008794 <nfcipTargetHandleRX+0x81c>
 800872e:	7ebb      	ldrb	r3, [r7, #26]
 8008730:	f003 0310 	and.w	r3, r3, #16
 8008734:	2b00      	cmp	r3, #0
 8008736:	d02d      	beq.n	8008794 <nfcipTargetHandleRX+0x81c>
        {
            gNfcip.isRxChaining = true;
 8008738:	4b32      	ldr	r3, [pc, #200]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 800873a:	2201      	movs	r2, #1
 800873c:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            *outIsChaining      = true;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	701a      	strb	r2, [r3, #0]
            
            nfcipLogD( " NFCIP(T) Rcvd IPDU OK w MI -> ACK \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 8008746:	4b2f      	ldr	r3, [pc, #188]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 8008748:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800874c:	f003 0303 	and.w	r3, r3, #3
 8008750:	b2db      	uxtb	r3, r3
 8008752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008756:	b2d8      	uxtb	r0, r3
 8008758:	4b2a      	ldr	r3, [pc, #168]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 800875a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800875c:	7f7b      	ldrb	r3, [r7, #29]
 800875e:	1c59      	adds	r1, r3, #1
 8008760:	7779      	strb	r1, [r7, #29]
 8008762:	4413      	add	r3, r2
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	4619      	mov	r1, r3
 8008768:	f7ff f8b8 	bl	80078dc <nfcipDEPControlMsg>
 800876c:	4603      	mov	r3, r0
 800876e:	83fb      	strh	r3, [r7, #30]
 8008770:	8bfb      	ldrh	r3, [r7, #30]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <nfcipTargetHandleRX+0x802>
 8008776:	8bfb      	ldrh	r3, [r7, #30]
 8008778:	e03f      	b.n	80087fa <nfcipTargetHandleRX+0x882>
            
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 800877a:	4b22      	ldr	r3, [pc, #136]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 800877c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008780:	3301      	adds	r3, #1
 8008782:	b2db      	uxtb	r3, r3
 8008784:	f003 0303 	and.w	r3, r3, #3
 8008788:	b2da      	uxtb	r2, r3
 800878a:	4b1e      	ldr	r3, [pc, #120]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 800878c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            return ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 8008790:	230d      	movs	r3, #13
 8008792:	e032      	b.n	80087fa <nfcipTargetHandleRX+0x882>
            }
            
            /*******************************************************************************/
            /* Reception done, send to DH and start RTOX timer                             */
            /*******************************************************************************/
            nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 8008794:	4b1b      	ldr	r3, [pc, #108]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 8008796:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800879a:	f003 030f 	and.w	r3, r3, #15
 800879e:	330c      	adds	r3, #12
 80087a0:	2201      	movs	r2, #1
 80087a2:	fa02 f303 	lsl.w	r3, r2, r3
 80087a6:	4a18      	ldr	r2, [pc, #96]	; (8008808 <nfcipTargetHandleRX+0x890>)
 80087a8:	fba2 2303 	umull	r2, r3, r2, r3
 80087ac:	0b1b      	lsrs	r3, r3, #12
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	4b14      	ldr	r3, [pc, #80]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 80087b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087b6:	f003 030f 	and.w	r3, r3, #15
 80087ba:	330c      	adds	r3, #12
 80087bc:	2101      	movs	r1, #1
 80087be:	fa01 f303 	lsl.w	r3, r1, r3
 80087c2:	4911      	ldr	r1, [pc, #68]	; (8008808 <nfcipTargetHandleRX+0x890>)
 80087c4:	fba1 1303 	umull	r1, r3, r1, r3
 80087c8:	0b1b      	lsrs	r3, r3, #12
 80087ca:	3301      	adds	r3, #1
 80087cc:	08db      	lsrs	r3, r3, #3
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	1ad3      	subs	r3, r2, r3
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	3301      	adds	r3, #1
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	4618      	mov	r0, r3
 80087da:	f7f9 ff81 	bl	80026e0 <timerCalculateTimer>
 80087de:	4602      	mov	r2, r0
 80087e0:	4b08      	ldr	r3, [pc, #32]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 80087e2:	67da      	str	r2, [r3, #124]	; 0x7c
            gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 80087e4:	4b07      	ldr	r3, [pc, #28]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 80087e6:	220e      	movs	r2, #14
 80087e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            
            gNfcip.isRxChaining = false;
 80087ec:	4b05      	ldr	r3, [pc, #20]	; (8008804 <nfcipTargetHandleRX+0x88c>)
 80087ee:	2200      	movs	r2, #0
 80087f0:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            ret = ERR_NONE;                            /* Data exchange done */
 80087f4:	2300      	movs	r3, #0
 80087f6:	83fb      	strh	r3, [r7, #30]
        }
    }
    return ret;
 80087f8:	8bfb      	ldrh	r3, [r7, #30]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3720      	adds	r7, #32
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	20000884 	.word	0x20000884
 8008808:	4d542005 	.word	0x4d542005

0800880c <nfcipTx>:


/*******************************************************************************/
static ReturnCode nfcipTx( rfalNfcDepCmd cmd, uint8_t* txBuf, uint8_t *paylBuf, uint16_t paylLen, uint8_t pfbData, uint32_t fwt )
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b088      	sub	sp, #32
 8008810:	af00      	add	r7, sp, #0
 8008812:	60b9      	str	r1, [r7, #8]
 8008814:	607a      	str	r2, [r7, #4]
 8008816:	461a      	mov	r2, r3
 8008818:	4603      	mov	r3, r0
 800881a:	73fb      	strb	r3, [r7, #15]
 800881c:	4613      	mov	r3, r2
 800881e:	81bb      	strh	r3, [r7, #12]
    uint8_t *txBlock;
    uint8_t *payloadBuf;
    uint8_t  pfb;
    
   
    if( txBuf == NULL )
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d101      	bne.n	800882a <nfcipTx+0x1e>
    {
        return ERR_PARAM;
 8008826:	2307      	movs	r3, #7
 8008828:	e177      	b.n	8008b1a <nfcipTx+0x30e>
    }
    

    payloadBuf = paylBuf;                                               /* MISRA 17.8: Use intermediate variable */
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	617b      	str	r3, [r7, #20]
    
    if( (paylLen == 0U) || (payloadBuf == NULL) )
 800882e:	89bb      	ldrh	r3, [r7, #12]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d002      	beq.n	800883a <nfcipTx+0x2e>
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d102      	bne.n	8008840 <nfcipTx+0x34>
    {
        payloadBuf = (uint8_t*) &txBuf[RFAL_NFCDEP_DEPREQ_HEADER_LEN];  /* If not a DEP (no Data) ensure enough space for header */
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	3305      	adds	r3, #5
 800883e:	617b      	str	r3, [r7, #20]
    }
    
    
    txBufIt  = 0;
 8008840:	2300      	movs	r3, #0
 8008842:	83fb      	strh	r3, [r7, #30]
    pfb      = pfbData;                                                 /* MISRA 17.8: Use intermediate variable */
 8008844:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008848:	74fb      	strb	r3, [r7, #19]
    
    txBlock  = payloadBuf;                                              /* Point to beginning of the Data, and go backwards     */    
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	61bb      	str	r3, [r7, #24]
        
    
    gNfcip.lastCmd = (uint8_t)cmd;                                      /* Store last cmd sent    */
 800884e:	4aac      	ldr	r2, [pc, #688]	; (8008b00 <nfcipTx+0x2f4>)
 8008850:	7bfb      	ldrb	r3, [r7, #15]
 8008852:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
    gNfcip.lastPFB = NFCIP_PFB_INVALID;                                 /* Reset last pfb sent    */
 8008856:	4baa      	ldr	r3, [pc, #680]	; (8008b00 <nfcipTx+0x2f4>)
 8008858:	22ff      	movs	r2, #255	; 0xff
 800885a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    
    /*******************************************************************************/
    /* Compute outgoing NFCIP message                                              */
    /*******************************************************************************/
    switch( cmd )
 800885e:	7bfb      	ldrb	r3, [r7, #15]
 8008860:	2b0b      	cmp	r3, #11
 8008862:	f200 8120 	bhi.w	8008aa6 <nfcipTx+0x29a>
 8008866:	a201      	add	r2, pc, #4	; (adr r2, 800886c <nfcipTx+0x60>)
 8008868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886c:	0800889d 	.word	0x0800889d
 8008870:	0800889d 	.word	0x0800889d
 8008874:	08008991 	.word	0x08008991
 8008878:	080089c7 	.word	0x080089c7
 800887c:	080089c7 	.word	0x080089c7
 8008880:	080089c7 	.word	0x080089c7
 8008884:	080089ef 	.word	0x080089ef
 8008888:	080089ef 	.word	0x080089ef
 800888c:	080089d7 	.word	0x080089d7
 8008890:	080089d7 	.word	0x080089d7
 8008894:	080089d7 	.word	0x080089d7
 8008898:	080089d7 	.word	0x080089d7
    {
        /*******************************************************************************/
        case NFCIP_CMD_ATR_RES:
        case NFCIP_CMD_ATR_REQ:
            
            rfalNfcDepSetNFCID( payloadBuf, gNfcip.cfg.nfcid, gNfcip.cfg.nfcidLen );    /* NFCID */
 800889c:	220a      	movs	r2, #10
 800889e:	2100      	movs	r1, #0
 80088a0:	6978      	ldr	r0, [r7, #20]
 80088a2:	f005 f864 	bl	800d96e <memset>
 80088a6:	4b96      	ldr	r3, [pc, #600]	; (8008b00 <nfcipTx+0x2f4>)
 80088a8:	7c5b      	ldrb	r3, [r3, #17]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d006      	beq.n	80088bc <nfcipTx+0xb0>
 80088ae:	4b94      	ldr	r3, [pc, #592]	; (8008b00 <nfcipTx+0x2f4>)
 80088b0:	7c5b      	ldrb	r3, [r3, #17]
 80088b2:	461a      	mov	r2, r3
 80088b4:	4993      	ldr	r1, [pc, #588]	; (8008b04 <nfcipTx+0x2f8>)
 80088b6:	6978      	ldr	r0, [r7, #20]
 80088b8:	f005 f835 	bl	800d926 <memcpy>
            txBufIt += RFAL_NFCDEP_NFCID3_LEN;
 80088bc:	8bfb      	ldrh	r3, [r7, #30]
 80088be:	330a      	adds	r3, #10
 80088c0:	83fb      	strh	r3, [r7, #30]
            
            payloadBuf[txBufIt++] = gNfcip.cfg.did;                                     /* DID   */
 80088c2:	8bfb      	ldrh	r3, [r7, #30]
 80088c4:	1c5a      	adds	r2, r3, #1
 80088c6:	83fa      	strh	r2, [r7, #30]
 80088c8:	461a      	mov	r2, r3
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	4413      	add	r3, r2
 80088ce:	4a8c      	ldr	r2, [pc, #560]	; (8008b00 <nfcipTx+0x2f4>)
 80088d0:	78d2      	ldrb	r2, [r2, #3]
 80088d2:	701a      	strb	r2, [r3, #0]
            payloadBuf[txBufIt++] = gNfcip.cfg.bs;                                      /* BS    */
 80088d4:	8bfb      	ldrh	r3, [r7, #30]
 80088d6:	1c5a      	adds	r2, r3, #1
 80088d8:	83fa      	strh	r2, [r7, #30]
 80088da:	461a      	mov	r2, r3
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	4413      	add	r3, r2
 80088e0:	4a87      	ldr	r2, [pc, #540]	; (8008b00 <nfcipTx+0x2f4>)
 80088e2:	7952      	ldrb	r2, [r2, #5]
 80088e4:	701a      	strb	r2, [r3, #0]
            payloadBuf[txBufIt++] = gNfcip.cfg.br;                                      /* BR    */
 80088e6:	8bfb      	ldrh	r3, [r7, #30]
 80088e8:	1c5a      	adds	r2, r3, #1
 80088ea:	83fa      	strh	r2, [r7, #30]
 80088ec:	461a      	mov	r2, r3
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	4413      	add	r3, r2
 80088f2:	4a83      	ldr	r2, [pc, #524]	; (8008b00 <nfcipTx+0x2f4>)
 80088f4:	7992      	ldrb	r2, [r2, #6]
 80088f6:	701a      	strb	r2, [r3, #0]
            
            if( cmd == NFCIP_CMD_ATR_RES )
 80088f8:	7bfb      	ldrb	r3, [r7, #15]
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d109      	bne.n	8008912 <nfcipTx+0x106>
            {
                payloadBuf[txBufIt++] = gNfcip.cfg.to;                                  /* ATR_RES[ TO ] */
 80088fe:	8bfb      	ldrh	r3, [r7, #30]
 8008900:	1c5a      	adds	r2, r3, #1
 8008902:	83fa      	strh	r2, [r7, #30]
 8008904:	461a      	mov	r2, r3
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	4413      	add	r3, r2
 800890a:	4a7d      	ldr	r2, [pc, #500]	; (8008b00 <nfcipTx+0x2f4>)
 800890c:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 8008910:	701a      	strb	r2, [r3, #0]
            }
                                    
            if( gNfcip.cfg.gbLen > 0U)
 8008912:	4b7b      	ldr	r3, [pc, #492]	; (8008b00 <nfcipTx+0x2f4>)
 8008914:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008918:	2b00      	cmp	r3, #0
 800891a:	d023      	beq.n	8008964 <nfcipTx+0x158>
            {
                payloadBuf[txBufIt++] = nfcip_PPwGB( gNfcip.cfg.lr );                   /* PP signalling GB  */
 800891c:	4b78      	ldr	r3, [pc, #480]	; (8008b00 <nfcipTx+0x2f4>)
 800891e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008922:	011b      	lsls	r3, r3, #4
 8008924:	b2db      	uxtb	r3, r3
 8008926:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800892a:	b2da      	uxtb	r2, r3
 800892c:	8bfb      	ldrh	r3, [r7, #30]
 800892e:	1c59      	adds	r1, r3, #1
 8008930:	83f9      	strh	r1, [r7, #30]
 8008932:	4619      	mov	r1, r3
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	440b      	add	r3, r1
 8008938:	f042 0202 	orr.w	r2, r2, #2
 800893c:	b2d2      	uxtb	r2, r2
 800893e:	701a      	strb	r2, [r3, #0]
                ST_MEMCPY( &payloadBuf[txBufIt], gNfcip.cfg.gb, gNfcip.cfg.gbLen );     /* set General Bytes */
 8008940:	8bfb      	ldrh	r3, [r7, #30]
 8008942:	697a      	ldr	r2, [r7, #20]
 8008944:	18d0      	adds	r0, r2, r3
 8008946:	4b6e      	ldr	r3, [pc, #440]	; (8008b00 <nfcipTx+0x2f4>)
 8008948:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800894c:	461a      	mov	r2, r3
 800894e:	496e      	ldr	r1, [pc, #440]	; (8008b08 <nfcipTx+0x2fc>)
 8008950:	f004 ffe9 	bl	800d926 <memcpy>
                txBufIt += gNfcip.cfg.gbLen;
 8008954:	4b6a      	ldr	r3, [pc, #424]	; (8008b00 <nfcipTx+0x2f4>)
 8008956:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800895a:	b29a      	uxth	r2, r3
 800895c:	8bfb      	ldrh	r3, [r7, #30]
 800895e:	4413      	add	r3, r2
 8008960:	83fb      	strh	r3, [r7, #30]
 8008962:	e00e      	b.n	8008982 <nfcipTx+0x176>
            }
            else
            {
                payloadBuf[txBufIt++] = rfalNfcDepLR2PP( gNfcip.cfg.lr );               /* PP without GB     */
 8008964:	4b66      	ldr	r3, [pc, #408]	; (8008b00 <nfcipTx+0x2f4>)
 8008966:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800896a:	011b      	lsls	r3, r3, #4
 800896c:	b2da      	uxtb	r2, r3
 800896e:	8bfb      	ldrh	r3, [r7, #30]
 8008970:	1c59      	adds	r1, r3, #1
 8008972:	83f9      	strh	r1, [r7, #30]
 8008974:	4619      	mov	r1, r3
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	440b      	add	r3, r1
 800897a:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800897e:	b2d2      	uxtb	r2, r2
 8008980:	701a      	strb	r2, [r3, #0]
            }
            
            if( (txBufIt + RFAL_NFCDEP_CMDTYPE_LEN + RFAL_NFCDEP_CMD_LEN) > RFAL_NFCDEP_ATRREQ_MAX_LEN )   /* Check max ATR length (ATR_REQ = ATR_RES)*/
 8008982:	8bfb      	ldrh	r3, [r7, #30]
 8008984:	3302      	adds	r3, #2
 8008986:	2b40      	cmp	r3, #64	; 0x40
 8008988:	f240 808f 	bls.w	8008aaa <nfcipTx+0x29e>
            {
                return ERR_PARAM;
 800898c:	2307      	movs	r3, #7
 800898e:	e0c4      	b.n	8008b1a <nfcipTx+0x30e>
            break;
            
        /*******************************************************************************/
        case NFCIP_CMD_WUP_REQ:                               /* ISO 18092 - 12.5.2.1 */
            
            rfalNfcDepSetNFCID( (payloadBuf), gNfcip.cfg.nfcid, gNfcip.cfg.nfcidLen );   /* NFCID */
 8008990:	220a      	movs	r2, #10
 8008992:	2100      	movs	r1, #0
 8008994:	6978      	ldr	r0, [r7, #20]
 8008996:	f004 ffea 	bl	800d96e <memset>
 800899a:	4b59      	ldr	r3, [pc, #356]	; (8008b00 <nfcipTx+0x2f4>)
 800899c:	7c5b      	ldrb	r3, [r3, #17]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d006      	beq.n	80089b0 <nfcipTx+0x1a4>
 80089a2:	4b57      	ldr	r3, [pc, #348]	; (8008b00 <nfcipTx+0x2f4>)
 80089a4:	7c5b      	ldrb	r3, [r3, #17]
 80089a6:	461a      	mov	r2, r3
 80089a8:	4956      	ldr	r1, [pc, #344]	; (8008b04 <nfcipTx+0x2f8>)
 80089aa:	6978      	ldr	r0, [r7, #20]
 80089ac:	f004 ffbb 	bl	800d926 <memcpy>
            txBufIt += RFAL_NFCDEP_NFCID3_LEN;
 80089b0:	8bfb      	ldrh	r3, [r7, #30]
 80089b2:	330a      	adds	r3, #10
 80089b4:	83fb      	strh	r3, [r7, #30]
            
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	3b01      	subs	r3, #1
 80089ba:	61bb      	str	r3, [r7, #24]
 80089bc:	4b50      	ldr	r3, [pc, #320]	; (8008b00 <nfcipTx+0x2f4>)
 80089be:	78da      	ldrb	r2, [r3, #3]
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	701a      	strb	r2, [r3, #0]
            break;
 80089c4:	e076      	b.n	8008ab4 <nfcipTx+0x2a8>
        /*******************************************************************************/
        case NFCIP_CMD_WUP_RES:                               /* ISO 18092 - 12.5.2.2 */
        case NFCIP_CMD_PSL_REQ:
        case NFCIP_CMD_PSL_RES:
            
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	3b01      	subs	r3, #1
 80089ca:	61bb      	str	r3, [r7, #24]
 80089cc:	4b4c      	ldr	r3, [pc, #304]	; (8008b00 <nfcipTx+0x2f4>)
 80089ce:	78da      	ldrb	r2, [r3, #3]
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	701a      	strb	r2, [r3, #0]
            break;
 80089d4:	e06e      	b.n	8008ab4 <nfcipTx+0x2a8>
        case NFCIP_CMD_RLS_RES:
        case NFCIP_CMD_DSL_REQ:
        case NFCIP_CMD_DSL_RES:
            
            /* Digital 1.0 - 14.8.1.1 & 14.9.1.1 & 14.10.1.1 Only add DID if not 0 */
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 80089d6:	4b4a      	ldr	r3, [pc, #296]	; (8008b00 <nfcipTx+0x2f4>)
 80089d8:	78db      	ldrb	r3, [r3, #3]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d067      	beq.n	8008aae <nfcipTx+0x2a2>
            {
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	3b01      	subs	r3, #1
 80089e2:	61bb      	str	r3, [r7, #24]
 80089e4:	4b46      	ldr	r3, [pc, #280]	; (8008b00 <nfcipTx+0x2f4>)
 80089e6:	78da      	ldrb	r2, [r3, #3]
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	701a      	strb	r2, [r3, #0]
            }
            break;
 80089ec:	e05f      	b.n	8008aae <nfcipTx+0x2a2>
        /*******************************************************************************/
        case NFCIP_CMD_DEP_REQ:
        case NFCIP_CMD_DEP_RES:
            
            /* Compute optional PFB bits */
            if (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO)                {   pfb |= NFCIP_PFB_DID_BIT;       }
 80089ee:	4b44      	ldr	r3, [pc, #272]	; (8008b00 <nfcipTx+0x2f4>)
 80089f0:	78db      	ldrb	r3, [r3, #3]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d003      	beq.n	80089fe <nfcipTx+0x1f2>
 80089f6:	7cfb      	ldrb	r3, [r7, #19]
 80089f8:	f043 0304 	orr.w	r3, r3, #4
 80089fc:	74fb      	strb	r3, [r7, #19]
            if (gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO)                {   pfb |= NFCIP_PFB_NAD_BIT;       }
 80089fe:	4b40      	ldr	r3, [pc, #256]	; (8008b00 <nfcipTx+0x2f4>)
 8008a00:	791b      	ldrb	r3, [r3, #4]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d003      	beq.n	8008a0e <nfcipTx+0x202>
 8008a06:	7cfb      	ldrb	r3, [r7, #19]
 8008a08:	f043 0308 	orr.w	r3, r3, #8
 8008a0c:	74fb      	strb	r3, [r7, #19]
            if ((gNfcip.isTxChaining) && (nfcip_PFBisIPDU(pfb)) )    {   pfb |= NFCIP_PFB_MI_BIT;        }
 8008a0e:	4b3c      	ldr	r3, [pc, #240]	; (8008b00 <nfcipTx+0x2f4>)
 8008a10:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d008      	beq.n	8008a2a <nfcipTx+0x21e>
 8008a18:	7cfb      	ldrb	r3, [r7, #19]
 8008a1a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d103      	bne.n	8008a2a <nfcipTx+0x21e>
 8008a22:	7cfb      	ldrb	r3, [r7, #19]
 8008a24:	f043 0310 	orr.w	r3, r3, #16
 8008a28:	74fb      	strb	r3, [r7, #19]
            
            /* Store PFB for future handling */
            gNfcip.lastPFB       = pfb;                                                  /* store PFB sent */
 8008a2a:	4a35      	ldr	r2, [pc, #212]	; (8008b00 <nfcipTx+0x2f4>)
 8008a2c:	7cfb      	ldrb	r3, [r7, #19]
 8008a2e:	f882 3053 	strb.w	r3, [r2, #83]	; 0x53
            
            if( !nfcip_PFBisSATN(pfb) )
 8008a32:	7cfb      	ldrb	r3, [r7, #19]
 8008a34:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8008a38:	2b80      	cmp	r3, #128	; 0x80
 8008a3a:	d104      	bne.n	8008a46 <nfcipTx+0x23a>
 8008a3c:	7cfb      	ldrb	r3, [r7, #19]
 8008a3e:	f003 0310 	and.w	r3, r3, #16
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d003      	beq.n	8008a4e <nfcipTx+0x242>
            {
                gNfcip.lastPFBnATN   = pfb;                                              /* store last PFB different then ATN */
 8008a46:	4a2e      	ldr	r2, [pc, #184]	; (8008b00 <nfcipTx+0x2f4>)
 8008a48:	7cfb      	ldrb	r3, [r7, #19]
 8008a4a:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
            }
            
            
            /* Add NAD if it is to be supported */
            if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO )      
 8008a4e:	4b2c      	ldr	r3, [pc, #176]	; (8008b00 <nfcipTx+0x2f4>)
 8008a50:	791b      	ldrb	r3, [r3, #4]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d006      	beq.n	8008a64 <nfcipTx+0x258>
            {
                *(--txBlock) = gNfcip.cfg.nad;                                           /* NAD   */
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	61bb      	str	r3, [r7, #24]
 8008a5c:	4b28      	ldr	r3, [pc, #160]	; (8008b00 <nfcipTx+0x2f4>)
 8008a5e:	791a      	ldrb	r2, [r3, #4]
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	701a      	strb	r2, [r3, #0]
            }
            
            /* Digital 1.0 - 14.8.1.1 & 14.8.1.1 Only add DID if not 0 */
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 8008a64:	4b26      	ldr	r3, [pc, #152]	; (8008b00 <nfcipTx+0x2f4>)
 8008a66:	78db      	ldrb	r3, [r3, #3]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d006      	beq.n	8008a7a <nfcipTx+0x26e>
            {
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	61bb      	str	r3, [r7, #24]
 8008a72:	4b23      	ldr	r3, [pc, #140]	; (8008b00 <nfcipTx+0x2f4>)
 8008a74:	78da      	ldrb	r2, [r3, #3]
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	701a      	strb	r2, [r3, #0]
            }
            
            *(--txBlock) = pfb;                                                          /* PFB */
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	61bb      	str	r3, [r7, #24]
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	7cfa      	ldrb	r2, [r7, #19]
 8008a84:	701a      	strb	r2, [r3, #0]
                        
            
            /* NCI 1.0 - Check if Empty frames are allowed */
            if( (paylLen == 0U) && nfcipIsEmptyDEPDisabled(gNfcip.cfg.oper) && nfcip_PFBisIPDU(pfb) )
 8008a86:	89bb      	ldrh	r3, [r7, #12]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d112      	bne.n	8008ab2 <nfcipTx+0x2a6>
 8008a8c:	4b1c      	ldr	r3, [pc, #112]	; (8008b00 <nfcipTx+0x2f4>)
 8008a8e:	789b      	ldrb	r3, [r3, #2]
 8008a90:	f003 0304 	and.w	r3, r3, #4
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d00c      	beq.n	8008ab2 <nfcipTx+0x2a6>
 8008a98:	7cfb      	ldrb	r3, [r7, #19]
 8008a9a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d107      	bne.n	8008ab2 <nfcipTx+0x2a6>
            {
                return ERR_PARAM;
 8008aa2:	2307      	movs	r3, #7
 8008aa4:	e039      	b.n	8008b1a <nfcipTx+0x30e>
            }
            break;

        /*******************************************************************************/
        default:
            return ERR_PARAM;
 8008aa6:	2307      	movs	r3, #7
 8008aa8:	e037      	b.n	8008b1a <nfcipTx+0x30e>
            break;
 8008aaa:	bf00      	nop
 8008aac:	e002      	b.n	8008ab4 <nfcipTx+0x2a8>
            break;
 8008aae:	bf00      	nop
 8008ab0:	e000      	b.n	8008ab4 <nfcipTx+0x2a8>
            break;
 8008ab2:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Prepend Header                                                              */
    /*******************************************************************************/    
    *(--txBlock) = (uint8_t)cmd;                                                         /* CMD     */
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	61bb      	str	r3, [r7, #24]
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	7bfa      	ldrb	r2, [r7, #15]
 8008abe:	701a      	strb	r2, [r3, #0]
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 8008ac0:	7bfb      	ldrb	r3, [r7, #15]
 8008ac2:	f003 0301 	and.w	r3, r3, #1
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d101      	bne.n	8008ad0 <nfcipTx+0x2c4>
 8008acc:	22d4      	movs	r2, #212	; 0xd4
 8008ace:	e000      	b.n	8008ad2 <nfcipTx+0x2c6>
 8008ad0:	22d5      	movs	r2, #213	; 0xd5
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	61bb      	str	r3, [r7, #24]
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	701a      	strb	r2, [r3, #0]
        
    
    txBufIt += paylLen + (uint16_t)((uint32_t)payloadBuf - (uint32_t)txBlock);           /* Calculate overall buffer size */
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	b29a      	uxth	r2, r3
 8008ae4:	89bb      	ldrh	r3, [r7, #12]
 8008ae6:	4413      	add	r3, r2
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	8bfb      	ldrh	r3, [r7, #30]
 8008aec:	4413      	add	r3, r2
 8008aee:	83fb      	strh	r3, [r7, #30]
    
    
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 8008af0:	4b03      	ldr	r3, [pc, #12]	; (8008b00 <nfcipTx+0x2f4>)
 8008af2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008af6:	8bfa      	ldrh	r2, [r7, #30]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d907      	bls.n	8008b0c <nfcipTx+0x300>
    {
        return ERR_NOTSUPP;
 8008afc:	2318      	movs	r3, #24
 8008afe:	e00c      	b.n	8008b1a <nfcipTx+0x30e>
 8008b00:	20000884 	.word	0x20000884
 8008b04:	2000088b 	.word	0x2000088b
 8008b08:	20000896 	.word	0x20000896
    }
        
    /*******************************************************************************/
    return nfcipDataTx( txBlock, txBufIt, fwt );
 8008b0c:	8bfb      	ldrh	r3, [r7, #30]
 8008b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b10:	4619      	mov	r1, r3
 8008b12:	69b8      	ldr	r0, [r7, #24]
 8008b14:	f000 fca0 	bl	8009458 <nfcipDataTx>
 8008b18:	4603      	mov	r3, r0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3720      	adds	r7, #32
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop

08008b24 <nfcipConfig>:
 ******************************************************************************
 */

/*******************************************************************************/
static void nfcipConfig( const rfalNfcDepConfigs * cfg )
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
    if (cfg == NULL) 
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d034      	beq.n	8008b9c <nfcipConfig+0x78>
    {
        return;
    }
    
    ST_MEMCPY(&gNfcip.cfg, cfg, sizeof(rfalNfcDepConfigs));          /* Copy given config to local       */
 8008b32:	2250      	movs	r2, #80	; 0x50
 8008b34:	6879      	ldr	r1, [r7, #4]
 8008b36:	481b      	ldr	r0, [pc, #108]	; (8008ba4 <nfcipConfig+0x80>)
 8008b38:	f004 fef5 	bl	800d926 <memcpy>
    
    gNfcip.cfg.to   = MIN( RFAL_NFCDEP_WT_TRG_MAX, gNfcip.cfg.to);   /* Ensure proper WT value           */
 8008b3c:	4b19      	ldr	r3, [pc, #100]	; (8008ba4 <nfcipConfig+0x80>)
 8008b3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b42:	2b0e      	cmp	r3, #14
 8008b44:	bf28      	it	cs
 8008b46:	230e      	movcs	r3, #14
 8008b48:	b2da      	uxtb	r2, r3
 8008b4a:	4b16      	ldr	r3, [pc, #88]	; (8008ba4 <nfcipConfig+0x80>)
 8008b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    gNfcip.cfg.did  = nfcip_DIDMax( gNfcip.cfg.did );                /* Ensure proper DID value          */
 8008b50:	4b14      	ldr	r3, [pc, #80]	; (8008ba4 <nfcipConfig+0x80>)
 8008b52:	78db      	ldrb	r3, [r3, #3]
 8008b54:	2b0e      	cmp	r3, #14
 8008b56:	bf28      	it	cs
 8008b58:	230e      	movcs	r3, #14
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	4b11      	ldr	r3, [pc, #68]	; (8008ba4 <nfcipConfig+0x80>)
 8008b5e:	70da      	strb	r2, [r3, #3]
    gNfcip.fsc      = rfalNfcDepLR2FS( gNfcip.cfg.lr );              /* Calculate FSC based on given LR  */
 8008b60:	4b10      	ldr	r3, [pc, #64]	; (8008ba4 <nfcipConfig+0x80>)
 8008b62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008b66:	3301      	adds	r3, #1
 8008b68:	019b      	lsls	r3, r3, #6
 8008b6a:	2bfd      	cmp	r3, #253	; 0xfd
 8008b6c:	d807      	bhi.n	8008b7e <nfcipConfig+0x5a>
 8008b6e:	4b0d      	ldr	r3, [pc, #52]	; (8008ba4 <nfcipConfig+0x80>)
 8008b70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008b74:	3301      	adds	r3, #1
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	019b      	lsls	r3, r3, #6
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	e000      	b.n	8008b80 <nfcipConfig+0x5c>
 8008b7e:	23fe      	movs	r3, #254	; 0xfe
 8008b80:	4a08      	ldr	r2, [pc, #32]	; (8008ba4 <nfcipConfig+0x80>)
 8008b82:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
    
    gNfcip.state = ( ( gNfcip.cfg.role ==  RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_ST_TARG_WAIT_ATR : NFCIP_ST_INIT_IDLE );
 8008b86:	4b07      	ldr	r3, [pc, #28]	; (8008ba4 <nfcipConfig+0x80>)
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d101      	bne.n	8008b92 <nfcipConfig+0x6e>
 8008b8e:	220a      	movs	r2, #10
 8008b90:	e000      	b.n	8008b94 <nfcipConfig+0x70>
 8008b92:	2201      	movs	r2, #1
 8008b94:	4b03      	ldr	r3, [pc, #12]	; (8008ba4 <nfcipConfig+0x80>)
 8008b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008b9a:	e000      	b.n	8008b9e <nfcipConfig+0x7a>
        return;
 8008b9c:	bf00      	nop
}
 8008b9e:	3708      	adds	r7, #8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	20000884 	.word	0x20000884

08008ba8 <nfcipRun>:


/*******************************************************************************/
static ReturnCode nfcipRun( uint16_t *outActRxLen, bool *outIsChaining  )
{
 8008ba8:	b5b0      	push	{r4, r5, r7, lr}
 8008baa:	b086      	sub	sp, #24
 8008bac:	af02      	add	r7, sp, #8
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
    ReturnCode ret;
    
    ret = ERR_SYNTAX;
 8008bb2:	2314      	movs	r3, #20
 8008bb4:	81fb      	strh	r3, [r7, #14]
    
    nfcipLogD( " NFCIP Run() state: %d \r\n", gNfcip.state );
    
    switch( gNfcip.state )
 8008bb6:	4b94      	ldr	r3, [pc, #592]	; (8008e08 <nfcipRun+0x260>)
 8008bb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008bbc:	2b10      	cmp	r3, #16
 8008bbe:	f200 8118 	bhi.w	8008df2 <nfcipRun+0x24a>
 8008bc2:	a201      	add	r2, pc, #4	; (adr r2, 8008bc8 <nfcipRun+0x20>)
 8008bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc8:	08008c0d 	.word	0x08008c0d
 8008bcc:	08008df3 	.word	0x08008df3
 8008bd0:	08008df3 	.word	0x08008df3
 8008bd4:	08008df3 	.word	0x08008df3
 8008bd8:	08008c0d 	.word	0x08008c0d
 8008bdc:	08008c11 	.word	0x08008c11
 8008be0:	08008c6d 	.word	0x08008c6d
 8008be4:	08008df3 	.word	0x08008df3
 8008be8:	08008df3 	.word	0x08008df3
 8008bec:	08008df3 	.word	0x08008df3
 8008bf0:	08008df3 	.word	0x08008df3
 8008bf4:	08008df3 	.word	0x08008df3
 8008bf8:	08008c0d 	.word	0x08008c0d
 8008bfc:	08008db9 	.word	0x08008db9
 8008c00:	08008c95 	.word	0x08008c95
 8008c04:	08008d3f 	.word	0x08008d3f
 8008c08:	08008c0d 	.word	0x08008c0d
        /*******************************************************************************/
        case NFCIP_ST_IDLE:
        case NFCIP_ST_INIT_DEP_IDLE:
        case NFCIP_ST_TARG_DEP_IDLE:
        case NFCIP_ST_TARG_DEP_SLEEP:
            return ERR_NONE;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	e0f6      	b.n	8008dfe <nfcipRun+0x256>
            
        /*******************************************************************************/
        case NFCIP_ST_INIT_DEP_TX:
            
            nfcipLogD( " NFCIP(I) Tx PNI: %d txLen: %d \r\n", gNfcip.pni, gNfcip.txBufLen );
            ret = nfcipTx( NFCIP_CMD_DEP_REQ, gNfcip.txBuf, &gNfcip.txBuf[gNfcip.txBufPaylPos], gNfcip.txBufLen, nfcip_PFBIPDU( gNfcip.pni ), (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) );
 8008c10:	4b7d      	ldr	r3, [pc, #500]	; (8008e08 <nfcipRun+0x260>)
 8008c12:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8008c14:	4b7c      	ldr	r3, [pc, #496]	; (8008e08 <nfcipRun+0x260>)
 8008c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c18:	4a7b      	ldr	r2, [pc, #492]	; (8008e08 <nfcipRun+0x260>)
 8008c1a:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 8008c1e:	189c      	adds	r4, r3, r2
 8008c20:	4b79      	ldr	r3, [pc, #484]	; (8008e08 <nfcipRun+0x260>)
 8008c22:	f8b3 5068 	ldrh.w	r5, [r3, #104]	; 0x68
 8008c26:	4b78      	ldr	r3, [pc, #480]	; (8008e08 <nfcipRun+0x260>)
 8008c28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c2c:	f003 0303 	and.w	r3, r3, #3
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	4a75      	ldr	r2, [pc, #468]	; (8008e08 <nfcipRun+0x260>)
 8008c34:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8008c36:	4a74      	ldr	r2, [pc, #464]	; (8008e08 <nfcipRun+0x260>)
 8008c38:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008c3a:	440a      	add	r2, r1
 8008c3c:	9201      	str	r2, [sp, #4]
 8008c3e:	9300      	str	r3, [sp, #0]
 8008c40:	462b      	mov	r3, r5
 8008c42:	4622      	mov	r2, r4
 8008c44:	4601      	mov	r1, r0
 8008c46:	2006      	movs	r0, #6
 8008c48:	f7ff fde0 	bl	800880c <nfcipTx>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	81fb      	strh	r3, [r7, #14]
                        
            switch( ret )
 8008c50:	89fb      	ldrh	r3, [r7, #14]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d005      	beq.n	8008c62 <nfcipRun+0xba>
            {
                case ERR_PARAM:
                default:
                  gNfcip.state = NFCIP_ST_INIT_DEP_IDLE;
 8008c56:	4b6c      	ldr	r3, [pc, #432]	; (8008e08 <nfcipRun+0x260>)
 8008c58:	2204      	movs	r2, #4
 8008c5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                  return ret;
 8008c5e:	89fb      	ldrh	r3, [r7, #14]
 8008c60:	e0cd      	b.n	8008dfe <nfcipRun+0x256>
                  
              case ERR_NONE:
                  gNfcip.state = NFCIP_ST_INIT_DEP_RX;
 8008c62:	4b69      	ldr	r3, [pc, #420]	; (8008e08 <nfcipRun+0x260>)
 8008c64:	2206      	movs	r2, #6
 8008c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                  break;
 8008c6a:	bf00      	nop
            /* fall through */
            
        /*******************************************************************************/
        case NFCIP_ST_INIT_DEP_RX:          /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */

            ret = nfcipDataRx( false );
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	f000 fc13 	bl	8009498 <nfcipDataRx>
 8008c72:	4603      	mov	r3, r0
 8008c74:	81fb      	strh	r3, [r7, #14]
            
            if( ret != ERR_BUSY )
 8008c76:	89fb      	ldrh	r3, [r7, #14]
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	f000 80bc 	beq.w	8008df6 <nfcipRun+0x24e>
            {
                ret = nfcipInitiatorHandleDEP( ret, *gNfcip.rxRcvdLen, outActRxLen, outIsChaining );
 8008c7e:	4b62      	ldr	r3, [pc, #392]	; (8008e08 <nfcipRun+0x260>)
 8008c80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c82:	8819      	ldrh	r1, [r3, #0]
 8008c84:	89f8      	ldrh	r0, [r7, #14]
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	f7fe fea5 	bl	80079d8 <nfcipInitiatorHandleDEP>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	81fb      	strh	r3, [r7, #14]
            }
            
            break;
 8008c92:	e0b0      	b.n	8008df6 <nfcipRun+0x24e>
            
        /*******************************************************************************/    
        case NFCIP_ST_TARG_DEP_RTOX:
            
            if( !nfcipTimerisExpired( gNfcip.RTOXTimer ) )                    /* Do nothing until RTOX timer has expired */
 8008c94:	4b5c      	ldr	r3, [pc, #368]	; (8008e08 <nfcipRun+0x260>)
 8008c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7f9 fd2f 	bl	80026fc <timerIsExpired>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	f083 0301 	eor.w	r3, r3, #1
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d001      	beq.n	8008cae <nfcipRun+0x106>
            {
                return ERR_BUSY;
 8008caa:	2302      	movs	r3, #2
 8008cac:	e0a7      	b.n	8008dfe <nfcipRun+0x256>
            }
            
            /* If we cannot send a RTOX raise a Timeout error so that we do not   
             * hold the field On forever in AP2P                                  */
            if( nfcipIsRTOXReqDisabled(gNfcip.cfg.oper) )
 8008cae:	4b56      	ldr	r3, [pc, #344]	; (8008e08 <nfcipRun+0x260>)
 8008cb0:	789b      	ldrb	r3, [r3, #2]
 8008cb2:	f003 0301 	and.w	r3, r3, #1
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d001      	beq.n	8008cbe <nfcipRun+0x116>
            {
                /* We should reEnable Rx, and measure time between our field Off to 
                 * either report link loss or recover               #287          */
                nfcipLogI( " NFCIP(T) RTOX not sent due to config, NOT reenabling Rx \r\n" );
                return ERR_TIMEOUT;
 8008cba:	2304      	movs	r3, #4
 8008cbc:	e09f      	b.n	8008dfe <nfcipRun+0x256>
            } 

            if( gNfcip.cntRTOXRetrys++ > NFCIP_MAX_RTOX_RETRYS )              /* Check maximum consecutive RTOX requests */
 8008cbe:	4b52      	ldr	r3, [pc, #328]	; (8008e08 <nfcipRun+0x260>)
 8008cc0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008cc4:	1c5a      	adds	r2, r3, #1
 8008cc6:	b2d1      	uxtb	r1, r2
 8008cc8:	4a4f      	ldr	r2, [pc, #316]	; (8008e08 <nfcipRun+0x260>)
 8008cca:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
 8008cce:	2b03      	cmp	r3, #3
 8008cd0:	d901      	bls.n	8008cd6 <nfcipRun+0x12e>
            {
                return ERR_PROTO;
 8008cd2:	230b      	movs	r3, #11
 8008cd4:	e093      	b.n	8008dfe <nfcipRun+0x256>
            }
            
            nfcipLogI( " NFCIP(T) RTOX sent \r\n" );
            
            gNfcip.lastRTOX = nfcip_RTOXTargMax(gNfcip.cfg.to);               /* Calculate requested RTOX value, and send it */                        
 8008cd6:	4b4c      	ldr	r3, [pc, #304]	; (8008e08 <nfcipRun+0x260>)
 8008cd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cdc:	f003 030f 	and.w	r3, r3, #15
 8008ce0:	330c      	adds	r3, #12
 8008ce2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8008cea:	2b3a      	cmp	r3, #58	; 0x3a
 8008cec:	d80b      	bhi.n	8008d06 <nfcipRun+0x15e>
 8008cee:	4b46      	ldr	r3, [pc, #280]	; (8008e08 <nfcipRun+0x260>)
 8008cf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cf4:	f003 030f 	and.w	r3, r3, #15
 8008cf8:	330c      	adds	r3, #12
 8008cfa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	e000      	b.n	8008d08 <nfcipRun+0x160>
 8008d06:	233b      	movs	r3, #59	; 0x3b
 8008d08:	4a3f      	ldr	r2, [pc, #252]	; (8008e08 <nfcipRun+0x260>)
 8008d0a:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), gNfcip.lastRTOX ) );
 8008d0e:	4b3e      	ldr	r3, [pc, #248]	; (8008e08 <nfcipRun+0x260>)
 8008d10:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8008d14:	4619      	mov	r1, r3
 8008d16:	2090      	movs	r0, #144	; 0x90
 8008d18:	f7fe fde0 	bl	80078dc <nfcipDEPControlMsg>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	81fb      	strh	r3, [r7, #14]
 8008d20:	89fb      	ldrh	r3, [r7, #14]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d001      	beq.n	8008d2a <nfcipRun+0x182>
 8008d26:	89fb      	ldrh	r3, [r7, #14]
 8008d28:	e069      	b.n	8008dfe <nfcipRun+0x256>
            
            /* Set waiting for RTOX Ack Flag */
            gNfcip.isWait4RTOX = true;
 8008d2a:	4b37      	ldr	r3, [pc, #220]	; (8008e08 <nfcipRun+0x260>)
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
            
            gNfcip.state = NFCIP_ST_TARG_DEP_RX;                              /* Go back to Rx to process RTOX ack       */
 8008d32:	4b35      	ldr	r3, [pc, #212]	; (8008e08 <nfcipRun+0x260>)
 8008d34:	220d      	movs	r2, #13
 8008d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_BUSY;
 8008d3a:	2302      	movs	r3, #2
 8008d3c:	e05f      	b.n	8008dfe <nfcipRun+0x256>
            
        /*******************************************************************************/
        case NFCIP_ST_TARG_DEP_TX:
            
            nfcipLogD( " NFCIP(T) Tx PNI: %d txLen: %d \r\n", gNfcip.pni, gNfcip.txBufLen );
            ret = nfcipTx( NFCIP_CMD_DEP_RES, gNfcip.txBuf, &gNfcip.txBuf[gNfcip.txBufPaylPos], gNfcip.txBufLen, nfcip_PFBIPDU( gNfcip.pni ), NFCIP_NO_FWT );
 8008d3e:	4b32      	ldr	r3, [pc, #200]	; (8008e08 <nfcipRun+0x260>)
 8008d40:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8008d42:	4b31      	ldr	r3, [pc, #196]	; (8008e08 <nfcipRun+0x260>)
 8008d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d46:	4a30      	ldr	r2, [pc, #192]	; (8008e08 <nfcipRun+0x260>)
 8008d48:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 8008d4c:	1898      	adds	r0, r3, r2
 8008d4e:	4b2e      	ldr	r3, [pc, #184]	; (8008e08 <nfcipRun+0x260>)
 8008d50:	f8b3 4068 	ldrh.w	r4, [r3, #104]	; 0x68
 8008d54:	4b2c      	ldr	r3, [pc, #176]	; (8008e08 <nfcipRun+0x260>)
 8008d56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d5a:	f003 0303 	and.w	r3, r3, #3
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	f04f 32ff 	mov.w	r2, #4294967295
 8008d64:	9201      	str	r2, [sp, #4]
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	4623      	mov	r3, r4
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	2007      	movs	r0, #7
 8008d6e:	f7ff fd4d 	bl	800880c <nfcipTx>
 8008d72:	4603      	mov	r3, r0
 8008d74:	81fb      	strh	r3, [r7, #14]
            
            /* Clear flags */
            gNfcip.isTxPending = false;
 8008d76:	4b24      	ldr	r3, [pc, #144]	; (8008e08 <nfcipRun+0x260>)
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
            gNfcip.isWait4RTOX = false;
 8008d7e:	4b22      	ldr	r3, [pc, #136]	; (8008e08 <nfcipRun+0x260>)
 8008d80:	2200      	movs	r2, #0
 8008d82:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
            
            /* Digital 1.0 14.12.3.4 Increment the current PNI after Tx */
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 8008d86:	4b20      	ldr	r3, [pc, #128]	; (8008e08 <nfcipRun+0x260>)
 8008d88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	f003 0303 	and.w	r3, r3, #3
 8008d94:	b2da      	uxtb	r2, r3
 8008d96:	4b1c      	ldr	r3, [pc, #112]	; (8008e08 <nfcipRun+0x260>)
 8008d98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            switch( ret )
 8008d9c:	89fb      	ldrh	r3, [r7, #14]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d005      	beq.n	8008dae <nfcipRun+0x206>
            {
                case ERR_PARAM:
                default:
                  gNfcip.state = NFCIP_ST_TARG_DEP_IDLE;                      /* Upon Tx error, goto IDLE state */
 8008da2:	4b19      	ldr	r3, [pc, #100]	; (8008e08 <nfcipRun+0x260>)
 8008da4:	220c      	movs	r2, #12
 8008da6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                  return ret;
 8008daa:	89fb      	ldrh	r3, [r7, #14]
 8008dac:	e027      	b.n	8008dfe <nfcipRun+0x256>
                  
              case ERR_NONE:
                  gNfcip.state = NFCIP_ST_TARG_DEP_RX;                        /* All OK, goto Rx state          */
 8008dae:	4b16      	ldr	r3, [pc, #88]	; (8008e08 <nfcipRun+0x260>)
 8008db0:	220d      	movs	r2, #13
 8008db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                  break;
 8008db6:	bf00      	nop
            /* fall through */
            
        /*******************************************************************************/
        case NFCIP_ST_TARG_DEP_RX:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( gNfcip.isReqPending )    /* if already has Data should be from a DEP from nfcipTargetHandleActivation()  */
 8008db8:	4b13      	ldr	r3, [pc, #76]	; (8008e08 <nfcipRun+0x260>)
 8008dba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d006      	beq.n	8008dd0 <nfcipRun+0x228>
            {
                nfcipLogD( " NFCIP(T) Skipping Rx Using DEP from Activation \r\n" );
                
                gNfcip.isReqPending = false;
 8008dc2:	4b11      	ldr	r3, [pc, #68]	; (8008e08 <nfcipRun+0x260>)
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
                ret = ERR_NONE;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	81fb      	strh	r3, [r7, #14]
 8008dce:	e004      	b.n	8008dda <nfcipRun+0x232>
            }
            else
            {
                ret = nfcipDataRx( false );
 8008dd0:	2000      	movs	r0, #0
 8008dd2:	f000 fb61 	bl	8009498 <nfcipDataRx>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	81fb      	strh	r3, [r7, #14]
            }
            
            if( ret != ERR_BUSY )
 8008dda:	89fb      	ldrh	r3, [r7, #14]
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d00c      	beq.n	8008dfa <nfcipRun+0x252>
            {
                ret = nfcipTargetHandleRX( ret, outActRxLen, outIsChaining );
 8008de0:	89fb      	ldrh	r3, [r7, #14]
 8008de2:	683a      	ldr	r2, [r7, #0]
 8008de4:	6879      	ldr	r1, [r7, #4]
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7ff f8c6 	bl	8007f78 <nfcipTargetHandleRX>
 8008dec:	4603      	mov	r3, r0
 8008dee:	81fb      	strh	r3, [r7, #14]
            }
            
            break;
 8008df0:	e003      	b.n	8008dfa <nfcipRun+0x252>
            
        /*******************************************************************************/
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 8008df2:	bf00      	nop
 8008df4:	e002      	b.n	8008dfc <nfcipRun+0x254>
            break;
 8008df6:	bf00      	nop
 8008df8:	e000      	b.n	8008dfc <nfcipRun+0x254>
            break;
 8008dfa:	bf00      	nop
    }
    return ret;
 8008dfc:	89fb      	ldrh	r3, [r7, #14]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bdb0      	pop	{r4, r5, r7, pc}
 8008e06:	bf00      	nop
 8008e08:	20000884 	.word	0x20000884

08008e0c <rfalNfcDepInitialize>:
}


/*******************************************************************************/
void rfalNfcDepInitialize( void )
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	af00      	add	r7, sp, #0
    nfcipLogD( " NFCIP Ini() \r\n" );
	
    gNfcip.state          = NFCIP_ST_IDLE;
 8008e10:	4b28      	ldr	r3, [pc, #160]	; (8008eb4 <rfalNfcDepInitialize+0xa8>)
 8008e12:	2200      	movs	r2, #0
 8008e14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    gNfcip.isDeactivating = NULL;
 8008e18:	4b26      	ldr	r3, [pc, #152]	; (8008eb4 <rfalNfcDepInitialize+0xa8>)
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    
    gNfcip.isTxPending    = false;
 8008e20:	4b24      	ldr	r3, [pc, #144]	; (8008eb4 <rfalNfcDepInitialize+0xa8>)
 8008e22:	2200      	movs	r2, #0
 8008e24:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
    gNfcip.isWait4RTOX    = false;
 8008e28:	4b22      	ldr	r3, [pc, #136]	; (8008eb4 <rfalNfcDepInitialize+0xa8>)
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
    gNfcip.isReqPending   = false;
 8008e30:	4b20      	ldr	r3, [pc, #128]	; (8008eb4 <rfalNfcDepInitialize+0xa8>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    
            
    gNfcip.cfg.oper  = (RFAL_NFCDEP_OPER_FULL_MI_DIS | RFAL_NFCDEP_OPER_EMPTY_DEP_EN | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 8008e38:	4b1e      	ldr	r3, [pc, #120]	; (8008eb4 <rfalNfcDepInitialize+0xa8>)
 8008e3a:	2202      	movs	r2, #2
 8008e3c:	709a      	strb	r2, [r3, #2]
    
    gNfcip.cfg.did   = RFAL_NFCDEP_DID_NO;
 8008e3e:	4b1d      	ldr	r3, [pc, #116]	; (8008eb4 <rfalNfcDepInitialize+0xa8>)
 8008e40:	2200      	movs	r2, #0
 8008e42:	70da      	strb	r2, [r3, #3]
    gNfcip.cfg.nad   = RFAL_NFCDEP_NAD_NO;
 8008e44:	4b1b      	ldr	r3, [pc, #108]	; (8008eb4 <rfalNfcDepInitialize+0xa8>)
 8008e46:	2200      	movs	r2, #0
 8008e48:	711a      	strb	r2, [r3, #4]
    
    gNfcip.cfg.br    = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8008e4a:	4b1a      	ldr	r3, [pc, #104]	; (8008eb4 <rfalNfcDepInitialize+0xa8>)
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	719a      	strb	r2, [r3, #6]
    gNfcip.cfg.bs    = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8008e50:	4b18      	ldr	r3, [pc, #96]	; (8008eb4 <rfalNfcDepInitialize+0xa8>)
 8008e52:	2200      	movs	r2, #0
 8008e54:	715a      	strb	r2, [r3, #5]
    
    gNfcip.cfg.lr    = RFAL_NFCDEP_LR_254;
 8008e56:	4b17      	ldr	r3, [pc, #92]	; (8008eb4 <rfalNfcDepInitialize+0xa8>)
 8008e58:	2203      	movs	r2, #3
 8008e5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    gNfcip.fsc       = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 8008e5e:	4b15      	ldr	r3, [pc, #84]	; (8008eb4 <rfalNfcDepInitialize+0xa8>)
 8008e60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008e64:	3301      	adds	r3, #1
 8008e66:	019b      	lsls	r3, r3, #6
 8008e68:	2bfd      	cmp	r3, #253	; 0xfd
 8008e6a:	d807      	bhi.n	8008e7c <rfalNfcDepInitialize+0x70>
 8008e6c:	4b11      	ldr	r3, [pc, #68]	; (8008eb4 <rfalNfcDepInitialize+0xa8>)
 8008e6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008e72:	3301      	adds	r3, #1
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	019b      	lsls	r3, r3, #6
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	e000      	b.n	8008e7e <rfalNfcDepInitialize+0x72>
 8008e7c:	23fe      	movs	r3, #254	; 0xfe
 8008e7e:	4a0d      	ldr	r2, [pc, #52]	; (8008eb4 <rfalNfcDepInitialize+0xa8>)
 8008e80:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
    
    gNfcip.cfg.gbLen = 0;    
 8008e84:	4b0b      	ldr	r3, [pc, #44]	; (8008eb4 <rfalNfcDepInitialize+0xa8>)
 8008e86:	2200      	movs	r2, #0
 8008e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    
    gNfcip.cfg.fwt   = RFAL_NFCDEP_MAX_FWT;
 8008e8c:	4b09      	ldr	r3, [pc, #36]	; (8008eb4 <rfalNfcDepInitialize+0xa8>)
 8008e8e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008e92:	649a      	str	r2, [r3, #72]	; 0x48
    gNfcip.cfg.dFwt  = RFAL_NFCDEP_MAX_FWT;
 8008e94:	4b07      	ldr	r3, [pc, #28]	; (8008eb4 <rfalNfcDepInitialize+0xa8>)
 8008e96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008e9a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    gNfcip.pni       = 0;    
 8008e9c:	4b05      	ldr	r3, [pc, #20]	; (8008eb4 <rfalNfcDepInitialize+0xa8>)
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    gNfcip.RTOXTimer = 0;
 8008ea4:	4b03      	ldr	r3, [pc, #12]	; (8008eb4 <rfalNfcDepInitialize+0xa8>)
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	67da      	str	r2, [r3, #124]	; 0x7c

    nfcipClearCounters();
 8008eaa:	f7fe fd77 	bl	800799c <nfcipClearCounters>
}
 8008eae:	bf00      	nop
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	20000884 	.word	0x20000884

08008eb8 <rfalNfcDepATR>:
}


/*******************************************************************************/
ReturnCode rfalNfcDepATR( const rfalNfcDepAtrParam* param, rfalNfcDepAtrRes *atrRes, uint8_t* atrResLen )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b0c0      	sub	sp, #256	; 0x100
 8008ebc:	af04      	add	r7, sp, #16
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]
    uint8_t           msgIt;
    uint8_t           txBuf[RFAL_NFCDEP_ATRREQ_MAX_LEN];
    uint8_t           rxBuf[NFCIP_ATRRES_BUF_LEN];
    
    
    if( (param == NULL) || (atrRes == NULL) || (atrResLen == NULL) )
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d005      	beq.n	8008ed6 <rfalNfcDepATR+0x1e>
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d002      	beq.n	8008ed6 <rfalNfcDepATR+0x1e>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <rfalNfcDepATR+0x22>
    {
        return ERR_PARAM;
 8008ed6:	2307      	movs	r3, #7
 8008ed8:	e0be      	b.n	8009058 <rfalNfcDepATR+0x1a0>
    
    /*******************************************************************************/
    /* Configure NFC-DEP layer                                                     */
    /*******************************************************************************/
    
    cfg.did  = param->DID;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	7a5b      	ldrb	r3, [r3, #9]
 8008ede:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
    cfg.nad  = param->NAD;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	7a9b      	ldrb	r3, [r3, #10]
 8008ee6:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
    cfg.fwt  = RFAL_NFCDEP_MAX_FWT;
 8008eea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008eee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    cfg.dFwt = RFAL_NFCDEP_MAX_FWT;
 8008ef2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008ef6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    cfg.br   = param->BR;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	7b1b      	ldrb	r3, [r3, #12]
 8008efe:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    cfg.bs   = param->BS;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	7adb      	ldrb	r3, [r3, #11]
 8008f06:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
    cfg.lr   = param->LR;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	7b5b      	ldrb	r3, [r3, #13]
 8008f0e:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
    cfg.to   = RFAL_NFCDEP_WT_TRG_MAX;            /* Not used in Initiator mode */
 8008f12:	230e      	movs	r3, #14
 8008f14:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
    
    
    cfg.gbLen = param->GBLen;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	7d1b      	ldrb	r3, [r3, #20]
 8008f1c:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
    if( cfg.gbLen > 0U )                          /* MISRA 21.18 */
 8008f20:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d00a      	beq.n	8008f3e <rfalNfcDepATR+0x86>
    {
        ST_MEMCPY( cfg.gb, param->GB, cfg.gbLen );
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6919      	ldr	r1, [r3, #16]
 8008f2c:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8008f30:	461a      	mov	r2, r3
 8008f32:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008f36:	3312      	adds	r3, #18
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f004 fcf4 	bl	800d926 <memcpy>
    }
    
    cfg.nfcidLen = param->nfcidLen;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	7a1b      	ldrb	r3, [r3, #8]
 8008f42:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
    if( cfg.nfcidLen > 0U )                       /* MISRA 21.18 */
 8008f46:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00a      	beq.n	8008f64 <rfalNfcDepATR+0xac>
    {
        ST_MEMCPY( cfg.nfcid, param->nfcid, cfg.nfcidLen );
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6859      	ldr	r1, [r3, #4]
 8008f52:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8008f56:	461a      	mov	r2, r3
 8008f58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008f5c:	3307      	adds	r3, #7
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f004 fce1 	bl	800d926 <memcpy>
    }
    
    cfg.role     = RFAL_NFCDEP_ROLE_INITIATOR;
 8008f64:	2300      	movs	r3, #0
 8008f66:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
    cfg.oper     = param->operParam;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	785b      	ldrb	r3, [r3, #1]
 8008f6e:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
    cfg.commMode = param->commMode;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d

    rfalNfcDepInitialize();
 8008f7a:	f7ff ff47 	bl	8008e0c <rfalNfcDepInitialize>
    nfcipConfig( &cfg );
 8008f7e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7ff fdce 	bl	8008b24 <nfcipConfig>
    
    /*******************************************************************************/
    /* Send ATR_REQ                                                                */
    /*******************************************************************************/
    
    EXIT_ON_ERR( ret, nfcipTxRx(NFCIP_CMD_ATR_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, NFCIP_ATRRES_BUF_LEN, &rxLen ) );
 8008f88:	4b35      	ldr	r3, [pc, #212]	; (8009060 <rfalNfcDepATR+0x1a8>)
 8008f8a:	785b      	ldrb	r3, [r3, #1]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d101      	bne.n	8008f94 <rfalNfcDepATR+0xdc>
 8008f90:	4a34      	ldr	r2, [pc, #208]	; (8009064 <rfalNfcDepATR+0x1ac>)
 8008f92:	e000      	b.n	8008f96 <rfalNfcDepATR+0xde>
 8008f94:	4a34      	ldr	r2, [pc, #208]	; (8009068 <rfalNfcDepATR+0x1b0>)
 8008f96:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008f9a:	f107 039a 	add.w	r3, r7, #154	; 0x9a
 8008f9e:	9303      	str	r3, [sp, #12]
 8008fa0:	2341      	movs	r3, #65	; 0x41
 8008fa2:	9302      	str	r3, [sp, #8]
 8008fa4:	f107 0314 	add.w	r3, r7, #20
 8008fa8:	9301      	str	r3, [sp, #4]
 8008faa:	2300      	movs	r3, #0
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	2300      	movs	r3, #0
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	f7fe fc4b 	bl	800784c <nfcipTxRx>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 8008fbc:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d002      	beq.n	8008fca <rfalNfcDepATR+0x112>
 8008fc4:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8008fc8:	e046      	b.n	8009058 <rfalNfcDepATR+0x1a0>
    
    
    /*******************************************************************************/
    /* ATR sent, check response                                                    */
    /*******************************************************************************/
    msgIt = 0;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
    rxLen = ((uint16_t)rxBuf[msgIt++] - RFAL_NFCDEP_LEN_LEN);                           /* use LEN byte             */
 8008fd0:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8008fd4:	1c5a      	adds	r2, r3, #1
 8008fd6:	f887 20ed 	strb.w	r2, [r7, #237]	; 0xed
 8008fda:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008fde:	4413      	add	r3, r2
 8008fe0:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
    
    if( (rxLen < RFAL_NFCDEP_ATRRES_MIN_LEN) || (rxLen > RFAL_NFCDEP_ATRRES_MAX_LEN) )  /* Checking length: ATR_RES */
 8008fee:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008ff2:	2b10      	cmp	r3, #16
 8008ff4:	d903      	bls.n	8008ffe <rfalNfcDepATR+0x146>
 8008ff6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008ffa:	2b40      	cmp	r3, #64	; 0x40
 8008ffc:	d901      	bls.n	8009002 <rfalNfcDepATR+0x14a>
    {
        return ERR_PROTO;
 8008ffe:	230b      	movs	r3, #11
 8009000:	e02a      	b.n	8009058 <rfalNfcDepATR+0x1a0>
    }
    
    if( rxBuf[msgIt++] != NFCIP_RES )                                                   /* Checking if is a response*/
 8009002:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8009006:	1c5a      	adds	r2, r3, #1
 8009008:	f887 20ed 	strb.w	r2, [r7, #237]	; 0xed
 800900c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8009010:	4413      	add	r3, r2
 8009012:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 8009016:	2bd5      	cmp	r3, #213	; 0xd5
 8009018:	d001      	beq.n	800901e <rfalNfcDepATR+0x166>
    {
        return ERR_PROTO;
 800901a:	230b      	movs	r3, #11
 800901c:	e01c      	b.n	8009058 <rfalNfcDepATR+0x1a0>
    }
    
    if( rxBuf[msgIt++] != (uint8_t)NFCIP_CMD_ATR_RES )                                  /* Checking if is a ATR RES */
 800901e:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8009022:	1c5a      	adds	r2, r3, #1
 8009024:	f887 20ed 	strb.w	r2, [r7, #237]	; 0xed
 8009028:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800902c:	4413      	add	r3, r2
 800902e:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 8009032:	2b01      	cmp	r3, #1
 8009034:	d001      	beq.n	800903a <rfalNfcDepATR+0x182>
    {
        return ERR_PROTO;
 8009036:	230b      	movs	r3, #11
 8009038:	e00e      	b.n	8009058 <rfalNfcDepATR+0x1a0>
    }
    
    ST_MEMCPY( (uint8_t*)atrRes, (rxBuf + RFAL_NFCDEP_LEN_LEN), rxLen );
 800903a:	f107 0314 	add.w	r3, r7, #20
 800903e:	3301      	adds	r3, #1
 8009040:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8009044:	4619      	mov	r1, r3
 8009046:	68b8      	ldr	r0, [r7, #8]
 8009048:	f004 fc6d 	bl	800d926 <memcpy>
    *atrResLen = (uint8_t)rxLen;
 800904c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009050:	b2da      	uxtb	r2, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	37f0      	adds	r7, #240	; 0xf0
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}
 8009060:	20000884 	.word	0x20000884
 8009064:	00200201 	.word	0x00200201
 8009068:	01000201 	.word	0x01000201

0800906c <rfalNfcDepPSL>:


/*******************************************************************************/
ReturnCode rfalNfcDepPSL( uint8_t BRS, uint8_t FSL )
{
 800906c:	b590      	push	{r4, r7, lr}
 800906e:	b08b      	sub	sp, #44	; 0x2c
 8009070:	af04      	add	r7, sp, #16
 8009072:	4603      	mov	r3, r0
 8009074:	460a      	mov	r2, r1
 8009076:	71fb      	strb	r3, [r7, #7]
 8009078:	4613      	mov	r3, r2
 800907a:	71bb      	strb	r3, [r7, #6]
    uint16_t   rxLen;
    uint8_t    msgIt;
    uint8_t    txBuf[NFCIP_PSLREQ_LEN + NFCIP_PSLPAY_LEN];
    uint8_t    rxBuf[NFCIP_PSLRES_LEN];
    
    msgIt = NFCIP_PSLREQ_LEN;
 800907c:	2304      	movs	r3, #4
 800907e:	75fb      	strb	r3, [r7, #23]
    
    txBuf[msgIt++] = BRS;
 8009080:	7dfb      	ldrb	r3, [r7, #23]
 8009082:	1c5a      	adds	r2, r3, #1
 8009084:	75fa      	strb	r2, [r7, #23]
 8009086:	f107 0218 	add.w	r2, r7, #24
 800908a:	4413      	add	r3, r2
 800908c:	79fa      	ldrb	r2, [r7, #7]
 800908e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    txBuf[msgIt++] = FSL;
 8009092:	7dfb      	ldrb	r3, [r7, #23]
 8009094:	1c5a      	adds	r2, r3, #1
 8009096:	75fa      	strb	r2, [r7, #23]
 8009098:	f107 0218 	add.w	r2, r7, #24
 800909c:	4413      	add	r3, r2
 800909e:	79ba      	ldrb	r2, [r7, #6]
 80090a0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    
    /*******************************************************************************/
    /* Send PSL REQ and wait for response                                          */
    /*******************************************************************************/
    EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_PSL_REQ, txBuf, nfcipRWTActivation(), &txBuf[NFCIP_PSLREQ_LEN], (msgIt - NFCIP_PSLREQ_LEN), rxBuf, NFCIP_PSLRES_LEN, &rxLen ) );
 80090a4:	4b2f      	ldr	r3, [pc, #188]	; (8009164 <rfalNfcDepPSL+0xf8>)
 80090a6:	785b      	ldrb	r3, [r3, #1]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d101      	bne.n	80090b0 <rfalNfcDepPSL+0x44>
 80090ac:	482e      	ldr	r0, [pc, #184]	; (8009168 <rfalNfcDepPSL+0xfc>)
 80090ae:	e000      	b.n	80090b2 <rfalNfcDepPSL+0x46>
 80090b0:	482e      	ldr	r0, [pc, #184]	; (800916c <rfalNfcDepPSL+0x100>)
 80090b2:	7dfb      	ldrb	r3, [r7, #23]
 80090b4:	3b04      	subs	r3, #4
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	f107 020c 	add.w	r2, r7, #12
 80090bc:	1d14      	adds	r4, r2, #4
 80090be:	f107 010c 	add.w	r1, r7, #12
 80090c2:	f107 0212 	add.w	r2, r7, #18
 80090c6:	9203      	str	r2, [sp, #12]
 80090c8:	2204      	movs	r2, #4
 80090ca:	9202      	str	r2, [sp, #8]
 80090cc:	f107 0208 	add.w	r2, r7, #8
 80090d0:	9201      	str	r2, [sp, #4]
 80090d2:	9300      	str	r3, [sp, #0]
 80090d4:	4623      	mov	r3, r4
 80090d6:	4602      	mov	r2, r0
 80090d8:	2004      	movs	r0, #4
 80090da:	f7fe fbb7 	bl	800784c <nfcipTxRx>
 80090de:	4603      	mov	r3, r0
 80090e0:	82bb      	strh	r3, [r7, #20]
 80090e2:	8abb      	ldrh	r3, [r7, #20]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d001      	beq.n	80090ec <rfalNfcDepPSL+0x80>
 80090e8:	8abb      	ldrh	r3, [r7, #20]
 80090ea:	e037      	b.n	800915c <rfalNfcDepPSL+0xf0>
    
    
    /*******************************************************************************/
    /* PSL sent, check response                                                    */
    /*******************************************************************************/
    msgIt = 0;
 80090ec:	2300      	movs	r3, #0
 80090ee:	75fb      	strb	r3, [r7, #23]
    rxLen = (uint16_t)(rxBuf[msgIt++]);                /* use LEN byte                   */
 80090f0:	7dfb      	ldrb	r3, [r7, #23]
 80090f2:	1c5a      	adds	r2, r3, #1
 80090f4:	75fa      	strb	r2, [r7, #23]
 80090f6:	f107 0218 	add.w	r2, r7, #24
 80090fa:	4413      	add	r3, r2
 80090fc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8009100:	b29b      	uxth	r3, r3
 8009102:	827b      	strh	r3, [r7, #18]
        
    if( rxLen < NFCIP_PSLRES_LEN )                     /* Checking length: LEN + RLS_RES */
 8009104:	8a7b      	ldrh	r3, [r7, #18]
 8009106:	2b03      	cmp	r3, #3
 8009108:	d801      	bhi.n	800910e <rfalNfcDepPSL+0xa2>
    {
        return ERR_PROTO;
 800910a:	230b      	movs	r3, #11
 800910c:	e026      	b.n	800915c <rfalNfcDepPSL+0xf0>
    }
    
    if( rxBuf[msgIt++] != NFCIP_RES )                  /* Checking if is a response      */
 800910e:	7dfb      	ldrb	r3, [r7, #23]
 8009110:	1c5a      	adds	r2, r3, #1
 8009112:	75fa      	strb	r2, [r7, #23]
 8009114:	f107 0218 	add.w	r2, r7, #24
 8009118:	4413      	add	r3, r2
 800911a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800911e:	2bd5      	cmp	r3, #213	; 0xd5
 8009120:	d001      	beq.n	8009126 <rfalNfcDepPSL+0xba>
    {
        return ERR_PROTO;
 8009122:	230b      	movs	r3, #11
 8009124:	e01a      	b.n	800915c <rfalNfcDepPSL+0xf0>
    }
    
    if( rxBuf[msgIt++] != (uint8_t)NFCIP_CMD_PSL_RES ) /* Checking if is a PSL RES       */
 8009126:	7dfb      	ldrb	r3, [r7, #23]
 8009128:	1c5a      	adds	r2, r3, #1
 800912a:	75fa      	strb	r2, [r7, #23]
 800912c:	f107 0218 	add.w	r2, r7, #24
 8009130:	4413      	add	r3, r2
 8009132:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8009136:	2b05      	cmp	r3, #5
 8009138:	d001      	beq.n	800913e <rfalNfcDepPSL+0xd2>
    {
        return ERR_PROTO;
 800913a:	230b      	movs	r3, #11
 800913c:	e00e      	b.n	800915c <rfalNfcDepPSL+0xf0>
    }
    
    if( rxBuf[msgIt++] != gNfcip.cfg.did )             /* Checking DID                   */
 800913e:	7dfb      	ldrb	r3, [r7, #23]
 8009140:	1c5a      	adds	r2, r3, #1
 8009142:	75fa      	strb	r2, [r7, #23]
 8009144:	f107 0218 	add.w	r2, r7, #24
 8009148:	4413      	add	r3, r2
 800914a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800914e:	4b05      	ldr	r3, [pc, #20]	; (8009164 <rfalNfcDepPSL+0xf8>)
 8009150:	78db      	ldrb	r3, [r3, #3]
 8009152:	429a      	cmp	r2, r3
 8009154:	d001      	beq.n	800915a <rfalNfcDepPSL+0xee>
    {
        return ERR_PROTO;
 8009156:	230b      	movs	r3, #11
 8009158:	e000      	b.n	800915c <rfalNfcDepPSL+0xf0>
    }
    
    return ERR_NONE;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	371c      	adds	r7, #28
 8009160:	46bd      	mov	sp, r7
 8009162:	bd90      	pop	{r4, r7, pc}
 8009164:	20000884 	.word	0x20000884
 8009168:	00200201 	.word	0x00200201
 800916c:	01000201 	.word	0x01000201

08009170 <rfalNfcDepRLS>:
}


/*******************************************************************************/
ReturnCode rfalNfcDepRLS( void )
{   
 8009170:	b580      	push	{r7, lr}
 8009172:	b08a      	sub	sp, #40	; 0x28
 8009174:	af04      	add	r7, sp, #16
    ReturnCode ret;
    uint8_t    txBuf[RFAL_NFCDEP_HEADER_PAD + NFCIP_RLSREQ_LEN];
    uint8_t    rxBuf[NFCIP_RLSRES_LEN];    
    uint8_t    rxMsgIt;
    uint16_t   rxLen = 0;
 8009176:	2300      	movs	r3, #0
 8009178:	80fb      	strh	r3, [r7, #6]
    
    if ( gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET )  /* Target has no release procedure */
 800917a:	4b30      	ldr	r3, [pc, #192]	; (800923c <rfalNfcDepRLS+0xcc>)
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	2b01      	cmp	r3, #1
 8009180:	d101      	bne.n	8009186 <rfalNfcDepRLS+0x16>
    {
        return ERR_NONE;
 8009182:	2300      	movs	r3, #0
 8009184:	e055      	b.n	8009232 <rfalNfcDepRLS+0xc2>
    }
        
    /* Repeating a RLS REQ is optional, not doing it */
    EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_RLS_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, RFAL_NFCDEP_ATRRES_MAX_LEN, &rxLen  ) );
 8009186:	4b2d      	ldr	r3, [pc, #180]	; (800923c <rfalNfcDepRLS+0xcc>)
 8009188:	785b      	ldrb	r3, [r3, #1]
 800918a:	2b01      	cmp	r3, #1
 800918c:	d101      	bne.n	8009192 <rfalNfcDepRLS+0x22>
 800918e:	4a2c      	ldr	r2, [pc, #176]	; (8009240 <rfalNfcDepRLS+0xd0>)
 8009190:	e000      	b.n	8009194 <rfalNfcDepRLS+0x24>
 8009192:	4a2c      	ldr	r2, [pc, #176]	; (8009244 <rfalNfcDepRLS+0xd4>)
 8009194:	f107 010c 	add.w	r1, r7, #12
 8009198:	1dbb      	adds	r3, r7, #6
 800919a:	9303      	str	r3, [sp, #12]
 800919c:	2340      	movs	r3, #64	; 0x40
 800919e:	9302      	str	r3, [sp, #8]
 80091a0:	f107 0308 	add.w	r3, r7, #8
 80091a4:	9301      	str	r3, [sp, #4]
 80091a6:	2300      	movs	r3, #0
 80091a8:	9300      	str	r3, [sp, #0]
 80091aa:	2300      	movs	r3, #0
 80091ac:	200a      	movs	r0, #10
 80091ae:	f7fe fb4d 	bl	800784c <nfcipTxRx>
 80091b2:	4603      	mov	r3, r0
 80091b4:	82fb      	strh	r3, [r7, #22]
 80091b6:	8afb      	ldrh	r3, [r7, #22]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d001      	beq.n	80091c0 <rfalNfcDepRLS+0x50>
 80091bc:	8afb      	ldrh	r3, [r7, #22]
 80091be:	e038      	b.n	8009232 <rfalNfcDepRLS+0xc2>
    
    /*******************************************************************************/
    rxMsgIt = 0;
 80091c0:	2300      	movs	r3, #0
 80091c2:	757b      	strb	r3, [r7, #21]
       
    if( rxBuf[rxMsgIt++] < NFCIP_RLSRES_MIN )             /* Checking length: LEN + RLS_RES */
 80091c4:	7d7b      	ldrb	r3, [r7, #21]
 80091c6:	1c5a      	adds	r2, r3, #1
 80091c8:	757a      	strb	r2, [r7, #21]
 80091ca:	f107 0218 	add.w	r2, r7, #24
 80091ce:	4413      	add	r3, r2
 80091d0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d801      	bhi.n	80091dc <rfalNfcDepRLS+0x6c>
    {
        return ERR_PROTO;
 80091d8:	230b      	movs	r3, #11
 80091da:	e02a      	b.n	8009232 <rfalNfcDepRLS+0xc2>
    }
        
    if( rxBuf[rxMsgIt++] != NFCIP_RES )                   /* Checking if is a response      */
 80091dc:	7d7b      	ldrb	r3, [r7, #21]
 80091de:	1c5a      	adds	r2, r3, #1
 80091e0:	757a      	strb	r2, [r7, #21]
 80091e2:	f107 0218 	add.w	r2, r7, #24
 80091e6:	4413      	add	r3, r2
 80091e8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80091ec:	2bd5      	cmp	r3, #213	; 0xd5
 80091ee:	d001      	beq.n	80091f4 <rfalNfcDepRLS+0x84>
    {
        return ERR_PROTO;
 80091f0:	230b      	movs	r3, #11
 80091f2:	e01e      	b.n	8009232 <rfalNfcDepRLS+0xc2>
    }
    
    if( rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_RLS_RES )  /* Checking if is RLS RES         */
 80091f4:	7d7b      	ldrb	r3, [r7, #21]
 80091f6:	1c5a      	adds	r2, r3, #1
 80091f8:	757a      	strb	r2, [r7, #21]
 80091fa:	f107 0218 	add.w	r2, r7, #24
 80091fe:	4413      	add	r3, r2
 8009200:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8009204:	2b0b      	cmp	r3, #11
 8009206:	d001      	beq.n	800920c <rfalNfcDepRLS+0x9c>
    {
        return ERR_PROTO;
 8009208:	230b      	movs	r3, #11
 800920a:	e012      	b.n	8009232 <rfalNfcDepRLS+0xc2>
    }
     
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 800920c:	4b0b      	ldr	r3, [pc, #44]	; (800923c <rfalNfcDepRLS+0xcc>)
 800920e:	78db      	ldrb	r3, [r3, #3]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00d      	beq.n	8009230 <rfalNfcDepRLS+0xc0>
    {
        if ( rxBuf[rxMsgIt++] != gNfcip.cfg.did ) 
 8009214:	7d7b      	ldrb	r3, [r7, #21]
 8009216:	1c5a      	adds	r2, r3, #1
 8009218:	757a      	strb	r2, [r7, #21]
 800921a:	f107 0218 	add.w	r2, r7, #24
 800921e:	4413      	add	r3, r2
 8009220:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8009224:	4b05      	ldr	r3, [pc, #20]	; (800923c <rfalNfcDepRLS+0xcc>)
 8009226:	78db      	ldrb	r3, [r3, #3]
 8009228:	429a      	cmp	r2, r3
 800922a:	d001      	beq.n	8009230 <rfalNfcDepRLS+0xc0>
        {
            return ERR_PROTO;
 800922c:	230b      	movs	r3, #11
 800922e:	e000      	b.n	8009232 <rfalNfcDepRLS+0xc2>
        }
    }
    
    return ERR_NONE;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3718      	adds	r7, #24
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	20000884 	.word	0x20000884
 8009240:	00200201 	.word	0x00200201
 8009244:	01000201 	.word	0x01000201

08009248 <rfalNfcDepInitiatorHandleActivation>:


/*******************************************************************************/
ReturnCode rfalNfcDepInitiatorHandleActivation( rfalNfcDepAtrParam* param, rfalBitRate desiredBR, rfalNfcDepDevice* nfcDepDev )
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b086      	sub	sp, #24
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	460b      	mov	r3, r1
 8009252:	607a      	str	r2, [r7, #4]
 8009254:	72fb      	strb	r3, [r7, #11]
    uint8_t    maxRetyrs;
    uint8_t    PSL_BRS;
    uint8_t    PSL_FSL;
    bool       sendPSL;
    
    if( (param == NULL) || (nfcDepDev == NULL) )
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d002      	beq.n	8009262 <rfalNfcDepInitiatorHandleActivation+0x1a>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d101      	bne.n	8009266 <rfalNfcDepInitiatorHandleActivation+0x1e>
    {
        return ERR_PARAM;
 8009262:	2307      	movs	r3, #7
 8009264:	e0da      	b.n	800941c <rfalNfcDepInitiatorHandleActivation+0x1d4>
    }
    
    param->NAD = RFAL_NFCDEP_NAD_NO;          /* Digital 1.1  16.6.2.9  Initiator SHALL NOT use NAD */
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2200      	movs	r2, #0
 800926a:	729a      	strb	r2, [r3, #10]
    maxRetyrs  = NFCIP_ATR_RETRY_MAX;
 800926c:	2302      	movs	r3, #2
 800926e:	75fb      	strb	r3, [r7, #23]
    /*******************************************************************************/
    /* Send ATR REQ and wait for response                                          */
    /*******************************************************************************/
    do{  /* Upon transmission error ATR REQ should be retried */
        
         ret = rfalNfcDepATR( param, &nfcDepDev->activation.Target.ATR_RES, &nfcDepDev->activation.Target.ATR_RESLen );
 8009270:	6879      	ldr	r1, [r7, #4]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	3341      	adds	r3, #65	; 0x41
 8009276:	461a      	mov	r2, r3
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f7ff fe1d 	bl	8008eb8 <rfalNfcDepATR>
 800927e:	4603      	mov	r3, r0
 8009280:	827b      	strh	r3, [r7, #18]
         
         if( nfcipIsTransmissionError(ret) )
 8009282:	8a7b      	ldrh	r3, [r7, #18]
 8009284:	2b15      	cmp	r3, #21
 8009286:	d005      	beq.n	8009294 <rfalNfcDepInitiatorHandleActivation+0x4c>
 8009288:	8a7b      	ldrh	r3, [r7, #18]
 800928a:	2b09      	cmp	r3, #9
 800928c:	d002      	beq.n	8009294 <rfalNfcDepInitiatorHandleActivation+0x4c>
 800928e:	8a7b      	ldrh	r3, [r7, #18]
 8009290:	2b1b      	cmp	r3, #27
 8009292:	d105      	bne.n	80092a0 <rfalNfcDepInitiatorHandleActivation+0x58>
         {
             continue;
         }
         break;
    }
    while( (maxRetyrs--) != 0U );
 8009294:	7dfb      	ldrb	r3, [r7, #23]
 8009296:	1e5a      	subs	r2, r3, #1
 8009298:	75fa      	strb	r2, [r7, #23]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d1e8      	bne.n	8009270 <rfalNfcDepInitiatorHandleActivation+0x28>
 800929e:	e000      	b.n	80092a2 <rfalNfcDepInitiatorHandleActivation+0x5a>
         break;
 80092a0:	bf00      	nop
    
    if( ret != ERR_NONE )
 80092a2:	8a7b      	ldrh	r3, [r7, #18]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d001      	beq.n	80092ac <rfalNfcDepInitiatorHandleActivation+0x64>
    {
        return ret;
 80092a8:	8a7b      	ldrh	r3, [r7, #18]
 80092aa:	e0b7      	b.n	800941c <rfalNfcDepInitiatorHandleActivation+0x1d4>
    }
    
    /*******************************************************************************/
    /* Compute NFC-DEP device with ATR_RES                                         */
    /*******************************************************************************/
    nfcDepDev->info.GBLen = (nfcDepDev->activation.Target.ATR_RESLen - RFAL_NFCDEP_ATRRES_MIN_LEN);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092b2:	3b11      	subs	r3, #17
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    nfcDepDev->info.DID   = nfcDepDev->activation.Target.ATR_RES.DID;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	7b1a      	ldrb	r2, [r3, #12]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    nfcDepDev->info.NAD   = RFAL_NFCDEP_NAD_NO;                                      /* Digital 1.1  16.6.3.11 Initiator SHALL ignore b1 of PPt */
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    nfcDepDev->info.LR    = rfalNfcDepPP2LR( nfcDepDev->activation.Target.ATR_RES.PPt );
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	7c1b      	ldrb	r3, [r3, #16]
 80092d2:	091b      	lsrs	r3, r3, #4
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	f003 0303 	and.w	r3, r3, #3
 80092da:	b2da      	uxtb	r2, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    nfcDepDev->info.FS    = rfalNfcDepLR2FS( nfcDepDev->info.LR );
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80092e8:	3301      	adds	r3, #1
 80092ea:	019b      	lsls	r3, r3, #6
 80092ec:	2bfd      	cmp	r3, #253	; 0xfd
 80092ee:	d807      	bhi.n	8009300 <rfalNfcDepInitiatorHandleActivation+0xb8>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80092f6:	3301      	adds	r3, #1
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	019b      	lsls	r3, r3, #6
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	e000      	b.n	8009302 <rfalNfcDepInitiatorHandleActivation+0xba>
 8009300:	22fe      	movs	r2, #254	; 0xfe
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    nfcDepDev->info.WT    = (nfcDepDev->activation.Target.ATR_RES.TO & RFAL_NFCDEP_WT_MASK);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	7bdb      	ldrb	r3, [r3, #15]
 800930c:	f003 030f 	and.w	r3, r3, #15
 8009310:	b2da      	uxtb	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    nfcDepDev->info.FWT   = rfalNfcDepCalculateRWT( nfcDepDev->info.WT );
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800931e:	4618      	mov	r0, r3
 8009320:	f000 f882 	bl	8009428 <rfalNfcDepCalculateRWT>
 8009324:	4602      	mov	r2, r0
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	649a      	str	r2, [r3, #72]	; 0x48
    nfcDepDev->info.dFWT  = RFAL_NFCDEP_WT_DELTA;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	220c      	movs	r2, #12
 800932e:	64da      	str	r2, [r3, #76]	; 0x4c
    
    rfalGetBitRate( &nfcDepDev->info.DSI, &nfcDepDev->info.DRI );
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	3355      	adds	r3, #85	; 0x55
 800933a:	4619      	mov	r1, r3
 800933c:	4610      	mov	r0, r2
 800933e:	f002 f837 	bl	800b3b0 <rfalGetBitRate>
    
    
    /*******************************************************************************/
    /* Check if a PSL needs to be sent                                                */
    /*******************************************************************************/
    sendPSL = false;
 8009342:	2300      	movs	r3, #0
 8009344:	757b      	strb	r3, [r7, #21]
    PSL_BRS = rfalNfcDepDx2BRS( nfcDepDev->info.DSI );  /* Set current bit rate divisor on both directions  */
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800934c:	00db      	lsls	r3, r3, #3
 800934e:	b2db      	uxtb	r3, r3
 8009350:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009354:	b2da      	uxtb	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800935c:	f003 0307 	and.w	r3, r3, #7
 8009360:	b2db      	uxtb	r3, r3
 8009362:	4313      	orrs	r3, r2
 8009364:	75bb      	strb	r3, [r7, #22]
    PSL_FSL = nfcDepDev->info.LR;                       /* Set current Frame Size                           */
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800936c:	747b      	strb	r3, [r7, #17]
    
    
    /*******************************************************************************/
    /* Check Baud rates                                                            */
    /*******************************************************************************/
    if( nfcDepDev->info.DSI != desiredBR )    /* if desired BR is different    */
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009374:	7afa      	ldrb	r2, [r7, #11]
 8009376:	429a      	cmp	r2, r3
 8009378:	d018      	beq.n	80093ac <rfalNfcDepInitiatorHandleActivation+0x164>
    {
       /* || (target->brt != RFAL_NFCDEP_Bx_NO_HIGH_BR) || (target->bst != RFAL_NFCDEP_Bx_NO_HIGH_BR)  */  /* if target supports higher BR, must send PSL? */
        if( nfcipDxIsSupported( (uint8_t)desiredBR, nfcDepDev->activation.Target.ATR_RES.BRt, nfcDepDev->activation.Target.ATR_RES.BSt ) )  /* if desired BR is supported     */    /* MISRA 13.5 */
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	7b99      	ldrb	r1, [r3, #14]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	7b5a      	ldrb	r2, [r3, #13]
 8009382:	7afb      	ldrb	r3, [r7, #11]
 8009384:	4618      	mov	r0, r3
 8009386:	f7fe fa3d 	bl	8007804 <nfcipDxIsSupported>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d00d      	beq.n	80093ac <rfalNfcDepInitiatorHandleActivation+0x164>
        {
            sendPSL = true;
 8009390:	2301      	movs	r3, #1
 8009392:	757b      	strb	r3, [r7, #21]
            PSL_BRS = rfalNfcDepDx2BRS( desiredBR );
 8009394:	7afb      	ldrb	r3, [r7, #11]
 8009396:	00db      	lsls	r3, r3, #3
 8009398:	b2db      	uxtb	r3, r3
 800939a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800939e:	b2da      	uxtb	r2, r3
 80093a0:	7afb      	ldrb	r3, [r7, #11]
 80093a2:	f003 0307 	and.w	r3, r3, #7
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	4313      	orrs	r3, r2
 80093aa:	75bb      	strb	r3, [r7, #22]
        }
    }

    
    /*******************************************************************************/
    if( sendPSL )
 80093ac:	7d7b      	ldrb	r3, [r7, #21]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d033      	beq.n	800941a <rfalNfcDepInitiatorHandleActivation+0x1d2>
    {
        /*******************************************************************************/
        /* Send PSL REQ and wait for response                                          */
        /*******************************************************************************/
        EXIT_ON_ERR( ret, rfalNfcDepPSL(PSL_BRS, PSL_FSL) );
 80093b2:	7c7a      	ldrb	r2, [r7, #17]
 80093b4:	7dbb      	ldrb	r3, [r7, #22]
 80093b6:	4611      	mov	r1, r2
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7ff fe57 	bl	800906c <rfalNfcDepPSL>
 80093be:	4603      	mov	r3, r0
 80093c0:	827b      	strh	r3, [r7, #18]
 80093c2:	8a7b      	ldrh	r3, [r7, #18]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d001      	beq.n	80093cc <rfalNfcDepInitiatorHandleActivation+0x184>
 80093c8:	8a7b      	ldrh	r3, [r7, #18]
 80093ca:	e027      	b.n	800941c <rfalNfcDepInitiatorHandleActivation+0x1d4>
        
        /* Check if bit rate has been changed */
        if( nfcDepDev->info.DSI != desiredBR )
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80093d2:	7afa      	ldrb	r2, [r7, #11]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d01e      	beq.n	8009416 <rfalNfcDepInitiatorHandleActivation+0x1ce>
        {
            /* Check if device was in Passive NFC-A and went to higher bit rates, use NFC-F */
            if( (nfcDepDev->info.DSI == RFAL_BR_106) && (gNfcip.cfg.commMode == RFAL_NFCDEP_COMM_PASSIVE) )
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d107      	bne.n	80093f2 <rfalNfcDepInitiatorHandleActivation+0x1aa>
 80093e2:	4b10      	ldr	r3, [pc, #64]	; (8009424 <rfalNfcDepInitiatorHandleActivation+0x1dc>)
 80093e4:	785b      	ldrb	r3, [r3, #1]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d103      	bne.n	80093f2 <rfalNfcDepInitiatorHandleActivation+0x1aa>
            {
                
            #if RFAL_FEATURE_NFCF 
                /* If Passive initialize NFC-F module */
                rfalNfcfPollerInitialize( desiredBR );
 80093ea:	7afb      	ldrb	r3, [r7, #11]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f001 f8a3 	bl	800a538 <rfalNfcfPollerInitialize>
                return ERR_NOTSUPP;
            #endif /* RFAL_FEATURE_NFCF */
                
            }
            
            nfcDepDev->info.DRI  = desiredBR;  /* DSI Bit Rate coding from Initiator  to Target  */
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	7afa      	ldrb	r2, [r7, #11]
 80093f6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            nfcDepDev->info.DSI  = desiredBR;  /* DRI Bit Rate coding from Target to Initiator   */
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	7afa      	ldrb	r2, [r7, #11]
 80093fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            
            rfalSetBitRate( nfcDepDev->info.DSI, nfcDepDev->info.DRI );
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800940e:	4619      	mov	r1, r3
 8009410:	4610      	mov	r0, r2
 8009412:	f001 fd6b 	bl	800aeec <rfalSetBitRate>
        }
        
        
        return ERR_NONE;   /* PSL has been sent    */
 8009416:	2300      	movs	r3, #0
 8009418:	e000      	b.n	800941c <rfalNfcDepInitiatorHandleActivation+0x1d4>
    }
    
    return ERR_NONE;       /* No PSL has been sent */
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	3718      	adds	r7, #24
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}
 8009424:	20000884 	.word	0x20000884

08009428 <rfalNfcDepCalculateRWT>:


/*******************************************************************************/
uint32_t rfalNfcDepCalculateRWT( uint8_t wt )
{
 8009428:	b480      	push	{r7}
 800942a:	b085      	sub	sp, #20
 800942c:	af00      	add	r7, sp, #0
 800942e:	4603      	mov	r3, r0
 8009430:	71fb      	strb	r3, [r7, #7]
    /* Digital 1.0  14.6.3.8  &  Digital 1.1  16.6.3.9     */
    /* Digital 1.1  16.6.3.9 treat all RFU values as WT=14 */
    uint8_t responseWaitTime = MIN( RFAL_NFCDEP_WT_INI_MAX, wt );
 8009432:	79fb      	ldrb	r3, [r7, #7]
 8009434:	2b0e      	cmp	r3, #14
 8009436:	bf28      	it	cs
 8009438:	230e      	movcs	r3, #14
 800943a:	73fb      	strb	r3, [r7, #15]
        
    return (uint32_t)rfalNfcDepWT2RWT(responseWaitTime);
 800943c:	7bfb      	ldrb	r3, [r7, #15]
 800943e:	f003 030f 	and.w	r3, r3, #15
 8009442:	330c      	adds	r3, #12
 8009444:	2201      	movs	r2, #1
 8009446:	fa02 f303 	lsl.w	r3, r2, r3
}
 800944a:	4618      	mov	r0, r3
 800944c:	3714      	adds	r7, #20
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr
	...

08009458 <nfcipDataTx>:



/*******************************************************************************/
static ReturnCode nfcipDataTx( uint8_t* txBuf, uint16_t txBufLen, uint32_t fwt )
{
 8009458:	b590      	push	{r4, r7, lr}
 800945a:	b089      	sub	sp, #36	; 0x24
 800945c:	af04      	add	r7, sp, #16
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	460b      	mov	r3, r1
 8009462:	607a      	str	r2, [r7, #4]
 8009464:	817b      	strh	r3, [r7, #10]
   return rfalTransceiveBlockingTx( txBuf, txBufLen, gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen, (RFAL_TXRX_FLAGS_DEFAULT | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_ON), ((fwt == NFCIP_NO_FWT) ? RFAL_FWT_NONE : fwt) );
 8009466:	4b0b      	ldr	r3, [pc, #44]	; (8009494 <nfcipDataTx+0x3c>)
 8009468:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800946a:	4b0a      	ldr	r3, [pc, #40]	; (8009494 <nfcipDataTx+0x3c>)
 800946c:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
 8009470:	4b08      	ldr	r3, [pc, #32]	; (8009494 <nfcipDataTx+0x3c>)
 8009472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009474:	8979      	ldrh	r1, [r7, #10]
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	9202      	str	r2, [sp, #8]
 800947a:	2204      	movs	r2, #4
 800947c:	9201      	str	r2, [sp, #4]
 800947e:	9300      	str	r3, [sp, #0]
 8009480:	4623      	mov	r3, r4
 8009482:	4602      	mov	r2, r0
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f002 f9f1 	bl	800b86c <rfalTransceiveBlockingTx>
 800948a:	4603      	mov	r3, r0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	bd90      	pop	{r4, r7, pc}
 8009494:	20000884 	.word	0x20000884

08009498 <nfcipDataRx>:


/*******************************************************************************/
static ReturnCode nfcipDataRx( bool blocking )
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	4603      	mov	r3, r0
 80094a0:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    /* Perform Rx either blocking or non-blocking */
    if( blocking )
 80094a2:	79fb      	ldrb	r3, [r7, #7]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d004      	beq.n	80094b2 <nfcipDataRx+0x1a>
    {
        ret = rfalTransceiveBlockingRx();
 80094a8:	f002 fa2c 	bl	800b904 <rfalTransceiveBlockingRx>
 80094ac:	4603      	mov	r3, r0
 80094ae:	81fb      	strh	r3, [r7, #14]
 80094b0:	e003      	b.n	80094ba <nfcipDataRx+0x22>
    }
    else
    {
        ret = rfalGetTransceiveStatus();
 80094b2:	f002 fa91 	bl	800b9d8 <rfalGetTransceiveStatus>
 80094b6:	4603      	mov	r3, r0
 80094b8:	81fb      	strh	r3, [r7, #14]
    }
    
    if( ret != ERR_BUSY )
 80094ba:	89fb      	ldrh	r3, [r7, #14]
 80094bc:	2b02      	cmp	r3, #2
 80094be:	d028      	beq.n	8009512 <nfcipDataRx+0x7a>
    {
        if( gNfcip.rxRcvdLen != NULL )
 80094c0:	4b16      	ldr	r3, [pc, #88]	; (800951c <nfcipDataRx+0x84>)
 80094c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d024      	beq.n	8009512 <nfcipDataRx+0x7a>
        {
            (*gNfcip.rxRcvdLen) = rfalConvBitsToBytes( *gNfcip.rxRcvdLen );
 80094c8:	4b14      	ldr	r3, [pc, #80]	; (800951c <nfcipDataRx+0x84>)
 80094ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094cc:	881b      	ldrh	r3, [r3, #0]
 80094ce:	3307      	adds	r3, #7
 80094d0:	08da      	lsrs	r2, r3, #3
 80094d2:	4b12      	ldr	r3, [pc, #72]	; (800951c <nfcipDataRx+0x84>)
 80094d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094d6:	b292      	uxth	r2, r2
 80094d8:	801a      	strh	r2, [r3, #0]
                        
            if( (ret == ERR_NONE) && (gNfcip.rxBuf != NULL) )
 80094da:	89fb      	ldrh	r3, [r7, #14]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d118      	bne.n	8009512 <nfcipDataRx+0x7a>
 80094e0:	4b0e      	ldr	r3, [pc, #56]	; (800951c <nfcipDataRx+0x84>)
 80094e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d014      	beq.n	8009512 <nfcipDataRx+0x7a>
            {
                /* Digital 1.1  16.4.1.3 - Length byte LEN SHALL have a value between 3 and 255 -> otherwise treat as Transmission Error *
                 *                       - Ensure that actual received and frame length do match, otherwise treat as Transmission error  */
                if( (*gNfcip.rxRcvdLen != (uint16_t)*gNfcip.rxBuf) || (*gNfcip.rxRcvdLen < RFAL_NFCDEP_LEN_MIN) || (*gNfcip.rxRcvdLen > RFAL_NFCDEP_LEN_MAX) )
 80094e8:	4b0c      	ldr	r3, [pc, #48]	; (800951c <nfcipDataRx+0x84>)
 80094ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094ec:	881a      	ldrh	r2, [r3, #0]
 80094ee:	4b0b      	ldr	r3, [pc, #44]	; (800951c <nfcipDataRx+0x84>)
 80094f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d109      	bne.n	800950e <nfcipDataRx+0x76>
 80094fa:	4b08      	ldr	r3, [pc, #32]	; (800951c <nfcipDataRx+0x84>)
 80094fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094fe:	881b      	ldrh	r3, [r3, #0]
 8009500:	2b02      	cmp	r3, #2
 8009502:	d904      	bls.n	800950e <nfcipDataRx+0x76>
 8009504:	4b05      	ldr	r3, [pc, #20]	; (800951c <nfcipDataRx+0x84>)
 8009506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009508:	881b      	ldrh	r3, [r3, #0]
 800950a:	2bff      	cmp	r3, #255	; 0xff
 800950c:	d901      	bls.n	8009512 <nfcipDataRx+0x7a>
                {
                    return ERR_FRAMING;
 800950e:	2309      	movs	r3, #9
 8009510:	e000      	b.n	8009514 <nfcipDataRx+0x7c>
                }
            }
        }
    }
    
    return ret;
 8009512:	89fb      	ldrh	r3, [r7, #14]
}
 8009514:	4618      	mov	r0, r3
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	20000884 	.word	0x20000884

08009520 <rfalNfcDepGetTransceiveStatus>:
}


/*******************************************************************************/
ReturnCode rfalNfcDepGetTransceiveStatus( void )
{
 8009520:	b580      	push	{r7, lr}
 8009522:	af00      	add	r7, sp, #0
    return nfcipRun( gNfcip.rxRcvdLen, gNfcip.isChaining );
 8009524:	4b05      	ldr	r3, [pc, #20]	; (800953c <rfalNfcDepGetTransceiveStatus+0x1c>)
 8009526:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009528:	4b04      	ldr	r3, [pc, #16]	; (800953c <rfalNfcDepGetTransceiveStatus+0x1c>)
 800952a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800952c:	4619      	mov	r1, r3
 800952e:	4610      	mov	r0, r2
 8009530:	f7ff fb3a 	bl	8008ba8 <nfcipRun>
 8009534:	4603      	mov	r3, r0
}
 8009536:	4618      	mov	r0, r3
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	20000884 	.word	0x20000884

08009540 <rfalNfcaCalculateBcc>:
 * LOCAL FUNCTIONS
 ******************************************************************************
 */

static uint8_t rfalNfcaCalculateBcc( const uint8_t* buf, uint8_t bufLen )
{
 8009540:	b480      	push	{r7}
 8009542:	b085      	sub	sp, #20
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	460b      	mov	r3, r1
 800954a:	70fb      	strb	r3, [r7, #3]
    uint8_t i;
    uint8_t BCC;
    
    BCC = 0;
 800954c:	2300      	movs	r3, #0
 800954e:	73bb      	strb	r3, [r7, #14]
    
    /* BCC is XOR over first 4 bytes of the SDD_RES  Digital 1.1 6.7.2 */
    for(i = 0; i < bufLen; i++)
 8009550:	2300      	movs	r3, #0
 8009552:	73fb      	strb	r3, [r7, #15]
 8009554:	e009      	b.n	800956a <rfalNfcaCalculateBcc+0x2a>
    {
        BCC ^= buf[i];
 8009556:	7bfb      	ldrb	r3, [r7, #15]
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	4413      	add	r3, r2
 800955c:	781a      	ldrb	r2, [r3, #0]
 800955e:	7bbb      	ldrb	r3, [r7, #14]
 8009560:	4053      	eors	r3, r2
 8009562:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < bufLen; i++)
 8009564:	7bfb      	ldrb	r3, [r7, #15]
 8009566:	3301      	adds	r3, #1
 8009568:	73fb      	strb	r3, [r7, #15]
 800956a:	7bfa      	ldrb	r2, [r7, #15]
 800956c:	78fb      	ldrb	r3, [r7, #3]
 800956e:	429a      	cmp	r2, r3
 8009570:	d3f1      	bcc.n	8009556 <rfalNfcaCalculateBcc+0x16>
    }
    
    return BCC;
 8009572:	7bbb      	ldrb	r3, [r7, #14]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3714      	adds	r7, #20
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <rfalNfcaPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcaPollerInitialize( void )
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCA, RFAL_BR_106, RFAL_BR_106 ) );
 8009586:	2200      	movs	r2, #0
 8009588:	2100      	movs	r1, #0
 800958a:	2001      	movs	r0, #1
 800958c:	f001 fb9c 	bl	800acc8 <rfalSetMode>
 8009590:	4603      	mov	r3, r0
 8009592:	80fb      	strh	r3, [r7, #6]
 8009594:	88fb      	ldrh	r3, [r7, #6]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <rfalNfcaPollerInitialize+0x1e>
 800959a:	88fb      	ldrh	r3, [r7, #6]
 800959c:	e00e      	b.n	80095bc <rfalNfcaPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 800959e:	2001      	movs	r0, #1
 80095a0:	f001 ff2c 	bl	800b3fc <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCA );
 80095a4:	4807      	ldr	r0, [pc, #28]	; (80095c4 <rfalNfcaPollerInitialize+0x44>)
 80095a6:	f001 ff63 	bl	800b470 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCA_POLLER );
 80095aa:	f240 4094 	movw	r0, #1172	; 0x494
 80095ae:	f001 ff4b 	bl	800b448 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCA_POLLER );
 80095b2:	f641 207c 	movw	r0, #6780	; 0x1a7c
 80095b6:	f001 ff31 	bl	800b41c <rfalSetFDTPoll>
    
    return ERR_NONE;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	000108d8 	.word	0x000108d8

080095c8 <rfalNfcaPollerCheckPresence>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerCheckPresence( rfal14443AShortFrameCmd cmd, rfalNfcaSensRes *sensRes )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b086      	sub	sp, #24
 80095cc:	af02      	add	r7, sp, #8
 80095ce:	4603      	mov	r3, r0
 80095d0:	6039      	str	r1, [r7, #0]
 80095d2:	71fb      	strb	r3, [r7, #7]
    uint16_t   rcvLen;
    
    /* Digital 1.1 6.10.1.3  For Commands ALL_REQ, SENS_REQ, SDD_REQ, and SEL_REQ, the NFC Forum Device      *
     *              MUST treat receipt of a Listen Frame at a time after FDT(Listen, min) as a Timeour Error */
    
    ret = rfalISO14443ATransceiveShortFrame(  cmd, (uint8_t*)sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 80095d4:	f107 020c 	add.w	r2, r7, #12
 80095d8:	79f8      	ldrb	r0, [r7, #7]
 80095da:	f240 6354 	movw	r3, #1620	; 0x654
 80095de:	9300      	str	r3, [sp, #0]
 80095e0:	4613      	mov	r3, r2
 80095e2:	2210      	movs	r2, #16
 80095e4:	6839      	ldr	r1, [r7, #0]
 80095e6:	f003 f943 	bl	800c870 <rfalISO14443ATransceiveShortFrame>
 80095ea:	4603      	mov	r3, r0
 80095ec:	81fb      	strh	r3, [r7, #14]
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || (ret == ERR_NOMEM) || (ret == ERR_FRAMING) || (ret == ERR_PAR) )
 80095ee:	89fb      	ldrh	r3, [r7, #14]
 80095f0:	2b1d      	cmp	r3, #29
 80095f2:	d00b      	beq.n	800960c <rfalNfcaPollerCheckPresence+0x44>
 80095f4:	89fb      	ldrh	r3, [r7, #14]
 80095f6:	2b15      	cmp	r3, #21
 80095f8:	d008      	beq.n	800960c <rfalNfcaPollerCheckPresence+0x44>
 80095fa:	89fb      	ldrh	r3, [r7, #14]
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d005      	beq.n	800960c <rfalNfcaPollerCheckPresence+0x44>
 8009600:	89fb      	ldrh	r3, [r7, #14]
 8009602:	2b09      	cmp	r3, #9
 8009604:	d002      	beq.n	800960c <rfalNfcaPollerCheckPresence+0x44>
 8009606:	89fb      	ldrh	r3, [r7, #14]
 8009608:	2b1b      	cmp	r3, #27
 800960a:	d101      	bne.n	8009610 <rfalNfcaPollerCheckPresence+0x48>
    {
       ret = ERR_NONE;
 800960c:	2300      	movs	r3, #0
 800960e:	81fb      	strh	r3, [r7, #14]
    }

    return ret;
 8009610:	89fb      	ldrh	r3, [r7, #14]
}
 8009612:	4618      	mov	r0, r3
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <rfalNfcaPollerTechnologyDetection>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerTechnologyDetection( rfalComplianceMode compMode, rfalNfcaSensRes *sensRes )
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b084      	sub	sp, #16
 800961e:	af00      	add	r7, sp, #0
 8009620:	4603      	mov	r3, r0
 8009622:	6039      	str	r1, [r7, #0]
 8009624:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalNfcaPollerCheckPresence( ((compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_14443A_SHORTFRAME_CMD_WUPA : RFAL_14443A_SHORTFRAME_CMD_REQA), sensRes ) );
 8009626:	79fb      	ldrb	r3, [r7, #7]
 8009628:	2b01      	cmp	r3, #1
 800962a:	d101      	bne.n	8009630 <rfalNfcaPollerTechnologyDetection+0x16>
 800962c:	2352      	movs	r3, #82	; 0x52
 800962e:	e000      	b.n	8009632 <rfalNfcaPollerTechnologyDetection+0x18>
 8009630:	2326      	movs	r3, #38	; 0x26
 8009632:	6839      	ldr	r1, [r7, #0]
 8009634:	4618      	mov	r0, r3
 8009636:	f7ff ffc7 	bl	80095c8 <rfalNfcaPollerCheckPresence>
 800963a:	4603      	mov	r3, r0
 800963c:	81fb      	strh	r3, [r7, #14]
 800963e:	89fb      	ldrh	r3, [r7, #14]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d001      	beq.n	8009648 <rfalNfcaPollerTechnologyDetection+0x2e>
 8009644:	89fb      	ldrh	r3, [r7, #14]
 8009646:	e005      	b.n	8009654 <rfalNfcaPollerTechnologyDetection+0x3a>
    
    /* Send SLP_REQ as  Activity 1.1  9.2.3.6 and EMVCo 2.6  9.2.1.3 */
    if( compMode != RFAL_COMPLIANCE_MODE_ISO)
 8009648:	79fb      	ldrb	r3, [r7, #7]
 800964a:	2b02      	cmp	r3, #2
 800964c:	d001      	beq.n	8009652 <rfalNfcaPollerTechnologyDetection+0x38>
    {
        rfalNfcaPollerSleep();
 800964e:	f000 fb63 	bl	8009d18 <rfalNfcaPollerSleep>
    }
    return ERR_NONE;
 8009652:	2300      	movs	r3, #0
}
 8009654:	4618      	mov	r0, r3
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <rfalNfcaPollerSingleCollisionResolution>:

/*******************************************************************************/
ReturnCode rfalNfcaPollerSingleCollisionResolution( uint8_t devLimit, bool *collPending, rfalNfcaSelRes *selRes, uint8_t *nfcId1, uint8_t *nfcId1Len )
{
 800965c:	b590      	push	{r4, r7, lr}
 800965e:	b08f      	sub	sp, #60	; 0x3c
 8009660:	af04      	add	r7, sp, #16
 8009662:	60b9      	str	r1, [r7, #8]
 8009664:	607a      	str	r2, [r7, #4]
 8009666:	603b      	str	r3, [r7, #0]
 8009668:	4603      	mov	r3, r0
 800966a:	73fb      	strb	r3, [r7, #15]
    ReturnCode      ret;
    rfalNfcaSelReq  selReq;
    uint16_t        bytesRx;
    uint8_t         bytesTxRx;
    uint8_t         bitsTxRx;
    bool            doBacktrack = false;
 800966c:	2300      	movs	r3, #0
 800966e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t         backtrackCnt = 3;
 8009672:	2303      	movs	r3, #3
 8009674:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    
    /* Check parameters */
    if( (collPending == NULL) || (selRes == NULL) || (nfcId1 == NULL) || (nfcId1Len == NULL) )
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d008      	beq.n	8009690 <rfalNfcaPollerSingleCollisionResolution+0x34>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d005      	beq.n	8009690 <rfalNfcaPollerSingleCollisionResolution+0x34>
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d002      	beq.n	8009690 <rfalNfcaPollerSingleCollisionResolution+0x34>
 800968a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968c:	2b00      	cmp	r3, #0
 800968e:	d101      	bne.n	8009694 <rfalNfcaPollerSingleCollisionResolution+0x38>
    {
        return ERR_PARAM;
 8009690:	2307      	movs	r3, #7
 8009692:	e1ae      	b.n	80099f2 <rfalNfcaPollerSingleCollisionResolution+0x396>
    }
    
    /* Initialize output parameters */
    *collPending = false;  /* Activity 1.1  9.3.4.6 */
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	2200      	movs	r2, #0
 8009698:	701a      	strb	r2, [r3, #0]
    *nfcId1Len   = 0;
 800969a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800969c:	2200      	movs	r2, #0
 800969e:	701a      	strb	r2, [r3, #0]
    ST_MEMSET( nfcId1, 0x00, RFAL_NFCA_CASCADE_3_UID_LEN );
 80096a0:	220a      	movs	r2, #10
 80096a2:	2100      	movs	r1, #0
 80096a4:	6838      	ldr	r0, [r7, #0]
 80096a6:	f004 f962 	bl	800d96e <memset>
    
    /*******************************************************************************/
    /* Go through all Cascade Levels     Activity 1.1  9.3.4 */
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 80096aa:	2300      	movs	r3, #0
 80096ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80096b0:	e199      	b.n	80099e6 <rfalNfcaPollerSingleCollisionResolution+0x38a>
    {
        /* Initialize the SDD_REQ to send for the new cascade level */
        ST_MEMSET( (uint8_t*)&selReq, 0x00, sizeof(rfalNfcaSelReq) );
 80096b2:	f107 0318 	add.w	r3, r7, #24
 80096b6:	2207      	movs	r2, #7
 80096b8:	2100      	movs	r1, #0
 80096ba:	4618      	mov	r0, r3
 80096bc:	f004 f957 	bl	800d96e <memset>
        selReq.selCmd = rfalNfcaCLn2SELCMD(i);
 80096c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096c4:	005b      	lsls	r3, r3, #1
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	3b6d      	subs	r3, #109	; 0x6d
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	763b      	strb	r3, [r7, #24]
    
        bytesTxRx    = RFAL_NFCA_SDD_REQ_LEN;
 80096ce:	2302      	movs	r3, #2
 80096d0:	757b      	strb	r3, [r7, #21]
        bitsTxRx     = 0;
 80096d2:	2300      	movs	r3, #0
 80096d4:	753b      	strb	r3, [r7, #20]
        
        /*******************************************************************************/
        /* Go through Collision loop */
        do
        {
            uint8_t         collBit = 1; /* standards mandate or recommend collision bit to be set to One. */
 80096d6:	2301      	movs	r3, #1
 80096d8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            /* Calculate SEL_PAR with the bytes/bits to be sent */
            selReq.selPar = rfalNfcaSelPar(bytesTxRx, bitsTxRx);
 80096dc:	7d7b      	ldrb	r3, [r7, #21]
 80096de:	011b      	lsls	r3, r3, #4
 80096e0:	b2da      	uxtb	r2, r3
 80096e2:	7d3b      	ldrb	r3, [r7, #20]
 80096e4:	f003 030f 	and.w	r3, r3, #15
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	4313      	orrs	r3, r2
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	767b      	strb	r3, [r7, #25]
    
            /* Send SDD_REQ (Anticollision frame) - Retry upon timeout  EMVCo 2.6  9.6.1.3 */
            rfalNfcaTxRetry( ret, rfalISO14443ATransceiveAnticollisionFrame( (uint8_t*)&selReq, &bytesTxRx, &bitsTxRx, &bytesRx, RFAL_NFCA_FDTMIN ), ((devLimit==0U)?RFAL_NFCA_N_RETRANS:0U), RFAL_NFCA_T_RETRANS );
 80096f0:	7bfb      	ldrb	r3, [r7, #15]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d101      	bne.n	80096fa <rfalNfcaPollerSingleCollisionResolution+0x9e>
 80096f6:	2302      	movs	r3, #2
 80096f8:	e000      	b.n	80096fc <rfalNfcaPollerSingleCollisionResolution+0xa0>
 80096fa:	2300      	movs	r3, #0
 80096fc:	f887 3020 	strb.w	r3, [r7, #32]
 8009700:	f107 0416 	add.w	r4, r7, #22
 8009704:	f107 0214 	add.w	r2, r7, #20
 8009708:	f107 0115 	add.w	r1, r7, #21
 800970c:	f107 0018 	add.w	r0, r7, #24
 8009710:	f240 6354 	movw	r3, #1620	; 0x654
 8009714:	9300      	str	r3, [sp, #0]
 8009716:	4623      	mov	r3, r4
 8009718:	f003 f9a6 	bl	800ca68 <rfalISO14443ATransceiveAnticollisionFrame>
 800971c:	4603      	mov	r3, r0
 800971e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009720:	7bfb      	ldrb	r3, [r7, #15]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d102      	bne.n	800972c <rfalNfcaPollerSingleCollisionResolution+0xd0>
 8009726:	2005      	movs	r0, #5
 8009728:	f7f9 f870 	bl	800280c <HAL_Delay>
 800972c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009730:	1e5a      	subs	r2, r3, #1
 8009732:	f887 2020 	strb.w	r2, [r7, #32]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d002      	beq.n	8009740 <rfalNfcaPollerSingleCollisionResolution+0xe4>
 800973a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800973c:	2b04      	cmp	r3, #4
 800973e:	d0df      	beq.n	8009700 <rfalNfcaPollerSingleCollisionResolution+0xa4>
            
            bytesRx = rfalConvBitsToBytes(bytesRx);
 8009740:	8afb      	ldrh	r3, [r7, #22]
 8009742:	3307      	adds	r3, #7
 8009744:	08db      	lsrs	r3, r3, #3
 8009746:	b29b      	uxth	r3, r3
 8009748:	82fb      	strh	r3, [r7, #22]
            
            if ((ret == ERR_TIMEOUT) 
 800974a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800974c:	2b04      	cmp	r3, #4
 800974e:	d146      	bne.n	80097de <rfalNfcaPollerSingleCollisionResolution+0x182>
                && (backtrackCnt != 0U) && !doBacktrack
 8009750:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009754:	2b00      	cmp	r3, #0
 8009756:	d042      	beq.n	80097de <rfalNfcaPollerSingleCollisionResolution+0x182>
 8009758:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800975c:	f083 0301 	eor.w	r3, r3, #1
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b00      	cmp	r3, #0
 8009764:	d03b      	beq.n	80097de <rfalNfcaPollerSingleCollisionResolution+0x182>
                && !((RFAL_NFCA_SDD_REQ_LEN==bytesTxRx) && (0U==bitsTxRx)))
 8009766:	7d7b      	ldrb	r3, [r7, #21]
 8009768:	2b02      	cmp	r3, #2
 800976a:	d102      	bne.n	8009772 <rfalNfcaPollerSingleCollisionResolution+0x116>
 800976c:	7d3b      	ldrb	r3, [r7, #20]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d035      	beq.n	80097de <rfalNfcaPollerSingleCollisionResolution+0x182>
                 * collisions of a weaker tag go unnoticed. If then a later 
                 * collision is recognized and the strong tag has a 0 at the 
                 * collision position then no tag will respond. Catch this 
                 * corner case and then try with the bit being sent as zero. */
                rfalNfcaSensRes sensRes;
                ret = ERR_RF_COLLISION;
 8009772:	231d      	movs	r3, #29
 8009774:	84bb      	strh	r3, [r7, #36]	; 0x24
                rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_REQA, &sensRes );
 8009776:	f107 0310 	add.w	r3, r7, #16
 800977a:	4619      	mov	r1, r3
 800977c:	2026      	movs	r0, #38	; 0x26
 800977e:	f7ff ff23 	bl	80095c8 <rfalNfcaPollerCheckPresence>
                /* Algorithm below does a post-increment, decrement to go back to current position */
                if (0U == bitsTxRx)
 8009782:	7d3b      	ldrb	r3, [r7, #20]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d106      	bne.n	8009796 <rfalNfcaPollerSingleCollisionResolution+0x13a>
                {
                    bitsTxRx = 7;
 8009788:	2307      	movs	r3, #7
 800978a:	753b      	strb	r3, [r7, #20]
                    bytesTxRx--;
 800978c:	7d7b      	ldrb	r3, [r7, #21]
 800978e:	3b01      	subs	r3, #1
 8009790:	b2db      	uxtb	r3, r3
 8009792:	757b      	strb	r3, [r7, #21]
 8009794:	e003      	b.n	800979e <rfalNfcaPollerSingleCollisionResolution+0x142>
                }
                else
                {
                    bitsTxRx--;
 8009796:	7d3b      	ldrb	r3, [r7, #20]
 8009798:	3b01      	subs	r3, #1
 800979a:	b2db      	uxtb	r3, r3
 800979c:	753b      	strb	r3, [r7, #20]
                }
                collBit = (uint8_t)( ((uint8_t*)&selReq)[bytesTxRx] & (1U << bitsTxRx) );
 800979e:	7d7b      	ldrb	r3, [r7, #21]
 80097a0:	461a      	mov	r2, r3
 80097a2:	f107 0318 	add.w	r3, r7, #24
 80097a6:	4413      	add	r3, r2
 80097a8:	781a      	ldrb	r2, [r3, #0]
 80097aa:	7d3b      	ldrb	r3, [r7, #20]
 80097ac:	4619      	mov	r1, r3
 80097ae:	2301      	movs	r3, #1
 80097b0:	408b      	lsls	r3, r1
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	4013      	ands	r3, r2
 80097b6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                collBit = (uint8_t)((0U==collBit)?1U:0U); // invert the collision bit
 80097ba:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d101      	bne.n	80097c6 <rfalNfcaPollerSingleCollisionResolution+0x16a>
 80097c2:	2301      	movs	r3, #1
 80097c4:	e000      	b.n	80097c8 <rfalNfcaPollerSingleCollisionResolution+0x16c>
 80097c6:	2300      	movs	r3, #0
 80097c8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                doBacktrack = true;
 80097cc:	2301      	movs	r3, #1
 80097ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                backtrackCnt--;
 80097d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80097d6:	3b01      	subs	r3, #1
 80097d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            { 
 80097dc:	e002      	b.n	80097e4 <rfalNfcaPollerSingleCollisionResolution+0x188>
            }
            else
            {
                doBacktrack = false;
 80097de:	2300      	movs	r3, #0
 80097e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            if( ret == ERR_RF_COLLISION )
 80097e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097e6:	2b1d      	cmp	r3, #29
 80097e8:	d17e      	bne.n	80098e8 <rfalNfcaPollerSingleCollisionResolution+0x28c>
            {
                /* Check received length */
                if( (bytesTxRx + ((bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_SDD_RES_LEN + RFAL_NFCA_SDD_REQ_LEN) )
 80097ea:	7d7b      	ldrb	r3, [r7, #21]
 80097ec:	461a      	mov	r2, r3
 80097ee:	7d3b      	ldrb	r3, [r7, #20]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d001      	beq.n	80097f8 <rfalNfcaPollerSingleCollisionResolution+0x19c>
 80097f4:	2301      	movs	r3, #1
 80097f6:	e000      	b.n	80097fa <rfalNfcaPollerSingleCollisionResolution+0x19e>
 80097f8:	2300      	movs	r3, #0
 80097fa:	4413      	add	r3, r2
 80097fc:	2b07      	cmp	r3, #7
 80097fe:	d901      	bls.n	8009804 <rfalNfcaPollerSingleCollisionResolution+0x1a8>
                {
                    return ERR_PROTO;
 8009800:	230b      	movs	r3, #11
 8009802:	e0f6      	b.n	80099f2 <rfalNfcaPollerSingleCollisionResolution+0x396>
                }

                if( ((bytesTxRx + ((bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_CASCADE_1_UID_LEN + RFAL_NFCA_SDD_REQ_LEN)) && (backtrackCnt != 0U) )
 8009804:	7d7b      	ldrb	r3, [r7, #21]
 8009806:	461a      	mov	r2, r3
 8009808:	7d3b      	ldrb	r3, [r7, #20]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d001      	beq.n	8009812 <rfalNfcaPollerSingleCollisionResolution+0x1b6>
 800980e:	2301      	movs	r3, #1
 8009810:	e000      	b.n	8009814 <rfalNfcaPollerSingleCollisionResolution+0x1b8>
 8009812:	2300      	movs	r3, #0
 8009814:	4413      	add	r3, r2
 8009816:	2b06      	cmp	r3, #6
 8009818:	d91a      	bls.n	8009850 <rfalNfcaPollerSingleCollisionResolution+0x1f4>
 800981a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800981e:	2b00      	cmp	r3, #0
 8009820:	d016      	beq.n	8009850 <rfalNfcaPollerSingleCollisionResolution+0x1f4>
                { /* Collision in BCC: Anticollide only UID part */
                    backtrackCnt--;
 8009822:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009826:	3b01      	subs	r3, #1
 8009828:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                    bytesTxRx = RFAL_NFCA_CASCADE_1_UID_LEN + RFAL_NFCA_SDD_REQ_LEN - 1U;
 800982c:	2305      	movs	r3, #5
 800982e:	757b      	strb	r3, [r7, #21]
                    bitsTxRx = 7;
 8009830:	2307      	movs	r3, #7
 8009832:	753b      	strb	r3, [r7, #20]
                    collBit = (uint8_t)( ((uint8_t*)&selReq)[bytesTxRx] & (1U << bitsTxRx) ); /* Not a real collision, extract the actual bit for the subsequent code */
 8009834:	7d7b      	ldrb	r3, [r7, #21]
 8009836:	461a      	mov	r2, r3
 8009838:	f107 0318 	add.w	r3, r7, #24
 800983c:	4413      	add	r3, r2
 800983e:	781a      	ldrb	r2, [r3, #0]
 8009840:	7d3b      	ldrb	r3, [r7, #20]
 8009842:	4619      	mov	r1, r3
 8009844:	2301      	movs	r3, #1
 8009846:	408b      	lsls	r3, r1
 8009848:	b2db      	uxtb	r3, r3
 800984a:	4013      	ands	r3, r2
 800984c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                }
                
                if( (devLimit == 0U) && !(*collPending) )
 8009850:	7bfb      	ldrb	r3, [r7, #15]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d10b      	bne.n	800986e <rfalNfcaPollerSingleCollisionResolution+0x212>
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	f083 0301 	eor.w	r3, r3, #1
 800985e:	b2db      	uxtb	r3, r3
 8009860:	2b00      	cmp	r3, #0
 8009862:	d004      	beq.n	800986e <rfalNfcaPollerSingleCollisionResolution+0x212>
                {   
                    /* Activity 1.0 & 1.1  9.3.4.12: If CON_DEVICES_LIMIT has a value of 0, then 
                     * NFC Forum Device is configured to perform collision detection only       */
                    *collPending = true;
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	2201      	movs	r2, #1
 8009868:	701a      	strb	r2, [r3, #0]
                    return ERR_IGNORE;
 800986a:	2312      	movs	r3, #18
 800986c:	e0c1      	b.n	80099f2 <rfalNfcaPollerSingleCollisionResolution+0x396>
                }
                
                *collPending = true;
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	2201      	movs	r2, #1
 8009872:	701a      	strb	r2, [r3, #0]
                
                /* Set and select the collision bit, with the number of bytes/bits successfully TxRx */
                if (collBit != 0U)
 8009874:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009878:	2b00      	cmp	r3, #0
 800987a:	d013      	beq.n	80098a4 <rfalNfcaPollerSingleCollisionResolution+0x248>
                {
                    ((uint8_t*)&selReq)[bytesTxRx] = (uint8_t)(((uint8_t*)&selReq)[bytesTxRx] | (1U << bitsTxRx));   /* MISRA 10.3 */
 800987c:	7d7b      	ldrb	r3, [r7, #21]
 800987e:	461a      	mov	r2, r3
 8009880:	f107 0318 	add.w	r3, r7, #24
 8009884:	4413      	add	r3, r2
 8009886:	7819      	ldrb	r1, [r3, #0]
 8009888:	7d3b      	ldrb	r3, [r7, #20]
 800988a:	461a      	mov	r2, r3
 800988c:	2301      	movs	r3, #1
 800988e:	4093      	lsls	r3, r2
 8009890:	b2da      	uxtb	r2, r3
 8009892:	7d7b      	ldrb	r3, [r7, #21]
 8009894:	4618      	mov	r0, r3
 8009896:	f107 0318 	add.w	r3, r7, #24
 800989a:	4403      	add	r3, r0
 800989c:	430a      	orrs	r2, r1
 800989e:	b2d2      	uxtb	r2, r2
 80098a0:	701a      	strb	r2, [r3, #0]
 80098a2:	e014      	b.n	80098ce <rfalNfcaPollerSingleCollisionResolution+0x272>
                }
                else
                {
                    ((uint8_t*)&selReq)[bytesTxRx] = (uint8_t)(((uint8_t*)&selReq)[bytesTxRx] & ~(1U << bitsTxRx));  /* MISRA 10.3 */
 80098a4:	7d7b      	ldrb	r3, [r7, #21]
 80098a6:	461a      	mov	r2, r3
 80098a8:	f107 0318 	add.w	r3, r7, #24
 80098ac:	4413      	add	r3, r2
 80098ae:	7819      	ldrb	r1, [r3, #0]
 80098b0:	7d3b      	ldrb	r3, [r7, #20]
 80098b2:	461a      	mov	r2, r3
 80098b4:	2301      	movs	r3, #1
 80098b6:	4093      	lsls	r3, r2
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	43db      	mvns	r3, r3
 80098bc:	b2da      	uxtb	r2, r3
 80098be:	7d7b      	ldrb	r3, [r7, #21]
 80098c0:	4618      	mov	r0, r3
 80098c2:	f107 0318 	add.w	r3, r7, #24
 80098c6:	4403      	add	r3, r0
 80098c8:	400a      	ands	r2, r1
 80098ca:	b2d2      	uxtb	r2, r2
 80098cc:	701a      	strb	r2, [r3, #0]
                }

                bitsTxRx++;
 80098ce:	7d3b      	ldrb	r3, [r7, #20]
 80098d0:	3301      	adds	r3, #1
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	753b      	strb	r3, [r7, #20]
                
                /* Check if number of bits form a byte */
                if( bitsTxRx == RFAL_BITS_IN_BYTE )
 80098d6:	7d3b      	ldrb	r3, [r7, #20]
 80098d8:	2b08      	cmp	r3, #8
 80098da:	d105      	bne.n	80098e8 <rfalNfcaPollerSingleCollisionResolution+0x28c>
                {
                    bitsTxRx = 0;
 80098dc:	2300      	movs	r3, #0
 80098de:	753b      	strb	r3, [r7, #20]
                    bytesTxRx++;
 80098e0:	7d7b      	ldrb	r3, [r7, #21]
 80098e2:	3301      	adds	r3, #1
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	757b      	strb	r3, [r7, #21]
                }
            }
        }while (ret == ERR_RF_COLLISION);
 80098e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80098ea:	2b1d      	cmp	r3, #29
 80098ec:	f43f aef3 	beq.w	80096d6 <rfalNfcaPollerSingleCollisionResolution+0x7a>
        
        
        /*******************************************************************************/
        /* Check if Collision loop has failed */
        if( ret != ERR_NONE )
 80098f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d001      	beq.n	80098fa <rfalNfcaPollerSingleCollisionResolution+0x29e>
        {
            return ret;
 80098f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80098f8:	e07b      	b.n	80099f2 <rfalNfcaPollerSingleCollisionResolution+0x396>
        }
        
        
        /* If collisions are to be reported check whether the response is complete */
        if( (devLimit == 0U) && (bytesRx != sizeof(rfalNfcaSddRes)) )
 80098fa:	7bfb      	ldrb	r3, [r7, #15]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d104      	bne.n	800990a <rfalNfcaPollerSingleCollisionResolution+0x2ae>
 8009900:	8afb      	ldrh	r3, [r7, #22]
 8009902:	2b05      	cmp	r3, #5
 8009904:	d001      	beq.n	800990a <rfalNfcaPollerSingleCollisionResolution+0x2ae>
        {
            return ERR_PROTO;
 8009906:	230b      	movs	r3, #11
 8009908:	e073      	b.n	80099f2 <rfalNfcaPollerSingleCollisionResolution+0x396>
        }
        
        /* Check if the received BCC match */
        if( selReq.bcc != rfalNfcaCalculateBcc( selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN ) )
 800990a:	7fbc      	ldrb	r4, [r7, #30]
 800990c:	f107 0318 	add.w	r3, r7, #24
 8009910:	3302      	adds	r3, #2
 8009912:	2104      	movs	r1, #4
 8009914:	4618      	mov	r0, r3
 8009916:	f7ff fe13 	bl	8009540 <rfalNfcaCalculateBcc>
 800991a:	4603      	mov	r3, r0
 800991c:	429c      	cmp	r4, r3
 800991e:	d001      	beq.n	8009924 <rfalNfcaPollerSingleCollisionResolution+0x2c8>
        {
            return ERR_PROTO;
 8009920:	230b      	movs	r3, #11
 8009922:	e066      	b.n	80099f2 <rfalNfcaPollerSingleCollisionResolution+0x396>
        }
        
        /*******************************************************************************/
        /* Anticollision OK, Select this Cascade Level */
        selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 8009924:	2370      	movs	r3, #112	; 0x70
 8009926:	767b      	strb	r3, [r7, #25]
        
        /* Send SEL_REQ (Select command) - Retry upon timeout  EMVCo 2.6  9.6.1.3 */
        rfalNfcaTxRetry( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)selRes, sizeof(rfalNfcaSelRes), &bytesRx, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ), ((devLimit==0U)?RFAL_NFCA_N_RETRANS:0U), RFAL_NFCA_T_RETRANS );
 8009928:	7bfb      	ldrb	r3, [r7, #15]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d101      	bne.n	8009932 <rfalNfcaPollerSingleCollisionResolution+0x2d6>
 800992e:	2302      	movs	r3, #2
 8009930:	e000      	b.n	8009934 <rfalNfcaPollerSingleCollisionResolution+0x2d8>
 8009932:	2300      	movs	r3, #0
 8009934:	77fb      	strb	r3, [r7, #31]
 8009936:	f107 0018 	add.w	r0, r7, #24
 800993a:	f240 6354 	movw	r3, #1620	; 0x654
 800993e:	9302      	str	r3, [sp, #8]
 8009940:	2300      	movs	r3, #0
 8009942:	9301      	str	r3, [sp, #4]
 8009944:	f107 0316 	add.w	r3, r7, #22
 8009948:	9300      	str	r3, [sp, #0]
 800994a:	2301      	movs	r3, #1
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	2107      	movs	r1, #7
 8009950:	f001 ffee 	bl	800b930 <rfalTransceiveBlockingTxRx>
 8009954:	4603      	mov	r3, r0
 8009956:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009958:	7bfb      	ldrb	r3, [r7, #15]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d102      	bne.n	8009964 <rfalNfcaPollerSingleCollisionResolution+0x308>
 800995e:	2005      	movs	r0, #5
 8009960:	f7f8 ff54 	bl	800280c <HAL_Delay>
 8009964:	7ffb      	ldrb	r3, [r7, #31]
 8009966:	1e5a      	subs	r2, r3, #1
 8009968:	77fa      	strb	r2, [r7, #31]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d002      	beq.n	8009974 <rfalNfcaPollerSingleCollisionResolution+0x318>
 800996e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009970:	2b04      	cmp	r3, #4
 8009972:	d0e0      	beq.n	8009936 <rfalNfcaPollerSingleCollisionResolution+0x2da>
        
        if( ret != ERR_NONE )
 8009974:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009976:	2b00      	cmp	r3, #0
 8009978:	d001      	beq.n	800997e <rfalNfcaPollerSingleCollisionResolution+0x322>
        {
            return ret;
 800997a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800997c:	e039      	b.n	80099f2 <rfalNfcaPollerSingleCollisionResolution+0x396>
        }

        
        /* Ensure proper response length */
        if( bytesRx != sizeof(rfalNfcaSelRes) )
 800997e:	8afb      	ldrh	r3, [r7, #22]
 8009980:	2b01      	cmp	r3, #1
 8009982:	d001      	beq.n	8009988 <rfalNfcaPollerSingleCollisionResolution+0x32c>
        {
            return ERR_PROTO;
 8009984:	230b      	movs	r3, #11
 8009986:	e034      	b.n	80099f2 <rfalNfcaPollerSingleCollisionResolution+0x396>
        }
        
        /*******************************************************************************/
        /* Check cascade byte, if cascade tag then go next cascade level */
        if( (ret == ERR_NONE) && (*selReq.nfcid1 == RFAL_NFCA_SDD_CT) )
 8009988:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800998a:	2b00      	cmp	r3, #0
 800998c:	d11b      	bne.n	80099c6 <rfalNfcaPollerSingleCollisionResolution+0x36a>
 800998e:	7ebb      	ldrb	r3, [r7, #26]
 8009990:	2b88      	cmp	r3, #136	; 0x88
 8009992:	d118      	bne.n	80099c6 <rfalNfcaPollerSingleCollisionResolution+0x36a>
        {
            /* Cascade Tag present, store nfcid1 bytes (excluding cascade tag) and continue for next CL */
            ST_MEMCPY( &nfcId1[*nfcId1Len], &((uint8_t*)&selReq.nfcid1)[RFAL_NFCA_SDD_CT_LEN], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 8009994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	461a      	mov	r2, r3
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	1898      	adds	r0, r3, r2
 800999e:	f107 0318 	add.w	r3, r7, #24
 80099a2:	3302      	adds	r3, #2
 80099a4:	3301      	adds	r3, #1
 80099a6:	2203      	movs	r2, #3
 80099a8:	4619      	mov	r1, r3
 80099aa:	f003 ffbc 	bl	800d926 <memcpy>
            *nfcId1Len += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 80099ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	3303      	adds	r3, #3
 80099b4:	b2da      	uxtb	r2, r3
 80099b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b8:	701a      	strb	r2, [r3, #0]
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 80099ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099be:	3301      	adds	r3, #1
 80099c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80099c4:	e00f      	b.n	80099e6 <rfalNfcaPollerSingleCollisionResolution+0x38a>
        }
        else
        {
            /* UID Selection complete, Stop Cascade Level loop */
            ST_MEMCPY( &nfcId1[*nfcId1Len], (uint8_t*)&selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN );
 80099c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	461a      	mov	r2, r3
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	4413      	add	r3, r2
 80099d0:	f8d7 201a 	ldr.w	r2, [r7, #26]
 80099d4:	601a      	str	r2, [r3, #0]
            *nfcId1Len += RFAL_NFCA_CASCADE_1_UID_LEN;
 80099d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	3304      	adds	r3, #4
 80099dc:	b2da      	uxtb	r2, r3
 80099de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e0:	701a      	strb	r2, [r3, #0]
            return ERR_NONE;
 80099e2:	2300      	movs	r3, #0
 80099e4:	e005      	b.n	80099f2 <rfalNfcaPollerSingleCollisionResolution+0x396>
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 80099e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	f67f ae61 	bls.w	80096b2 <rfalNfcaPollerSingleCollisionResolution+0x56>
        }
    }
    return ERR_INTERNAL;
 80099f0:	230c      	movs	r3, #12
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	372c      	adds	r7, #44	; 0x2c
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd90      	pop	{r4, r7, pc}

080099fa <rfalNfcaPollerFullCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerFullCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcaListenDevice *nfcaDevList, uint8_t *devCnt )
{
 80099fa:	b5b0      	push	{r4, r5, r7, lr}
 80099fc:	b08a      	sub	sp, #40	; 0x28
 80099fe:	af02      	add	r7, sp, #8
 8009a00:	60ba      	str	r2, [r7, #8]
 8009a02:	607b      	str	r3, [r7, #4]
 8009a04:	4603      	mov	r3, r0
 8009a06:	73fb      	strb	r3, [r7, #15]
 8009a08:	460b      	mov	r3, r1
 8009a0a:	73bb      	strb	r3, [r7, #14]
    ReturnCode      ret;
    bool            collPending;
    rfalNfcaSensRes sensRes;
    uint16_t        rcvLen;
    
    if( (nfcaDevList == NULL) || (devCnt == NULL) )
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d002      	beq.n	8009a18 <rfalNfcaPollerFullCollisionResolution+0x1e>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d101      	bne.n	8009a1c <rfalNfcaPollerFullCollisionResolution+0x22>
    {
        return ERR_PARAM;
 8009a18:	2307      	movs	r3, #7
 8009a1a:	e106      	b.n	8009c2a <rfalNfcaPollerFullCollisionResolution+0x230>
    }
    
    *devCnt = 0;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	701a      	strb	r2, [r3, #0]
    ret     = ERR_NONE;
 8009a22:	2300      	movs	r3, #0
 8009a24:	83fb      	strh	r3, [r7, #30]
    
    /*******************************************************************************/
    /* Send ALL_REQ before Anticollision if a Sleep was sent before  Activity 1.1  9.3.4.1 and EMVco 2.6  9.3.2.1 */
    if( compMode != RFAL_COMPLIANCE_MODE_ISO )
 8009a26:	7bfb      	ldrb	r3, [r7, #15]
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	d029      	beq.n	8009a80 <rfalNfcaPollerFullCollisionResolution+0x86>
    {
        ret = rfalISO14443ATransceiveShortFrame( RFAL_14443A_SHORTFRAME_CMD_WUPA, (uint8_t*)&nfcaDevList->sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	1c59      	adds	r1, r3, #1
 8009a30:	f107 0216 	add.w	r2, r7, #22
 8009a34:	f240 6354 	movw	r3, #1620	; 0x654
 8009a38:	9300      	str	r3, [sp, #0]
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	2210      	movs	r2, #16
 8009a3e:	2052      	movs	r0, #82	; 0x52
 8009a40:	f002 ff16 	bl	800c870 <rfalISO14443ATransceiveShortFrame>
 8009a44:	4603      	mov	r3, r0
 8009a46:	83fb      	strh	r3, [r7, #30]
        if(ret != ERR_NONE)
 8009a48:	8bfb      	ldrh	r3, [r7, #30]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d010      	beq.n	8009a70 <rfalNfcaPollerFullCollisionResolution+0x76>
        {
            if( (compMode == RFAL_COMPLIANCE_MODE_EMV) || ((ret != ERR_RF_COLLISION) && (ret != ERR_CRC) && (ret != ERR_FRAMING) && (ret != ERR_PAR)) )
 8009a4e:	7bfb      	ldrb	r3, [r7, #15]
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d00b      	beq.n	8009a6c <rfalNfcaPollerFullCollisionResolution+0x72>
 8009a54:	8bfb      	ldrh	r3, [r7, #30]
 8009a56:	2b1d      	cmp	r3, #29
 8009a58:	d00a      	beq.n	8009a70 <rfalNfcaPollerFullCollisionResolution+0x76>
 8009a5a:	8bfb      	ldrh	r3, [r7, #30]
 8009a5c:	2b15      	cmp	r3, #21
 8009a5e:	d007      	beq.n	8009a70 <rfalNfcaPollerFullCollisionResolution+0x76>
 8009a60:	8bfb      	ldrh	r3, [r7, #30]
 8009a62:	2b09      	cmp	r3, #9
 8009a64:	d004      	beq.n	8009a70 <rfalNfcaPollerFullCollisionResolution+0x76>
 8009a66:	8bfb      	ldrh	r3, [r7, #30]
 8009a68:	2b1b      	cmp	r3, #27
 8009a6a:	d001      	beq.n	8009a70 <rfalNfcaPollerFullCollisionResolution+0x76>
            {
                return ret;
 8009a6c:	8bfb      	ldrh	r3, [r7, #30]
 8009a6e:	e0dc      	b.n	8009c2a <rfalNfcaPollerFullCollisionResolution+0x230>
            }
        }
        
        /* Check proper SENS_RES/ATQA size */
        if( (ret == ERR_NONE) && (rfalConvBytesToBits(sizeof(rfalNfcaSensRes)) != rcvLen) )
 8009a70:	8bfb      	ldrh	r3, [r7, #30]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d104      	bne.n	8009a80 <rfalNfcaPollerFullCollisionResolution+0x86>
 8009a76:	8afb      	ldrh	r3, [r7, #22]
 8009a78:	2b10      	cmp	r3, #16
 8009a7a:	d001      	beq.n	8009a80 <rfalNfcaPollerFullCollisionResolution+0x86>
        {
            return ERR_PROTO;
 8009a7c:	230b      	movs	r3, #11
 8009a7e:	e0d4      	b.n	8009c2a <rfalNfcaPollerFullCollisionResolution+0x230>
    #if RFAL_FEATURE_T1T
    /*******************************************************************************/
    /* Only check for T1T if previous SENS_RES was received without a transmission  *
     * error. When collisions occur bits in the SENS_RES may look like a T1T        */
    /* If T1T Anticollision is not supported  Activity 1.1  9.3.4.3 */
    if( rfalNfcaIsSensResT1T( &nfcaDevList->sensRes ) && (devLimit != 0U) && (ret == ERR_NONE) && (compMode != RFAL_COMPLIANCE_MODE_EMV) )
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	789b      	ldrb	r3, [r3, #2]
 8009a84:	f003 030f 	and.w	r3, r3, #15
 8009a88:	2b0c      	cmp	r3, #12
 8009a8a:	d12a      	bne.n	8009ae2 <rfalNfcaPollerFullCollisionResolution+0xe8>
 8009a8c:	7bbb      	ldrb	r3, [r7, #14]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d027      	beq.n	8009ae2 <rfalNfcaPollerFullCollisionResolution+0xe8>
 8009a92:	8bfb      	ldrh	r3, [r7, #30]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d124      	bne.n	8009ae2 <rfalNfcaPollerFullCollisionResolution+0xe8>
 8009a98:	7bfb      	ldrb	r3, [r7, #15]
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d021      	beq.n	8009ae2 <rfalNfcaPollerFullCollisionResolution+0xe8>
    {
        /* RID_REQ shall be performed with rfalT1TPollerRid()    Activity 1.1  9.3.4.24 */
        rfalT1TPollerInitialize();
 8009a9e:	f003 fea6 	bl	800d7ee <rfalT1TPollerInitialize>
        EXIT_ON_ERR( ret, rfalT1TPollerRid( &nfcaDevList->ridRes ) );
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	330f      	adds	r3, #15
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f003 fec3 	bl	800d832 <rfalT1TPollerRid>
 8009aac:	4603      	mov	r3, r0
 8009aae:	83fb      	strh	r3, [r7, #30]
 8009ab0:	8bfb      	ldrh	r3, [r7, #30]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d001      	beq.n	8009aba <rfalNfcaPollerFullCollisionResolution+0xc0>
 8009ab6:	8bfb      	ldrh	r3, [r7, #30]
 8009ab8:	e0b7      	b.n	8009c2a <rfalNfcaPollerFullCollisionResolution+0x230>
        
        /* T1T doesn't support Anticollision */
        *devCnt = 1;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2201      	movs	r2, #1
 8009abe:	701a      	strb	r2, [r3, #0]
        nfcaDevList->isSleep   = false;
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	755a      	strb	r2, [r3, #21]
        nfcaDevList->type      = RFAL_NFCA_T1T;
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	701a      	strb	r2, [r3, #0]
        nfcaDevList->nfcId1Len = RFAL_NFCA_CASCADE_1_UID_LEN;
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	2204      	movs	r2, #4
 8009ad0:	711a      	strb	r2, [r3, #4]
        ST_MEMCPY( &nfcaDevList->nfcId1, &nfcaDevList->ridRes.uid, RFAL_NFCA_CASCADE_1_UID_LEN );
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	3305      	adds	r3, #5
 8009ad6:	68ba      	ldr	r2, [r7, #8]
 8009ad8:	3211      	adds	r2, #17
 8009ada:	6812      	ldr	r2, [r2, #0]
 8009adc:	601a      	str	r2, [r3, #0]
        
        return ERR_NONE;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	e0a3      	b.n	8009c2a <rfalNfcaPollerFullCollisionResolution+0x230>
    }    
    #endif /* RFAL_FEATURE_T1T */
    
    /*******************************************************************************/
    /* Store the SENS_RES from Technology Detection or from WUPA */ 
    sensRes = nfcaDevList->sensRes;
 8009ae2:	68ba      	ldr	r2, [r7, #8]
 8009ae4:	f107 0318 	add.w	r3, r7, #24
 8009ae8:	3201      	adds	r2, #1
 8009aea:	8812      	ldrh	r2, [r2, #0]
 8009aec:	801a      	strh	r2, [r3, #0]
    
    if( devLimit > 0U )  /* MISRA 21.18 */
 8009aee:	7bbb      	ldrb	r3, [r7, #14]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d008      	beq.n	8009b06 <rfalNfcaPollerFullCollisionResolution+0x10c>
    {
        ST_MEMSET( nfcaDevList, 0x00, (sizeof(rfalNfcaListenDevice) * devLimit) );
 8009af4:	7bbb      	ldrb	r3, [r7, #14]
 8009af6:	2216      	movs	r2, #22
 8009af8:	fb02 f303 	mul.w	r3, r2, r3
 8009afc:	461a      	mov	r2, r3
 8009afe:	2100      	movs	r1, #0
 8009b00:	68b8      	ldr	r0, [r7, #8]
 8009b02:	f003 ff34 	bl	800d96e <memset>
    }
    
    /* Restore the prev SENS_RES, assuming that the SENS_RES received is from first device
     * When only one device is detected it's not woken up then we'll have no SENS_RES (ATQA) */
    nfcaDevList->sensRes = sensRes;
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	f107 0218 	add.w	r2, r7, #24
 8009b0e:	8812      	ldrh	r2, [r2, #0]
 8009b10:	801a      	strh	r2, [r3, #0]
    /*******************************************************************************/
    do
    {
        uint8_t newDeviceType;
        
        EXIT_ON_ERR( ret, rfalNfcaPollerSingleCollisionResolution( devLimit, &collPending, &nfcaDevList[*devCnt].selRes, (uint8_t*)&nfcaDevList[*devCnt].nfcId1, (uint8_t*)&nfcaDevList[*devCnt].nfcId1Len ) );
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	461a      	mov	r2, r3
 8009b18:	2316      	movs	r3, #22
 8009b1a:	fb03 f302 	mul.w	r3, r3, r2
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	4413      	add	r3, r2
 8009b22:	1cdc      	adds	r4, r3, #3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	461a      	mov	r2, r3
 8009b2a:	2316      	movs	r3, #22
 8009b2c:	fb03 f302 	mul.w	r3, r3, r2
 8009b30:	68ba      	ldr	r2, [r7, #8]
 8009b32:	4413      	add	r3, r2
 8009b34:	1d5d      	adds	r5, r3, #5
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	2316      	movs	r3, #22
 8009b3e:	fb03 f302 	mul.w	r3, r3, r2
 8009b42:	68ba      	ldr	r2, [r7, #8]
 8009b44:	4413      	add	r3, r2
 8009b46:	3304      	adds	r3, #4
 8009b48:	f107 011c 	add.w	r1, r7, #28
 8009b4c:	7bb8      	ldrb	r0, [r7, #14]
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	462b      	mov	r3, r5
 8009b52:	4622      	mov	r2, r4
 8009b54:	f7ff fd82 	bl	800965c <rfalNfcaPollerSingleCollisionResolution>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	83fb      	strh	r3, [r7, #30]
 8009b5c:	8bfb      	ldrh	r3, [r7, #30]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d001      	beq.n	8009b66 <rfalNfcaPollerFullCollisionResolution+0x16c>
 8009b62:	8bfb      	ldrh	r3, [r7, #30]
 8009b64:	e061      	b.n	8009c2a <rfalNfcaPollerFullCollisionResolution+0x230>
        
        /* Assign Listen Device */
        newDeviceType = ((uint8_t)nfcaDevList[*devCnt].selRes.sak) & RFAL_NFCA_SEL_RES_CONF_MASK;  /* MISRA 10.8 */
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	2316      	movs	r3, #22
 8009b6e:	fb03 f302 	mul.w	r3, r3, r2
 8009b72:	68ba      	ldr	r2, [r7, #8]
 8009b74:	4413      	add	r3, r2
 8009b76:	78db      	ldrb	r3, [r3, #3]
 8009b78:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b7c:	777b      	strb	r3, [r7, #29]
        /* PRQA S 4342 1 # MISRA 10.5 - Guaranteed that no invalid enum values are created: see guard_eq_RFAL_NFCA_T2T, .... */
        nfcaDevList[*devCnt].type    = (rfalNfcaListenDeviceType) (newDeviceType);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	461a      	mov	r2, r3
 8009b84:	2316      	movs	r3, #22
 8009b86:	fb03 f302 	mul.w	r3, r3, r2
 8009b8a:	68ba      	ldr	r2, [r7, #8]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	7f7a      	ldrb	r2, [r7, #29]
 8009b90:	701a      	strb	r2, [r3, #0]
        nfcaDevList[*devCnt].isSleep = false;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	461a      	mov	r2, r3
 8009b98:	2316      	movs	r3, #22
 8009b9a:	fb03 f302 	mul.w	r3, r3, r2
 8009b9e:	68ba      	ldr	r2, [r7, #8]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	755a      	strb	r2, [r3, #21]
        (*devCnt)++;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	3301      	adds	r3, #1
 8009bac:	b2da      	uxtb	r2, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	701a      	strb	r2, [r3, #0]

        
        /* If a collision was detected and device counter is lower than limit  Activity 1.1  9.3.4.21 */
        if( (*devCnt < devLimit) && ((collPending) || (compMode != RFAL_COMPLIANCE_MODE_ISO) ) )
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	7bba      	ldrb	r2, [r7, #14]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d92a      	bls.n	8009c12 <rfalNfcaPollerFullCollisionResolution+0x218>
 8009bbc:	7f3b      	ldrb	r3, [r7, #28]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d102      	bne.n	8009bc8 <rfalNfcaPollerFullCollisionResolution+0x1ce>
 8009bc2:	7bfb      	ldrb	r3, [r7, #15]
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	d024      	beq.n	8009c12 <rfalNfcaPollerFullCollisionResolution+0x218>
        {
            /* Put this device to Sleep  Activity 1.1  9.3.4.22 */
            rfalNfcaPollerSleep();
 8009bc8:	f000 f8a6 	bl	8009d18 <rfalNfcaPollerSleep>
            nfcaDevList[(*devCnt - 1U)].isSleep = true;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	2316      	movs	r3, #22
 8009bd4:	fb03 f302 	mul.w	r3, r3, r2
 8009bd8:	3b16      	subs	r3, #22
 8009bda:	68ba      	ldr	r2, [r7, #8]
 8009bdc:	4413      	add	r3, r2
 8009bde:	2201      	movs	r2, #1
 8009be0:	755a      	strb	r2, [r3, #21]
            
            
            /* Send a new SENS_REQ to check for other cards  Activity 1.1  9.3.4.23 */
            ret = rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_REQA, &nfcaDevList[*devCnt].sensRes );
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	461a      	mov	r2, r3
 8009be8:	2316      	movs	r3, #22
 8009bea:	fb03 f302 	mul.w	r3, r3, r2
 8009bee:	68ba      	ldr	r2, [r7, #8]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	2026      	movs	r0, #38	; 0x26
 8009bf8:	f7ff fce6 	bl	80095c8 <rfalNfcaPollerCheckPresence>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	83fb      	strh	r3, [r7, #30]
            if( ret == ERR_TIMEOUT )
 8009c00:	8bfb      	ldrh	r3, [r7, #30]
 8009c02:	2b04      	cmp	r3, #4
 8009c04:	d102      	bne.n	8009c0c <rfalNfcaPollerFullCollisionResolution+0x212>
            {
                /* No more devices found, exit */
                collPending = false;
 8009c06:	2300      	movs	r3, #0
 8009c08:	773b      	strb	r3, [r7, #28]
            if( ret == ERR_TIMEOUT )
 8009c0a:	e004      	b.n	8009c16 <rfalNfcaPollerFullCollisionResolution+0x21c>
            }
            else
            {
                /* Another device found, continue loop */
                collPending = true;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	773b      	strb	r3, [r7, #28]
            if( ret == ERR_TIMEOUT )
 8009c10:	e001      	b.n	8009c16 <rfalNfcaPollerFullCollisionResolution+0x21c>
            }
        }
        else
        {
            /* Exit loop */
            collPending = false;
 8009c12:	2300      	movs	r3, #0
 8009c14:	773b      	strb	r3, [r7, #28]
        }
    }while( (*devCnt < devLimit) && (collPending) );
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	7bba      	ldrb	r2, [r7, #14]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d903      	bls.n	8009c28 <rfalNfcaPollerFullCollisionResolution+0x22e>
 8009c20:	7f3b      	ldrb	r3, [r7, #28]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	f47f af75 	bne.w	8009b12 <rfalNfcaPollerFullCollisionResolution+0x118>
    
    return ERR_NONE;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3720      	adds	r7, #32
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009c34 <rfalNfcaPollerSelect>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerSelect( const uint8_t *nfcid1, uint8_t nfcidLen, rfalNfcaSelRes *selRes )
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b08c      	sub	sp, #48	; 0x30
 8009c38:	af04      	add	r7, sp, #16
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	607a      	str	r2, [r7, #4]
 8009c40:	72fb      	strb	r3, [r7, #11]
    uint8_t        nfcidOffset;
    uint16_t       rxLen;
    ReturnCode     ret;
    rfalNfcaSelReq selReq;
    
    if( (nfcid1 == NULL) || (nfcidLen > RFAL_NFCA_CASCADE_3_UID_LEN) || (selRes == NULL) )
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d005      	beq.n	8009c54 <rfalNfcaPollerSelect+0x20>
 8009c48:	7afb      	ldrb	r3, [r7, #11]
 8009c4a:	2b0a      	cmp	r3, #10
 8009c4c:	d802      	bhi.n	8009c54 <rfalNfcaPollerSelect+0x20>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d101      	bne.n	8009c58 <rfalNfcaPollerSelect+0x24>
    {
        return ERR_PARAM;
 8009c54:	2307      	movs	r3, #7
 8009c56:	e058      	b.n	8009d0a <rfalNfcaPollerSelect+0xd6>
    }
    
    
    /* Calculate Cascate Level */
    cl          = rfalNfcaNfcidLen2CL( nfcidLen );
 8009c58:	7afb      	ldrb	r3, [r7, #11]
 8009c5a:	4a2e      	ldr	r2, [pc, #184]	; (8009d14 <rfalNfcaPollerSelect+0xe0>)
 8009c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c60:	089b      	lsrs	r3, r3, #2
 8009c62:	777b      	strb	r3, [r7, #29]
    nfcidOffset = 0;
 8009c64:	2300      	movs	r3, #0
 8009c66:	77bb      	strb	r3, [r7, #30]
    
    /*******************************************************************************/
    /* Go through all Cascade Levels     Activity 1.1  9.4.4 */
    for( i = RFAL_NFCA_SEL_CASCADE_L1; i <= cl; i++ )
 8009c68:	2300      	movs	r3, #0
 8009c6a:	77fb      	strb	r3, [r7, #31]
 8009c6c:	e048      	b.n	8009d00 <rfalNfcaPollerSelect+0xcc>
    {
        /* Assign SEL_CMD according to the CLn and SEL_PAR*/
        selReq.selCmd = rfalNfcaCLn2SELCMD(i);
 8009c6e:	7ffb      	ldrb	r3, [r7, #31]
 8009c70:	005b      	lsls	r3, r3, #1
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	3b6d      	subs	r3, #109	; 0x6d
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	743b      	strb	r3, [r7, #16]
        selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 8009c7a:	2370      	movs	r3, #112	; 0x70
 8009c7c:	747b      	strb	r3, [r7, #17]
        
        /* Compute NFCID/Data on the SEL_REQ command   Digital 1.1  Table 18 */
        if( cl != i )
 8009c7e:	7f7a      	ldrb	r2, [r7, #29]
 8009c80:	7ffb      	ldrb	r3, [r7, #31]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d00f      	beq.n	8009ca6 <rfalNfcaPollerSelect+0x72>
        {
            *selReq.nfcid1 = RFAL_NFCA_SDD_CT;
 8009c86:	2388      	movs	r3, #136	; 0x88
 8009c88:	74bb      	strb	r3, [r7, #18]
            ST_MEMCPY( &selReq.nfcid1[RFAL_NFCA_SDD_CT_LEN], &nfcid1[nfcidOffset], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 8009c8a:	7fbb      	ldrb	r3, [r7, #30]
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	18d1      	adds	r1, r2, r3
 8009c90:	f107 0310 	add.w	r3, r7, #16
 8009c94:	3303      	adds	r3, #3
 8009c96:	2203      	movs	r2, #3
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f003 fe44 	bl	800d926 <memcpy>
            nfcidOffset += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 8009c9e:	7fbb      	ldrb	r3, [r7, #30]
 8009ca0:	3303      	adds	r3, #3
 8009ca2:	77bb      	strb	r3, [r7, #30]
 8009ca4:	e005      	b.n	8009cb2 <rfalNfcaPollerSelect+0x7e>
        }
        else
        {
            ST_MEMCPY( selReq.nfcid1, &nfcid1[nfcidOffset], RFAL_NFCA_CASCADE_1_UID_LEN );
 8009ca6:	7fbb      	ldrb	r3, [r7, #30]
 8009ca8:	68fa      	ldr	r2, [r7, #12]
 8009caa:	4413      	add	r3, r2
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f8c7 3012 	str.w	r3, [r7, #18]
        }
        
        /* Calculate nfcid's BCC */
        selReq.bcc = rfalNfcaCalculateBcc( (uint8_t*)&selReq.nfcid1, sizeof(selReq.nfcid1) );
 8009cb2:	f107 0310 	add.w	r3, r7, #16
 8009cb6:	3302      	adds	r3, #2
 8009cb8:	2104      	movs	r1, #4
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7ff fc40 	bl	8009540 <rfalNfcaCalculateBcc>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	75bb      	strb	r3, [r7, #22]
        
        /*******************************************************************************/
        /* Send SEL_REQ  */
        EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)selRes, sizeof(rfalNfcaSelRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ) );
 8009cc4:	f107 0010 	add.w	r0, r7, #16
 8009cc8:	f240 6354 	movw	r3, #1620	; 0x654
 8009ccc:	9302      	str	r3, [sp, #8]
 8009cce:	2300      	movs	r3, #0
 8009cd0:	9301      	str	r3, [sp, #4]
 8009cd2:	f107 0318 	add.w	r3, r7, #24
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	2301      	movs	r3, #1
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	2107      	movs	r1, #7
 8009cde:	f001 fe27 	bl	800b930 <rfalTransceiveBlockingTxRx>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	837b      	strh	r3, [r7, #26]
 8009ce6:	8b7b      	ldrh	r3, [r7, #26]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d001      	beq.n	8009cf0 <rfalNfcaPollerSelect+0xbc>
 8009cec:	8b7b      	ldrh	r3, [r7, #26]
 8009cee:	e00c      	b.n	8009d0a <rfalNfcaPollerSelect+0xd6>
        
        /* Ensure proper response length */
        if( rxLen != sizeof(rfalNfcaSelRes) )
 8009cf0:	8b3b      	ldrh	r3, [r7, #24]
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d001      	beq.n	8009cfa <rfalNfcaPollerSelect+0xc6>
        {
            return ERR_PROTO;
 8009cf6:	230b      	movs	r3, #11
 8009cf8:	e007      	b.n	8009d0a <rfalNfcaPollerSelect+0xd6>
    for( i = RFAL_NFCA_SEL_CASCADE_L1; i <= cl; i++ )
 8009cfa:	7ffb      	ldrb	r3, [r7, #31]
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	77fb      	strb	r3, [r7, #31]
 8009d00:	7ffa      	ldrb	r2, [r7, #31]
 8009d02:	7f7b      	ldrb	r3, [r7, #29]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d9b2      	bls.n	8009c6e <rfalNfcaPollerSelect+0x3a>
        }
    }
    
    /* REMARK: Could check if NFCID1 is complete */
    
    return ERR_NONE;
 8009d08:	2300      	movs	r3, #0
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3720      	adds	r7, #32
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	cccccccd 	.word	0xcccccccd

08009d18 <rfalNfcaPollerSleep>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerSleep( void )
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b086      	sub	sp, #24
 8009d1c:	af04      	add	r7, sp, #16
    rfalNfcaSlpReq slpReq;
    uint8_t        rxBuf;    /* dummy buffer, just to perform Rx */
    
    slpReq.frame[RFAL_NFCA_SLP_CMD_POS]   = RFAL_NFCA_SLP_CMD;
 8009d1e:	2350      	movs	r3, #80	; 0x50
 8009d20:	713b      	strb	r3, [r7, #4]
    slpReq.frame[RFAL_NFCA_SLP_BYTE2_POS] = RFAL_NFCA_SLP_BYTE2;
 8009d22:	2300      	movs	r3, #0
 8009d24:	717b      	strb	r3, [r7, #5]
    
    rfalTransceiveBlockingTxRx( (uint8_t*)&slpReq, sizeof(rfalNfcaSlpReq), &rxBuf, sizeof(rxBuf), NULL, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_SLP_FWT );
 8009d26:	1cfa      	adds	r2, r7, #3
 8009d28:	1d38      	adds	r0, r7, #4
 8009d2a:	f243 43f8 	movw	r3, #13560	; 0x34f8
 8009d2e:	9302      	str	r3, [sp, #8]
 8009d30:	2300      	movs	r3, #0
 8009d32:	9301      	str	r3, [sp, #4]
 8009d34:	2300      	movs	r3, #0
 8009d36:	9300      	str	r3, [sp, #0]
 8009d38:	2301      	movs	r3, #1
 8009d3a:	2102      	movs	r1, #2
 8009d3c:	f001 fdf8 	bl	800b930 <rfalTransceiveBlockingTxRx>
    /* ISO14443-3 6.4.3  HLTA - If PICC responds with any modulation during 1 ms this response shall be interpreted as not acknowledge 
       Digital 2.0  6.9.2.1 & EMVCo 3.0  5.6.2.1 - consider the HLTA command always acknowledged
       No check to be compliant with NFC and EMVCo, and to improve interoprability (Kovio RFID Tag)
    */
    
    return ERR_NONE;
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3708      	adds	r7, #8
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <rfalNfcbCheckSensbRes>:
******************************************************************************
*/

/*******************************************************************************/
static ReturnCode rfalNfcbCheckSensbRes( const rfalNfcbSensbRes *sensbRes, uint8_t sensbResLen )
{
 8009d4a:	b480      	push	{r7}
 8009d4c:	b083      	sub	sp, #12
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
 8009d52:	460b      	mov	r3, r1
 8009d54:	70fb      	strb	r3, [r7, #3]
    /* Check response length */
    if( ( (sensbResLen != RFAL_NFCB_SENSB_RES_LEN) && (sensbResLen != RFAL_NFCB_SENSB_RES_EXT_LEN) ) )
 8009d56:	78fb      	ldrb	r3, [r7, #3]
 8009d58:	2b0c      	cmp	r3, #12
 8009d5a:	d004      	beq.n	8009d66 <rfalNfcbCheckSensbRes+0x1c>
 8009d5c:	78fb      	ldrb	r3, [r7, #3]
 8009d5e:	2b0d      	cmp	r3, #13
 8009d60:	d001      	beq.n	8009d66 <rfalNfcbCheckSensbRes+0x1c>
    {
        return ERR_PROTO;
 8009d62:	230b      	movs	r3, #11
 8009d64:	e00c      	b.n	8009d80 <rfalNfcbCheckSensbRes+0x36>
    }
    
    /* Check SENSB_RES and Protocol Type   Digital 1.1 7.6.2.19 */
    if( ((sensbRes->protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROT_TYPE_RFU) != 0U) || (sensbRes->cmd != (uint8_t)RFAL_NFCB_CMD_SENSB_RES) )
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	7a9b      	ldrb	r3, [r3, #10]
 8009d6a:	f003 0308 	and.w	r3, r3, #8
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d103      	bne.n	8009d7a <rfalNfcbCheckSensbRes+0x30>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	2b50      	cmp	r3, #80	; 0x50
 8009d78:	d001      	beq.n	8009d7e <rfalNfcbCheckSensbRes+0x34>
    {
        return ERR_PROTO;
 8009d7a:	230b      	movs	r3, #11
 8009d7c:	e000      	b.n	8009d80 <rfalNfcbCheckSensbRes+0x36>
    }
    return ERR_NONE;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	370c      	adds	r7, #12
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr

08009d8c <rfalNfcbPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcbPollerInitialize( void )
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCB, RFAL_BR_106, RFAL_BR_106 ) );
 8009d92:	2200      	movs	r2, #0
 8009d94:	2100      	movs	r1, #0
 8009d96:	2003      	movs	r0, #3
 8009d98:	f000 ff96 	bl	800acc8 <rfalSetMode>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	80fb      	strh	r3, [r7, #6]
 8009da0:	88fb      	ldrh	r3, [r7, #6]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d001      	beq.n	8009daa <rfalNfcbPollerInitialize+0x1e>
 8009da6:	88fb      	ldrh	r3, [r7, #6]
 8009da8:	e014      	b.n	8009dd4 <rfalNfcbPollerInitialize+0x48>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8009daa:	2001      	movs	r0, #1
 8009dac:	f001 fb26 	bl	800b3fc <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCB );
 8009db0:	480a      	ldr	r0, [pc, #40]	; (8009ddc <rfalNfcbPollerInitialize+0x50>)
 8009db2:	f001 fb5d 	bl	800b470 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCB_POLLER );
 8009db6:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 8009dba:	f001 fb45 	bl	800b448 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCB_POLLER );
 8009dbe:	f641 207c 	movw	r0, #6780	; 0x1a7c
 8009dc2:	f001 fb2b 	bl	800b41c <rfalSetFDTPoll>
    
    gRfalNfcb.AFI    = RFAL_NFCB_AFI;
 8009dc6:	4b06      	ldr	r3, [pc, #24]	; (8009de0 <rfalNfcbPollerInitialize+0x54>)
 8009dc8:	2200      	movs	r2, #0
 8009dca:	701a      	strb	r2, [r3, #0]
    gRfalNfcb.PARAM  = RFAL_NFCB_PARAM;
 8009dcc:	4b04      	ldr	r3, [pc, #16]	; (8009de0 <rfalNfcbPollerInitialize+0x54>)
 8009dce:	2200      	movs	r2, #0
 8009dd0:	705a      	strb	r2, [r3, #1]
    
    return ERR_NONE;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3708      	adds	r7, #8
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	000108d8 	.word	0x000108d8
 8009de0:	2000090c 	.word	0x2000090c

08009de4 <rfalNfcbPollerCheckPresence>:
}


/*******************************************************************************/
ReturnCode rfalNfcbPollerCheckPresence( rfalNfcbSensCmd cmd, rfalNfcbSlots slots, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b08a      	sub	sp, #40	; 0x28
 8009de8:	af04      	add	r7, sp, #16
 8009dea:	60ba      	str	r2, [r7, #8]
 8009dec:	607b      	str	r3, [r7, #4]
 8009dee:	4603      	mov	r3, r0
 8009df0:	73fb      	strb	r3, [r7, #15]
 8009df2:	460b      	mov	r3, r1
 8009df4:	73bb      	strb	r3, [r7, #14]
    ReturnCode       ret;
    rfalNfcbSensbReq sensbReq;
    

    /* Check if the command requested and given the slot number are valid */
    if( ((RFAL_NFCB_SENS_CMD_SENSB_REQ != cmd) && (RFAL_NFCB_SENS_CMD_ALLB_REQ != cmd)) ||
 8009df6:	7bfb      	ldrb	r3, [r7, #15]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d002      	beq.n	8009e02 <rfalNfcbPollerCheckPresence+0x1e>
 8009dfc:	7bfb      	ldrb	r3, [r7, #15]
 8009dfe:	2b08      	cmp	r3, #8
 8009e00:	d108      	bne.n	8009e14 <rfalNfcbPollerCheckPresence+0x30>
 8009e02:	7bbb      	ldrb	r3, [r7, #14]
 8009e04:	2b04      	cmp	r3, #4
 8009e06:	d805      	bhi.n	8009e14 <rfalNfcbPollerCheckPresence+0x30>
        (slots > RFAL_NFCB_SLOT_NUM_16) || (sensbRes == NULL) || (sensbResLen == NULL)    )
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d002      	beq.n	8009e14 <rfalNfcbPollerCheckPresence+0x30>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d101      	bne.n	8009e18 <rfalNfcbPollerCheckPresence+0x34>
    {
        return ERR_PARAM;
 8009e14:	2307      	movs	r3, #7
 8009e16:	e044      	b.n	8009ea2 <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    *sensbResLen = 0;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	701a      	strb	r2, [r3, #0]
    ST_MEMSET(sensbRes, 0x00, sizeof(rfalNfcbSensbRes) );
 8009e1e:	220d      	movs	r2, #13
 8009e20:	2100      	movs	r1, #0
 8009e22:	68b8      	ldr	r0, [r7, #8]
 8009e24:	f003 fda3 	bl	800d96e <memset>
    
    /* Compute SENSB_REQ */
    sensbReq.cmd   = RFAL_NFCB_CMD_SENSB_REQ;
 8009e28:	2305      	movs	r3, #5
 8009e2a:	743b      	strb	r3, [r7, #16]
    sensbReq.AFI   = gRfalNfcb.AFI;
 8009e2c:	4b1f      	ldr	r3, [pc, #124]	; (8009eac <rfalNfcbPollerCheckPresence+0xc8>)
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	747b      	strb	r3, [r7, #17]
    sensbReq.PARAM = (((uint8_t)gRfalNfcb.PARAM & RFAL_NFCB_SENSB_REQ_PARAM) | (uint8_t)cmd | (uint8_t)slots);
 8009e32:	4b1e      	ldr	r3, [pc, #120]	; (8009eac <rfalNfcbPollerCheckPresence+0xc8>)
 8009e34:	785b      	ldrb	r3, [r3, #1]
 8009e36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009e3a:	b2da      	uxtb	r2, r3
 8009e3c:	7bfb      	ldrb	r3, [r7, #15]
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	b2da      	uxtb	r2, r3
 8009e42:	7bbb      	ldrb	r3, [r7, #14]
 8009e44:	4313      	orrs	r3, r2
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	74bb      	strb	r3, [r7, #18]
    
    /* Send SENSB_REQ and disable AGC to detect collisions */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 8009e4a:	f107 0010 	add.w	r0, r7, #16
 8009e4e:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8009e52:	9302      	str	r3, [sp, #8]
 8009e54:	2300      	movs	r3, #0
 8009e56:	9301      	str	r3, [sp, #4]
 8009e58:	f107 0314 	add.w	r3, r7, #20
 8009e5c:	9300      	str	r3, [sp, #0]
 8009e5e:	230d      	movs	r3, #13
 8009e60:	68ba      	ldr	r2, [r7, #8]
 8009e62:	2103      	movs	r1, #3
 8009e64:	f001 fd64 	bl	800b930 <rfalTransceiveBlockingTxRx>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	82fb      	strh	r3, [r7, #22]
    
    *sensbResLen = (uint8_t)rxLen;
 8009e6c:	8abb      	ldrh	r3, [r7, #20]
 8009e6e:	b2da      	uxtb	r2, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	701a      	strb	r2, [r3, #0]
    
    /*  Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 8009e74:	8afb      	ldrh	r3, [r7, #22]
 8009e76:	2b15      	cmp	r3, #21
 8009e78:	d002      	beq.n	8009e80 <rfalNfcbPollerCheckPresence+0x9c>
 8009e7a:	8afb      	ldrh	r3, [r7, #22]
 8009e7c:	2b09      	cmp	r3, #9
 8009e7e:	d104      	bne.n	8009e8a <rfalNfcbPollerCheckPresence+0xa6>
    {
        /* Invalidate received frame as an error was detected (CollisionResolution checks if valid) */
        *sensbResLen = 0;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	701a      	strb	r2, [r3, #0]
        return ERR_NONE;
 8009e86:	2300      	movs	r3, #0
 8009e88:	e00b      	b.n	8009ea2 <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    if( ret == ERR_NONE )
 8009e8a:	8afb      	ldrh	r3, [r7, #22]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d107      	bne.n	8009ea0 <rfalNfcbPollerCheckPresence+0xbc>
    {
        return rfalNfcbCheckSensbRes( sensbRes, *sensbResLen );
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	4619      	mov	r1, r3
 8009e96:	68b8      	ldr	r0, [r7, #8]
 8009e98:	f7ff ff57 	bl	8009d4a <rfalNfcbCheckSensbRes>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	e000      	b.n	8009ea2 <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    return ret;
 8009ea0:	8afb      	ldrh	r3, [r7, #22]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3718      	adds	r7, #24
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	2000090c 	.word	0x2000090c

08009eb0 <rfalNfcbPollerSleep>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSleep( const uint8_t* nfcid0 )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b08a      	sub	sp, #40	; 0x28
 8009eb4:	af04      	add	r7, sp, #16
 8009eb6:	6078      	str	r0, [r7, #4]
    uint16_t        rxLen;
    ReturnCode      ret;
    rfalNfcbSlpbReq slpbReq;
    rfalNfcbSlpbRes slpbRes;
    
    if( nfcid0 == NULL )
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d101      	bne.n	8009ec2 <rfalNfcbPollerSleep+0x12>
    {
        return ERR_PARAM;
 8009ebe:	2307      	movs	r3, #7
 8009ec0:	e024      	b.n	8009f0c <rfalNfcbPollerSleep+0x5c>
    }
    
    /* Compute SLPB_REQ */
    slpbReq.cmd = RFAL_NFCB_CMD_SLPB_REQ;
 8009ec2:	2350      	movs	r3, #80	; 0x50
 8009ec4:	733b      	strb	r3, [r7, #12]
    ST_MEMCPY( slpbReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN );
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f8c7 300d 	str.w	r3, [r7, #13]
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&slpbReq, sizeof(rfalNfcbSlpbReq), (uint8_t*)&slpbRes, sizeof(rfalNfcbSlpbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT ));
 8009ece:	f107 0208 	add.w	r2, r7, #8
 8009ed2:	f107 000c 	add.w	r0, r7, #12
 8009ed6:	4b0f      	ldr	r3, [pc, #60]	; (8009f14 <rfalNfcbPollerSleep+0x64>)
 8009ed8:	9302      	str	r3, [sp, #8]
 8009eda:	2300      	movs	r3, #0
 8009edc:	9301      	str	r3, [sp, #4]
 8009ede:	f107 0314 	add.w	r3, r7, #20
 8009ee2:	9300      	str	r3, [sp, #0]
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	2105      	movs	r1, #5
 8009ee8:	f001 fd22 	bl	800b930 <rfalTransceiveBlockingTxRx>
 8009eec:	4603      	mov	r3, r0
 8009eee:	82fb      	strh	r3, [r7, #22]
 8009ef0:	8afb      	ldrh	r3, [r7, #22]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d001      	beq.n	8009efa <rfalNfcbPollerSleep+0x4a>
 8009ef6:	8afb      	ldrh	r3, [r7, #22]
 8009ef8:	e008      	b.n	8009f0c <rfalNfcbPollerSleep+0x5c>
    
    /* Check SLPB_RES */
    if( (rxLen != sizeof(rfalNfcbSlpbRes)) || (slpbRes.cmd != (uint8_t)RFAL_NFCB_CMD_SLPB_RES) )
 8009efa:	8abb      	ldrh	r3, [r7, #20]
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d102      	bne.n	8009f06 <rfalNfcbPollerSleep+0x56>
 8009f00:	7a3b      	ldrb	r3, [r7, #8]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d001      	beq.n	8009f0a <rfalNfcbPollerSleep+0x5a>
    {
        return ERR_PROTO;
 8009f06:	230b      	movs	r3, #11
 8009f08:	e000      	b.n	8009f0c <rfalNfcbPollerSleep+0x5c>
    }
    return ERR_NONE;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3718      	adds	r7, #24
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	0003a278 	.word	0x0003a278

08009f18 <rfalNfcbPollerSlotMarker>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSlotMarker( uint8_t slotCode, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b08a      	sub	sp, #40	; 0x28
 8009f1c:	af04      	add	r7, sp, #16
 8009f1e:	4603      	mov	r3, r0
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	607a      	str	r2, [r7, #4]
 8009f24:	73fb      	strb	r3, [r7, #15]
    ReturnCode         ret;
    rfalNfcbSlotMarker slotMarker;
    uint16_t           rxLen;
    
    /* Check parameters */
    if( (sensbRes == NULL) || (sensbResLen == NULL)    || 
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d008      	beq.n	8009f3e <rfalNfcbPollerSlotMarker+0x26>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d005      	beq.n	8009f3e <rfalNfcbPollerSlotMarker+0x26>
 8009f32:	7bfb      	ldrb	r3, [r7, #15]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d002      	beq.n	8009f3e <rfalNfcbPollerSlotMarker+0x26>
        (slotCode < RFAL_NFCB_SLOTMARKER_SLOTCODE_MIN) || 
 8009f38:	7bfb      	ldrb	r3, [r7, #15]
 8009f3a:	2b10      	cmp	r3, #16
 8009f3c:	d901      	bls.n	8009f42 <rfalNfcbPollerSlotMarker+0x2a>
        (slotCode > RFAL_NFCB_SLOTMARKER_SLOTCODE_MAX)   )
    {
        return ERR_PARAM;
 8009f3e:	2307      	movs	r3, #7
 8009f40:	e02f      	b.n	8009fa2 <rfalNfcbPollerSlotMarker+0x8a>
    }
    /* Compose and send SLOT_MARKER with disabled AGC to detect collisions  */
    slotMarker.APn = ((slotCode << RFAL_NFCB_SLOT_MARKER_SC_SHIFT) | (uint8_t)RFAL_NFCB_CMD_SENSB_REQ);
 8009f42:	7bfb      	ldrb	r3, [r7, #15]
 8009f44:	011b      	lsls	r3, r3, #4
 8009f46:	b25b      	sxtb	r3, r3
 8009f48:	f043 0305 	orr.w	r3, r3, #5
 8009f4c:	b25b      	sxtb	r3, r3
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	753b      	strb	r3, [r7, #20]
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&slotMarker, sizeof(rfalNfcbSlotMarker), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT );
 8009f52:	f107 0014 	add.w	r0, r7, #20
 8009f56:	4b15      	ldr	r3, [pc, #84]	; (8009fac <rfalNfcbPollerSlotMarker+0x94>)
 8009f58:	9302      	str	r3, [sp, #8]
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	9301      	str	r3, [sp, #4]
 8009f5e:	f107 0312 	add.w	r3, r7, #18
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	230d      	movs	r3, #13
 8009f66:	68ba      	ldr	r2, [r7, #8]
 8009f68:	2101      	movs	r1, #1
 8009f6a:	f001 fce1 	bl	800b930 <rfalTransceiveBlockingTxRx>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	82fb      	strh	r3, [r7, #22]
    
    *sensbResLen = (uint8_t)rxLen;
 8009f72:	8a7b      	ldrh	r3, [r7, #18]
 8009f74:	b2da      	uxtb	r2, r3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	701a      	strb	r2, [r3, #0]
    
    /* Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 8009f7a:	8afb      	ldrh	r3, [r7, #22]
 8009f7c:	2b15      	cmp	r3, #21
 8009f7e:	d002      	beq.n	8009f86 <rfalNfcbPollerSlotMarker+0x6e>
 8009f80:	8afb      	ldrh	r3, [r7, #22]
 8009f82:	2b09      	cmp	r3, #9
 8009f84:	d101      	bne.n	8009f8a <rfalNfcbPollerSlotMarker+0x72>
    {
        return ERR_RF_COLLISION;
 8009f86:	231d      	movs	r3, #29
 8009f88:	e00b      	b.n	8009fa2 <rfalNfcbPollerSlotMarker+0x8a>
    }
    
    if( ret == ERR_NONE )
 8009f8a:	8afb      	ldrh	r3, [r7, #22]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d107      	bne.n	8009fa0 <rfalNfcbPollerSlotMarker+0x88>
    {
        return rfalNfcbCheckSensbRes( sensbRes, *sensbResLen );
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	4619      	mov	r1, r3
 8009f96:	68b8      	ldr	r0, [r7, #8]
 8009f98:	f7ff fed7 	bl	8009d4a <rfalNfcbCheckSensbRes>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	e000      	b.n	8009fa2 <rfalNfcbPollerSlotMarker+0x8a>
    }
    
    return ret;
 8009fa0:	8afb      	ldrh	r3, [r7, #22]
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3718      	adds	r7, #24
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	0003a278 	.word	0x0003a278

08009fb0 <rfalNfcbPollerTechnologyDetection>:


ReturnCode rfalNfcbPollerTechnologyDetection( rfalComplianceMode compMode, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	607a      	str	r2, [r7, #4]
 8009fbc:	73fb      	strb	r3, [r7, #15]
    NO_WARNING(compMode);
    
    return rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_SENSB_REQ, RFAL_NFCB_SLOT_NUM_1, sensbRes, sensbResLen );
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	68ba      	ldr	r2, [r7, #8]
 8009fc2:	2100      	movs	r1, #0
 8009fc4:	2000      	movs	r0, #0
 8009fc6:	f7ff ff0d 	bl	8009de4 <rfalNfcbPollerCheckPresence>
 8009fca:	4603      	mov	r3, r0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <rfalNfcbPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcbListenDevice *nfcbDevList, uint8_t *devCnt )
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b08a      	sub	sp, #40	; 0x28
 8009fd8:	af04      	add	r7, sp, #16
 8009fda:	60ba      	str	r2, [r7, #8]
 8009fdc:	607b      	str	r3, [r7, #4]
 8009fde:	4603      	mov	r3, r0
 8009fe0:	73fb      	strb	r3, [r7, #15]
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	73bb      	strb	r3, [r7, #14]
    bool colPending; /* dummy */
    return rfalNfcbPollerSlottedCollisionResolution( compMode, devLimit, RFAL_NFCB_SLOT_NUM_1, RFAL_NFCB_SLOT_NUM_16, nfcbDevList, devCnt, &colPending );
 8009fe6:	7bb9      	ldrb	r1, [r7, #14]
 8009fe8:	7bf8      	ldrb	r0, [r7, #15]
 8009fea:	f107 0317 	add.w	r3, r7, #23
 8009fee:	9302      	str	r3, [sp, #8]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	9301      	str	r3, [sp, #4]
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	2304      	movs	r3, #4
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f000 f805 	bl	800a00a <rfalNfcbPollerSlottedCollisionResolution>
 800a000:	4603      	mov	r3, r0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3718      	adds	r7, #24
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <rfalNfcbPollerSlottedCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSlottedCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcbSlots initSlots, rfalNfcbSlots endSlots, rfalNfcbListenDevice *nfcbDevList, uint8_t *devCnt, bool *colPending )
{
 800a00a:	b590      	push	{r4, r7, lr}
 800a00c:	b085      	sub	sp, #20
 800a00e:	af00      	add	r7, sp, #0
 800a010:	4604      	mov	r4, r0
 800a012:	4608      	mov	r0, r1
 800a014:	4611      	mov	r1, r2
 800a016:	461a      	mov	r2, r3
 800a018:	4623      	mov	r3, r4
 800a01a:	71fb      	strb	r3, [r7, #7]
 800a01c:	4603      	mov	r3, r0
 800a01e:	71bb      	strb	r3, [r7, #6]
 800a020:	460b      	mov	r3, r1
 800a022:	717b      	strb	r3, [r7, #5]
 800a024:	4613      	mov	r3, r2
 800a026:	713b      	strb	r3, [r7, #4]
        uint8_t       slotCode;
        uint8_t       curDevCnt;
        
        
        /* Check parameters. In ISO | Activity 1.0 mode the initial slots must be 1 as continuation of Technology Detection */
        if( (nfcbDevList == NULL) || (devCnt == NULL)  || (colPending == NULL) || (initSlots > RFAL_NFCB_SLOT_NUM_16) || 
 800a028:	6a3b      	ldr	r3, [r7, #32]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d011      	beq.n	800a052 <rfalNfcbPollerSlottedCollisionResolution+0x48>
 800a02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00e      	beq.n	800a052 <rfalNfcbPollerSlottedCollisionResolution+0x48>
 800a034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a036:	2b00      	cmp	r3, #0
 800a038:	d00b      	beq.n	800a052 <rfalNfcbPollerSlottedCollisionResolution+0x48>
 800a03a:	797b      	ldrb	r3, [r7, #5]
 800a03c:	2b04      	cmp	r3, #4
 800a03e:	d808      	bhi.n	800a052 <rfalNfcbPollerSlottedCollisionResolution+0x48>
 800a040:	793b      	ldrb	r3, [r7, #4]
 800a042:	2b04      	cmp	r3, #4
 800a044:	d805      	bhi.n	800a052 <rfalNfcbPollerSlottedCollisionResolution+0x48>
            (endSlots > RFAL_NFCB_SLOT_NUM_16) || ((compMode == RFAL_COMPLIANCE_MODE_ISO) && (initSlots != RFAL_NFCB_SLOT_NUM_1)) )
 800a046:	79fb      	ldrb	r3, [r7, #7]
 800a048:	2b02      	cmp	r3, #2
 800a04a:	d104      	bne.n	800a056 <rfalNfcbPollerSlottedCollisionResolution+0x4c>
 800a04c:	797b      	ldrb	r3, [r7, #5]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d001      	beq.n	800a056 <rfalNfcbPollerSlottedCollisionResolution+0x4c>
        {
            return ERR_PARAM;
 800a052:	2307      	movs	r3, #7
 800a054:	e14c      	b.n	800a2f0 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
        }
        
        /* Initialise as no error in case Activity 1.0 where the previous SENSB_RES from technology detection should be used */
        ret         = ERR_NONE;
 800a056:	2300      	movs	r3, #0
 800a058:	81fb      	strh	r3, [r7, #14]
        *devCnt     = 0;
 800a05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05c:	2200      	movs	r2, #0
 800a05e:	701a      	strb	r2, [r3, #0]
        curDevCnt   = 0;
 800a060:	2300      	movs	r3, #0
 800a062:	72fb      	strb	r3, [r7, #11]
        *colPending = false;
 800a064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a066:	2200      	movs	r2, #0
 800a068:	701a      	strb	r2, [r3, #0]
           
        
        /* Send ALLB_REQ   Activity 1.1   9.3.5.2 and 9.3.5.3  (Symbol 1 and 2) */
        if( compMode != RFAL_COMPLIANCE_MODE_ISO )
 800a06a:	79fb      	ldrb	r3, [r7, #7]
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	d010      	beq.n	800a092 <rfalNfcbPollerSlottedCollisionResolution+0x88>
        {
           ret =  rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_ALLB_REQ, initSlots, &nfcbDevList->sensbRes, &nfcbDevList->sensbResLen );
 800a070:	6a3b      	ldr	r3, [r7, #32]
 800a072:	1c5a      	adds	r2, r3, #1
 800a074:	6a3b      	ldr	r3, [r7, #32]
 800a076:	7979      	ldrb	r1, [r7, #5]
 800a078:	2008      	movs	r0, #8
 800a07a:	f7ff feb3 	bl	8009de4 <rfalNfcbPollerCheckPresence>
 800a07e:	4603      	mov	r3, r0
 800a080:	81fb      	strh	r3, [r7, #14]
           if( (ret != ERR_NONE) && (initSlots == RFAL_NFCB_SLOT_NUM_1) )
 800a082:	89fb      	ldrh	r3, [r7, #14]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d004      	beq.n	800a092 <rfalNfcbPollerSlottedCollisionResolution+0x88>
 800a088:	797b      	ldrb	r3, [r7, #5]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d101      	bne.n	800a092 <rfalNfcbPollerSlottedCollisionResolution+0x88>
           {
               return ret;
 800a08e:	89fb      	ldrh	r3, [r7, #14]
 800a090:	e12e      	b.n	800a2f0 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
           }
        }

        
        /* Check if there was a transmission error on WUPB  EMVCo 2.6  9.3.3.1 */
        if( (compMode == RFAL_COMPLIANCE_MODE_EMV) && (nfcbDevList->sensbResLen == 0U) )
 800a092:	79fb      	ldrb	r3, [r7, #7]
 800a094:	2b01      	cmp	r3, #1
 800a096:	d105      	bne.n	800a0a4 <rfalNfcbPollerSlottedCollisionResolution+0x9a>
 800a098:	6a3b      	ldr	r3, [r7, #32]
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d101      	bne.n	800a0a4 <rfalNfcbPollerSlottedCollisionResolution+0x9a>
        {
            return ERR_FRAMING;
 800a0a0:	2309      	movs	r3, #9
 800a0a2:	e125      	b.n	800a2f0 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
        }
        
        for( slotsNum = (uint8_t)initSlots; slotsNum <= (uint8_t)endSlots; slotsNum++ )
 800a0a4:	797b      	ldrb	r3, [r7, #5]
 800a0a6:	737b      	strb	r3, [r7, #13]
 800a0a8:	e11c      	b.n	800a2e4 <rfalNfcbPollerSlottedCollisionResolution+0x2da>
        {
            do {
                /* Activity 1.1  9.3.5.23  -  Symbol 22 */
                if( (compMode == RFAL_COMPLIANCE_MODE_NFC) && (curDevCnt != 0U) )
 800a0aa:	79fb      	ldrb	r3, [r7, #7]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d11a      	bne.n	800a0e6 <rfalNfcbPollerSlottedCollisionResolution+0xdc>
 800a0b0:	7afb      	ldrb	r3, [r7, #11]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d017      	beq.n	800a0e6 <rfalNfcbPollerSlottedCollisionResolution+0xdc>
                {
                    rfalNfcbPollerSleep( nfcbDevList[(*devCnt-1U)].sensbRes.nfcid0 );
 800a0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	4613      	mov	r3, r2
 800a0be:	011b      	lsls	r3, r3, #4
 800a0c0:	1a9b      	subs	r3, r3, r2
 800a0c2:	3b0f      	subs	r3, #15
 800a0c4:	6a3a      	ldr	r2, [r7, #32]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	3302      	adds	r3, #2
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7ff fef0 	bl	8009eb0 <rfalNfcbPollerSleep>
                    nfcbDevList[(*devCnt-1U)].isSleep = true;
 800a0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	011b      	lsls	r3, r3, #4
 800a0da:	1a9b      	subs	r3, r3, r2
 800a0dc:	3b0f      	subs	r3, #15
 800a0de:	6a3a      	ldr	r2, [r7, #32]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	739a      	strb	r2, [r3, #14]
                }
                
                /* Send SENSB_REQ with number of slots if not the first Activity 1.1  9.3.5.24  -  Symbol 23 */
                if( (slotsNum != (uint8_t)initSlots) || *colPending )
 800a0e6:	7b7a      	ldrb	r2, [r7, #13]
 800a0e8:	797b      	ldrb	r3, [r7, #5]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d103      	bne.n	800a0f6 <rfalNfcbPollerSlottedCollisionResolution+0xec>
 800a0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d017      	beq.n	800a126 <rfalNfcbPollerSlottedCollisionResolution+0x11c>
                {
                    /* PRQA S 4342 1 # MISRA 10.5 - Layout of rfalNfcbSlots and above loop guarantee that no invalid enum values are created. */
                    ret = rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_SENSB_REQ, (rfalNfcbSlots)slotsNum, &nfcbDevList[*devCnt].sensbRes, &nfcbDevList[*devCnt].sensbResLen );
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	4613      	mov	r3, r2
 800a0fe:	011b      	lsls	r3, r3, #4
 800a100:	1a9b      	subs	r3, r3, r2
 800a102:	6a3a      	ldr	r2, [r7, #32]
 800a104:	4413      	add	r3, r2
 800a106:	1c58      	adds	r0, r3, #1
 800a108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	461a      	mov	r2, r3
 800a10e:	4613      	mov	r3, r2
 800a110:	011b      	lsls	r3, r3, #4
 800a112:	1a9b      	subs	r3, r3, r2
 800a114:	6a3a      	ldr	r2, [r7, #32]
 800a116:	4413      	add	r3, r2
 800a118:	7b79      	ldrb	r1, [r7, #13]
 800a11a:	4602      	mov	r2, r0
 800a11c:	2000      	movs	r0, #0
 800a11e:	f7ff fe61 	bl	8009de4 <rfalNfcbPollerCheckPresence>
 800a122:	4603      	mov	r3, r0
 800a124:	81fb      	strh	r3, [r7, #14]
                }
                
                /* Activity 1.1  9.3.5.6  -  Symbol 5 */
                slotCode    = 0;
 800a126:	2300      	movs	r3, #0
 800a128:	733b      	strb	r3, [r7, #12]
                curDevCnt   = 0;
 800a12a:	2300      	movs	r3, #0
 800a12c:	72fb      	strb	r3, [r7, #11]
                *colPending = false;
 800a12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a130:	2200      	movs	r2, #0
 800a132:	701a      	strb	r2, [r3, #0]

                do{
                    /* Activity 1.1  9.3.5.26  -  Symbol 25 */
                    if( slotCode != 0U )
 800a134:	7b3b      	ldrb	r3, [r7, #12]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d017      	beq.n	800a16a <rfalNfcbPollerSlottedCollisionResolution+0x160>
                    {
                        ret = rfalNfcbPollerSlotMarker( slotCode, &nfcbDevList[*devCnt].sensbRes, &nfcbDevList[*devCnt].sensbResLen );
 800a13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	461a      	mov	r2, r3
 800a140:	4613      	mov	r3, r2
 800a142:	011b      	lsls	r3, r3, #4
 800a144:	1a9b      	subs	r3, r3, r2
 800a146:	6a3a      	ldr	r2, [r7, #32]
 800a148:	4413      	add	r3, r2
 800a14a:	1c59      	adds	r1, r3, #1
 800a14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	461a      	mov	r2, r3
 800a152:	4613      	mov	r3, r2
 800a154:	011b      	lsls	r3, r3, #4
 800a156:	1a9b      	subs	r3, r3, r2
 800a158:	6a3a      	ldr	r2, [r7, #32]
 800a15a:	4413      	add	r3, r2
 800a15c:	461a      	mov	r2, r3
 800a15e:	7b3b      	ldrb	r3, [r7, #12]
 800a160:	4618      	mov	r0, r3
 800a162:	f7ff fed9 	bl	8009f18 <rfalNfcbPollerSlotMarker>
 800a166:	4603      	mov	r3, r0
 800a168:	81fb      	strh	r3, [r7, #14]
                    }
                    
                    /* Activity 1.1  9.3.5.7 and 9.3.5.8  -  Symbol 6 */
                    if( ret != ERR_TIMEOUT )
 800a16a:	89fb      	ldrh	r3, [r7, #14]
 800a16c:	2b04      	cmp	r3, #4
 800a16e:	f000 809d 	beq.w	800a2ac <rfalNfcbPollerSlottedCollisionResolution+0x2a2>
                    {
                        /* Activity 1.1  9.3.5.8  -  Symbol 7 */
                        if( (rfalNfcbCheckSensbRes( &nfcbDevList[*devCnt].sensbRes, nfcbDevList[*devCnt].sensbResLen) == ERR_NONE) && (ret == ERR_NONE) )
 800a172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	461a      	mov	r2, r3
 800a178:	4613      	mov	r3, r2
 800a17a:	011b      	lsls	r3, r3, #4
 800a17c:	1a9b      	subs	r3, r3, r2
 800a17e:	6a3a      	ldr	r2, [r7, #32]
 800a180:	4413      	add	r3, r2
 800a182:	1c58      	adds	r0, r3, #1
 800a184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	461a      	mov	r2, r3
 800a18a:	4613      	mov	r3, r2
 800a18c:	011b      	lsls	r3, r3, #4
 800a18e:	1a9b      	subs	r3, r3, r2
 800a190:	6a3a      	ldr	r2, [r7, #32]
 800a192:	4413      	add	r3, r2
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	4619      	mov	r1, r3
 800a198:	f7ff fdd7 	bl	8009d4a <rfalNfcbCheckSensbRes>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d177      	bne.n	800a292 <rfalNfcbPollerSlottedCollisionResolution+0x288>
 800a1a2:	89fb      	ldrh	r3, [r7, #14]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d174      	bne.n	800a292 <rfalNfcbPollerSlottedCollisionResolution+0x288>
                        {
                            nfcbDevList[*devCnt].isSleep = false;
 800a1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	011b      	lsls	r3, r3, #4
 800a1b2:	1a9b      	subs	r3, r3, r2
 800a1b4:	6a3a      	ldr	r2, [r7, #32]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	739a      	strb	r2, [r3, #14]
                            
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 800a1bc:	79fb      	ldrb	r3, [r7, #7]
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d107      	bne.n	800a1d2 <rfalNfcbPollerSlottedCollisionResolution+0x1c8>
                            {
                                (*devCnt)++;
 800a1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	b2da      	uxtb	r2, r3
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1cc:	701a      	strb	r2, [r3, #0]
                                return ret;
 800a1ce:	89fb      	ldrh	r3, [r7, #14]
 800a1d0:	e08e      	b.n	800a2f0 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                            else if( compMode == RFAL_COMPLIANCE_MODE_ISO )
 800a1d2:	79fb      	ldrb	r3, [r7, #7]
 800a1d4:	2b02      	cmp	r3, #2
 800a1d6:	d12b      	bne.n	800a230 <rfalNfcbPollerSlottedCollisionResolution+0x226>
                            {
                                /* Activity 1.0  9.3.5.8  -  Symbol 7 */
                                (*devCnt)++;
 800a1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	3301      	adds	r3, #1
 800a1de:	b2da      	uxtb	r2, r3
 800a1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e2:	701a      	strb	r2, [r3, #0]
                                curDevCnt++;
 800a1e4:	7afb      	ldrb	r3, [r7, #11]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	72fb      	strb	r3, [r7, #11]
                                
                                /* Activity 1.0  9.3.5.10  -  Symbol 9 */
                                if( (*devCnt >= devLimit) || (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 800a1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	79ba      	ldrb	r2, [r7, #6]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d902      	bls.n	800a1fa <rfalNfcbPollerSlottedCollisionResolution+0x1f0>
 800a1f4:	7b7b      	ldrb	r3, [r7, #13]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d101      	bne.n	800a1fe <rfalNfcbPollerSlottedCollisionResolution+0x1f4>
                                {
                                    return ret;
 800a1fa:	89fb      	ldrh	r3, [r7, #14]
 800a1fc:	e078      	b.n	800a2f0 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                                }

                                /* Activity 1.0  9.3.5.11  -  Symbol 10 */
                                rfalNfcbPollerSleep( nfcbDevList[*devCnt-1U].sensbRes.nfcid0 );
 800a1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	461a      	mov	r2, r3
 800a204:	4613      	mov	r3, r2
 800a206:	011b      	lsls	r3, r3, #4
 800a208:	1a9b      	subs	r3, r3, r2
 800a20a:	3b0f      	subs	r3, #15
 800a20c:	6a3a      	ldr	r2, [r7, #32]
 800a20e:	4413      	add	r3, r2
 800a210:	3302      	adds	r3, #2
 800a212:	4618      	mov	r0, r3
 800a214:	f7ff fe4c 	bl	8009eb0 <rfalNfcbPollerSleep>
                                nfcbDevList[*devCnt-1U].isSleep =  true;
 800a218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	461a      	mov	r2, r3
 800a21e:	4613      	mov	r3, r2
 800a220:	011b      	lsls	r3, r3, #4
 800a222:	1a9b      	subs	r3, r3, r2
 800a224:	3b0f      	subs	r3, #15
 800a226:	6a3a      	ldr	r2, [r7, #32]
 800a228:	4413      	add	r3, r2
 800a22a:	2201      	movs	r2, #1
 800a22c:	739a      	strb	r2, [r3, #14]
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 800a22e:	e03c      	b.n	800a2aa <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                            }
                            else if( compMode == RFAL_COMPLIANCE_MODE_NFC )
 800a230:	79fb      	ldrb	r3, [r7, #7]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d139      	bne.n	800a2aa <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                            {
                                /* Activity 1.1  9.3.5.10 and 9.3.5.11  -  Symbol 9 and Symbol 11*/
                                if(curDevCnt != 0U)
 800a236:	7afb      	ldrb	r3, [r7, #11]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d017      	beq.n	800a26c <rfalNfcbPollerSlottedCollisionResolution+0x262>
                                {
                                    rfalNfcbPollerSleep( nfcbDevList[*devCnt-1U].sensbRes.nfcid0 );
 800a23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	461a      	mov	r2, r3
 800a242:	4613      	mov	r3, r2
 800a244:	011b      	lsls	r3, r3, #4
 800a246:	1a9b      	subs	r3, r3, r2
 800a248:	3b0f      	subs	r3, #15
 800a24a:	6a3a      	ldr	r2, [r7, #32]
 800a24c:	4413      	add	r3, r2
 800a24e:	3302      	adds	r3, #2
 800a250:	4618      	mov	r0, r3
 800a252:	f7ff fe2d 	bl	8009eb0 <rfalNfcbPollerSleep>
                                    nfcbDevList[*devCnt-1U].isSleep = true;
 800a256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	461a      	mov	r2, r3
 800a25c:	4613      	mov	r3, r2
 800a25e:	011b      	lsls	r3, r3, #4
 800a260:	1a9b      	subs	r3, r3, r2
 800a262:	3b0f      	subs	r3, #15
 800a264:	6a3a      	ldr	r2, [r7, #32]
 800a266:	4413      	add	r3, r2
 800a268:	2201      	movs	r2, #1
 800a26a:	739a      	strb	r2, [r3, #14]
                                }
                                
                                /* Activity 1.1  9.3.5.12  -  Symbol 11 */
                                (*devCnt)++;
 800a26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	3301      	adds	r3, #1
 800a272:	b2da      	uxtb	r2, r3
 800a274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a276:	701a      	strb	r2, [r3, #0]
                                curDevCnt++;
 800a278:	7afb      	ldrb	r3, [r7, #11]
 800a27a:	3301      	adds	r3, #1
 800a27c:	72fb      	strb	r3, [r7, #11]
                                
                                /* Activity 1.1  9.3.5.6  -  Symbol 13 */
                                if( (*devCnt >= devLimit) || (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 800a27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	79ba      	ldrb	r2, [r7, #6]
 800a284:	429a      	cmp	r2, r3
 800a286:	d902      	bls.n	800a28e <rfalNfcbPollerSlottedCollisionResolution+0x284>
 800a288:	7b7b      	ldrb	r3, [r7, #13]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d10d      	bne.n	800a2aa <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                                {
                                    return ret;
 800a28e:	89fb      	ldrh	r3, [r7, #14]
 800a290:	e02e      	b.n	800a2f0 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                        }
                        else
                        {
                            /* If deviceLimit is set to 0 the NFC Forum Device is configured to perform collision detection only  Activity 1.0 and 1.1  9.3.5.5  - Symbol 4 */
                            if( (devLimit == 0U) && (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 800a292:	79bb      	ldrb	r3, [r7, #6]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d104      	bne.n	800a2a2 <rfalNfcbPollerSlottedCollisionResolution+0x298>
 800a298:	7b7b      	ldrb	r3, [r7, #13]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d101      	bne.n	800a2a2 <rfalNfcbPollerSlottedCollisionResolution+0x298>
                            {
                                return ERR_RF_COLLISION;
 800a29e:	231d      	movs	r3, #29
 800a2a0:	e026      	b.n	800a2f0 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                            
                            /* Activity 1.1  9.3.5.9  -  Symbol 8 */
                            *colPending = true;
 800a2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	701a      	strb	r2, [r3, #0]
 800a2a8:	e000      	b.n	800a2ac <rfalNfcbPollerSlottedCollisionResolution+0x2a2>
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 800a2aa:	bf00      	nop
                        }
                    }
                    
                    /* Activity 1.1  9.3.5.15  -  Symbol 14 */
                    slotCode++;
 800a2ac:	7b3b      	ldrb	r3, [r7, #12]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	733b      	strb	r3, [r7, #12]
                }
                while( slotCode < rfalNfcbNI2NumberOfSlots(slotsNum) );
 800a2b2:	7b7b      	ldrb	r3, [r7, #13]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	7b3a      	ldrb	r2, [r7, #12]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	f4ff af38 	bcc.w	800a134 <rfalNfcbPollerSlottedCollisionResolution+0x12a>
                
                /* Activity 1.1  9.3.5.17  -  Symbol 16 */
                if( !(*colPending) )
 800a2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	f083 0301 	eor.w	r3, r3, #1
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d001      	beq.n	800a2d6 <rfalNfcbPollerSlottedCollisionResolution+0x2cc>
                {
                    return ERR_NONE;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	e00c      	b.n	800a2f0 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                }
            
            /* Activity 1.1  9.3.5.18  -  Symbol 17 */
            } while (curDevCnt != 0U);     /* If a collision is detected and card(s) were found on this loop keep the same number of available slots */
 800a2d6:	7afb      	ldrb	r3, [r7, #11]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	f47f aee6 	bne.w	800a0aa <rfalNfcbPollerSlottedCollisionResolution+0xa0>
        for( slotsNum = (uint8_t)initSlots; slotsNum <= (uint8_t)endSlots; slotsNum++ )
 800a2de:	7b7b      	ldrb	r3, [r7, #13]
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	737b      	strb	r3, [r7, #13]
 800a2e4:	7b7a      	ldrb	r2, [r7, #13]
 800a2e6:	793b      	ldrb	r3, [r7, #4]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	f67f aede 	bls.w	800a0aa <rfalNfcbPollerSlottedCollisionResolution+0xa0>
        }
        
        return ERR_NONE;
 800a2ee:	2300      	movs	r3, #0
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3714      	adds	r7, #20
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd90      	pop	{r4, r7, pc}

0800a2f8 <rfalNfcbTR2ToFDT>:


/*******************************************************************************/
uint32_t rfalNfcbTR2ToFDT( uint8_t tr2Code )
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	4603      	mov	r3, r0
 800a300:	71fb      	strb	r3, [r7, #7]
    /*******************************************************************************/
    /* MISRA 8.9 An object should be defined at block scope if its identifier only appears in a single function */
    /*! TR2 Table according to Digital 1.1 Table 33 */
    const uint16_t rfalNfcbTr2Table[] = { 1792, 3328, 5376, 9472 };
 800a302:	4a0b      	ldr	r2, [pc, #44]	; (800a330 <rfalNfcbTR2ToFDT+0x38>)
 800a304:	f107 0308 	add.w	r3, r7, #8
 800a308:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a30c:	e883 0003 	stmia.w	r3, {r0, r1}
    /*******************************************************************************/

    return rfalNfcbTr2Table[ (tr2Code & RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK) ];
 800a310:	79fb      	ldrb	r3, [r7, #7]
 800a312:	f003 0303 	and.w	r3, r3, #3
 800a316:	005b      	lsls	r3, r3, #1
 800a318:	f107 0210 	add.w	r2, r7, #16
 800a31c:	4413      	add	r3, r2
 800a31e:	f833 3c08 	ldrh.w	r3, [r3, #-8]
}
 800a322:	4618      	mov	r0, r3
 800a324:	3714      	adds	r7, #20
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr
 800a32e:	bf00      	nop
 800a330:	0800e340 	.word	0x0800e340

0800a334 <rfalNfcfComputeValidSENF>:
******************************************************************************
*/

/*******************************************************************************/
static void rfalNfcfComputeValidSENF( rfalNfcfListenDevice *outDevInfo, uint8_t *curDevIdx, uint8_t devLimit, bool overwrite, bool *nfcDepFound )
{
 800a334:	b5b0      	push	{r4, r5, r7, lr}
 800a336:	b08c      	sub	sp, #48	; 0x30
 800a338:	af00      	add	r7, sp, #0
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	4611      	mov	r1, r2
 800a340:	461a      	mov	r2, r3
 800a342:	460b      	mov	r3, r1
 800a344:	71fb      	strb	r3, [r7, #7]
 800a346:	4613      	mov	r3, r2
 800a348:	71bb      	strb	r3, [r7, #6]
    
    
    /*******************************************************************************/
    /* Go through all responses check if valid and duplicates                      */
    /*******************************************************************************/
    while( (gRfalNfcfGreedyF.pollFound > 0U) && ((*curDevIdx) < devLimit) )
 800a34a:	e0e5      	b.n	800a518 <rfalNfcfComputeValidSENF+0x1e4>
    {
        duplicate = false;
 800a34c:	2300      	movs	r3, #0
 800a34e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        gRfalNfcfGreedyF.pollFound--;
 800a352:	4b78      	ldr	r3, [pc, #480]	; (800a534 <rfalNfcfComputeValidSENF+0x200>)
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	3b01      	subs	r3, #1
 800a358:	b2da      	uxtb	r2, r3
 800a35a:	4b76      	ldr	r3, [pc, #472]	; (800a534 <rfalNfcfComputeValidSENF+0x200>)
 800a35c:	701a      	strb	r2, [r3, #0]
        
        /* MISRA 11.3 - Cannot point directly into different object type, use local copy */
        ST_MEMCPY( (uint8_t*)&sensfCopy, (uint8_t*)&gRfalNfcfGreedyF.POLL_F[gRfalNfcfGreedyF.pollFound], sizeof(rfalNfcfSensfResBuf) );
 800a35e:	4b75      	ldr	r3, [pc, #468]	; (800a534 <rfalNfcfComputeValidSENF+0x200>)
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	461a      	mov	r2, r3
 800a364:	4613      	mov	r3, r2
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	4413      	add	r3, r2
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	4a71      	ldr	r2, [pc, #452]	; (800a534 <rfalNfcfComputeValidSENF+0x200>)
 800a36e:	4413      	add	r3, r2
 800a370:	3302      	adds	r3, #2
 800a372:	f107 0414 	add.w	r4, r7, #20
 800a376:	461d      	mov	r5, r3
 800a378:	6828      	ldr	r0, [r5, #0]
 800a37a:	6869      	ldr	r1, [r5, #4]
 800a37c:	68aa      	ldr	r2, [r5, #8]
 800a37e:	68eb      	ldr	r3, [r5, #12]
 800a380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a382:	8a2b      	ldrh	r3, [r5, #16]
 800a384:	7caa      	ldrb	r2, [r5, #18]
 800a386:	8023      	strh	r3, [r4, #0]
 800a388:	4613      	mov	r3, r2
 800a38a:	70a3      	strb	r3, [r4, #2]
        
        
        /* Point to received SENSF_RES */
        sensfBuf = &sensfCopy;
 800a38c:	f107 0314 	add.w	r3, r7, #20
 800a390:	62bb      	str	r3, [r7, #40]	; 0x28
        
        
        /* Check for devices that are already in device list */
        for( tmpIdx = 0; tmpIdx < (*curDevIdx); tmpIdx++ )
 800a392:	2300      	movs	r3, #0
 800a394:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a398:	e01b      	b.n	800a3d2 <rfalNfcfComputeValidSENF+0x9e>
        {
            if( ST_BYTECMP( sensfBuf->SENSF_RES.NFCID2, outDevInfo[tmpIdx].sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN ) == 0 )
 800a39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39c:	1c98      	adds	r0, r3, #2
 800a39e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	00db      	lsls	r3, r3, #3
 800a3a6:	4413      	add	r3, r2
 800a3a8:	005b      	lsls	r3, r3, #1
 800a3aa:	4413      	add	r3, r2
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	3302      	adds	r3, #2
 800a3b2:	2208      	movs	r2, #8
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	f003 faa7 	bl	800d908 <memcmp>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d103      	bne.n	800a3c8 <rfalNfcfComputeValidSENF+0x94>
            {
                duplicate = true;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                break;
 800a3c6:	e00a      	b.n	800a3de <rfalNfcfComputeValidSENF+0xaa>
        for( tmpIdx = 0; tmpIdx < (*curDevIdx); tmpIdx++ )
 800a3c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d3dd      	bcc.n	800a39a <rfalNfcfComputeValidSENF+0x66>
            }
        }
        
        /* If is a duplicate skip this (and not to overwrite)*/        
        if(duplicate && !overwrite)
 800a3de:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d006      	beq.n	800a3f4 <rfalNfcfComputeValidSENF+0xc0>
 800a3e6:	79bb      	ldrb	r3, [r7, #6]
 800a3e8:	f083 0301 	eor.w	r3, r3, #1
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d000      	beq.n	800a3f4 <rfalNfcfComputeValidSENF+0xc0>
        {
            continue;
 800a3f2:	e091      	b.n	800a518 <rfalNfcfComputeValidSENF+0x1e4>
        }
        
        /* Check if response length is OK */
        if( (( sensfBuf->LEN - RFAL_NFCF_HEADER_LEN) < RFAL_NFCF_SENSF_RES_LEN_MIN) || ((sensfBuf->LEN - RFAL_NFCF_HEADER_LEN) > RFAL_NFCF_SENSF_RES_LEN_MAX) )
 800a3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	3b02      	subs	r3, #2
 800a3fa:	2b0f      	cmp	r3, #15
 800a3fc:	f240 808c 	bls.w	800a518 <rfalNfcfComputeValidSENF+0x1e4>
 800a400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	3b02      	subs	r3, #2
 800a406:	2b12      	cmp	r3, #18
 800a408:	d900      	bls.n	800a40c <rfalNfcfComputeValidSENF+0xd8>
        {
            continue;
 800a40a:	e085      	b.n	800a518 <rfalNfcfComputeValidSENF+0x1e4>
        }
        
        /* Check if the response is a SENSF_RES / Polling response */
        if( sensfBuf->SENSF_RES.CMD != (uint8_t)RFAL_NFCF_CMD_POLLING_RES )
 800a40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40e:	785b      	ldrb	r3, [r3, #1]
 800a410:	2b01      	cmp	r3, #1
 800a412:	d000      	beq.n	800a416 <rfalNfcfComputeValidSENF+0xe2>
        {
            continue;
 800a414:	e080      	b.n	800a518 <rfalNfcfComputeValidSENF+0x1e4>
        }
        
        /* Check if is an overwrite request or new device*/
        if(duplicate && overwrite)
 800a416:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d02a      	beq.n	800a474 <rfalNfcfComputeValidSENF+0x140>
 800a41e:	79bb      	ldrb	r3, [r7, #6]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d027      	beq.n	800a474 <rfalNfcfComputeValidSENF+0x140>
        {
            /* overwrite deviceInfo/GRE_SENSF_RES with SENSF_RES */
            outDevInfo[tmpIdx].sensfResLen = (sensfBuf->LEN - RFAL_NFCF_LENGTH_LEN);
 800a424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a426:	7819      	ldrb	r1, [r3, #0]
 800a428:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a42c:	4613      	mov	r3, r2
 800a42e:	00db      	lsls	r3, r3, #3
 800a430:	4413      	add	r3, r2
 800a432:	005b      	lsls	r3, r3, #1
 800a434:	4413      	add	r3, r2
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	4413      	add	r3, r2
 800a43a:	1e4a      	subs	r2, r1, #1
 800a43c:	b2d2      	uxtb	r2, r2
 800a43e:	701a      	strb	r2, [r3, #0]
            ST_MEMCPY( &outDevInfo[tmpIdx].sensfRes, &sensfBuf->SENSF_RES, outDevInfo[tmpIdx].sensfResLen );
 800a440:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a444:	4613      	mov	r3, r2
 800a446:	00db      	lsls	r3, r3, #3
 800a448:	4413      	add	r3, r2
 800a44a:	005b      	lsls	r3, r3, #1
 800a44c:	4413      	add	r3, r2
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	4413      	add	r3, r2
 800a452:	1c58      	adds	r0, r3, #1
 800a454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a456:	1c59      	adds	r1, r3, #1
 800a458:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a45c:	4613      	mov	r3, r2
 800a45e:	00db      	lsls	r3, r3, #3
 800a460:	4413      	add	r3, r2
 800a462:	005b      	lsls	r3, r3, #1
 800a464:	4413      	add	r3, r2
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	4413      	add	r3, r2
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	461a      	mov	r2, r3
 800a46e:	f003 fa5a 	bl	800d926 <memcpy>
            continue;
 800a472:	e051      	b.n	800a518 <rfalNfcfComputeValidSENF+0x1e4>
        }
        else
        {
            /* fill deviceInfo/GRE_SENSF_RES with new SENSF_RES */
            outDevInfo[(*curDevIdx)].sensfResLen = (sensfBuf->LEN - RFAL_NFCF_LENGTH_LEN);
 800a474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a476:	7819      	ldrb	r1, [r3, #0]
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	461a      	mov	r2, r3
 800a47e:	4613      	mov	r3, r2
 800a480:	00db      	lsls	r3, r3, #3
 800a482:	4413      	add	r3, r2
 800a484:	005b      	lsls	r3, r3, #1
 800a486:	4413      	add	r3, r2
 800a488:	68fa      	ldr	r2, [r7, #12]
 800a48a:	4413      	add	r3, r2
 800a48c:	1e4a      	subs	r2, r1, #1
 800a48e:	b2d2      	uxtb	r2, r2
 800a490:	701a      	strb	r2, [r3, #0]
            ST_MEMCPY( &outDevInfo[(*curDevIdx)].sensfRes, &sensfBuf->SENSF_RES, outDevInfo[(*curDevIdx)].sensfResLen );            
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	461a      	mov	r2, r3
 800a498:	4613      	mov	r3, r2
 800a49a:	00db      	lsls	r3, r3, #3
 800a49c:	4413      	add	r3, r2
 800a49e:	005b      	lsls	r3, r3, #1
 800a4a0:	4413      	add	r3, r2
 800a4a2:	68fa      	ldr	r2, [r7, #12]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	1c58      	adds	r0, r3, #1
 800a4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4aa:	1c59      	adds	r1, r3, #1
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	00db      	lsls	r3, r3, #3
 800a4b6:	4413      	add	r3, r2
 800a4b8:	005b      	lsls	r3, r3, #1
 800a4ba:	4413      	add	r3, r2
 800a4bc:	68fa      	ldr	r2, [r7, #12]
 800a4be:	4413      	add	r3, r2
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	f003 fa2f 	bl	800d926 <memcpy>
        }
        
        /* Check if this device supports NFC-DEP and signal it (ACTIVITY 1.1   9.3.6.63) */        
        *nfcDepFound = rfalNfcfIsNfcDepSupported( &outDevInfo[(*curDevIdx)] );
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	4613      	mov	r3, r2
 800a4d0:	00db      	lsls	r3, r3, #3
 800a4d2:	4413      	add	r3, r2
 800a4d4:	005b      	lsls	r3, r3, #1
 800a4d6:	4413      	add	r3, r2
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	4413      	add	r3, r2
 800a4dc:	789b      	ldrb	r3, [r3, #2]
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d10e      	bne.n	800a500 <rfalNfcfComputeValidSENF+0x1cc>
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	4613      	mov	r3, r2
 800a4ea:	00db      	lsls	r3, r3, #3
 800a4ec:	4413      	add	r3, r2
 800a4ee:	005b      	lsls	r3, r3, #1
 800a4f0:	4413      	add	r3, r2
 800a4f2:	68fa      	ldr	r2, [r7, #12]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	78db      	ldrb	r3, [r3, #3]
 800a4f8:	2bfe      	cmp	r3, #254	; 0xfe
 800a4fa:	d101      	bne.n	800a500 <rfalNfcfComputeValidSENF+0x1cc>
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	e000      	b.n	800a502 <rfalNfcfComputeValidSENF+0x1ce>
 800a500:	2300      	movs	r3, #0
 800a502:	f003 0301 	and.w	r3, r3, #1
 800a506:	b2da      	uxtb	r2, r3
 800a508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a50a:	701a      	strb	r2, [r3, #0]
                
        (*curDevIdx)++;
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	3301      	adds	r3, #1
 800a512:	b2da      	uxtb	r2, r3
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	701a      	strb	r2, [r3, #0]
    while( (gRfalNfcfGreedyF.pollFound > 0U) && ((*curDevIdx) < devLimit) )
 800a518:	4b06      	ldr	r3, [pc, #24]	; (800a534 <rfalNfcfComputeValidSENF+0x200>)
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d005      	beq.n	800a52c <rfalNfcfComputeValidSENF+0x1f8>
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	79fa      	ldrb	r2, [r7, #7]
 800a526:	429a      	cmp	r2, r3
 800a528:	f63f af10 	bhi.w	800a34c <rfalNfcfComputeValidSENF+0x18>
    }
}
 800a52c:	bf00      	nop
 800a52e:	3730      	adds	r7, #48	; 0x30
 800a530:	46bd      	mov	sp, r7
 800a532:	bdb0      	pop	{r4, r5, r7, pc}
 800a534:	20000910 	.word	0x20000910

0800a538 <rfalNfcfPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcfPollerInitialize( rfalBitRate bitRate )
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	4603      	mov	r3, r0
 800a540:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    if( (bitRate != RFAL_BR_212) && (bitRate != RFAL_BR_424) )
 800a542:	79fb      	ldrb	r3, [r7, #7]
 800a544:	2b01      	cmp	r3, #1
 800a546:	d004      	beq.n	800a552 <rfalNfcfPollerInitialize+0x1a>
 800a548:	79fb      	ldrb	r3, [r7, #7]
 800a54a:	2b02      	cmp	r3, #2
 800a54c:	d001      	beq.n	800a552 <rfalNfcfPollerInitialize+0x1a>
    {
        return ERR_PARAM;
 800a54e:	2307      	movs	r3, #7
 800a550:	e01b      	b.n	800a58a <rfalNfcfPollerInitialize+0x52>
    }
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCF, bitRate, bitRate ) );
 800a552:	79fa      	ldrb	r2, [r7, #7]
 800a554:	79fb      	ldrb	r3, [r7, #7]
 800a556:	4619      	mov	r1, r3
 800a558:	2006      	movs	r0, #6
 800a55a:	f000 fbb5 	bl	800acc8 <rfalSetMode>
 800a55e:	4603      	mov	r3, r0
 800a560:	81fb      	strh	r3, [r7, #14]
 800a562:	89fb      	ldrh	r3, [r7, #14]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d001      	beq.n	800a56c <rfalNfcfPollerInitialize+0x34>
 800a568:	89fb      	ldrh	r3, [r7, #14]
 800a56a:	e00e      	b.n	800a58a <rfalNfcfPollerInitialize+0x52>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 800a56c:	2001      	movs	r0, #1
 800a56e:	f000 ff45 	bl	800b3fc <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCF );
 800a572:	4808      	ldr	r0, [pc, #32]	; (800a594 <rfalNfcfPollerInitialize+0x5c>)
 800a574:	f000 ff7c 	bl	800b470 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCF_POLLER );
 800a578:	f44f 6027 	mov.w	r0, #2672	; 0xa70
 800a57c:	f000 ff64 	bl	800b448 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCF_POLLER );
 800a580:	f44f 6027 	mov.w	r0, #2672	; 0xa70
 800a584:	f000 ff4a 	bl	800b41c <rfalSetFDTPoll>
    
    return ERR_NONE;
 800a588:	2300      	movs	r3, #0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3710      	adds	r7, #16
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	00042360 	.word	0x00042360

0800a598 <rfalNfcfPollerPoll>:



/*******************************************************************************/
ReturnCode rfalNfcfPollerPoll( rfalFeliCaPollSlots slots, uint16_t sysCode, uint8_t reqCode, rfalFeliCaPollRes *cardList, uint8_t *devCnt, uint8_t *collisions )
{
 800a598:	b590      	push	{r4, r7, lr}
 800a59a:	b087      	sub	sp, #28
 800a59c:	af04      	add	r7, sp, #16
 800a59e:	603b      	str	r3, [r7, #0]
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	71fb      	strb	r3, [r7, #7]
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	80bb      	strh	r3, [r7, #4]
 800a5a8:	4613      	mov	r3, r2
 800a5aa:	71bb      	strb	r3, [r7, #6]
    return rfalFeliCaPoll( slots, sysCode, reqCode, cardList, rfalNfcfSlots2CardNum(slots), devCnt, collisions );
 800a5ac:	79fb      	ldrb	r3, [r7, #7]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	79bc      	ldrb	r4, [r7, #6]
 800a5b4:	88b9      	ldrh	r1, [r7, #4]
 800a5b6:	79f8      	ldrb	r0, [r7, #7]
 800a5b8:	69fa      	ldr	r2, [r7, #28]
 800a5ba:	9202      	str	r2, [sp, #8]
 800a5bc:	69ba      	ldr	r2, [r7, #24]
 800a5be:	9201      	str	r2, [sp, #4]
 800a5c0:	9300      	str	r3, [sp, #0]
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	4622      	mov	r2, r4
 800a5c6:	f002 fbbd 	bl	800cd44 <rfalFeliCaPoll>
 800a5ca:	4603      	mov	r3, r0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	370c      	adds	r7, #12
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd90      	pop	{r4, r7, pc}

0800a5d4 <rfalNfcfPollerCheckPresence>:

/*******************************************************************************/
ReturnCode rfalNfcfPollerCheckPresence( void )
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af04      	add	r7, sp, #16
    gRfalNfcfGreedyF.pollFound     = 0;
 800a5da:	4b0b      	ldr	r3, [pc, #44]	; (800a608 <rfalNfcfPollerCheckPresence+0x34>)
 800a5dc:	2200      	movs	r2, #0
 800a5de:	701a      	strb	r2, [r3, #0]
    gRfalNfcfGreedyF.pollCollision = 0;
 800a5e0:	4b09      	ldr	r3, [pc, #36]	; (800a608 <rfalNfcfPollerCheckPresence+0x34>)
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	705a      	strb	r2, [r3, #1]
        
    /* ACTIVITY 1.0 & 1.1 - 9.2.3.17 SENSF_REQ  must be with number of slots equal to 4
     *                                SC must be 0xFFFF
     *                                RC must be 0x00 (No system code info required) */
    return rfalFeliCaPoll( RFAL_FELICA_4_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, gRfalNfcfGreedyF.POLL_F, rfalNfcfSlots2CardNum(RFAL_FELICA_4_SLOTS), &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 800a5e6:	4b09      	ldr	r3, [pc, #36]	; (800a60c <rfalNfcfPollerCheckPresence+0x38>)
 800a5e8:	9302      	str	r3, [sp, #8]
 800a5ea:	4b07      	ldr	r3, [pc, #28]	; (800a608 <rfalNfcfPollerCheckPresence+0x34>)
 800a5ec:	9301      	str	r3, [sp, #4]
 800a5ee:	2304      	movs	r3, #4
 800a5f0:	9300      	str	r3, [sp, #0]
 800a5f2:	4b07      	ldr	r3, [pc, #28]	; (800a610 <rfalNfcfPollerCheckPresence+0x3c>)
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a5fa:	2003      	movs	r0, #3
 800a5fc:	f002 fba2 	bl	800cd44 <rfalFeliCaPoll>
 800a600:	4603      	mov	r3, r0
}
 800a602:	4618      	mov	r0, r3
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}
 800a608:	20000910 	.word	0x20000910
 800a60c:	20000911 	.word	0x20000911
 800a610:	20000912 	.word	0x20000912

0800a614 <rfalNfcfPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcfPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcfListenDevice *nfcfDevList, uint8_t *devCnt )
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b088      	sub	sp, #32
 800a618:	af02      	add	r7, sp, #8
 800a61a:	60ba      	str	r2, [r7, #8]
 800a61c:	607b      	str	r3, [r7, #4]
 800a61e:	4603      	mov	r3, r0
 800a620:	73fb      	strb	r3, [r7, #15]
 800a622:	460b      	mov	r3, r1
 800a624:	73bb      	strb	r3, [r7, #14]
    ReturnCode  ret;
    bool        nfcDepFound;
    
    if( (nfcfDevList == NULL) || (devCnt == NULL) )
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d002      	beq.n	800a632 <rfalNfcfPollerCollisionResolution+0x1e>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d101      	bne.n	800a636 <rfalNfcfPollerCollisionResolution+0x22>
    {
        return ERR_PARAM;
 800a632:	2307      	movs	r3, #7
 800a634:	e053      	b.n	800a6de <rfalNfcfPollerCollisionResolution+0xca>
    }
            
    *devCnt      = 0;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	701a      	strb	r2, [r3, #0]
    nfcDepFound  = false;
 800a63c:	2300      	movs	r3, #0
 800a63e:	757b      	strb	r3, [r7, #21]
    /* ACTIVITY 1.1 - 9.3.63.59 Populate GRE_SENSF_RES with data from GRE_POLL_F               */
    /*                                                                                         */
    /* CON_DEVICES_LIMIT = 0 Just check if devices from Tech Detection exceeds -> always true  */
    /* Allow the number of slots open on Technology Detection                                  */
    /*******************************************************************************************/
    rfalNfcfComputeValidSENF( nfcfDevList, devCnt, ((devLimit == 0U) ? rfalNfcfSlots2CardNum( RFAL_FELICA_4_SLOTS ) : devLimit), false, &nfcDepFound );
 800a640:	7bbb      	ldrb	r3, [r7, #14]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d001      	beq.n	800a64a <rfalNfcfPollerCollisionResolution+0x36>
 800a646:	7bba      	ldrb	r2, [r7, #14]
 800a648:	e000      	b.n	800a64c <rfalNfcfPollerCollisionResolution+0x38>
 800a64a:	2204      	movs	r2, #4
 800a64c:	f107 0315 	add.w	r3, r7, #21
 800a650:	9300      	str	r3, [sp, #0]
 800a652:	2300      	movs	r3, #0
 800a654:	6879      	ldr	r1, [r7, #4]
 800a656:	68b8      	ldr	r0, [r7, #8]
 800a658:	f7ff fe6c 	bl	800a334 <rfalNfcfComputeValidSENF>
    /*******************************************************************************/
    /* ACTIVITY 1.0 - 9.3.6.4                                                      */
    /* ACTIVITY 1.1 - 9.3.63.60 Check if devices found are lower than the limit    */
    /* and send a SENSF_REQ if so                                                  */
    /*******************************************************************************/
    if( *devCnt < devLimit )
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	7bba      	ldrb	r2, [r7, #14]
 800a662:	429a      	cmp	r2, r3
 800a664:	d93a      	bls.n	800a6dc <rfalNfcfPollerCollisionResolution+0xc8>
    {
        /* ACTIVITY 1.0 - 9.3.6.5  Copy valid SENSF_RES and then to remove it
         * ACTIVITY 1.1 - 9.3.6.65 Copy and filter duplicates                                           
         * For now, due to some devices keep generating different nfcid2, we use 1.0  
         * Phones detected: Samsung Galaxy Nexus,Samsung Galaxy S3,Samsung Nexus S */
        *devCnt = 0;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	701a      	strb	r2, [r3, #0]
        
        ret = rfalNfcfPollerPoll( RFAL_FELICA_16_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, gRfalNfcfGreedyF.POLL_F, &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 800a66c:	4b1e      	ldr	r3, [pc, #120]	; (800a6e8 <rfalNfcfPollerCollisionResolution+0xd4>)
 800a66e:	9301      	str	r3, [sp, #4]
 800a670:	4b1e      	ldr	r3, [pc, #120]	; (800a6ec <rfalNfcfPollerCollisionResolution+0xd8>)
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	4b1e      	ldr	r3, [pc, #120]	; (800a6f0 <rfalNfcfPollerCollisionResolution+0xdc>)
 800a676:	2200      	movs	r2, #0
 800a678:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a67c:	200f      	movs	r0, #15
 800a67e:	f7ff ff8b 	bl	800a598 <rfalNfcfPollerPoll>
 800a682:	4603      	mov	r3, r0
 800a684:	82fb      	strh	r3, [r7, #22]
        if( ret == ERR_NONE )
 800a686:	8afb      	ldrh	r3, [r7, #22]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d108      	bne.n	800a69e <rfalNfcfPollerCollisionResolution+0x8a>
        {
            rfalNfcfComputeValidSENF( nfcfDevList, devCnt, devLimit, false, &nfcDepFound );
 800a68c:	7bba      	ldrb	r2, [r7, #14]
 800a68e:	f107 0315 	add.w	r3, r7, #21
 800a692:	9300      	str	r3, [sp, #0]
 800a694:	2300      	movs	r3, #0
 800a696:	6879      	ldr	r1, [r7, #4]
 800a698:	68b8      	ldr	r0, [r7, #8]
 800a69a:	f7ff fe4b 	bl	800a334 <rfalNfcfComputeValidSENF>
        }
      
      /*******************************************************************************/
      /* ACTIVITY 1.1 -  9.3.6.63 Check if any device supports NFC DEP               */
      /*******************************************************************************/
      if( nfcDepFound && (compMode == RFAL_COMPLIANCE_MODE_NFC) )
 800a69e:	7d7b      	ldrb	r3, [r7, #21]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d01b      	beq.n	800a6dc <rfalNfcfPollerCollisionResolution+0xc8>
 800a6a4:	7bfb      	ldrb	r3, [r7, #15]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d118      	bne.n	800a6dc <rfalNfcfPollerCollisionResolution+0xc8>
      {
          ret = rfalNfcfPollerPoll( RFAL_FELICA_16_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_SYSTEM_CODE, gRfalNfcfGreedyF.POLL_F, &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 800a6aa:	4b0f      	ldr	r3, [pc, #60]	; (800a6e8 <rfalNfcfPollerCollisionResolution+0xd4>)
 800a6ac:	9301      	str	r3, [sp, #4]
 800a6ae:	4b0f      	ldr	r3, [pc, #60]	; (800a6ec <rfalNfcfPollerCollisionResolution+0xd8>)
 800a6b0:	9300      	str	r3, [sp, #0]
 800a6b2:	4b0f      	ldr	r3, [pc, #60]	; (800a6f0 <rfalNfcfPollerCollisionResolution+0xdc>)
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a6ba:	200f      	movs	r0, #15
 800a6bc:	f7ff ff6c 	bl	800a598 <rfalNfcfPollerPoll>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	82fb      	strh	r3, [r7, #22]
          if( ret == ERR_NONE )
 800a6c4:	8afb      	ldrh	r3, [r7, #22]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d108      	bne.n	800a6dc <rfalNfcfPollerCollisionResolution+0xc8>
          {
              rfalNfcfComputeValidSENF( nfcfDevList, devCnt, devLimit, true, &nfcDepFound );
 800a6ca:	7bba      	ldrb	r2, [r7, #14]
 800a6cc:	f107 0315 	add.w	r3, r7, #21
 800a6d0:	9300      	str	r3, [sp, #0]
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	6879      	ldr	r1, [r7, #4]
 800a6d6:	68b8      	ldr	r0, [r7, #8]
 800a6d8:	f7ff fe2c 	bl	800a334 <rfalNfcfComputeValidSENF>
          }
      }
    }
    
    return ERR_NONE;
 800a6dc:	2300      	movs	r3, #0
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3718      	adds	r7, #24
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	20000911 	.word	0x20000911
 800a6ec:	20000910 	.word	0x20000910
 800a6f0:	20000912 	.word	0x20000912

0800a6f4 <rfalNfcvPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcvPollerInitialize( void )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	af00      	add	r7, sp, #0
    ReturnCode ret;
            
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCV, RFAL_BR_26p48, RFAL_BR_26p48 ) );
 800a6fa:	22ec      	movs	r2, #236	; 0xec
 800a6fc:	21ec      	movs	r1, #236	; 0xec
 800a6fe:	2007      	movs	r0, #7
 800a700:	f000 fae2 	bl	800acc8 <rfalSetMode>
 800a704:	4603      	mov	r3, r0
 800a706:	80fb      	strh	r3, [r7, #6]
 800a708:	88fb      	ldrh	r3, [r7, #6]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d001      	beq.n	800a712 <rfalNfcvPollerInitialize+0x1e>
 800a70e:	88fb      	ldrh	r3, [r7, #6]
 800a710:	e00e      	b.n	800a730 <rfalNfcvPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 800a712:	2001      	movs	r0, #1
 800a714:	f000 fe72 	bl	800b3fc <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCV );
 800a718:	4807      	ldr	r0, [pc, #28]	; (800a738 <rfalNfcvPollerInitialize+0x44>)
 800a71a:	f000 fea9 	bl	800b470 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCV_POLLER );
 800a71e:	f241 00d6 	movw	r0, #4310	; 0x10d6
 800a722:	f000 fe91 	bl	800b448 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCV_POLLER );
 800a726:	f44f 5083 	mov.w	r0, #4192	; 0x1060
 800a72a:	f000 fe77 	bl	800b41c <rfalSetFDTPoll>
    
    return ERR_NONE;
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	3708      	adds	r7, #8
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	000108d8 	.word	0x000108d8

0800a73c <rfalNfcvPollerCheckPresence>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerCheckPresence( rfalNfcvInventoryRes *invRes )
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b086      	sub	sp, #24
 800a740:	af02      	add	r7, sp, #8
 800a742:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    
    /* INVENTORY_REQ with 1 slot and no Mask   Activity 2.0 (Candidate) 9.2.3.32 */
    ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, invRes, NULL );
 800a744:	2300      	movs	r3, #0
 800a746:	9300      	str	r3, [sp, #0]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2200      	movs	r2, #0
 800a74c:	2100      	movs	r1, #0
 800a74e:	2020      	movs	r0, #32
 800a750:	f000 f815 	bl	800a77e <rfalNfcvPollerInventory>
 800a754:	4603      	mov	r3, r0
 800a756:	81fb      	strh	r3, [r7, #14]
    
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || 
 800a758:	89fb      	ldrh	r3, [r7, #14]
 800a75a:	2b1d      	cmp	r3, #29
 800a75c:	d008      	beq.n	800a770 <rfalNfcvPollerCheckPresence+0x34>
 800a75e:	89fb      	ldrh	r3, [r7, #14]
 800a760:	2b15      	cmp	r3, #21
 800a762:	d005      	beq.n	800a770 <rfalNfcvPollerCheckPresence+0x34>
 800a764:	89fb      	ldrh	r3, [r7, #14]
 800a766:	2b09      	cmp	r3, #9
 800a768:	d002      	beq.n	800a770 <rfalNfcvPollerCheckPresence+0x34>
        (ret == ERR_FRAMING)      || (ret == ERR_PROTO)  )
 800a76a:	89fb      	ldrh	r3, [r7, #14]
 800a76c:	2b0b      	cmp	r3, #11
 800a76e:	d101      	bne.n	800a774 <rfalNfcvPollerCheckPresence+0x38>
    {
        ret = ERR_NONE;
 800a770:	2300      	movs	r3, #0
 800a772:	81fb      	strh	r3, [r7, #14]
    }
    
    return ret;
 800a774:	89fb      	ldrh	r3, [r7, #14]
}
 800a776:	4618      	mov	r0, r3
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <rfalNfcvPollerInventory>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerInventory( rfalNfcvNumSlots nSlots, uint8_t maskLen, const uint8_t *maskVal, rfalNfcvInventoryRes *invRes, uint16_t* rcvdLen )
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b08c      	sub	sp, #48	; 0x30
 800a782:	af02      	add	r7, sp, #8
 800a784:	60ba      	str	r2, [r7, #8]
 800a786:	607b      	str	r3, [r7, #4]
 800a788:	4603      	mov	r3, r0
 800a78a:	73fb      	strb	r3, [r7, #15]
 800a78c:	460b      	mov	r3, r1
 800a78e:	73bb      	strb	r3, [r7, #14]
    ReturnCode           ret;
    rfalNfcvInventoryReq invReq;
    uint16_t             rxLen;
    
    if( ((maskVal == NULL) && (maskLen != 0U)) || (invRes == NULL) )
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d102      	bne.n	800a79c <rfalNfcvPollerInventory+0x1e>
 800a796:	7bbb      	ldrb	r3, [r7, #14]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d102      	bne.n	800a7a2 <rfalNfcvPollerInventory+0x24>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d101      	bne.n	800a7a6 <rfalNfcvPollerInventory+0x28>
    {
        return ERR_PARAM;
 800a7a2:	2307      	movs	r3, #7
 800a7a4:	e04a      	b.n	800a83c <rfalNfcvPollerInventory+0xbe>
    }
    
    invReq.INV_FLAG = (RFAL_NFCV_INV_REQ_FLAG | (uint8_t)nSlots);
 800a7a6:	7bfb      	ldrb	r3, [r7, #15]
 800a7a8:	f043 0306 	orr.w	r3, r3, #6
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	763b      	strb	r3, [r7, #24]
    invReq.CMD      = RFAL_NFCV_CMD_INVENTORY;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	767b      	strb	r3, [r7, #25]
    invReq.MASK_LEN = (uint8_t)MIN( maskLen, ((nSlots == RFAL_NFCV_NUM_SLOTS_1) ? RFAL_NFCV_MASKVAL_MAX_1SLOT_LEN : RFAL_NFCV_MASKVAL_MAX_16SLOT_LEN) );   /* Digital 2.0  9.6.1.6 */
 800a7b4:	7bbb      	ldrb	r3, [r7, #14]
 800a7b6:	7bfa      	ldrb	r2, [r7, #15]
 800a7b8:	2a20      	cmp	r2, #32
 800a7ba:	d101      	bne.n	800a7c0 <rfalNfcvPollerInventory+0x42>
 800a7bc:	2240      	movs	r2, #64	; 0x40
 800a7be:	e000      	b.n	800a7c2 <rfalNfcvPollerInventory+0x44>
 800a7c0:	223c      	movs	r2, #60	; 0x3c
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d806      	bhi.n	800a7d4 <rfalNfcvPollerInventory+0x56>
 800a7c6:	7bfb      	ldrb	r3, [r7, #15]
 800a7c8:	2b20      	cmp	r3, #32
 800a7ca:	d101      	bne.n	800a7d0 <rfalNfcvPollerInventory+0x52>
 800a7cc:	2340      	movs	r3, #64	; 0x40
 800a7ce:	e002      	b.n	800a7d6 <rfalNfcvPollerInventory+0x58>
 800a7d0:	233c      	movs	r3, #60	; 0x3c
 800a7d2:	e000      	b.n	800a7d6 <rfalNfcvPollerInventory+0x58>
 800a7d4:	7bbb      	ldrb	r3, [r7, #14]
 800a7d6:	76bb      	strb	r3, [r7, #26]
    
    if( rfalConvBitsToBytes(invReq.MASK_LEN) > 0U )  /* MISRA 21.18 */
 800a7d8:	7ebb      	ldrb	r3, [r7, #26]
 800a7da:	3307      	adds	r3, #7
 800a7dc:	08db      	lsrs	r3, r3, #3
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d00b      	beq.n	800a7fc <rfalNfcvPollerInventory+0x7e>
    {
        ST_MEMCPY( invReq.MASK_VALUE, maskVal, rfalConvBitsToBytes(invReq.MASK_LEN) );
 800a7e4:	7ebb      	ldrb	r3, [r7, #26]
 800a7e6:	3307      	adds	r3, #7
 800a7e8:	08db      	lsrs	r3, r3, #3
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	f107 0318 	add.w	r3, r7, #24
 800a7f2:	3303      	adds	r3, #3
 800a7f4:	68b9      	ldr	r1, [r7, #8]
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f003 f895 	bl	800d926 <memcpy>
    }
    
    ret = rfalISO15693TransceiveAnticollisionFrame( (uint8_t*)&invReq, (uint8_t)(RFAL_NFCV_INV_REQ_HEADER_LEN + rfalConvBitsToBytes(invReq.MASK_LEN)), (uint8_t*)invRes, sizeof(rfalNfcvInventoryRes), &rxLen );
 800a7fc:	7ebb      	ldrb	r3, [r7, #26]
 800a7fe:	3307      	adds	r3, #7
 800a800:	08db      	lsrs	r3, r3, #3
 800a802:	b2db      	uxtb	r3, r3
 800a804:	3303      	adds	r3, #3
 800a806:	b2d9      	uxtb	r1, r3
 800a808:	f107 0018 	add.w	r0, r7, #24
 800a80c:	f107 0316 	add.w	r3, r7, #22
 800a810:	9300      	str	r3, [sp, #0]
 800a812:	230c      	movs	r3, #12
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	f002 fa1f 	bl	800cc58 <rfalISO15693TransceiveAnticollisionFrame>
 800a81a:	4603      	mov	r3, r0
 800a81c:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    /* Check for optional output parameter */
    if( rcvdLen != NULL )
 800a81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a820:	2b00      	cmp	r3, #0
 800a822:	d002      	beq.n	800a82a <rfalNfcvPollerInventory+0xac>
    {
        *rcvdLen = rxLen;
 800a824:	8afa      	ldrh	r2, [r7, #22]
 800a826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a828:	801a      	strh	r2, [r3, #0]
    }
    
    if( ret == ERR_NONE )
 800a82a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d104      	bne.n	800a83a <rfalNfcvPollerInventory+0xbc>
    {
        if( rxLen != rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 800a830:	8afb      	ldrh	r3, [r7, #22]
 800a832:	2b60      	cmp	r3, #96	; 0x60
 800a834:	d001      	beq.n	800a83a <rfalNfcvPollerInventory+0xbc>
        {
            return ERR_PROTO;
 800a836:	230b      	movs	r3, #11
 800a838:	e000      	b.n	800a83c <rfalNfcvPollerInventory+0xbe>
        }
    }
    
    return ret;
 800a83a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3728      	adds	r7, #40	; 0x28
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <rfalNfcvPollerCollisionResolution>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcvListenDevice *nfcvDevList, uint8_t *devCnt )
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b0ae      	sub	sp, #184	; 0xb8
 800a848:	af02      	add	r7, sp, #8
 800a84a:	60ba      	str	r2, [r7, #8]
 800a84c:	607b      	str	r3, [r7, #4]
 800a84e:	4603      	mov	r3, r0
 800a850:	73fb      	strb	r3, [r7, #15]
 800a852:	460b      	mov	r3, r1
 800a854:	73bb      	strb	r3, [r7, #14]
    uint8_t           colPos;
    bool              colPending;
    rfalNfcvCollision colFound[RFAL_NFCV_MAX_COLL_SUPPORTED];
    
    
    if( (nfcvDevList == NULL) || (devCnt == NULL) )
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d002      	beq.n	800a862 <rfalNfcvPollerCollisionResolution+0x1e>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d101      	bne.n	800a866 <rfalNfcvPollerCollisionResolution+0x22>
    {
        return ERR_PARAM;
 800a862:	2307      	movs	r3, #7
 800a864:	e190      	b.n	800ab88 <rfalNfcvPollerCollisionResolution+0x344>
    }

    /* Initialize parameters */
    *devCnt = 0;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	701a      	strb	r2, [r3, #0]
    colIt         = 0;
 800a86c:	2300      	movs	r3, #0
 800a86e:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
    colCnt        = 0;
 800a872:	2300      	movs	r3, #0
 800a874:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    colPending    = false;
 800a878:	2300      	movs	r3, #0
 800a87a:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
    ST_MEMSET(colFound, 0x00, (sizeof(rfalNfcvCollision)*RFAL_NFCV_MAX_COLL_SUPPORTED) );
 800a87e:	f107 0314 	add.w	r3, r7, #20
 800a882:	2290      	movs	r2, #144	; 0x90
 800a884:	2100      	movs	r1, #0
 800a886:	4618      	mov	r0, r3
 800a888:	f003 f871 	bl	800d96e <memset>

    if( devLimit > 0U )       /* MISRA 21.18 */
 800a88c:	7bbb      	ldrb	r3, [r7, #14]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d00a      	beq.n	800a8a8 <rfalNfcvPollerCollisionResolution+0x64>
    {
        ST_MEMSET(nfcvDevList, 0x00, (sizeof(rfalNfcvListenDevice)*devLimit) );
 800a892:	7bba      	ldrb	r2, [r7, #14]
 800a894:	4613      	mov	r3, r2
 800a896:	005b      	lsls	r3, r3, #1
 800a898:	4413      	add	r3, r2
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	4413      	add	r3, r2
 800a89e:	461a      	mov	r2, r3
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	68b8      	ldr	r0, [r7, #8]
 800a8a4:	f003 f863 	bl	800d96e <memset>
    }

    NO_WARNING(colPending);   /* colPending is not exposed externally, in future it might become exposed/ouput parameter */

    if( compMode == RFAL_COMPLIANCE_MODE_NFC )
 800a8a8:	7bfb      	ldrb	r3, [r7, #15]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d12c      	bne.n	800a908 <rfalNfcvPollerCollisionResolution+0xc4>
    {
        /* Send INVENTORY_REQ with one slot   Activity 2.0  9.3.7.1  (Symbol 0)  */
        ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, &nfcvDevList->InvRes, NULL );
 800a8ae:	68ba      	ldr	r2, [r7, #8]
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	9300      	str	r3, [sp, #0]
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	2020      	movs	r0, #32
 800a8bc:	f7ff ff5f 	bl	800a77e <rfalNfcvPollerInventory>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

        if( ret == ERR_TIMEOUT )  /* Exit if no device found     Activity 2.0  9.3.7.2 (Symbol 1)  */
 800a8c6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800a8ca:	2b04      	cmp	r3, #4
 800a8cc:	d101      	bne.n	800a8d2 <rfalNfcvPollerCollisionResolution+0x8e>
        {
            return ERR_NONE;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	e15a      	b.n	800ab88 <rfalNfcvPollerCollisionResolution+0x344>
        }
        if( ret == ERR_NONE )     /* Device found without transmission error/collision    Activity 2.0  9.3.7.3 (Symbol 2)  */
 800a8d2:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d107      	bne.n	800a8ea <rfalNfcvPollerCollisionResolution+0xa6>
        {
            (*devCnt)++;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	3301      	adds	r3, #1
 800a8e0:	b2da      	uxtb	r2, r3
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	701a      	strb	r2, [r3, #0]
            return ERR_NONE;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	e14e      	b.n	800ab88 <rfalNfcvPollerCollisionResolution+0x344>
        }

        /* A Collision has been identified  Activity 2.0  9.3.7.2  (Symbol 3) */
        colPending = true;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        colCnt        = 1;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

        /* Check if the Collision Resolution is set to perform only Collision detection   Activity 2.0  9.3.7.5 (Symbol 4)*/
        if( devLimit == 0U )
 800a8f6:	7bbb      	ldrb	r3, [r7, #14]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d101      	bne.n	800a900 <rfalNfcvPollerCollisionResolution+0xbc>
        {
            return ERR_RF_COLLISION;
 800a8fc:	231d      	movs	r3, #29
 800a8fe:	e143      	b.n	800ab88 <rfalNfcvPollerCollisionResolution+0x344>
        }

        platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 800a900:	2004      	movs	r0, #4
 800a902:	f7f7 ff83 	bl	800280c <HAL_Delay>
 800a906:	e005      	b.n	800a914 <rfalNfcvPollerCollisionResolution+0xd0>
        /*******************************************************************************/
    }
    else
    { 
        /* Advance to 16 slots below without mask. Will give a good chance to identify multiple cards */
        colPending = true;
 800a908:	2301      	movs	r3, #1
 800a90a:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        colCnt        = 1;
 800a90e:	2301      	movs	r3, #1
 800a910:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    
    /* Execute until all collisions are resolved Activity 2.0  9.3.7.16  (Symbol 17) */
    do
    {
        /* Activity 2.0  9.3.7.5  (Symbol 6) */
        colPending = false;
 800a914:	2300      	movs	r3, #0
 800a916:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        slotNum    = 0;
 800a91a:	2300      	movs	r3, #0
 800a91c:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
        
        do
        {
            if( slotNum == 0U )
 800a920:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800a924:	2b00      	cmp	r3, #0
 800a926:	d12a      	bne.n	800a97e <rfalNfcvPollerCollisionResolution+0x13a>
            {
                /* Send INVENTORY_REQ with 16 slots   Activity 2.0  9.3.7.7  (Symbol 8) */
                ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_16, colFound[colIt].maskLen, colFound[colIt].maskVal, &nfcvDevList[(*devCnt)].InvRes, &rcvdLen );
 800a928:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 800a92c:	4613      	mov	r3, r2
 800a92e:	00db      	lsls	r3, r3, #3
 800a930:	4413      	add	r3, r2
 800a932:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800a936:	4413      	add	r3, r2
 800a938:	3b9c      	subs	r3, #156	; 0x9c
 800a93a:	7818      	ldrb	r0, [r3, #0]
 800a93c:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 800a940:	f107 0114 	add.w	r1, r7, #20
 800a944:	4613      	mov	r3, r2
 800a946:	00db      	lsls	r3, r3, #3
 800a948:	4413      	add	r3, r2
 800a94a:	440b      	add	r3, r1
 800a94c:	1c59      	adds	r1, r3, #1
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	461a      	mov	r2, r3
 800a954:	4613      	mov	r3, r2
 800a956:	005b      	lsls	r3, r3, #1
 800a958:	4413      	add	r3, r2
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	4413      	add	r3, r2
 800a95e:	68ba      	ldr	r2, [r7, #8]
 800a960:	4413      	add	r3, r2
 800a962:	461a      	mov	r2, r3
 800a964:	f107 03a6 	add.w	r3, r7, #166	; 0xa6
 800a968:	9300      	str	r3, [sp, #0]
 800a96a:	4613      	mov	r3, r2
 800a96c:	460a      	mov	r2, r1
 800a96e:	4601      	mov	r1, r0
 800a970:	2000      	movs	r0, #0
 800a972:	f7ff ff04 	bl	800a77e <rfalNfcvPollerInventory>
 800a976:	4603      	mov	r3, r0
 800a978:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800a97c:	e013      	b.n	800a9a6 <rfalNfcvPollerCollisionResolution+0x162>
            }
            else
            {
                ret = rfalISO15693TransceiveEOFAnticollision( (uint8_t*)&nfcvDevList[(*devCnt)].InvRes, sizeof(rfalNfcvInventoryRes), &rcvdLen );
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	461a      	mov	r2, r3
 800a984:	4613      	mov	r3, r2
 800a986:	005b      	lsls	r3, r3, #1
 800a988:	4413      	add	r3, r2
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	4413      	add	r3, r2
 800a98e:	68ba      	ldr	r2, [r7, #8]
 800a990:	4413      	add	r3, r2
 800a992:	4618      	mov	r0, r3
 800a994:	f107 03a6 	add.w	r3, r7, #166	; 0xa6
 800a998:	461a      	mov	r2, r3
 800a99a:	210c      	movs	r1, #12
 800a99c:	f002 f9bc 	bl	800cd18 <rfalISO15693TransceiveEOFAnticollision>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
            }
            slotNum++;
 800a9a6:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
            
            /*******************************************************************************/
            if( ret != ERR_TIMEOUT )
 800a9b0:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800a9b4:	2b04      	cmp	r3, #4
 800a9b6:	f000 80cb 	beq.w	800ab50 <rfalNfcvPollerCollisionResolution+0x30c>
            {
                if( rcvdLen < rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 800a9ba:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a9be:	2b5f      	cmp	r3, #95	; 0x5f
 800a9c0:	d802      	bhi.n	800a9c8 <rfalNfcvPollerCollisionResolution+0x184>
                { /* If only a partial frame was received make sure the FDT_V_INVENT_NORES is fulfilled */
                    platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 800a9c2:	2004      	movs	r0, #4
 800a9c4:	f7f7 ff22 	bl	800280c <HAL_Delay>
                }

                if( ret == ERR_NONE )
 800a9c8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d10b      	bne.n	800a9e8 <rfalNfcvPollerCollisionResolution+0x1a4>
                {
                    /* Check if the device found is already on the list and its response is a valid INVENTORY_RES */
                    if( rcvdLen == rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 800a9d0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a9d4:	2b60      	cmp	r3, #96	; 0x60
 800a9d6:	f040 80be 	bne.w	800ab56 <rfalNfcvPollerCollisionResolution+0x312>
                    {
                        /* Activity 2.0  9.3.7.15  (Symbol 11) */
                        (*devCnt)++;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	3301      	adds	r3, #1
 800a9e0:	b2da      	uxtb	r2, r3
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	701a      	strb	r2, [r3, #0]
 800a9e6:	e0b6      	b.n	800ab56 <rfalNfcvPollerCollisionResolution+0x312>
                    }
                }
                else /* Treat everything else as collision */
                {
                    /* Activity 2.0  9.3.7.15  (Symbol 16) */
                    colPending = true;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    

                    /*******************************************************************************/
                    /* Ensure that this collision still fits on the container */
                    if( colCnt < RFAL_NFCV_MAX_COLL_SUPPORTED )
 800a9ee:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800a9f2:	2b0f      	cmp	r3, #15
 800a9f4:	f200 80af 	bhi.w	800ab56 <rfalNfcvPollerCollisionResolution+0x312>
                    {
                        /* Store this collision on the container to be resolved later */
                        /* Activity 2.0  9.3.7.15  (Symbol 16): add the collision information
                         * (MASK_VAL + SN) to the list containing the collision information */
                        ST_MEMCPY(colFound[colCnt].maskVal, colFound[colIt].maskVal, RFAL_NFCV_UID_LEN);
 800a9f8:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 800a9fc:	f107 0114 	add.w	r1, r7, #20
 800aa00:	4613      	mov	r3, r2
 800aa02:	00db      	lsls	r3, r3, #3
 800aa04:	4413      	add	r3, r2
 800aa06:	440b      	add	r3, r1
 800aa08:	1c58      	adds	r0, r3, #1
 800aa0a:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 800aa0e:	f107 0114 	add.w	r1, r7, #20
 800aa12:	4613      	mov	r3, r2
 800aa14:	00db      	lsls	r3, r3, #3
 800aa16:	4413      	add	r3, r2
 800aa18:	440b      	add	r3, r1
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	2208      	movs	r2, #8
 800aa1e:	4619      	mov	r1, r3
 800aa20:	f002 ff81 	bl	800d926 <memcpy>
                        colPos = colFound[colIt].maskLen;
 800aa24:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 800aa28:	4613      	mov	r3, r2
 800aa2a:	00db      	lsls	r3, r3, #3
 800aa2c:	4413      	add	r3, r2
 800aa2e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800aa32:	4413      	add	r3, r2
 800aa34:	3b9c      	subs	r3, #156	; 0x9c
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      &= (uint8_t)((1U << (colPos % RFAL_BITS_IN_BYTE)) - 1U);
 800aa3c:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 800aa40:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 800aa44:	08db      	lsrs	r3, r3, #3
 800aa46:	b2d8      	uxtb	r0, r3
 800aa48:	4601      	mov	r1, r0
 800aa4a:	4613      	mov	r3, r2
 800aa4c:	00db      	lsls	r3, r3, #3
 800aa4e:	4413      	add	r3, r2
 800aa50:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800aa54:	4413      	add	r3, r2
 800aa56:	440b      	add	r3, r1
 800aa58:	3b9b      	subs	r3, #155	; 0x9b
 800aa5a:	7819      	ldrb	r1, [r3, #0]
 800aa5c:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 800aa60:	f003 0307 	and.w	r3, r3, #7
 800aa64:	2201      	movs	r2, #1
 800aa66:	fa02 f303 	lsl.w	r3, r2, r3
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 800aa74:	400b      	ands	r3, r1
 800aa76:	b2d9      	uxtb	r1, r3
 800aa78:	4613      	mov	r3, r2
 800aa7a:	00db      	lsls	r3, r3, #3
 800aa7c:	4413      	add	r3, r2
 800aa7e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800aa82:	4413      	add	r3, r2
 800aa84:	4403      	add	r3, r0
 800aa86:	3b9b      	subs	r3, #155	; 0x9b
 800aa88:	460a      	mov	r2, r1
 800aa8a:	701a      	strb	r2, [r3, #0]
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      |= (uint8_t)((slotNum-1U) << (colPos % RFAL_BITS_IN_BYTE));
 800aa8c:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 800aa90:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 800aa94:	08db      	lsrs	r3, r3, #3
 800aa96:	b2d8      	uxtb	r0, r3
 800aa98:	4601      	mov	r1, r0
 800aa9a:	4613      	mov	r3, r2
 800aa9c:	00db      	lsls	r3, r3, #3
 800aa9e:	4413      	add	r3, r2
 800aaa0:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800aaa4:	4413      	add	r3, r2
 800aaa6:	440b      	add	r3, r1
 800aaa8:	3b9b      	subs	r3, #155	; 0x9b
 800aaaa:	7819      	ldrb	r1, [r3, #0]
 800aaac:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800aab0:	1e5a      	subs	r2, r3, #1
 800aab2:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 800aab6:	f003 0307 	and.w	r3, r3, #7
 800aaba:	fa02 f303 	lsl.w	r3, r2, r3
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 800aac4:	430b      	orrs	r3, r1
 800aac6:	b2d9      	uxtb	r1, r3
 800aac8:	4613      	mov	r3, r2
 800aaca:	00db      	lsls	r3, r3, #3
 800aacc:	4413      	add	r3, r2
 800aace:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800aad2:	4413      	add	r3, r2
 800aad4:	4403      	add	r3, r0
 800aad6:	3b9b      	subs	r3, #155	; 0x9b
 800aad8:	460a      	mov	r2, r1
 800aada:	701a      	strb	r2, [r3, #0]
                        colFound[colCnt].maskVal[((colPos/RFAL_BITS_IN_BYTE)+1U)]  = (uint8_t)((slotNum-1U) >> (RFAL_BITS_IN_BYTE - (colPos % RFAL_BITS_IN_BYTE)));
 800aadc:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800aae0:	1e5a      	subs	r2, r3, #1
 800aae2:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 800aae6:	f003 0307 	and.w	r3, r3, #7
 800aaea:	f1c3 0308 	rsb	r3, r3, #8
 800aaee:	fa22 f003 	lsr.w	r0, r2, r3
 800aaf2:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 800aaf6:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 800aafa:	08db      	lsrs	r3, r3, #3
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	1c59      	adds	r1, r3, #1
 800ab00:	b2c0      	uxtb	r0, r0
 800ab02:	4613      	mov	r3, r2
 800ab04:	00db      	lsls	r3, r3, #3
 800ab06:	4413      	add	r3, r2
 800ab08:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800ab0c:	4413      	add	r3, r2
 800ab0e:	440b      	add	r3, r1
 800ab10:	3b9b      	subs	r3, #155	; 0x9b
 800ab12:	4602      	mov	r2, r0
 800ab14:	701a      	strb	r2, [r3, #0]

                        colFound[colCnt].maskLen = (colFound[colIt].maskLen + 4U);
 800ab16:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 800ab1a:	4613      	mov	r3, r2
 800ab1c:	00db      	lsls	r3, r3, #3
 800ab1e:	4413      	add	r3, r2
 800ab20:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800ab24:	4413      	add	r3, r2
 800ab26:	3b9c      	subs	r3, #156	; 0x9c
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 800ab2e:	3304      	adds	r3, #4
 800ab30:	b2d9      	uxtb	r1, r3
 800ab32:	4613      	mov	r3, r2
 800ab34:	00db      	lsls	r3, r3, #3
 800ab36:	4413      	add	r3, r2
 800ab38:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800ab3c:	4413      	add	r3, r2
 800ab3e:	3b9c      	subs	r3, #156	; 0x9c
 800ab40:	460a      	mov	r2, r1
 800ab42:	701a      	strb	r2, [r3, #0]

                        colCnt++;
 800ab44:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800ab48:	3301      	adds	r3, #1
 800ab4a:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 800ab4e:	e002      	b.n	800ab56 <rfalNfcvPollerCollisionResolution+0x312>
                }
            }
            else 
            { 
                /* Timeout */
                platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 800ab50:	2004      	movs	r0, #4
 800ab52:	f7f7 fe5b 	bl	800280c <HAL_Delay>
            }
            
            /* Check if devices found have reached device limit   Activity 2.0  9.3.7.15  (Symbol 16) */
            if( *devCnt >= devLimit )
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	7bba      	ldrb	r2, [r7, #14]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d801      	bhi.n	800ab64 <rfalNfcvPollerCollisionResolution+0x320>
            {
                return ERR_NONE;
 800ab60:	2300      	movs	r3, #0
 800ab62:	e011      	b.n	800ab88 <rfalNfcvPollerCollisionResolution+0x344>
            }
        } while( slotNum < RFAL_NFCV_MAX_SLOTS );  /* Slot loop             */
 800ab64:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800ab68:	2b0f      	cmp	r3, #15
 800ab6a:	f67f aed9 	bls.w	800a920 <rfalNfcvPollerCollisionResolution+0xdc>
        colIt++;
 800ab6e:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 800ab72:	3301      	adds	r3, #1
 800ab74:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
    } while( colIt < colCnt );                     /* Collisions found loop */
 800ab78:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 800ab7c:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800ab80:	429a      	cmp	r2, r3
 800ab82:	f4ff aec7 	bcc.w	800a914 <rfalNfcvPollerCollisionResolution+0xd0>
    
    return ERR_NONE;
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	37b0      	adds	r7, #176	; 0xb0
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <rfalInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalInitialize( void )
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	af00      	add	r7, sp, #0
    st25r3911InitInterrupts();
 800ab94:	f7f7 fc04 	bl	80023a0 <st25r3911InitInterrupts>
    
    /* Initialize chip */
    st25r3911Initialize();
 800ab98:	f7f6 fce8 	bl	800156c <st25r3911Initialize>
    
    /* Check expected chip: ST25R3911 */
    if( !st25r3911CheckChipID( NULL ) )
 800ab9c:	2000      	movs	r0, #0
 800ab9e:	f7f6 fea5 	bl	80018ec <st25r3911CheckChipID>
 800aba2:	4603      	mov	r3, r0
 800aba4:	f083 0301 	eor.w	r3, r3, #1
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d001      	beq.n	800abb2 <rfalInitialize+0x22>
    {
        return ERR_HW_MISMATCH;
 800abae:	2324      	movs	r3, #36	; 0x24
 800abb0:	e04a      	b.n	800ac48 <rfalInitialize+0xb8>
    }
    
    /* Disable any previous observation mode */
    rfalST25R3911ObsModeDisable();
 800abb2:	2100      	movs	r1, #0
 800abb4:	2001      	movs	r0, #1
 800abb6:	f7f7 f961 	bl	8001e7c <st25r3911WriteTestRegister>
    
    /*******************************************************************************/    
    /* Apply RF Chip generic initialization */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_INIT) );
 800abba:	2000      	movs	r0, #0
 800abbc:	f7f9 fcfc 	bl	80045b8 <rfalSetAnalogConfig>

    /*******************************************************************************/
    /* Set FIFO Water Levels to be used */
    st25r3911ChangeRegisterBits( ST25R3911_REG_IO_CONF1, (ST25R3911_REG_IO_CONF1_fifo_lt | ST25R3911_REG_IO_CONF1_fifo_lr), (ST25R3911_REG_IO_CONF1_fifo_lt_32bytes | ST25R3911_REG_IO_CONF1_fifo_lr_64bytes) );
 800abc0:	2200      	movs	r2, #0
 800abc2:	2130      	movs	r1, #48	; 0x30
 800abc4:	2000      	movs	r0, #0
 800abc6:	f7f7 fa28 	bl	800201a <st25r3911ChangeRegisterBits>
    
    /* Always have CRC in FIFO upon reception  */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_crc_2_fifo );
 800abca:	2140      	movs	r1, #64	; 0x40
 800abcc:	2009      	movs	r0, #9
 800abce:	f7f7 fa06 	bl	8001fde <st25r3911SetRegisterBits>
    
    /* Enable External Field Detector */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 800abd2:	2110      	movs	r1, #16
 800abd4:	2009      	movs	r0, #9
 800abd6:	f7f7 fa02 	bl	8001fde <st25r3911SetRegisterBits>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 800abda:	f001 fdfb 	bl	800c7d4 <rfalFIFOStatusClear>
    
    /*******************************************************************************/
    gRFAL.state              = RFAL_STATE_INIT;
 800abde:	4b1b      	ldr	r3, [pc, #108]	; (800ac4c <rfalInitialize+0xbc>)
 800abe0:	2201      	movs	r2, #1
 800abe2:	701a      	strb	r2, [r3, #0]
    gRFAL.mode               = RFAL_MODE_NONE;
 800abe4:	4b19      	ldr	r3, [pc, #100]	; (800ac4c <rfalInitialize+0xbc>)
 800abe6:	2200      	movs	r2, #0
 800abe8:	705a      	strb	r2, [r3, #1]
    gRFAL.field              = false;
 800abea:	4b18      	ldr	r3, [pc, #96]	; (800ac4c <rfalInitialize+0xbc>)
 800abec:	2200      	movs	r2, #0
 800abee:	711a      	strb	r2, [r3, #4]
    
    /* Set RFAL default configs */
    gRFAL.conf.obsvModeTx    = RFAL_OBSMODE_DISABLE;
 800abf0:	4b16      	ldr	r3, [pc, #88]	; (800ac4c <rfalInitialize+0xbc>)
 800abf2:	2200      	movs	r2, #0
 800abf4:	715a      	strb	r2, [r3, #5]
    gRFAL.conf.obsvModeRx    = RFAL_OBSMODE_DISABLE;
 800abf6:	4b15      	ldr	r3, [pc, #84]	; (800ac4c <rfalInitialize+0xbc>)
 800abf8:	2200      	movs	r2, #0
 800abfa:	719a      	strb	r2, [r3, #6]
    gRFAL.conf.eHandling     = RFAL_ERRORHANDLING_NONE;
 800abfc:	4b13      	ldr	r3, [pc, #76]	; (800ac4c <rfalInitialize+0xbc>)
 800abfe:	2200      	movs	r2, #0
 800ac00:	71da      	strb	r2, [r3, #7]
    
    /* Transceive set to IDLE */
    gRFAL.TxRx.lastState     = RFAL_TXRX_STATE_IDLE;
 800ac02:	4b12      	ldr	r3, [pc, #72]	; (800ac4c <rfalInitialize+0xbc>)
 800ac04:	2200      	movs	r2, #0
 800ac06:	755a      	strb	r2, [r3, #21]
    gRFAL.TxRx.state         = RFAL_TXRX_STATE_IDLE;
 800ac08:	4b10      	ldr	r3, [pc, #64]	; (800ac4c <rfalInitialize+0xbc>)
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	751a      	strb	r2, [r3, #20]
    
    /* Disable all timings */
    gRFAL.timings.FDTListen  = RFAL_TIMING_NONE;
 800ac0e:	4b0f      	ldr	r3, [pc, #60]	; (800ac4c <rfalInitialize+0xbc>)
 800ac10:	2200      	movs	r2, #0
 800ac12:	60da      	str	r2, [r3, #12]
    gRFAL.timings.FDTPoll    = RFAL_TIMING_NONE;
 800ac14:	4b0d      	ldr	r3, [pc, #52]	; (800ac4c <rfalInitialize+0xbc>)
 800ac16:	2200      	movs	r2, #0
 800ac18:	611a      	str	r2, [r3, #16]
    gRFAL.timings.GT         = RFAL_TIMING_NONE;
 800ac1a:	4b0c      	ldr	r3, [pc, #48]	; (800ac4c <rfalInitialize+0xbc>)
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	609a      	str	r2, [r3, #8]
    
    gRFAL.tmr.GT             = RFAL_TIMING_NONE;
 800ac20:	4b0a      	ldr	r3, [pc, #40]	; (800ac4c <rfalInitialize+0xbc>)
 800ac22:	2200      	movs	r2, #0
 800ac24:	641a      	str	r2, [r3, #64]	; 0x40
    
    gRFAL.callbacks.preTxRx  = NULL;
 800ac26:	4b09      	ldr	r3, [pc, #36]	; (800ac4c <rfalInitialize+0xbc>)
 800ac28:	2200      	movs	r2, #0
 800ac2a:	64da      	str	r2, [r3, #76]	; 0x4c
    gRFAL.callbacks.postTxRx = NULL;
 800ac2c:	4b07      	ldr	r3, [pc, #28]	; (800ac4c <rfalInitialize+0xbc>)
 800ac2e:	2200      	movs	r2, #0
 800ac30:	651a      	str	r2, [r3, #80]	; 0x50
    
#if RFAL_FEATURE_NFCV    
    /* Initialize NFC-V Data */
    gRFAL.nfcvData.ignoreBits = 0;
 800ac32:	4b06      	ldr	r3, [pc, #24]	; (800ac4c <rfalInitialize+0xbc>)
 800ac34:	2200      	movs	r2, #0
 800ac36:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4
    gRFAL.Lm.brDetected      = RFAL_BR_KEEP;
#endif /* RFAL_FEATURE_LISTEN_MODE */

#if RFAL_FEATURE_WAKEUP_MODE
    /* Initialize Wake-Up Mode */
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 800ac3a:	4b04      	ldr	r3, [pc, #16]	; (800ac4c <rfalInitialize+0xbc>)
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    
    
    /*******************************************************************************/    
    /* Perform Automatic Calibration (if configured to do so).                     *
     * Registers set by rfalSetAnalogConfig will tell rfalCalibrate what to perform*/
    rfalCalibrate();
 800ac42:	f000 f805 	bl	800ac50 <rfalCalibrate>
    
    return ERR_NONE;
 800ac46:	2300      	movs	r3, #0
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	bd80      	pop	{r7, pc}
 800ac4c:	20000a54 	.word	0x20000a54

0800ac50 <rfalCalibrate>:


/*******************************************************************************/
ReturnCode rfalCalibrate( void )
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
    uint16_t resValue;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800ac56:	4b1b      	ldr	r3, [pc, #108]	; (800acc4 <rfalCalibrate+0x74>)
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d101      	bne.n	800ac62 <rfalCalibrate+0x12>
    {
        return ERR_WRONG_STATE;
 800ac5e:	2321      	movs	r3, #33	; 0x21
 800ac60:	e02b      	b.n	800acba <rfalCalibrate+0x6a>
    /*******************************************************************************/
    /* Perform ST25R3911 regulators and antenna calibration                        */
    /*******************************************************************************/
    
    /* Automatic regulator adjustment only performed if not set manually on Analog Configs */
    if( st25r3911CheckReg( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )       
 800ac62:	2200      	movs	r2, #0
 800ac64:	2180      	movs	r1, #128	; 0x80
 800ac66:	202a      	movs	r0, #42	; 0x2a
 800ac68:	f7f6 fe20 	bl	80018ac <st25r3911CheckReg>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d003      	beq.n	800ac7a <rfalCalibrate+0x2a>
    {
        /* Adjust the regulators so that Antenna Calibrate has better Regulator values */
        st25r3911AdjustRegulators( &resValue );
 800ac72:	1dbb      	adds	r3, r7, #6
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7f6 fca7 	bl	80015c8 <st25r3911AdjustRegulators>
    }
    
    /* Automatic Antenna calibration only performed if not set manually on Analog Configs */
    if( st25r3911CheckReg( ST25R3911_REG_ANT_CAL_CONTROL, ST25R3911_REG_ANT_CAL_CONTROL_trim_s, 0x00 ) )
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	2180      	movs	r1, #128	; 0x80
 800ac7e:	2021      	movs	r0, #33	; 0x21
 800ac80:	f7f6 fe14 	bl	80018ac <st25r3911CheckReg>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d010      	beq.n	800acac <rfalCalibrate+0x5c>
    {
        st25r3911CalibrateAntenna( (uint8_t*) &resValue );
 800ac8a:	1dbb      	adds	r3, r7, #6
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f7f6 fd1c 	bl	80016ca <st25r3911CalibrateAntenna>
      
        /*******************************************************************************/
        /* REMARK: Silicon workaround ST25R3911 Errata #1.5                            */
        /* Always run the command Calibrate Antenna twice                              */
        st25r3911CalibrateAntenna( (uint8_t*) &resValue );                
 800ac92:	1dbb      	adds	r3, r7, #6
 800ac94:	4618      	mov	r0, r3
 800ac96:	f7f6 fd18 	bl	80016ca <st25r3911CalibrateAntenna>
    {
        /* If no antenna calibration is performed there is no need to perform second regulator adjustment again */
        return ERR_NONE; 
    }
    
    if( st25r3911CheckReg( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	2180      	movs	r1, #128	; 0x80
 800ac9e:	202a      	movs	r0, #42	; 0x2a
 800aca0:	f7f6 fe04 	bl	80018ac <st25r3911CheckReg>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d006      	beq.n	800acb8 <rfalCalibrate+0x68>
 800acaa:	e001      	b.n	800acb0 <rfalCalibrate+0x60>
        return ERR_NONE; 
 800acac:	2300      	movs	r3, #0
 800acae:	e004      	b.n	800acba <rfalCalibrate+0x6a>
    {
        /* Adjust the regulators again with the Antenna calibrated */
        st25r3911AdjustRegulators( &resValue );
 800acb0:	1dbb      	adds	r3, r7, #6
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7f6 fc88 	bl	80015c8 <st25r3911AdjustRegulators>
    }
    
    return ERR_NONE;
 800acb8:	2300      	movs	r3, #0
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3708      	adds	r7, #8
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop
 800acc4:	20000a54 	.word	0x20000a54

0800acc8 <rfalSetMode>:
}


/*******************************************************************************/
ReturnCode rfalSetMode( rfalMode mode, rfalBitRate txBR, rfalBitRate rxBR )
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	4603      	mov	r3, r0
 800acd0:	71fb      	strb	r3, [r7, #7]
 800acd2:	460b      	mov	r3, r1
 800acd4:	71bb      	strb	r3, [r7, #6]
 800acd6:	4613      	mov	r3, r2
 800acd8:	717b      	strb	r3, [r7, #5]

    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800acda:	4b83      	ldr	r3, [pc, #524]	; (800aee8 <rfalSetMode+0x220>)
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d101      	bne.n	800ace6 <rfalSetMode+0x1e>
    {
        return ERR_WRONG_STATE;
 800ace2:	2321      	movs	r3, #33	; 0x21
 800ace4:	e0fb      	b.n	800aede <rfalSetMode+0x216>
    }
    
    /* Check allowed bit rate value */
    if( (txBR == RFAL_BR_KEEP) || (rxBR == RFAL_BR_KEEP) )
 800ace6:	79bb      	ldrb	r3, [r7, #6]
 800ace8:	2bff      	cmp	r3, #255	; 0xff
 800acea:	d002      	beq.n	800acf2 <rfalSetMode+0x2a>
 800acec:	797b      	ldrb	r3, [r7, #5]
 800acee:	2bff      	cmp	r3, #255	; 0xff
 800acf0:	d101      	bne.n	800acf6 <rfalSetMode+0x2e>
    {
        return ERR_PARAM;
 800acf2:	2307      	movs	r3, #7
 800acf4:	e0f3      	b.n	800aede <rfalSetMode+0x216>
    }
   
    switch( mode )
 800acf6:	79fb      	ldrb	r3, [r7, #7]
 800acf8:	3b01      	subs	r3, #1
 800acfa:	2b0c      	cmp	r3, #12
 800acfc:	f200 80db 	bhi.w	800aeb6 <rfalSetMode+0x1ee>
 800ad00:	a201      	add	r2, pc, #4	; (adr r2, 800ad08 <rfalSetMode+0x40>)
 800ad02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad06:	bf00      	nop
 800ad08:	0800ad3d 	.word	0x0800ad3d
 800ad0c:	0800ad5f 	.word	0x0800ad5f
 800ad10:	0800ad81 	.word	0x0800ad81
 800ad14:	0800adb7 	.word	0x0800adb7
 800ad18:	0800aded 	.word	0x0800aded
 800ad1c:	0800ae23 	.word	0x0800ae23
 800ad20:	0800ae45 	.word	0x0800ae45
 800ad24:	0800ae45 	.word	0x0800ae45
 800ad28:	0800ae5f 	.word	0x0800ae5f
 800ad2c:	0800aeb3 	.word	0x0800aeb3
 800ad30:	0800aeb3 	.word	0x0800aeb3
 800ad34:	0800aeb3 	.word	0x0800aeb3
 800ad38:	0800ae89 	.word	0x0800ae89
    {
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800ad3c:	2104      	movs	r1, #4
 800ad3e:	2002      	movs	r0, #2
 800ad40:	f7f7 f92a 	bl	8001f98 <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443A mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443a);
 800ad44:	2108      	movs	r1, #8
 800ad46:	2003      	movs	r0, #3
 800ad48:	f7f7 f8dc 	bl	8001f04 <st25r3911WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800ad4c:	f240 1001 	movw	r0, #257	; 0x101
 800ad50:	f7f9 fc32 	bl	80045b8 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800ad54:	f44f 7081 	mov.w	r0, #258	; 0x102
 800ad58:	f7f9 fc2e 	bl	80045b8 <rfalSetAnalogConfig>
            break;
 800ad5c:	e0ad      	b.n	800aeba <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA_T1T:
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800ad5e:	2104      	movs	r1, #4
 800ad60:	2002      	movs	r0, #2
 800ad62:	f7f7 f919 	bl	8001f98 <st25r3911ClrRegisterBits>
            
            /* Enable Topaz mode */
            st25r3911WriteRegister( ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_topaz );
 800ad66:	2120      	movs	r1, #32
 800ad68:	2003      	movs	r0, #3
 800ad6a:	f7f7 f8cb 	bl	8001f04 <st25r3911WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800ad6e:	f240 1001 	movw	r0, #257	; 0x101
 800ad72:	f7f9 fc21 	bl	80045b8 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800ad76:	f44f 7081 	mov.w	r0, #258	; 0x102
 800ad7a:	f7f9 fc1d 	bl	80045b8 <rfalSetAnalogConfig>
            break;
 800ad7e:	e09c      	b.n	800aeba <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCB:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800ad80:	2104      	movs	r1, #4
 800ad82:	2002      	movs	r0, #2
 800ad84:	f7f7 f908 	bl	8001f98 <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443b);
 800ad88:	2110      	movs	r1, #16
 800ad8a:	2003      	movs	r0, #3
 800ad8c:	f7f7 f8ba 	bl	8001f04 <st25r3911WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3911ChangeRegisterBits(  ST25R3911_REG_ISO14443B_1, 
 800ad90:	2200      	movs	r2, #0
 800ad92:	21fc      	movs	r1, #252	; 0xfc
 800ad94:	2006      	movs	r0, #6
 800ad96:	f7f7 f940 	bl	800201a <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_1_mask_egt | ST25R3911_REG_ISO14443B_1_mask_sof | ST25R3911_REG_ISO14443B_1_mask_eof), 
                                      ( (0U<<ST25R3911_REG_ISO14443B_1_shift_egt) | ST25R3911_REG_ISO14443B_1_sof_0_10etu | ST25R3911_REG_ISO14443B_1_sof_1_2etu) );
                        
            /* Set the minimum TR1, SOF, EOF and EOF12 */
            st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443B_2, 
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	21f8      	movs	r1, #248	; 0xf8
 800ad9e:	2007      	movs	r0, #7
 800ada0:	f7f7 f93b 	bl	800201a <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_2_mask_tr1 | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof |ST25R3911_REG_ISO14443B_2_eof_12),
                                      (ST25R3911_REG_ISO14443B_2_tr1_80fs80fs | ST25R3911_REG_ISO14443B_2_eof_12_10to11etu ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800ada4:	f240 2001 	movw	r0, #513	; 0x201
 800ada8:	f7f9 fc06 	bl	80045b8 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800adac:	f240 2002 	movw	r0, #514	; 0x202
 800adb0:	f7f9 fc02 	bl	80045b8 <rfalSetAnalogConfig>
            break;
 800adb4:	e081      	b.n	800aeba <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_B_PRIME:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800adb6:	2104      	movs	r1, #4
 800adb8:	2002      	movs	r0, #2
 800adba:	f7f7 f8ed 	bl	8001f98 <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443b);
 800adbe:	2110      	movs	r1, #16
 800adc0:	2003      	movs	r0, #3
 800adc2:	f7f7 f89f 	bl	8001f04 <st25r3911WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3911ChangeRegisterBits(  ST25R3911_REG_ISO14443B_1, 
 800adc6:	2200      	movs	r2, #0
 800adc8:	21fc      	movs	r1, #252	; 0xfc
 800adca:	2006      	movs	r0, #6
 800adcc:	f7f7 f925 	bl	800201a <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_1_mask_egt | ST25R3911_REG_ISO14443B_1_mask_sof | ST25R3911_REG_ISO14443B_1_mask_eof), 
                                      ( (0U<<ST25R3911_REG_ISO14443B_1_shift_egt) | ST25R3911_REG_ISO14443B_1_sof_0_10etu | ST25R3911_REG_ISO14443B_1_sof_1_2etu) );
                        
            /* Set the minimum TR1, EOF and EOF12 */
            st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443B_2, 
 800add0:	2228      	movs	r2, #40	; 0x28
 800add2:	21f8      	movs	r1, #248	; 0xf8
 800add4:	2007      	movs	r0, #7
 800add6:	f7f7 f920 	bl	800201a <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_2_mask_tr1 | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof |ST25R3911_REG_ISO14443B_2_eof_12),
                                      (ST25R3911_REG_ISO14443B_2_tr1_80fs80fs | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_eof_12_10to12etu ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800adda:	f240 2001 	movw	r0, #513	; 0x201
 800adde:	f7f9 fbeb 	bl	80045b8 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800ade2:	f240 2002 	movw	r0, #514	; 0x202
 800ade6:	f7f9 fbe7 	bl	80045b8 <rfalSetAnalogConfig>
            break;
 800adea:	e066      	b.n	800aeba <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_B_CTS:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800adec:	2104      	movs	r1, #4
 800adee:	2002      	movs	r0, #2
 800adf0:	f7f7 f8d2 	bl	8001f98 <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443b);
 800adf4:	2110      	movs	r1, #16
 800adf6:	2003      	movs	r0, #3
 800adf8:	f7f7 f884 	bl	8001f04 <st25r3911WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3911ChangeRegisterBits(  ST25R3911_REG_ISO14443B_1, 
 800adfc:	2200      	movs	r2, #0
 800adfe:	21fc      	movs	r1, #252	; 0xfc
 800ae00:	2006      	movs	r0, #6
 800ae02:	f7f7 f90a 	bl	800201a <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_1_mask_egt | ST25R3911_REG_ISO14443B_1_mask_sof | ST25R3911_REG_ISO14443B_1_mask_eof), 
                                      ( (0U<<ST25R3911_REG_ISO14443B_1_shift_egt) | ST25R3911_REG_ISO14443B_1_sof_0_10etu | ST25R3911_REG_ISO14443B_1_sof_1_2etu) );
                        
            /* Set the minimum TR1, clear SOF, EOF and EOF12 */
            st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443B_2, 
 800ae06:	2230      	movs	r2, #48	; 0x30
 800ae08:	21f8      	movs	r1, #248	; 0xf8
 800ae0a:	2007      	movs	r0, #7
 800ae0c:	f7f7 f905 	bl	800201a <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_2_mask_tr1 | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof |ST25R3911_REG_ISO14443B_2_eof_12),
                                      (ST25R3911_REG_ISO14443B_2_tr1_80fs80fs | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800ae10:	f240 2001 	movw	r0, #513	; 0x201
 800ae14:	f7f9 fbd0 	bl	80045b8 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800ae18:	f240 2002 	movw	r0, #514	; 0x202
 800ae1c:	f7f9 fbcc 	bl	80045b8 <rfalSetAnalogConfig>
            break;
 800ae20:	e04b      	b.n	800aeba <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800ae22:	2104      	movs	r1, #4
 800ae24:	2002      	movs	r0, #2
 800ae26:	f7f7 f8b7 	bl	8001f98 <st25r3911ClrRegisterBits>
            
            /* Enable FeliCa mode */
            st25r3911WriteRegister( ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_felica );
 800ae2a:	2118      	movs	r1, #24
 800ae2c:	2003      	movs	r0, #3
 800ae2e:	f7f7 f869 	bl	8001f04 <st25r3911WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800ae32:	f240 4001 	movw	r0, #1025	; 0x401
 800ae36:	f7f9 fbbf 	bl	80045b8 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800ae3a:	f240 4002 	movw	r0, #1026	; 0x402
 800ae3e:	f7f9 fbbb 	bl	80045b8 <rfalSetAnalogConfig>
            break;
 800ae42:	e03a      	b.n	800aeba <rfalSetMode+0x1f2>
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCV:
        case RFAL_MODE_POLL_PICOPASS:
        
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800ae44:	2104      	movs	r1, #4
 800ae46:	2002      	movs	r0, #2
 800ae48:	f7f7 f8a6 	bl	8001f98 <st25r3911ClrRegisterBits>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800ae4c:	f241 0001 	movw	r0, #4097	; 0x1001
 800ae50:	f7f9 fbb2 	bl	80045b8 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800ae54:	f241 0002 	movw	r0, #4098	; 0x1002
 800ae58:	f7f9 fbae 	bl	80045b8 <rfalSetAnalogConfig>
            break;
 800ae5c:	e02d      	b.n	800aeba <rfalSetMode+0x1f2>

        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set NFCIP1 active communication initiator mode and Enable NFC Automatic Response RF Collision Avoidance */
            st25r3911WriteRegister(ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ_init | ST25R3911_REG_MODE_om_nfc | ST25R3911_REG_MODE_nfc_ar) );
 800ae5e:	2101      	movs	r1, #1
 800ae60:	2003      	movs	r0, #3
 800ae62:	f7f7 f84f 	bl	8001f04 <st25r3911WriteRegister>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3911_REG_GPT_CONTROL_gptc_etx_nfc );
 800ae66:	2160      	movs	r1, #96	; 0x60
 800ae68:	2040      	movs	r0, #64	; 0x40
 800ae6a:	f7f6 fceb 	bl	8001844 <st25r3911StartGPTimer_8fcs>
            
            /* Enable External Field Detector */
            st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 800ae6e:	2110      	movs	r1, #16
 800ae70:	2009      	movs	r0, #9
 800ae72:	f7f7 f8b4 	bl	8001fde <st25r3911SetRegisterBits>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800ae76:	f640 0001 	movw	r0, #2049	; 0x801
 800ae7a:	f7f9 fb9d 	bl	80045b8 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800ae7e:	f640 0002 	movw	r0, #2050	; 0x802
 800ae82:	f7f9 fb99 	bl	80045b8 <rfalSetAnalogConfig>
            break;
 800ae86:	e018      	b.n	800aeba <rfalSetMode+0x1f2>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:

            /* Set NFCIP1 active communication initiator mode and Enable NFC Automatic Response RF Collision Avoidance */
            st25r3911WriteRegister(ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ_targ | ST25R3911_REG_MODE_om_nfcip1_normal_mode | ST25R3911_REG_MODE_nfc_ar) );
 800ae88:	2189      	movs	r1, #137	; 0x89
 800ae8a:	2003      	movs	r0, #3
 800ae8c:	f7f7 f83a 	bl	8001f04 <st25r3911WriteRegister>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3911_REG_GPT_CONTROL_gptc_etx_nfc );
 800ae90:	2160      	movs	r1, #96	; 0x60
 800ae92:	2040      	movs	r0, #64	; 0x40
 800ae94:	f7f6 fcd6 	bl	8001844 <st25r3911StartGPTimer_8fcs>
            
            /* Enable External Field Detector */
            st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 800ae98:	2110      	movs	r1, #16
 800ae9a:	2009      	movs	r0, #9
 800ae9c:	f7f7 f89f 	bl	8001fde <st25r3911SetRegisterBits>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800aea0:	f648 0001 	movw	r0, #34817	; 0x8801
 800aea4:	f7f9 fb88 	bl	80045b8 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800aea8:	f648 0002 	movw	r0, #34818	; 0x8802
 800aeac:	f7f9 fb84 	bl	80045b8 <rfalSetAnalogConfig>
            break;
 800aeb0:	e003      	b.n	800aeba <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:
        case RFAL_MODE_LISTEN_NFCB:
        case RFAL_MODE_LISTEN_NFCF:
            return ERR_NOTSUPP;
 800aeb2:	2318      	movs	r3, #24
 800aeb4:	e013      	b.n	800aede <rfalSetMode+0x216>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 800aeb6:	230f      	movs	r3, #15
 800aeb8:	e011      	b.n	800aede <rfalSetMode+0x216>
    }
    
    /* Set state as STATE_MODE_SET only if not initialized yet (PSL) */
    gRFAL.state = ((gRFAL.state < RFAL_STATE_MODE_SET) ? RFAL_STATE_MODE_SET : gRFAL.state);
 800aeba:	4b0b      	ldr	r3, [pc, #44]	; (800aee8 <rfalSetMode+0x220>)
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	2b02      	cmp	r3, #2
 800aec0:	bf38      	it	cc
 800aec2:	2302      	movcc	r3, #2
 800aec4:	b2da      	uxtb	r2, r3
 800aec6:	4b08      	ldr	r3, [pc, #32]	; (800aee8 <rfalSetMode+0x220>)
 800aec8:	701a      	strb	r2, [r3, #0]
    gRFAL.mode  = mode;
 800aeca:	4a07      	ldr	r2, [pc, #28]	; (800aee8 <rfalSetMode+0x220>)
 800aecc:	79fb      	ldrb	r3, [r7, #7]
 800aece:	7053      	strb	r3, [r2, #1]
    
    /* Apply the given bit rate */
    return rfalSetBitRate(txBR, rxBR);
 800aed0:	797a      	ldrb	r2, [r7, #5]
 800aed2:	79bb      	ldrb	r3, [r7, #6]
 800aed4:	4611      	mov	r1, r2
 800aed6:	4618      	mov	r0, r3
 800aed8:	f000 f808 	bl	800aeec <rfalSetBitRate>
 800aedc:	4603      	mov	r3, r0
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
 800aee6:	bf00      	nop
 800aee8:	20000a54 	.word	0x20000a54

0800aeec <rfalSetBitRate>:
}


/*******************************************************************************/
ReturnCode rfalSetBitRate( rfalBitRate txBR, rfalBitRate rxBR )
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b088      	sub	sp, #32
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	4603      	mov	r3, r0
 800aef4:	460a      	mov	r2, r1
 800aef6:	71fb      	strb	r3, [r7, #7]
 800aef8:	4613      	mov	r3, r2
 800aefa:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800aefc:	4ba0      	ldr	r3, [pc, #640]	; (800b180 <rfalSetBitRate+0x294>)
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d101      	bne.n	800af08 <rfalSetBitRate+0x1c>
    {
        return ERR_WRONG_STATE;
 800af04:	2321      	movs	r3, #33	; 0x21
 800af06:	e248      	b.n	800b39a <rfalSetBitRate+0x4ae>
    }
   
    /* Store the new Bit Rates */
    gRFAL.txBR = ((txBR == RFAL_BR_KEEP) ? gRFAL.txBR : txBR);
 800af08:	79fb      	ldrb	r3, [r7, #7]
 800af0a:	2bff      	cmp	r3, #255	; 0xff
 800af0c:	d102      	bne.n	800af14 <rfalSetBitRate+0x28>
 800af0e:	4b9c      	ldr	r3, [pc, #624]	; (800b180 <rfalSetBitRate+0x294>)
 800af10:	789b      	ldrb	r3, [r3, #2]
 800af12:	e000      	b.n	800af16 <rfalSetBitRate+0x2a>
 800af14:	79fb      	ldrb	r3, [r7, #7]
 800af16:	4a9a      	ldr	r2, [pc, #616]	; (800b180 <rfalSetBitRate+0x294>)
 800af18:	7093      	strb	r3, [r2, #2]
    gRFAL.rxBR = ((rxBR == RFAL_BR_KEEP) ? gRFAL.rxBR : rxBR);
 800af1a:	79bb      	ldrb	r3, [r7, #6]
 800af1c:	2bff      	cmp	r3, #255	; 0xff
 800af1e:	d102      	bne.n	800af26 <rfalSetBitRate+0x3a>
 800af20:	4b97      	ldr	r3, [pc, #604]	; (800b180 <rfalSetBitRate+0x294>)
 800af22:	78db      	ldrb	r3, [r3, #3]
 800af24:	e000      	b.n	800af28 <rfalSetBitRate+0x3c>
 800af26:	79bb      	ldrb	r3, [r7, #6]
 800af28:	4a95      	ldr	r2, [pc, #596]	; (800b180 <rfalSetBitRate+0x294>)
 800af2a:	70d3      	strb	r3, [r2, #3]
    
    /* Update the bitrate reg if not in NFCV mode (streaming) */
    if( (RFAL_MODE_POLL_NFCV != gRFAL.mode) && (RFAL_MODE_POLL_PICOPASS != gRFAL.mode) )
 800af2c:	4b94      	ldr	r3, [pc, #592]	; (800b180 <rfalSetBitRate+0x294>)
 800af2e:	785b      	ldrb	r3, [r3, #1]
 800af30:	2b07      	cmp	r3, #7
 800af32:	d012      	beq.n	800af5a <rfalSetBitRate+0x6e>
 800af34:	4b92      	ldr	r3, [pc, #584]	; (800b180 <rfalSetBitRate+0x294>)
 800af36:	785b      	ldrb	r3, [r3, #1]
 800af38:	2b08      	cmp	r3, #8
 800af3a:	d00e      	beq.n	800af5a <rfalSetBitRate+0x6e>
    {
        EXIT_ON_ERR( ret, st25r3911SetBitrate( (uint8_t)gRFAL.txBR, (uint8_t)gRFAL.rxBR ) );
 800af3c:	4b90      	ldr	r3, [pc, #576]	; (800b180 <rfalSetBitRate+0x294>)
 800af3e:	789a      	ldrb	r2, [r3, #2]
 800af40:	4b8f      	ldr	r3, [pc, #572]	; (800b180 <rfalSetBitRate+0x294>)
 800af42:	78db      	ldrb	r3, [r3, #3]
 800af44:	4619      	mov	r1, r3
 800af46:	4610      	mov	r0, r2
 800af48:	f7f6 fbfa 	bl	8001740 <st25r3911SetBitrate>
 800af4c:	4603      	mov	r3, r0
 800af4e:	83fb      	strh	r3, [r7, #30]
 800af50:	8bfb      	ldrh	r3, [r7, #30]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d001      	beq.n	800af5a <rfalSetBitRate+0x6e>
 800af56:	8bfb      	ldrh	r3, [r7, #30]
 800af58:	e21f      	b.n	800b39a <rfalSetBitRate+0x4ae>
    }
    
    
    switch( gRFAL.mode )
 800af5a:	4b89      	ldr	r3, [pc, #548]	; (800b180 <rfalSetBitRate+0x294>)
 800af5c:	785b      	ldrb	r3, [r3, #1]
 800af5e:	2b0d      	cmp	r3, #13
 800af60:	f200 8218 	bhi.w	800b394 <rfalSetBitRate+0x4a8>
 800af64:	a201      	add	r2, pc, #4	; (adr r2, 800af6c <rfalSetBitRate+0x80>)
 800af66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af6a:	bf00      	nop
 800af6c:	0800b391 	.word	0x0800b391
 800af70:	0800afa5 	.word	0x0800afa5
 800af74:	0800afa5 	.word	0x0800afa5
 800af78:	0800b02d 	.word	0x0800b02d
 800af7c:	0800b02d 	.word	0x0800b02d
 800af80:	0800b02d 	.word	0x0800b02d
 800af84:	0800b0bd 	.word	0x0800b0bd
 800af88:	0800b14d 	.word	0x0800b14d
 800af8c:	0800b14d 	.word	0x0800b14d
 800af90:	0800b281 	.word	0x0800b281
 800af94:	0800b391 	.word	0x0800b391
 800af98:	0800b391 	.word	0x0800b391
 800af9c:	0800b391 	.word	0x0800b391
 800afa0:	0800b311 	.word	0x0800b311
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
        case RFAL_MODE_POLL_NFCA_T1T:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800afa4:	2008      	movs	r0, #8
 800afa6:	f7f9 fb07 	bl	80045b8 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800afaa:	4b75      	ldr	r3, [pc, #468]	; (800b180 <rfalSetBitRate+0x294>)
 800afac:	789b      	ldrb	r3, [r3, #2]
 800afae:	2bea      	cmp	r3, #234	; 0xea
 800afb0:	d90c      	bls.n	800afcc <rfalSetBitRate+0xe0>
 800afb2:	4b73      	ldr	r3, [pc, #460]	; (800b180 <rfalSetBitRate+0x294>)
 800afb4:	789b      	ldrb	r3, [r3, #2]
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	011b      	lsls	r3, r3, #4
 800afba:	b29b      	uxth	r3, r3
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	b29b      	uxth	r3, r3
 800afc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afc4:	f043 0301 	orr.w	r3, r3, #1
 800afc8:	b29b      	uxth	r3, r3
 800afca:	e00d      	b.n	800afe8 <rfalSetBitRate+0xfc>
 800afcc:	4b6c      	ldr	r3, [pc, #432]	; (800b180 <rfalSetBitRate+0x294>)
 800afce:	789b      	ldrb	r3, [r3, #2]
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	3301      	adds	r3, #1
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	011b      	lsls	r3, r3, #4
 800afd8:	b29b      	uxth	r3, r3
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	b29b      	uxth	r3, r3
 800afde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afe2:	f043 0301 	orr.w	r3, r3, #1
 800afe6:	b29b      	uxth	r3, r3
 800afe8:	4618      	mov	r0, r3
 800afea:	f7f9 fae5 	bl	80045b8 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800afee:	4b64      	ldr	r3, [pc, #400]	; (800b180 <rfalSetBitRate+0x294>)
 800aff0:	78db      	ldrb	r3, [r3, #3]
 800aff2:	2bea      	cmp	r3, #234	; 0xea
 800aff4:	d90a      	bls.n	800b00c <rfalSetBitRate+0x120>
 800aff6:	4b62      	ldr	r3, [pc, #392]	; (800b180 <rfalSetBitRate+0x294>)
 800aff8:	78db      	ldrb	r3, [r3, #3]
 800affa:	b29b      	uxth	r3, r3
 800affc:	011b      	lsls	r3, r3, #4
 800affe:	b29b      	uxth	r3, r3
 800b000:	b2db      	uxtb	r3, r3
 800b002:	b29b      	uxth	r3, r3
 800b004:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800b008:	b29b      	uxth	r3, r3
 800b00a:	e00b      	b.n	800b024 <rfalSetBitRate+0x138>
 800b00c:	4b5c      	ldr	r3, [pc, #368]	; (800b180 <rfalSetBitRate+0x294>)
 800b00e:	78db      	ldrb	r3, [r3, #3]
 800b010:	b29b      	uxth	r3, r3
 800b012:	3301      	adds	r3, #1
 800b014:	b29b      	uxth	r3, r3
 800b016:	011b      	lsls	r3, r3, #4
 800b018:	b29b      	uxth	r3, r3
 800b01a:	b2db      	uxtb	r3, r3
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800b022:	b29b      	uxth	r3, r3
 800b024:	4618      	mov	r0, r3
 800b026:	f7f9 fac7 	bl	80045b8 <rfalSetAnalogConfig>
            break;
 800b02a:	e1b5      	b.n	800b398 <rfalSetBitRate+0x4ac>
        case RFAL_MODE_POLL_NFCB:
        case RFAL_MODE_POLL_B_PRIME:
        case RFAL_MODE_POLL_B_CTS:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800b02c:	2008      	movs	r0, #8
 800b02e:	f7f9 fac3 	bl	80045b8 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800b032:	4b53      	ldr	r3, [pc, #332]	; (800b180 <rfalSetBitRate+0x294>)
 800b034:	789b      	ldrb	r3, [r3, #2]
 800b036:	2bea      	cmp	r3, #234	; 0xea
 800b038:	d90c      	bls.n	800b054 <rfalSetBitRate+0x168>
 800b03a:	4b51      	ldr	r3, [pc, #324]	; (800b180 <rfalSetBitRate+0x294>)
 800b03c:	789b      	ldrb	r3, [r3, #2]
 800b03e:	b29b      	uxth	r3, r3
 800b040:	011b      	lsls	r3, r3, #4
 800b042:	b29b      	uxth	r3, r3
 800b044:	b2db      	uxtb	r3, r3
 800b046:	b29b      	uxth	r3, r3
 800b048:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b04c:	f043 0301 	orr.w	r3, r3, #1
 800b050:	b29b      	uxth	r3, r3
 800b052:	e00d      	b.n	800b070 <rfalSetBitRate+0x184>
 800b054:	4b4a      	ldr	r3, [pc, #296]	; (800b180 <rfalSetBitRate+0x294>)
 800b056:	789b      	ldrb	r3, [r3, #2]
 800b058:	b29b      	uxth	r3, r3
 800b05a:	3301      	adds	r3, #1
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	011b      	lsls	r3, r3, #4
 800b060:	b29b      	uxth	r3, r3
 800b062:	b2db      	uxtb	r3, r3
 800b064:	b29b      	uxth	r3, r3
 800b066:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b06a:	f043 0301 	orr.w	r3, r3, #1
 800b06e:	b29b      	uxth	r3, r3
 800b070:	4618      	mov	r0, r3
 800b072:	f7f9 faa1 	bl	80045b8 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800b076:	4b42      	ldr	r3, [pc, #264]	; (800b180 <rfalSetBitRate+0x294>)
 800b078:	78db      	ldrb	r3, [r3, #3]
 800b07a:	2bea      	cmp	r3, #234	; 0xea
 800b07c:	d90c      	bls.n	800b098 <rfalSetBitRate+0x1ac>
 800b07e:	4b40      	ldr	r3, [pc, #256]	; (800b180 <rfalSetBitRate+0x294>)
 800b080:	78db      	ldrb	r3, [r3, #3]
 800b082:	b29b      	uxth	r3, r3
 800b084:	011b      	lsls	r3, r3, #4
 800b086:	b29b      	uxth	r3, r3
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b090:	f043 0302 	orr.w	r3, r3, #2
 800b094:	b29b      	uxth	r3, r3
 800b096:	e00d      	b.n	800b0b4 <rfalSetBitRate+0x1c8>
 800b098:	4b39      	ldr	r3, [pc, #228]	; (800b180 <rfalSetBitRate+0x294>)
 800b09a:	78db      	ldrb	r3, [r3, #3]
 800b09c:	b29b      	uxth	r3, r3
 800b09e:	3301      	adds	r3, #1
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	011b      	lsls	r3, r3, #4
 800b0a4:	b29b      	uxth	r3, r3
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b0ae:	f043 0302 	orr.w	r3, r3, #2
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f7f9 fa7f 	bl	80045b8 <rfalSetAnalogConfig>
            break;
 800b0ba:	e16d      	b.n	800b398 <rfalSetBitRate+0x4ac>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800b0bc:	2008      	movs	r0, #8
 800b0be:	f7f9 fa7b 	bl	80045b8 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800b0c2:	4b2f      	ldr	r3, [pc, #188]	; (800b180 <rfalSetBitRate+0x294>)
 800b0c4:	789b      	ldrb	r3, [r3, #2]
 800b0c6:	2bea      	cmp	r3, #234	; 0xea
 800b0c8:	d90c      	bls.n	800b0e4 <rfalSetBitRate+0x1f8>
 800b0ca:	4b2d      	ldr	r3, [pc, #180]	; (800b180 <rfalSetBitRate+0x294>)
 800b0cc:	789b      	ldrb	r3, [r3, #2]
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	011b      	lsls	r3, r3, #4
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	b29b      	uxth	r3, r3
 800b0d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b0dc:	f043 0301 	orr.w	r3, r3, #1
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	e00d      	b.n	800b100 <rfalSetBitRate+0x214>
 800b0e4:	4b26      	ldr	r3, [pc, #152]	; (800b180 <rfalSetBitRate+0x294>)
 800b0e6:	789b      	ldrb	r3, [r3, #2]
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	011b      	lsls	r3, r3, #4
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b0fa:	f043 0301 	orr.w	r3, r3, #1
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	4618      	mov	r0, r3
 800b102:	f7f9 fa59 	bl	80045b8 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800b106:	4b1e      	ldr	r3, [pc, #120]	; (800b180 <rfalSetBitRate+0x294>)
 800b108:	78db      	ldrb	r3, [r3, #3]
 800b10a:	2bea      	cmp	r3, #234	; 0xea
 800b10c:	d90c      	bls.n	800b128 <rfalSetBitRate+0x23c>
 800b10e:	4b1c      	ldr	r3, [pc, #112]	; (800b180 <rfalSetBitRate+0x294>)
 800b110:	78db      	ldrb	r3, [r3, #3]
 800b112:	b29b      	uxth	r3, r3
 800b114:	011b      	lsls	r3, r3, #4
 800b116:	b29b      	uxth	r3, r3
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	b29b      	uxth	r3, r3
 800b11c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b120:	f043 0302 	orr.w	r3, r3, #2
 800b124:	b29b      	uxth	r3, r3
 800b126:	e00d      	b.n	800b144 <rfalSetBitRate+0x258>
 800b128:	4b15      	ldr	r3, [pc, #84]	; (800b180 <rfalSetBitRate+0x294>)
 800b12a:	78db      	ldrb	r3, [r3, #3]
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	3301      	adds	r3, #1
 800b130:	b29b      	uxth	r3, r3
 800b132:	011b      	lsls	r3, r3, #4
 800b134:	b29b      	uxth	r3, r3
 800b136:	b2db      	uxtb	r3, r3
 800b138:	b29b      	uxth	r3, r3
 800b13a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b13e:	f043 0302 	orr.w	r3, r3, #2
 800b142:	b29b      	uxth	r3, r3
 800b144:	4618      	mov	r0, r3
 800b146:	f7f9 fa37 	bl	80045b8 <rfalSetAnalogConfig>
            break;
 800b14a:	e125      	b.n	800b398 <rfalSetBitRate+0x4ac>
        
           #if !RFAL_FEATURE_NFCV
                return ERR_DISABLED;
           #else
               
                if( ((gRFAL.rxBR != RFAL_BR_26p48) && (gRFAL.rxBR != RFAL_BR_52p97) && (gRFAL.rxBR != RFAL_BR_106) && (gRFAL.rxBR != RFAL_BR_212))
 800b14c:	4b0c      	ldr	r3, [pc, #48]	; (800b180 <rfalSetBitRate+0x294>)
 800b14e:	78db      	ldrb	r3, [r3, #3]
 800b150:	2bec      	cmp	r3, #236	; 0xec
 800b152:	d00b      	beq.n	800b16c <rfalSetBitRate+0x280>
 800b154:	4b0a      	ldr	r3, [pc, #40]	; (800b180 <rfalSetBitRate+0x294>)
 800b156:	78db      	ldrb	r3, [r3, #3]
 800b158:	2beb      	cmp	r3, #235	; 0xeb
 800b15a:	d007      	beq.n	800b16c <rfalSetBitRate+0x280>
 800b15c:	4b08      	ldr	r3, [pc, #32]	; (800b180 <rfalSetBitRate+0x294>)
 800b15e:	78db      	ldrb	r3, [r3, #3]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d003      	beq.n	800b16c <rfalSetBitRate+0x280>
 800b164:	4b06      	ldr	r3, [pc, #24]	; (800b180 <rfalSetBitRate+0x294>)
 800b166:	78db      	ldrb	r3, [r3, #3]
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d107      	bne.n	800b17c <rfalSetBitRate+0x290>
                        || ((gRFAL.txBR != RFAL_BR_1p66) && (gRFAL.txBR != RFAL_BR_26p48)) )
 800b16c:	4b04      	ldr	r3, [pc, #16]	; (800b180 <rfalSetBitRate+0x294>)
 800b16e:	789b      	ldrb	r3, [r3, #2]
 800b170:	2bed      	cmp	r3, #237	; 0xed
 800b172:	d007      	beq.n	800b184 <rfalSetBitRate+0x298>
 800b174:	4b02      	ldr	r3, [pc, #8]	; (800b180 <rfalSetBitRate+0x294>)
 800b176:	789b      	ldrb	r3, [r3, #2]
 800b178:	2bec      	cmp	r3, #236	; 0xec
 800b17a:	d003      	beq.n	800b184 <rfalSetBitRate+0x298>
                {
                    return ERR_PARAM;
 800b17c:	2307      	movs	r3, #7
 800b17e:	e10c      	b.n	800b39a <rfalSetBitRate+0x4ae>
 800b180:	20000a54 	.word	0x20000a54
                    const struct iso15693StreamConfig *isoStreamConfig;
                    struct st25r3911StreamConfig      streamConf;
                    iso15693PhyConfig_t               config;
                    
                    /* Set the coding configuration for configuring ISO15693 */
                    config.coding     = (( gRFAL.txBR == RFAL_BR_1p66  ) ? ISO15693_VCD_CODING_1_256 : ISO15693_VCD_CODING_1_4);
 800b184:	4b87      	ldr	r3, [pc, #540]	; (800b3a4 <rfalSetBitRate+0x4b8>)
 800b186:	789b      	ldrb	r3, [r3, #2]
 800b188:	2bed      	cmp	r3, #237	; 0xed
 800b18a:	bf0c      	ite	eq
 800b18c:	2301      	moveq	r3, #1
 800b18e:	2300      	movne	r3, #0
 800b190:	b2db      	uxtb	r3, r3
 800b192:	733b      	strb	r3, [r7, #12]
                    switch (gRFAL.rxBR){
 800b194:	4b83      	ldr	r3, [pc, #524]	; (800b3a4 <rfalSetBitRate+0x4b8>)
 800b196:	78db      	ldrb	r3, [r3, #3]
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d00a      	beq.n	800b1b2 <rfalSetBitRate+0x2c6>
 800b19c:	2beb      	cmp	r3, #235	; 0xeb
 800b19e:	d002      	beq.n	800b1a6 <rfalSetBitRate+0x2ba>
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d003      	beq.n	800b1ac <rfalSetBitRate+0x2c0>
 800b1a4:	e008      	b.n	800b1b8 <rfalSetBitRate+0x2cc>
                        case RFAL_BR_52p97:
                            config.speedMode = 1;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	613b      	str	r3, [r7, #16]
                            break;
 800b1aa:	e008      	b.n	800b1be <rfalSetBitRate+0x2d2>
                        case RFAL_BR_106:
                            config.speedMode = 2;
 800b1ac:	2302      	movs	r3, #2
 800b1ae:	613b      	str	r3, [r7, #16]
                            break;
 800b1b0:	e005      	b.n	800b1be <rfalSetBitRate+0x2d2>
                        case RFAL_BR_212:
                            config.speedMode = 3;
 800b1b2:	2303      	movs	r3, #3
 800b1b4:	613b      	str	r3, [r7, #16]
                            break;
 800b1b6:	e002      	b.n	800b1be <rfalSetBitRate+0x2d2>
                        default:
                            config.speedMode = 0;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	613b      	str	r3, [r7, #16]
                            break;
 800b1bc:	bf00      	nop
                    }
                    
                    iso15693PhyConfigure(&config, &isoStreamConfig);   /* Convert ISO15693 config into StreamConfig */
 800b1be:	f107 0218 	add.w	r2, r7, #24
 800b1c2:	f107 030c 	add.w	r3, r7, #12
 800b1c6:	4611      	mov	r1, r2
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f7f9 fb55 	bl	8004878 <iso15693PhyConfigure>
                    
                    /* MISRA 11.3 - Cannot point directly into different object type, copy to local var */
                    streamConf.din                  = isoStreamConfig->din;
 800b1ce:	69bb      	ldr	r3, [r7, #24]
 800b1d0:	785b      	ldrb	r3, [r3, #1]
 800b1d2:	757b      	strb	r3, [r7, #21]
                    streamConf.dout                 = isoStreamConfig->dout;
 800b1d4:	69bb      	ldr	r3, [r7, #24]
 800b1d6:	789b      	ldrb	r3, [r3, #2]
 800b1d8:	75bb      	strb	r3, [r7, #22]
                    streamConf.report_period_length = isoStreamConfig->report_period_length;
 800b1da:	69bb      	ldr	r3, [r7, #24]
 800b1dc:	78db      	ldrb	r3, [r3, #3]
 800b1de:	75fb      	strb	r3, [r7, #23]
                    streamConf.useBPSK              = isoStreamConfig->useBPSK;
 800b1e0:	69bb      	ldr	r3, [r7, #24]
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	753b      	strb	r3, [r7, #20]
                    st25r3911StreamConfigure(&streamConf);
 800b1e6:	f107 0314 	add.w	r3, r7, #20
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7f6 fc68 	bl	8001ac0 <st25r3911StreamConfigure>
                }
    
                /* Set Analog configurations for this bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800b1f0:	2008      	movs	r0, #8
 800b1f2:	f7f9 f9e1 	bl	80045b8 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800b1f6:	4b6b      	ldr	r3, [pc, #428]	; (800b3a4 <rfalSetBitRate+0x4b8>)
 800b1f8:	789b      	ldrb	r3, [r3, #2]
 800b1fa:	2bea      	cmp	r3, #234	; 0xea
 800b1fc:	d90c      	bls.n	800b218 <rfalSetBitRate+0x32c>
 800b1fe:	4b69      	ldr	r3, [pc, #420]	; (800b3a4 <rfalSetBitRate+0x4b8>)
 800b200:	789b      	ldrb	r3, [r3, #2]
 800b202:	b29b      	uxth	r3, r3
 800b204:	011b      	lsls	r3, r3, #4
 800b206:	b29b      	uxth	r3, r3
 800b208:	b2db      	uxtb	r3, r3
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b210:	f043 0301 	orr.w	r3, r3, #1
 800b214:	b29b      	uxth	r3, r3
 800b216:	e00d      	b.n	800b234 <rfalSetBitRate+0x348>
 800b218:	4b62      	ldr	r3, [pc, #392]	; (800b3a4 <rfalSetBitRate+0x4b8>)
 800b21a:	789b      	ldrb	r3, [r3, #2]
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	3301      	adds	r3, #1
 800b220:	b29b      	uxth	r3, r3
 800b222:	011b      	lsls	r3, r3, #4
 800b224:	b29b      	uxth	r3, r3
 800b226:	b2db      	uxtb	r3, r3
 800b228:	b29b      	uxth	r3, r3
 800b22a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b22e:	f043 0301 	orr.w	r3, r3, #1
 800b232:	b29b      	uxth	r3, r3
 800b234:	4618      	mov	r0, r3
 800b236:	f7f9 f9bf 	bl	80045b8 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800b23a:	4b5a      	ldr	r3, [pc, #360]	; (800b3a4 <rfalSetBitRate+0x4b8>)
 800b23c:	78db      	ldrb	r3, [r3, #3]
 800b23e:	2bea      	cmp	r3, #234	; 0xea
 800b240:	d90c      	bls.n	800b25c <rfalSetBitRate+0x370>
 800b242:	4b58      	ldr	r3, [pc, #352]	; (800b3a4 <rfalSetBitRate+0x4b8>)
 800b244:	78db      	ldrb	r3, [r3, #3]
 800b246:	b29b      	uxth	r3, r3
 800b248:	011b      	lsls	r3, r3, #4
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	b29b      	uxth	r3, r3
 800b250:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b254:	f043 0302 	orr.w	r3, r3, #2
 800b258:	b29b      	uxth	r3, r3
 800b25a:	e00d      	b.n	800b278 <rfalSetBitRate+0x38c>
 800b25c:	4b51      	ldr	r3, [pc, #324]	; (800b3a4 <rfalSetBitRate+0x4b8>)
 800b25e:	78db      	ldrb	r3, [r3, #3]
 800b260:	b29b      	uxth	r3, r3
 800b262:	3301      	adds	r3, #1
 800b264:	b29b      	uxth	r3, r3
 800b266:	011b      	lsls	r3, r3, #4
 800b268:	b29b      	uxth	r3, r3
 800b26a:	b2db      	uxtb	r3, r3
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b272:	f043 0302 	orr.w	r3, r3, #2
 800b276:	b29b      	uxth	r3, r3
 800b278:	4618      	mov	r0, r3
 800b27a:	f7f9 f99d 	bl	80045b8 <rfalSetAnalogConfig>
                break;
 800b27e:	e08b      	b.n	800b398 <rfalSetBitRate+0x4ac>
        
        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800b280:	2008      	movs	r0, #8
 800b282:	f7f9 f999 	bl	80045b8 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800b286:	4b47      	ldr	r3, [pc, #284]	; (800b3a4 <rfalSetBitRate+0x4b8>)
 800b288:	789b      	ldrb	r3, [r3, #2]
 800b28a:	2bea      	cmp	r3, #234	; 0xea
 800b28c:	d90c      	bls.n	800b2a8 <rfalSetBitRate+0x3bc>
 800b28e:	4b45      	ldr	r3, [pc, #276]	; (800b3a4 <rfalSetBitRate+0x4b8>)
 800b290:	789b      	ldrb	r3, [r3, #2]
 800b292:	b29b      	uxth	r3, r3
 800b294:	011b      	lsls	r3, r3, #4
 800b296:	b29b      	uxth	r3, r3
 800b298:	b2db      	uxtb	r3, r3
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b2a0:	f043 0301 	orr.w	r3, r3, #1
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	e00d      	b.n	800b2c4 <rfalSetBitRate+0x3d8>
 800b2a8:	4b3e      	ldr	r3, [pc, #248]	; (800b3a4 <rfalSetBitRate+0x4b8>)
 800b2aa:	789b      	ldrb	r3, [r3, #2]
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	011b      	lsls	r3, r3, #4
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b2be:	f043 0301 	orr.w	r3, r3, #1
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7f9 f977 	bl	80045b8 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800b2ca:	4b36      	ldr	r3, [pc, #216]	; (800b3a4 <rfalSetBitRate+0x4b8>)
 800b2cc:	78db      	ldrb	r3, [r3, #3]
 800b2ce:	2bea      	cmp	r3, #234	; 0xea
 800b2d0:	d90c      	bls.n	800b2ec <rfalSetBitRate+0x400>
 800b2d2:	4b34      	ldr	r3, [pc, #208]	; (800b3a4 <rfalSetBitRate+0x4b8>)
 800b2d4:	78db      	ldrb	r3, [r3, #3]
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	011b      	lsls	r3, r3, #4
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b2e4:	f043 0302 	orr.w	r3, r3, #2
 800b2e8:	b29b      	uxth	r3, r3
 800b2ea:	e00d      	b.n	800b308 <rfalSetBitRate+0x41c>
 800b2ec:	4b2d      	ldr	r3, [pc, #180]	; (800b3a4 <rfalSetBitRate+0x4b8>)
 800b2ee:	78db      	ldrb	r3, [r3, #3]
 800b2f0:	b29b      	uxth	r3, r3
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	011b      	lsls	r3, r3, #4
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	b2db      	uxtb	r3, r3
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b302:	f043 0302 	orr.w	r3, r3, #2
 800b306:	b29b      	uxth	r3, r3
 800b308:	4618      	mov	r0, r3
 800b30a:	f7f9 f955 	bl	80045b8 <rfalSetAnalogConfig>
            break;
 800b30e:	e043      	b.n	800b398 <rfalSetBitRate+0x4ac>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 800b310:	2009      	movs	r0, #9
 800b312:	f7f9 f951 	bl	80045b8 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800b316:	4b23      	ldr	r3, [pc, #140]	; (800b3a4 <rfalSetBitRate+0x4b8>)
 800b318:	789b      	ldrb	r3, [r3, #2]
 800b31a:	2bea      	cmp	r3, #234	; 0xea
 800b31c:	d90a      	bls.n	800b334 <rfalSetBitRate+0x448>
 800b31e:	4b21      	ldr	r3, [pc, #132]	; (800b3a4 <rfalSetBitRate+0x4b8>)
 800b320:	789b      	ldrb	r3, [r3, #2]
 800b322:	b29b      	uxth	r3, r3
 800b324:	011b      	lsls	r3, r3, #4
 800b326:	b29b      	uxth	r3, r3
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	b29a      	uxth	r2, r3
 800b32c:	4b1e      	ldr	r3, [pc, #120]	; (800b3a8 <rfalSetBitRate+0x4bc>)
 800b32e:	4313      	orrs	r3, r2
 800b330:	b29b      	uxth	r3, r3
 800b332:	e00b      	b.n	800b34c <rfalSetBitRate+0x460>
 800b334:	4b1b      	ldr	r3, [pc, #108]	; (800b3a4 <rfalSetBitRate+0x4b8>)
 800b336:	789b      	ldrb	r3, [r3, #2]
 800b338:	b29b      	uxth	r3, r3
 800b33a:	3301      	adds	r3, #1
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	011b      	lsls	r3, r3, #4
 800b340:	b29b      	uxth	r3, r3
 800b342:	b2db      	uxtb	r3, r3
 800b344:	b29a      	uxth	r2, r3
 800b346:	4b18      	ldr	r3, [pc, #96]	; (800b3a8 <rfalSetBitRate+0x4bc>)
 800b348:	4313      	orrs	r3, r2
 800b34a:	b29b      	uxth	r3, r3
 800b34c:	4618      	mov	r0, r3
 800b34e:	f7f9 f933 	bl	80045b8 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800b352:	4b14      	ldr	r3, [pc, #80]	; (800b3a4 <rfalSetBitRate+0x4b8>)
 800b354:	78db      	ldrb	r3, [r3, #3]
 800b356:	2bea      	cmp	r3, #234	; 0xea
 800b358:	d90a      	bls.n	800b370 <rfalSetBitRate+0x484>
 800b35a:	4b12      	ldr	r3, [pc, #72]	; (800b3a4 <rfalSetBitRate+0x4b8>)
 800b35c:	78db      	ldrb	r3, [r3, #3]
 800b35e:	b29b      	uxth	r3, r3
 800b360:	011b      	lsls	r3, r3, #4
 800b362:	b29b      	uxth	r3, r3
 800b364:	b2db      	uxtb	r3, r3
 800b366:	b29a      	uxth	r2, r3
 800b368:	4b10      	ldr	r3, [pc, #64]	; (800b3ac <rfalSetBitRate+0x4c0>)
 800b36a:	4313      	orrs	r3, r2
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	e00b      	b.n	800b388 <rfalSetBitRate+0x49c>
 800b370:	4b0c      	ldr	r3, [pc, #48]	; (800b3a4 <rfalSetBitRate+0x4b8>)
 800b372:	78db      	ldrb	r3, [r3, #3]
 800b374:	b29b      	uxth	r3, r3
 800b376:	3301      	adds	r3, #1
 800b378:	b29b      	uxth	r3, r3
 800b37a:	011b      	lsls	r3, r3, #4
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	b29a      	uxth	r2, r3
 800b382:	4b0a      	ldr	r3, [pc, #40]	; (800b3ac <rfalSetBitRate+0x4c0>)
 800b384:	4313      	orrs	r3, r2
 800b386:	b29b      	uxth	r3, r3
 800b388:	4618      	mov	r0, r3
 800b38a:	f7f9 f915 	bl	80045b8 <rfalSetAnalogConfig>
            break;
 800b38e:	e003      	b.n	800b398 <rfalSetBitRate+0x4ac>
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:
        case RFAL_MODE_LISTEN_NFCB:
        case RFAL_MODE_LISTEN_NFCF:
        case RFAL_MODE_NONE:
            return ERR_WRONG_STATE;
 800b390:	2321      	movs	r3, #33	; 0x21
 800b392:	e002      	b.n	800b39a <rfalSetBitRate+0x4ae>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 800b394:	230f      	movs	r3, #15
 800b396:	e000      	b.n	800b39a <rfalSetBitRate+0x4ae>
    }
    
    return ERR_NONE;
 800b398:	2300      	movs	r3, #0
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3720      	adds	r7, #32
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	20000a54 	.word	0x20000a54
 800b3a8:	ffff8801 	.word	0xffff8801
 800b3ac:	ffff8802 	.word	0xffff8802

0800b3b0 <rfalGetBitRate>:


/*******************************************************************************/
ReturnCode rfalGetBitRate( rfalBitRate *txBR, rfalBitRate *rxBR )
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
    if( (gRFAL.state == RFAL_STATE_IDLE) || (gRFAL.mode == RFAL_MODE_NONE) )
 800b3ba:	4b0f      	ldr	r3, [pc, #60]	; (800b3f8 <rfalGetBitRate+0x48>)
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d003      	beq.n	800b3ca <rfalGetBitRate+0x1a>
 800b3c2:	4b0d      	ldr	r3, [pc, #52]	; (800b3f8 <rfalGetBitRate+0x48>)
 800b3c4:	785b      	ldrb	r3, [r3, #1]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d101      	bne.n	800b3ce <rfalGetBitRate+0x1e>
    {
        return ERR_WRONG_STATE;
 800b3ca:	2321      	movs	r3, #33	; 0x21
 800b3cc:	e00e      	b.n	800b3ec <rfalGetBitRate+0x3c>
    }
    
    if( txBR != NULL )
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d003      	beq.n	800b3dc <rfalGetBitRate+0x2c>
    {
        *txBR = gRFAL.txBR;
 800b3d4:	4b08      	ldr	r3, [pc, #32]	; (800b3f8 <rfalGetBitRate+0x48>)
 800b3d6:	789a      	ldrb	r2, [r3, #2]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	701a      	strb	r2, [r3, #0]
    }
    
    if( rxBR != NULL )
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d003      	beq.n	800b3ea <rfalGetBitRate+0x3a>
    {
        *rxBR = gRFAL.rxBR;
 800b3e2:	4b05      	ldr	r3, [pc, #20]	; (800b3f8 <rfalGetBitRate+0x48>)
 800b3e4:	78da      	ldrb	r2, [r3, #3]
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 800b3ea:	2300      	movs	r3, #0
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	370c      	adds	r7, #12
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr
 800b3f8:	20000a54 	.word	0x20000a54

0800b3fc <rfalSetErrorHandling>:


/*******************************************************************************/
void rfalSetErrorHandling( rfalEHandling eHandling )
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	4603      	mov	r3, r0
 800b404:	71fb      	strb	r3, [r7, #7]
    gRFAL.conf.eHandling = eHandling;
 800b406:	4a04      	ldr	r2, [pc, #16]	; (800b418 <rfalSetErrorHandling+0x1c>)
 800b408:	79fb      	ldrb	r3, [r7, #7]
 800b40a:	71d3      	strb	r3, [r2, #7]
}
 800b40c:	bf00      	nop
 800b40e:	370c      	adds	r7, #12
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr
 800b418:	20000a54 	.word	0x20000a54

0800b41c <rfalSetFDTPoll>:
}


/*******************************************************************************/
void rfalSetFDTPoll( uint32_t FDTPoll )
{
 800b41c:	b480      	push	{r7}
 800b41e:	b083      	sub	sp, #12
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTPoll = MIN( FDTPoll, RFAL_ST25R3911_GPT_MAX_1FC );
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	4a06      	ldr	r2, [pc, #24]	; (800b440 <rfalSetFDTPoll+0x24>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	bf28      	it	cs
 800b42c:	4613      	movcs	r3, r2
 800b42e:	4a05      	ldr	r2, [pc, #20]	; (800b444 <rfalSetFDTPoll+0x28>)
 800b430:	6113      	str	r3, [r2, #16]
}
 800b432:	bf00      	nop
 800b434:	370c      	adds	r7, #12
 800b436:	46bd      	mov	sp, r7
 800b438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43c:	4770      	bx	lr
 800b43e:	bf00      	nop
 800b440:	0007fff8 	.word	0x0007fff8
 800b444:	20000a54 	.word	0x20000a54

0800b448 <rfalSetFDTListen>:
}


/*******************************************************************************/
void rfalSetFDTListen( uint32_t FDTListen )
{
 800b448:	b480      	push	{r7}
 800b44a:	b083      	sub	sp, #12
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTListen = MIN( FDTListen, RFAL_ST25R3911_MRT_MAX_1FC);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f5b3 5f7f 	cmp.w	r3, #16320	; 0x3fc0
 800b456:	bf28      	it	cs
 800b458:	f44f 537f 	movcs.w	r3, #16320	; 0x3fc0
 800b45c:	4a03      	ldr	r2, [pc, #12]	; (800b46c <rfalSetFDTListen+0x24>)
 800b45e:	60d3      	str	r3, [r2, #12]
}
 800b460:	bf00      	nop
 800b462:	370c      	adds	r7, #12
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr
 800b46c:	20000a54 	.word	0x20000a54

0800b470 <rfalSetGT>:
{
    return gRFAL.timings.FDTListen;
}

void rfalSetGT( uint32_t GT )
{
 800b470:	b480      	push	{r7}
 800b472:	b083      	sub	sp, #12
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
    gRFAL.timings.GT = MIN( GT, RFAL_ST25R3911_GT_MAX_1FC );
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	4a06      	ldr	r2, [pc, #24]	; (800b494 <rfalSetGT+0x24>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	bf28      	it	cs
 800b480:	4613      	movcs	r3, r2
 800b482:	4a05      	ldr	r2, [pc, #20]	; (800b498 <rfalSetGT+0x28>)
 800b484:	6093      	str	r3, [r2, #8]
}
 800b486:	bf00      	nop
 800b488:	370c      	adds	r7, #12
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr
 800b492:	bf00      	nop
 800b494:	040a8bc0 	.word	0x040a8bc0
 800b498:	20000a54 	.word	0x20000a54

0800b49c <rfalIsGTExpired>:
    return gRFAL.timings.GT;
}

/*******************************************************************************/
bool rfalIsGTExpired( void )
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	af00      	add	r7, sp, #0
    if( gRFAL.tmr.GT != RFAL_TIMING_NONE )
 800b4a0:	4b09      	ldr	r3, [pc, #36]	; (800b4c8 <rfalIsGTExpired+0x2c>)
 800b4a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d00c      	beq.n	800b4c2 <rfalIsGTExpired+0x26>
    {
        if( !rfalTimerisExpired( gRFAL.tmr.GT ) )
 800b4a8:	4b07      	ldr	r3, [pc, #28]	; (800b4c8 <rfalIsGTExpired+0x2c>)
 800b4aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f7f7 f925 	bl	80026fc <timerIsExpired>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	f083 0301 	eor.w	r3, r3, #1
 800b4b8:	b2db      	uxtb	r3, r3
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d001      	beq.n	800b4c2 <rfalIsGTExpired+0x26>
        {
            return false;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	e000      	b.n	800b4c4 <rfalIsGTExpired+0x28>
        }
    }    
    return true;
 800b4c2:	2301      	movs	r3, #1
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	20000a54 	.word	0x20000a54

0800b4cc <rfalFieldOnAndStartGT>:

/*******************************************************************************/
ReturnCode rfalFieldOnAndStartGT( void )
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b082      	sub	sp, #8
 800b4d0:	af00      	add	r7, sp, #0
    ReturnCode  ret;
    
    /* Check if RFAL has been initialized (Oscillator should be running) and also
     * if a direct register access has been performed and left the Oscillator Off */
    if( !st25r3911IsOscOn() || (gRFAL.state < RFAL_STATE_INIT) )
 800b4d2:	2280      	movs	r2, #128	; 0x80
 800b4d4:	2180      	movs	r1, #128	; 0x80
 800b4d6:	2002      	movs	r0, #2
 800b4d8:	f7f6 f9e8 	bl	80018ac <st25r3911CheckReg>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	f083 0301 	eor.w	r3, r3, #1
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d103      	bne.n	800b4f0 <rfalFieldOnAndStartGT+0x24>
 800b4e8:	4b27      	ldr	r3, [pc, #156]	; (800b588 <rfalFieldOnAndStartGT+0xbc>)
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d101      	bne.n	800b4f4 <rfalFieldOnAndStartGT+0x28>
    {
        return ERR_WRONG_STATE;
 800b4f0:	2321      	movs	r3, #33	; 0x21
 800b4f2:	e044      	b.n	800b57e <rfalFieldOnAndStartGT+0xb2>
    }
    
    ret = ERR_NONE;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	80fb      	strh	r3, [r7, #6]
    
    /* Set Analog configurations for Field On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_ON) );
 800b4f8:	2002      	movs	r0, #2
 800b4fa:	f7f9 f85d 	bl	80045b8 <rfalSetAnalogConfig>
    
    /*******************************************************************************/
    /* Perform collision avoidance and turn field On if not already On */
    if( !st25r3911IsTxEnabled() || !gRFAL.field )
 800b4fe:	2208      	movs	r2, #8
 800b500:	2108      	movs	r1, #8
 800b502:	2002      	movs	r0, #2
 800b504:	f7f6 f9d2 	bl	80018ac <st25r3911CheckReg>
 800b508:	4603      	mov	r3, r0
 800b50a:	f083 0301 	eor.w	r3, r3, #1
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	2b00      	cmp	r3, #0
 800b512:	d106      	bne.n	800b522 <rfalFieldOnAndStartGT+0x56>
 800b514:	4b1c      	ldr	r3, [pc, #112]	; (800b588 <rfalFieldOnAndStartGT+0xbc>)
 800b516:	791b      	ldrb	r3, [r3, #4]
 800b518:	f083 0301 	eor.w	r3, r3, #1
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d016      	beq.n	800b550 <rfalFieldOnAndStartGT+0x84>
    {
        /* Use Thresholds set by AnalogConfig */
        ret = st25r3911PerformCollisionAvoidance( ST25R3911_CMD_RESPONSE_RF_COLLISION_0, ST25R3911_THRESHOLD_DO_NOT_SET, ST25R3911_THRESHOLD_DO_NOT_SET, 0 );
 800b522:	2300      	movs	r3, #0
 800b524:	22ff      	movs	r2, #255	; 0xff
 800b526:	21ff      	movs	r1, #255	; 0xff
 800b528:	20ca      	movs	r0, #202	; 0xca
 800b52a:	f7f6 fa3f 	bl	80019ac <st25r3911PerformCollisionAvoidance>
 800b52e:	4603      	mov	r3, r0
 800b530:	80fb      	strh	r3, [r7, #6]
        
        gRFAL.field = st25r3911IsTxEnabled();
 800b532:	2208      	movs	r2, #8
 800b534:	2108      	movs	r1, #8
 800b536:	2002      	movs	r0, #2
 800b538:	f7f6 f9b8 	bl	80018ac <st25r3911CheckReg>
 800b53c:	4603      	mov	r3, r0
 800b53e:	461a      	mov	r2, r3
 800b540:	4b11      	ldr	r3, [pc, #68]	; (800b588 <rfalFieldOnAndStartGT+0xbc>)
 800b542:	711a      	strb	r2, [r3, #4]
        
        /* Only turn on Receiver and Transmitter if field was successfully turned On */
        if(gRFAL.field)
 800b544:	4b10      	ldr	r3, [pc, #64]	; (800b588 <rfalFieldOnAndStartGT+0xbc>)
 800b546:	791b      	ldrb	r3, [r3, #4]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d001      	beq.n	800b550 <rfalFieldOnAndStartGT+0x84>
        {            
            st25r3911TxRxOn(); /* Enable Tx and Rx (Tx is already On) */
 800b54c:	f7f5 ffdd 	bl	800150a <st25r3911TxRxOn>
        }
    }
    
    /*******************************************************************************/
    /* Start GT timer in case the GT value is set */
    if( (gRFAL.timings.GT != RFAL_TIMING_NONE) )
 800b550:	4b0d      	ldr	r3, [pc, #52]	; (800b588 <rfalFieldOnAndStartGT+0xbc>)
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d011      	beq.n	800b57c <rfalFieldOnAndStartGT+0xb0>
    {
        /* Ensure that a SW timer doesn't have a lower value then the minimum  */
        rfalTimerStart( gRFAL.tmr.GT, rfalConv1fcToMs( MAX( (gRFAL.timings.GT), RFAL_ST25R3911_GT_MIN_1FC) ) );
 800b558:	4b0b      	ldr	r3, [pc, #44]	; (800b588 <rfalFieldOnAndStartGT+0xbc>)
 800b55a:	689b      	ldr	r3, [r3, #8]
 800b55c:	f243 42f8 	movw	r2, #13560	; 0x34f8
 800b560:	4293      	cmp	r3, r2
 800b562:	bf38      	it	cc
 800b564:	4613      	movcc	r3, r2
 800b566:	4a09      	ldr	r2, [pc, #36]	; (800b58c <rfalFieldOnAndStartGT+0xc0>)
 800b568:	fba2 2303 	umull	r2, r3, r2, r3
 800b56c:	0b1b      	lsrs	r3, r3, #12
 800b56e:	b29b      	uxth	r3, r3
 800b570:	4618      	mov	r0, r3
 800b572:	f7f7 f8b5 	bl	80026e0 <timerCalculateTimer>
 800b576:	4602      	mov	r2, r0
 800b578:	4b03      	ldr	r3, [pc, #12]	; (800b588 <rfalFieldOnAndStartGT+0xbc>)
 800b57a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    return ret;
 800b57c:	88fb      	ldrh	r3, [r7, #6]
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3708      	adds	r7, #8
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	20000a54 	.word	0x20000a54
 800b58c:	4d542005 	.word	0x4d542005

0800b590 <rfalFieldOff>:


/*******************************************************************************/
ReturnCode rfalFieldOff( void )
{
 800b590:	b580      	push	{r7, lr}
 800b592:	af00      	add	r7, sp, #0
    /* Check whether a TxRx is not yet finished */
    if( gRFAL.TxRx.state != RFAL_TXRX_STATE_IDLE )
 800b594:	4b08      	ldr	r3, [pc, #32]	; (800b5b8 <rfalFieldOff+0x28>)
 800b596:	7d1b      	ldrb	r3, [r3, #20]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d001      	beq.n	800b5a0 <rfalFieldOff+0x10>
    {
        rfalCleanupTransceive();
 800b59c:	f000 fac8 	bl	800bb30 <rfalCleanupTransceive>
    }
    
    /* Disable Tx and Rx */
    st25r3911TxRxOff();
 800b5a0:	f7f5 ffbb 	bl	800151a <st25r3911TxRxOff>
    
    /* Set Analog configurations for Field Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_OFF) );
 800b5a4:	2003      	movs	r0, #3
 800b5a6:	f7f9 f807 	bl	80045b8 <rfalSetAnalogConfig>
    gRFAL.field = false;
 800b5aa:	4b03      	ldr	r3, [pc, #12]	; (800b5b8 <rfalFieldOff+0x28>)
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	711a      	strb	r2, [r3, #4]
    
    return ERR_NONE;
 800b5b0:	2300      	movs	r3, #0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	20000a54 	.word	0x20000a54

0800b5bc <rfalStartTransceive>:


/*******************************************************************************/
ReturnCode rfalStartTransceive( const rfalTransceiveContext *ctx )
{
 800b5bc:	b5b0      	push	{r4, r5, r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
    uint32_t FxTAdj;  /* FWT or FDT adjustment calculation */
    
    /* Check for valid parameters */
    if( ctx == NULL )
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d101      	bne.n	800b5ce <rfalStartTransceive+0x12>
    {
        return ERR_PARAM;
 800b5ca:	2307      	movs	r3, #7
 800b5cc:	e11c      	b.n	800b808 <rfalStartTransceive+0x24c>
    }
    
    /* Ensure that RFAL is already Initialized and the mode has been set */
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 800b5ce:	4b90      	ldr	r3, [pc, #576]	; (800b810 <rfalStartTransceive+0x254>)
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	2b01      	cmp	r3, #1
 800b5d4:	f240 8117 	bls.w	800b806 <rfalStartTransceive+0x24a>
    {
        /*******************************************************************************/
        /* Check whether the field is already On, otherwise no TXE will be received  */
        if( !st25r3911IsTxEnabled() && (!rfalIsModePassiveListen( gRFAL.mode ) && (ctx->txBuf != NULL)) )
 800b5d8:	2208      	movs	r2, #8
 800b5da:	2108      	movs	r1, #8
 800b5dc:	2002      	movs	r0, #2
 800b5de:	f7f6 f965 	bl	80018ac <st25r3911CheckReg>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	f083 0301 	eor.w	r3, r3, #1
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d011      	beq.n	800b612 <rfalStartTransceive+0x56>
 800b5ee:	4b88      	ldr	r3, [pc, #544]	; (800b810 <rfalStartTransceive+0x254>)
 800b5f0:	785b      	ldrb	r3, [r3, #1]
 800b5f2:	2b0a      	cmp	r3, #10
 800b5f4:	d00d      	beq.n	800b612 <rfalStartTransceive+0x56>
 800b5f6:	4b86      	ldr	r3, [pc, #536]	; (800b810 <rfalStartTransceive+0x254>)
 800b5f8:	785b      	ldrb	r3, [r3, #1]
 800b5fa:	2b0b      	cmp	r3, #11
 800b5fc:	d009      	beq.n	800b612 <rfalStartTransceive+0x56>
 800b5fe:	4b84      	ldr	r3, [pc, #528]	; (800b810 <rfalStartTransceive+0x254>)
 800b600:	785b      	ldrb	r3, [r3, #1]
 800b602:	2b0c      	cmp	r3, #12
 800b604:	d005      	beq.n	800b612 <rfalStartTransceive+0x56>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d001      	beq.n	800b612 <rfalStartTransceive+0x56>
        {
            return ERR_WRONG_STATE;
 800b60e:	2321      	movs	r3, #33	; 0x21
 800b610:	e0fa      	b.n	800b808 <rfalStartTransceive+0x24c>
        }
        
        gRFAL.TxRx.ctx = *ctx;
 800b612:	4b7f      	ldr	r3, [pc, #508]	; (800b810 <rfalStartTransceive+0x254>)
 800b614:	687a      	ldr	r2, [r7, #4]
 800b616:	f103 041c 	add.w	r4, r3, #28
 800b61a:	4615      	mov	r5, r2
 800b61c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b61e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b620:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b624:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        
        /*******************************************************************************/
        if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 800b628:	4b79      	ldr	r3, [pc, #484]	; (800b810 <rfalStartTransceive+0x254>)
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d031      	beq.n	800b694 <rfalStartTransceive+0xd8>
        {
            /* Calculate MRT adjustment accordingly to the current mode */
            FxTAdj = RFAL_FDT_LISTEN_MRT_ADJUSTMENT;
 800b630:	2340      	movs	r3, #64	; 0x40
 800b632:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 800b634:	4b76      	ldr	r3, [pc, #472]	; (800b810 <rfalStartTransceive+0x254>)
 800b636:	785b      	ldrb	r3, [r3, #1]
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d103      	bne.n	800b644 <rfalStartTransceive+0x88>
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800b642:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 800b644:	4b72      	ldr	r3, [pc, #456]	; (800b810 <rfalStartTransceive+0x254>)
 800b646:	785b      	ldrb	r3, [r3, #1]
 800b648:	2b02      	cmp	r3, #2
 800b64a:	d103      	bne.n	800b654 <rfalStartTransceive+0x98>
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800b652:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJUSTMENT; }
 800b654:	4b6e      	ldr	r3, [pc, #440]	; (800b810 <rfalStartTransceive+0x254>)
 800b656:	785b      	ldrb	r3, [r3, #1]
 800b658:	2b03      	cmp	r3, #3
 800b65a:	d103      	bne.n	800b664 <rfalStartTransceive+0xa8>
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800b662:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCV)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_V_ADJUSTMENT; }
 800b664:	4b6a      	ldr	r3, [pc, #424]	; (800b810 <rfalStartTransceive+0x254>)
 800b666:	785b      	ldrb	r3, [r3, #1]
 800b668:	2b07      	cmp	r3, #7
 800b66a:	d102      	bne.n	800b672 <rfalStartTransceive+0xb6>
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	3380      	adds	r3, #128	; 0x80
 800b670:	60fb      	str	r3, [r7, #12]
            
            
            /* Set Minimum FDT(Listen) in which PICC is not allowed to send a response */
            st25r3911WriteRegister( ST25R3911_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( (FxTAdj > gRFAL.timings.FDTListen) ? RFAL_ST25R3911_MRT_MIN_1FC : (gRFAL.timings.FDTListen - FxTAdj) ) );
 800b672:	4b67      	ldr	r3, [pc, #412]	; (800b810 <rfalStartTransceive+0x254>)
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	68fa      	ldr	r2, [r7, #12]
 800b678:	429a      	cmp	r2, r3
 800b67a:	d806      	bhi.n	800b68a <rfalStartTransceive+0xce>
 800b67c:	4b64      	ldr	r3, [pc, #400]	; (800b810 <rfalStartTransceive+0x254>)
 800b67e:	68da      	ldr	r2, [r3, #12]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	1ad3      	subs	r3, r2, r3
 800b684:	099b      	lsrs	r3, r3, #6
 800b686:	b2db      	uxtb	r3, r3
 800b688:	e000      	b.n	800b68c <rfalStartTransceive+0xd0>
 800b68a:	2304      	movs	r3, #4
 800b68c:	4619      	mov	r1, r3
 800b68e:	200e      	movs	r0, #14
 800b690:	f7f6 fc38 	bl	8001f04 <st25r3911WriteRegister>
        
        /*******************************************************************************/
        /* FDT Poll will be loaded in rfalPrepareTransceive() once the previous was expired */
        
        /*******************************************************************************/
        if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 800b694:	4b5e      	ldr	r3, [pc, #376]	; (800b810 <rfalStartTransceive+0x254>)
 800b696:	785b      	ldrb	r3, [r3, #1]
 800b698:	2b09      	cmp	r3, #9
 800b69a:	d053      	beq.n	800b744 <rfalStartTransceive+0x188>
 800b69c:	4b5c      	ldr	r3, [pc, #368]	; (800b810 <rfalStartTransceive+0x254>)
 800b69e:	785b      	ldrb	r3, [r3, #1]
 800b6a0:	2b0d      	cmp	r3, #13
 800b6a2:	d04f      	beq.n	800b744 <rfalStartTransceive+0x188>
        {
            if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800b6a4:	4b5a      	ldr	r3, [pc, #360]	; (800b810 <rfalStartTransceive+0x254>)
 800b6a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ac:	d046      	beq.n	800b73c <rfalStartTransceive+0x180>
 800b6ae:	4b58      	ldr	r3, [pc, #352]	; (800b810 <rfalStartTransceive+0x254>)
 800b6b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d042      	beq.n	800b73c <rfalStartTransceive+0x180>
            {
                /* Ensure proper timing configuration */
                if( gRFAL.timings.FDTListen >= gRFAL.TxRx.ctx.fwt )
 800b6b6:	4b56      	ldr	r3, [pc, #344]	; (800b810 <rfalStartTransceive+0x254>)
 800b6b8:	68da      	ldr	r2, [r3, #12]
 800b6ba:	4b55      	ldr	r3, [pc, #340]	; (800b810 <rfalStartTransceive+0x254>)
 800b6bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d301      	bcc.n	800b6c6 <rfalStartTransceive+0x10a>
                {
                    return ERR_PARAM;
 800b6c2:	2307      	movs	r3, #7
 800b6c4:	e0a0      	b.n	800b808 <rfalStartTransceive+0x24c>
                }
        
                FxTAdj = RFAL_FWT_ADJUSTMENT;
 800b6c6:	2340      	movs	r3, #64	; 0x40
 800b6c8:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 800b6ca:	4b51      	ldr	r3, [pc, #324]	; (800b810 <rfalStartTransceive+0x254>)
 800b6cc:	785b      	ldrb	r3, [r3, #1]
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	d103      	bne.n	800b6da <rfalStartTransceive+0x11e>
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b6d8:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 800b6da:	4b4d      	ldr	r3, [pc, #308]	; (800b810 <rfalStartTransceive+0x254>)
 800b6dc:	785b      	ldrb	r3, [r3, #1]
 800b6de:	2b02      	cmp	r3, #2
 800b6e0:	d103      	bne.n	800b6ea <rfalStartTransceive+0x12e>
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b6e8:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FWT_B_ADJUSTMENT;    }
 800b6ea:	4b49      	ldr	r3, [pc, #292]	; (800b810 <rfalStartTransceive+0x254>)
 800b6ec:	785b      	ldrb	r3, [r3, #1]
 800b6ee:	2b03      	cmp	r3, #3
 800b6f0:	d103      	bne.n	800b6fa <rfalStartTransceive+0x13e>
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f503 632e 	add.w	r3, r3, #2784	; 0xae0
 800b6f8:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCF)      
 800b6fa:	4b45      	ldr	r3, [pc, #276]	; (800b810 <rfalStartTransceive+0x254>)
 800b6fc:	785b      	ldrb	r3, [r3, #1]
 800b6fe:	2b06      	cmp	r3, #6
 800b700:	d10b      	bne.n	800b71a <rfalStartTransceive+0x15e>
                {
                    FxTAdj += (uint32_t)((gRFAL.txBR == RFAL_BR_212) ? RFAL_FWT_F_212_ADJUSTMENT : RFAL_FWT_F_424_ADJUSTMENT );
 800b702:	4b43      	ldr	r3, [pc, #268]	; (800b810 <rfalStartTransceive+0x254>)
 800b704:	789b      	ldrb	r3, [r3, #2]
 800b706:	2b01      	cmp	r3, #1
 800b708:	d102      	bne.n	800b710 <rfalStartTransceive+0x154>
 800b70a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b70e:	e001      	b.n	800b714 <rfalStartTransceive+0x158>
 800b710:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b714:	68fa      	ldr	r2, [r7, #12]
 800b716:	4413      	add	r3, r2
 800b718:	60fb      	str	r3, [r7, #12]
                }
                
                /* Ensure that the given FWT doesn't exceed NRT maximum */
                gRFAL.TxRx.ctx.fwt = MIN( (gRFAL.TxRx.ctx.fwt + FxTAdj), RFAL_ST25R3911_NRT_MAX_1FC );
 800b71a:	4b3d      	ldr	r3, [pc, #244]	; (800b810 <rfalStartTransceive+0x254>)
 800b71c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	4413      	add	r3, r2
 800b722:	4a3c      	ldr	r2, [pc, #240]	; (800b814 <rfalStartTransceive+0x258>)
 800b724:	4293      	cmp	r3, r2
 800b726:	bf28      	it	cs
 800b728:	4613      	movcs	r3, r2
 800b72a:	4a39      	ldr	r2, [pc, #228]	; (800b810 <rfalStartTransceive+0x254>)
 800b72c:	6353      	str	r3, [r2, #52]	; 0x34
                
                /* Set FWT in the NRT */
                st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc( gRFAL.TxRx.ctx.fwt ) );
 800b72e:	4b38      	ldr	r3, [pc, #224]	; (800b810 <rfalStartTransceive+0x254>)
 800b730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b732:	099b      	lsrs	r3, r3, #6
 800b734:	4618      	mov	r0, r3
 800b736:	f7f6 f8fb 	bl	8001930 <st25r3911SetNoResponseTime_64fcs>
            if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800b73a:	e006      	b.n	800b74a <rfalStartTransceive+0x18e>
            }
            else
            {
                /* Disable NRT, no NRE will be triggered, therefore wait endlessly for Rx */
                st25r3911SetNoResponseTime_64fcs( RFAL_ST25R3911_NRT_DISABLED );
 800b73c:	2000      	movs	r0, #0
 800b73e:	f7f6 f8f7 	bl	8001930 <st25r3911SetNoResponseTime_64fcs>
            if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800b742:	e002      	b.n	800b74a <rfalStartTransceive+0x18e>
            }
        }
        else /* Active Comms */
        {
            /* Setup NRT timer for rf response RF collision timeout. */
            st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc(RFAL_AP2P_FIELDON_TADTTRFW) );
 800b744:	2080      	movs	r0, #128	; 0x80
 800b746:	f7f6 f8f3 	bl	8001930 <st25r3911SetNoResponseTime_64fcs>
            
            /* In Active Mode No Response Timer cannot be used to measure FWT a SW timer is used instead */
        }
        
        gRFAL.state       = RFAL_STATE_TXRX;
 800b74a:	4b31      	ldr	r3, [pc, #196]	; (800b810 <rfalStartTransceive+0x254>)
 800b74c:	2203      	movs	r2, #3
 800b74e:	701a      	strb	r2, [r3, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_IDLE;
 800b750:	4b2f      	ldr	r3, [pc, #188]	; (800b810 <rfalStartTransceive+0x254>)
 800b752:	220b      	movs	r2, #11
 800b754:	751a      	strb	r2, [r3, #20]
        gRFAL.TxRx.status = ERR_BUSY;
 800b756:	4b2e      	ldr	r3, [pc, #184]	; (800b810 <rfalStartTransceive+0x254>)
 800b758:	2202      	movs	r2, #2
 800b75a:	82da      	strh	r2, [r3, #22]
        gRFAL.TxRx.rxse   = false;
 800b75c:	4b2c      	ldr	r3, [pc, #176]	; (800b810 <rfalStartTransceive+0x254>)
 800b75e:	2200      	movs	r2, #0
 800b760:	761a      	strb	r2, [r3, #24]
        
    #if RFAL_FEATURE_NFCV        
        /*******************************************************************************/
        if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800b762:	4b2b      	ldr	r3, [pc, #172]	; (800b810 <rfalStartTransceive+0x254>)
 800b764:	785b      	ldrb	r3, [r3, #1]
 800b766:	2b07      	cmp	r3, #7
 800b768:	d003      	beq.n	800b772 <rfalStartTransceive+0x1b6>
 800b76a:	4b29      	ldr	r3, [pc, #164]	; (800b810 <rfalStartTransceive+0x254>)
 800b76c:	785b      	ldrb	r3, [r3, #1]
 800b76e:	2b08      	cmp	r3, #8
 800b770:	d128      	bne.n	800b7c4 <rfalStartTransceive+0x208>
        { /* Exchange receive buffer with internal buffer */
            gRFAL.nfcvData.origCtx = gRFAL.TxRx.ctx;
 800b772:	4a27      	ldr	r2, [pc, #156]	; (800b810 <rfalStartTransceive+0x254>)
 800b774:	4b26      	ldr	r3, [pc, #152]	; (800b810 <rfalStartTransceive+0x254>)
 800b776:	f502 746e 	add.w	r4, r2, #952	; 0x3b8
 800b77a:	f103 051c 	add.w	r5, r3, #28
 800b77e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b780:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b782:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b786:	e884 0007 	stmia.w	r4, {r0, r1, r2}

            gRFAL.TxRx.ctx.rxBuf    = ((gRFAL.nfcvData.origCtx.rxBuf != NULL) ? gRFAL.nfcvData.codingBuffer : NULL);
 800b78a:	4b21      	ldr	r3, [pc, #132]	; (800b810 <rfalStartTransceive+0x254>)
 800b78c:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800b790:	2b00      	cmp	r3, #0
 800b792:	d001      	beq.n	800b798 <rfalStartTransceive+0x1dc>
 800b794:	4b20      	ldr	r3, [pc, #128]	; (800b818 <rfalStartTransceive+0x25c>)
 800b796:	e000      	b.n	800b79a <rfalStartTransceive+0x1de>
 800b798:	2300      	movs	r3, #0
 800b79a:	4a1d      	ldr	r2, [pc, #116]	; (800b810 <rfalStartTransceive+0x254>)
 800b79c:	6253      	str	r3, [r2, #36]	; 0x24
            gRFAL.TxRx.ctx.rxBufLen = (uint16_t)rfalConvBytesToBits(sizeof(gRFAL.nfcvData.codingBuffer));
 800b79e:	4b1c      	ldr	r3, [pc, #112]	; (800b810 <rfalStartTransceive+0x254>)
 800b7a0:	f44f 5282 	mov.w	r2, #4160	; 0x1040
 800b7a4:	851a      	strh	r2, [r3, #40]	; 0x28
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
                                 | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_OFF
                                 | (uint32_t)(gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF)
 800b7a6:	4b1a      	ldr	r3, [pc, #104]	; (800b810 <rfalStartTransceive+0x254>)
 800b7a8:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800b7ac:	f003 0308 	and.w	r3, r3, #8
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_NONE;
 800b7b0:	f043 0333 	orr.w	r3, r3, #51	; 0x33
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
 800b7b4:	4a16      	ldr	r2, [pc, #88]	; (800b810 <rfalStartTransceive+0x254>)
 800b7b6:	6313      	str	r3, [r2, #48]	; 0x30
            
            /* In NFCV a TxRx with a valid txBuf and txBufSize==0 indicates to send an EOF */
            /* Skip logic below that would go directly into receive                        */
            if ( gRFAL.TxRx.ctx.txBuf != NULL )
 800b7b8:	4b15      	ldr	r3, [pc, #84]	; (800b810 <rfalStartTransceive+0x254>)
 800b7ba:	69db      	ldr	r3, [r3, #28]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d001      	beq.n	800b7c4 <rfalStartTransceive+0x208>
            {
                return  ERR_NONE;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	e021      	b.n	800b808 <rfalStartTransceive+0x24c>
    #endif /* RFAL_FEATURE_NFCV */

        
        /*******************************************************************************/
        /* Check if the Transceive start performing Tx or goes directly to Rx          */
        if( (gRFAL.TxRx.ctx.txBuf == NULL) || (gRFAL.TxRx.ctx.txBufLen == 0U) )
 800b7c4:	4b12      	ldr	r3, [pc, #72]	; (800b810 <rfalStartTransceive+0x254>)
 800b7c6:	69db      	ldr	r3, [r3, #28]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d003      	beq.n	800b7d4 <rfalStartTransceive+0x218>
 800b7cc:	4b10      	ldr	r3, [pc, #64]	; (800b810 <rfalStartTransceive+0x254>)
 800b7ce:	8c1b      	ldrh	r3, [r3, #32]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d116      	bne.n	800b802 <rfalStartTransceive+0x246>
        {
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 800b7d4:	f000 f9c2 	bl	800bb5c <rfalPrepareTransceive>
            
            /* Disable our field upon a Rx reEnable on AP2P */
            if( rfalIsModeActiveComm(gRFAL.mode) )
 800b7d8:	4b0d      	ldr	r3, [pc, #52]	; (800b810 <rfalStartTransceive+0x254>)
 800b7da:	785b      	ldrb	r3, [r3, #1]
 800b7dc:	2b09      	cmp	r3, #9
 800b7de:	d003      	beq.n	800b7e8 <rfalStartTransceive+0x22c>
 800b7e0:	4b0b      	ldr	r3, [pc, #44]	; (800b810 <rfalStartTransceive+0x254>)
 800b7e2:	785b      	ldrb	r3, [r3, #1]
 800b7e4:	2b0d      	cmp	r3, #13
 800b7e6:	d103      	bne.n	800b7f0 <rfalStartTransceive+0x234>
            {
                st25r3911TxOff();
 800b7e8:	2108      	movs	r1, #8
 800b7ea:	2002      	movs	r0, #2
 800b7ec:	f7f6 fbd4 	bl	8001f98 <st25r3911ClrRegisterBits>
            }
            
            /* No Tx done, enable the Receiver */
            st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 800b7f0:	20d1      	movs	r0, #209	; 0xd1
 800b7f2:	f7f6 fd0b 	bl	800220c <st25r3911ExecuteCommand>

            /* Start NRT manually, if FWT = 0 (wait endlessly for Rx) chip will ignore anyhow */
            st25r3911ExecuteCommand( ST25R3911_CMD_START_NO_RESPONSE_TIMER );
 800b7f6:	20e3      	movs	r0, #227	; 0xe3
 800b7f8:	f7f6 fd08 	bl	800220c <st25r3911ExecuteCommand>
            
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 800b7fc:	4b04      	ldr	r3, [pc, #16]	; (800b810 <rfalStartTransceive+0x254>)
 800b7fe:	2251      	movs	r2, #81	; 0x51
 800b800:	751a      	strb	r2, [r3, #20]
        }
        
        return ERR_NONE;
 800b802:	2300      	movs	r3, #0
 800b804:	e000      	b.n	800b808 <rfalStartTransceive+0x24c>
    }
    
    return ERR_WRONG_STATE;
 800b806:	2321      	movs	r3, #33	; 0x21
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bdb0      	pop	{r4, r5, r7, pc}
 800b810:	20000a54 	.word	0x20000a54
 800b814:	0ffff000 	.word	0x0ffff000
 800b818:	20000c00 	.word	0x20000c00

0800b81c <rfalIsTransceiveInTx>:


/*******************************************************************************/
bool rfalIsTransceiveInTx( void )
{
 800b81c:	b480      	push	{r7}
 800b81e:	af00      	add	r7, sp, #0
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 800b820:	4b09      	ldr	r3, [pc, #36]	; (800b848 <rfalIsTransceiveInTx+0x2c>)
 800b822:	7d1b      	ldrb	r3, [r3, #20]
 800b824:	2b0a      	cmp	r3, #10
 800b826:	d905      	bls.n	800b834 <rfalIsTransceiveInTx+0x18>
 800b828:	4b07      	ldr	r3, [pc, #28]	; (800b848 <rfalIsTransceiveInTx+0x2c>)
 800b82a:	7d1b      	ldrb	r3, [r3, #20]
 800b82c:	2b50      	cmp	r3, #80	; 0x50
 800b82e:	d801      	bhi.n	800b834 <rfalIsTransceiveInTx+0x18>
 800b830:	2301      	movs	r3, #1
 800b832:	e000      	b.n	800b836 <rfalIsTransceiveInTx+0x1a>
 800b834:	2300      	movs	r3, #0
 800b836:	f003 0301 	and.w	r3, r3, #1
 800b83a:	b2db      	uxtb	r3, r3
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	20000a54 	.word	0x20000a54

0800b84c <rfalIsTransceiveInRx>:


/*******************************************************************************/
bool rfalIsTransceiveInRx( void )
{
 800b84c:	b480      	push	{r7}
 800b84e:	af00      	add	r7, sp, #0
    return (gRFAL.TxRx.state >= RFAL_TXRX_STATE_RX_IDLE);
 800b850:	4b05      	ldr	r3, [pc, #20]	; (800b868 <rfalIsTransceiveInRx+0x1c>)
 800b852:	7d1b      	ldrb	r3, [r3, #20]
 800b854:	2b50      	cmp	r3, #80	; 0x50
 800b856:	bf8c      	ite	hi
 800b858:	2301      	movhi	r3, #1
 800b85a:	2300      	movls	r3, #0
 800b85c:	b2db      	uxtb	r3, r3
}
 800b85e:	4618      	mov	r0, r3
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr
 800b868:	20000a54 	.word	0x20000a54

0800b86c <rfalTransceiveBlockingTx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b08c      	sub	sp, #48	; 0x30
 800b870:	af00      	add	r7, sp, #0
 800b872:	60f8      	str	r0, [r7, #12]
 800b874:	607a      	str	r2, [r7, #4]
 800b876:	461a      	mov	r2, r3
 800b878:	460b      	mov	r3, r1
 800b87a:	817b      	strh	r3, [r7, #10]
 800b87c:	4613      	mov	r3, r2
 800b87e:	813b      	strh	r3, [r7, #8]
    ReturnCode               ret;
    rfalTransceiveContext    ctx;
    
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	613b      	str	r3, [r7, #16]
 800b884:	897b      	ldrh	r3, [r7, #10]
 800b886:	00db      	lsls	r3, r3, #3
 800b888:	b29b      	uxth	r3, r3
 800b88a:	82bb      	strh	r3, [r7, #20]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	61bb      	str	r3, [r7, #24]
 800b890:	893b      	ldrh	r3, [r7, #8]
 800b892:	00db      	lsls	r3, r3, #3
 800b894:	b29b      	uxth	r3, r3
 800b896:	83bb      	strh	r3, [r7, #28]
 800b898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89a:	623b      	str	r3, [r7, #32]
 800b89c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b89e:	627b      	str	r3, [r7, #36]	; 0x24
 800b8a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8a2:	62bb      	str	r3, [r7, #40]	; 0x28
    EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 800b8a4:	f107 0310 	add.w	r3, r7, #16
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7ff fe87 	bl	800b5bc <rfalStartTransceive>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b8b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d001      	beq.n	800b8bc <rfalTransceiveBlockingTx+0x50>
 800b8b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b8ba:	e002      	b.n	800b8c2 <rfalTransceiveBlockingTx+0x56>
    
    return rfalTransceiveRunBlockingTx();
 800b8bc:	f000 f805 	bl	800b8ca <rfalTransceiveRunBlockingTx>
 800b8c0:	4603      	mov	r3, r0
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3730      	adds	r7, #48	; 0x30
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <rfalTransceiveRunBlockingTx>:


/*******************************************************************************/
static ReturnCode rfalTransceiveRunBlockingTx( void )
{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b082      	sub	sp, #8
 800b8ce:	af00      	add	r7, sp, #0
    ReturnCode  ret;
        
    do{
        rfalWorker();
 800b8d0:	f000 f894 	bl	800b9fc <rfalWorker>
        ret = rfalGetTransceiveStatus();
 800b8d4:	f000 f880 	bl	800b9d8 <rfalGetTransceiveStatus>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInTx() && (ret == ERR_BUSY) );
 800b8dc:	f7ff ff9e 	bl	800b81c <rfalIsTransceiveInTx>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d002      	beq.n	800b8ec <rfalTransceiveRunBlockingTx+0x22>
 800b8e6:	88fb      	ldrh	r3, [r7, #6]
 800b8e8:	2b02      	cmp	r3, #2
 800b8ea:	d0f1      	beq.n	800b8d0 <rfalTransceiveRunBlockingTx+0x6>
    
    if( rfalIsTransceiveInRx() )
 800b8ec:	f7ff ffae 	bl	800b84c <rfalIsTransceiveInRx>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d001      	beq.n	800b8fa <rfalTransceiveRunBlockingTx+0x30>
    {
        return ERR_NONE;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	e000      	b.n	800b8fc <rfalTransceiveRunBlockingTx+0x32>
    }
    
    return ret;
 800b8fa:	88fb      	ldrh	r3, [r7, #6]
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3708      	adds	r7, #8
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <rfalTransceiveBlockingRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingRx( void )
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    do{
        rfalWorker();
 800b90a:	f000 f877 	bl	800b9fc <rfalWorker>
        ret = rfalGetTransceiveStatus();
 800b90e:	f000 f863 	bl	800b9d8 <rfalGetTransceiveStatus>
 800b912:	4603      	mov	r3, r0
 800b914:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInRx() && (ret == ERR_BUSY) );
 800b916:	f7ff ff99 	bl	800b84c <rfalIsTransceiveInRx>
 800b91a:	4603      	mov	r3, r0
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d002      	beq.n	800b926 <rfalTransceiveBlockingRx+0x22>
 800b920:	88fb      	ldrh	r3, [r7, #6]
 800b922:	2b02      	cmp	r3, #2
 800b924:	d0f1      	beq.n	800b90a <rfalTransceiveBlockingRx+0x6>
        
    return ret;
 800b926:	88fb      	ldrh	r3, [r7, #6]
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <rfalTransceiveBlockingTxRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTxRx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b08a      	sub	sp, #40	; 0x28
 800b934:	af04      	add	r7, sp, #16
 800b936:	60f8      	str	r0, [r7, #12]
 800b938:	607a      	str	r2, [r7, #4]
 800b93a:	461a      	mov	r2, r3
 800b93c:	460b      	mov	r3, r1
 800b93e:	817b      	strh	r3, [r7, #10]
 800b940:	4613      	mov	r3, r2
 800b942:	813b      	strh	r3, [r7, #8]
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt ) );
 800b944:	893a      	ldrh	r2, [r7, #8]
 800b946:	8979      	ldrh	r1, [r7, #10]
 800b948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b94a:	9302      	str	r3, [sp, #8]
 800b94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94e:	9301      	str	r3, [sp, #4]
 800b950:	6a3b      	ldr	r3, [r7, #32]
 800b952:	9300      	str	r3, [sp, #0]
 800b954:	4613      	mov	r3, r2
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	68f8      	ldr	r0, [r7, #12]
 800b95a:	f7ff ff87 	bl	800b86c <rfalTransceiveBlockingTx>
 800b95e:	4603      	mov	r3, r0
 800b960:	82fb      	strh	r3, [r7, #22]
 800b962:	8afb      	ldrh	r3, [r7, #22]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d001      	beq.n	800b96c <rfalTransceiveBlockingTxRx+0x3c>
 800b968:	8afb      	ldrh	r3, [r7, #22]
 800b96a:	e00e      	b.n	800b98a <rfalTransceiveBlockingTxRx+0x5a>
    ret = rfalTransceiveBlockingRx();
 800b96c:	f7ff ffca 	bl	800b904 <rfalTransceiveBlockingRx>
 800b970:	4603      	mov	r3, r0
 800b972:	82fb      	strh	r3, [r7, #22]
    
    /* Convert received bits to bytes */
    if( actLen != NULL )
 800b974:	6a3b      	ldr	r3, [r7, #32]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d006      	beq.n	800b988 <rfalTransceiveBlockingTxRx+0x58>
    {
        *actLen =  rfalConvBitsToBytes(*actLen);
 800b97a:	6a3b      	ldr	r3, [r7, #32]
 800b97c:	881b      	ldrh	r3, [r3, #0]
 800b97e:	3307      	adds	r3, #7
 800b980:	08db      	lsrs	r3, r3, #3
 800b982:	b29a      	uxth	r2, r3
 800b984:	6a3b      	ldr	r3, [r7, #32]
 800b986:	801a      	strh	r2, [r3, #0]
    }
    
    return ret;
 800b988:	8afb      	ldrh	r3, [r7, #22]
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3718      	adds	r7, #24
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
	...

0800b994 <rfalRunTransceiveWorker>:


/*******************************************************************************/
static ReturnCode rfalRunTransceiveWorker( void )
{
 800b994:	b580      	push	{r7, lr}
 800b996:	af00      	add	r7, sp, #0
    if( gRFAL.state == RFAL_STATE_TXRX )
 800b998:	4b0e      	ldr	r3, [pc, #56]	; (800b9d4 <rfalRunTransceiveWorker+0x40>)
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	2b03      	cmp	r3, #3
 800b99e:	d115      	bne.n	800b9cc <rfalRunTransceiveWorker+0x38>
    {     
        /* Run Tx or Rx state machines */
        if( rfalIsTransceiveInTx() )
 800b9a0:	f7ff ff3c 	bl	800b81c <rfalIsTransceiveInTx>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d005      	beq.n	800b9b6 <rfalRunTransceiveWorker+0x22>
        {
            rfalTransceiveTx();
 800b9aa:	f000 f96d 	bl	800bc88 <rfalTransceiveTx>
            return rfalGetTransceiveStatus();
 800b9ae:	f000 f813 	bl	800b9d8 <rfalGetTransceiveStatus>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	e00b      	b.n	800b9ce <rfalRunTransceiveWorker+0x3a>
        }
        
        if( rfalIsTransceiveInRx() )
 800b9b6:	f7ff ff49 	bl	800b84c <rfalIsTransceiveInRx>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d005      	beq.n	800b9cc <rfalRunTransceiveWorker+0x38>
        {
            rfalTransceiveRx();
 800b9c0:	f000 fbae 	bl	800c120 <rfalTransceiveRx>
            return rfalGetTransceiveStatus();
 800b9c4:	f000 f808 	bl	800b9d8 <rfalGetTransceiveStatus>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	e000      	b.n	800b9ce <rfalRunTransceiveWorker+0x3a>
        }
    }    
    return ERR_WRONG_STATE;
 800b9cc:	2321      	movs	r3, #33	; 0x21
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	20000a54 	.word	0x20000a54

0800b9d8 <rfalGetTransceiveStatus>:
{
    return gRFAL.TxRx.state;
}

ReturnCode rfalGetTransceiveStatus( void )
{
 800b9d8:	b480      	push	{r7}
 800b9da:	af00      	add	r7, sp, #0
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800b9dc:	4b06      	ldr	r3, [pc, #24]	; (800b9f8 <rfalGetTransceiveStatus+0x20>)
 800b9de:	7d1b      	ldrb	r3, [r3, #20]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d102      	bne.n	800b9ea <rfalGetTransceiveStatus+0x12>
 800b9e4:	4b04      	ldr	r3, [pc, #16]	; (800b9f8 <rfalGetTransceiveStatus+0x20>)
 800b9e6:	8adb      	ldrh	r3, [r3, #22]
 800b9e8:	e000      	b.n	800b9ec <rfalGetTransceiveStatus+0x14>
 800b9ea:	2302      	movs	r3, #2
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr
 800b9f6:	bf00      	nop
 800b9f8:	20000a54 	.word	0x20000a54

0800b9fc <rfalWorker>:
}


/*******************************************************************************/
void rfalWorker( void )
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	af00      	add	r7, sp, #0
    platformProtectWorker();               /* Protect RFAL Worker/Task/Process */
    
    switch( gRFAL.state )
 800ba00:	4b07      	ldr	r3, [pc, #28]	; (800ba20 <rfalWorker+0x24>)
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	2b03      	cmp	r3, #3
 800ba06:	d002      	beq.n	800ba0e <rfalWorker+0x12>
 800ba08:	2b05      	cmp	r3, #5
 800ba0a:	d003      	beq.n	800ba14 <rfalWorker+0x18>
    #endif /* RFAL_FEATURE_WAKEUP_MODE */
            
        /* Nothing to be done */
        default:            
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 800ba0c:	e005      	b.n	800ba1a <rfalWorker+0x1e>
            rfalRunTransceiveWorker();
 800ba0e:	f7ff ffc1 	bl	800b994 <rfalRunTransceiveWorker>
            break;
 800ba12:	e002      	b.n	800ba1a <rfalWorker+0x1e>
            rfalRunWakeUpModeWorker();
 800ba14:	f001 fc66 	bl	800d2e4 <rfalRunWakeUpModeWorker>
            break;
 800ba18:	bf00      	nop
    }
    
    platformUnprotectWorker();             /* Unprotect RFAL Worker/Task/Process */
}
 800ba1a:	bf00      	nop
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	20000a54 	.word	0x20000a54

0800ba24 <rfalErrorHandling>:


/*******************************************************************************/
static void rfalErrorHandling( void )
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
    bool    rxHasIncParError;
    uint8_t fifoBytesToRead;
    uint8_t reEnRx[] = { ST25R3911_CMD_CLEAR_FIFO, ST25R3911_CMD_UNMASK_RECEIVE_DATA };
 800ba2a:	4b3f      	ldr	r3, [pc, #252]	; (800bb28 <rfalErrorHandling+0x104>)
 800ba2c:	881b      	ldrh	r3, [r3, #0]
 800ba2e:	80bb      	strh	r3, [r7, #4]
    

    fifoBytesToRead = rfalFIFOStatusGetNumBytes();
 800ba30:	f000 fede 	bl	800c7f0 <rfalFIFOStatusGetNumBytes>
 800ba34:	4603      	mov	r3, r0
 800ba36:	71fb      	strb	r3, [r7, #7]
    
    
    /*******************************************************************************/
    /* EMVCo                                                                       */
    /*******************************************************************************/
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 800ba38:	4b3c      	ldr	r3, [pc, #240]	; (800bb2c <rfalErrorHandling+0x108>)
 800ba3a:	79db      	ldrb	r3, [r3, #7]
 800ba3c:	2b02      	cmp	r3, #2
 800ba3e:	d141      	bne.n	800bac4 <rfalErrorHandling+0xa0>
        /*   - Parity error                                                            */
        /*   - CRC error                                                               */
        /*******************************************************************************/        
     
        /* Check if reception has incompete bytes or parity error */
        rxHasIncParError = ( rfalFIFOStatusIsIncompleteByte() ? true : rfalFIFOStatusIsMissingPar() );   /* MISRA 13.5 */
 800ba40:	f000 fee2 	bl	800c808 <rfalFIFOStatusIsIncompleteByte>
 800ba44:	4603      	mov	r3, r0
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d104      	bne.n	800ba54 <rfalErrorHandling+0x30>
 800ba4a:	f000 feef 	bl	800c82c <rfalFIFOStatusIsMissingPar>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d001      	beq.n	800ba58 <rfalErrorHandling+0x34>
 800ba54:	2301      	movs	r3, #1
 800ba56:	e000      	b.n	800ba5a <rfalErrorHandling+0x36>
 800ba58:	2300      	movs	r3, #0
 800ba5a:	71bb      	strb	r3, [r7, #6]
        
        /* In case there are residual bits decrement FIFO bytes */
        if( (fifoBytesToRead > 0U) && rxHasIncParError)
 800ba5c:	79fb      	ldrb	r3, [r7, #7]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d005      	beq.n	800ba6e <rfalErrorHandling+0x4a>
 800ba62:	79bb      	ldrb	r3, [r7, #6]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d002      	beq.n	800ba6e <rfalErrorHandling+0x4a>
        {
            fifoBytesToRead--;
 800ba68:	79fb      	ldrb	r3, [r7, #7]
 800ba6a:	3b01      	subs	r3, #1
 800ba6c:	71fb      	strb	r3, [r7, #7]
        }
            
        if( ( (gRFAL.fifo.bytesTotal + fifoBytesToRead) < RFAL_EMVCO_RX_MAXLEN )            &&
 800ba6e:	4b2f      	ldr	r3, [pc, #188]	; (800bb2c <rfalErrorHandling+0x108>)
 800ba70:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800ba72:	461a      	mov	r2, r3
 800ba74:	79fb      	ldrb	r3, [r7, #7]
 800ba76:	4413      	add	r3, r2
 800ba78:	2b03      	cmp	r3, #3
 800ba7a:	dc51      	bgt.n	800bb20 <rfalErrorHandling+0xfc>
            ( (gRFAL.TxRx.status == ERR_RF_COLLISION) || (gRFAL.TxRx.status == ERR_FRAMING) || 
 800ba7c:	4b2b      	ldr	r3, [pc, #172]	; (800bb2c <rfalErrorHandling+0x108>)
 800ba7e:	8adb      	ldrh	r3, [r3, #22]
        if( ( (gRFAL.fifo.bytesTotal + fifoBytesToRead) < RFAL_EMVCO_RX_MAXLEN )            &&
 800ba80:	2b1d      	cmp	r3, #29
 800ba82:	d00e      	beq.n	800baa2 <rfalErrorHandling+0x7e>
            ( (gRFAL.TxRx.status == ERR_RF_COLLISION) || (gRFAL.TxRx.status == ERR_FRAMING) || 
 800ba84:	4b29      	ldr	r3, [pc, #164]	; (800bb2c <rfalErrorHandling+0x108>)
 800ba86:	8adb      	ldrh	r3, [r3, #22]
 800ba88:	2b09      	cmp	r3, #9
 800ba8a:	d00a      	beq.n	800baa2 <rfalErrorHandling+0x7e>
              (gRFAL.TxRx.status == ERR_PAR)          || (gRFAL.TxRx.status == ERR_CRC)     || 
 800ba8c:	4b27      	ldr	r3, [pc, #156]	; (800bb2c <rfalErrorHandling+0x108>)
 800ba8e:	8adb      	ldrh	r3, [r3, #22]
            ( (gRFAL.TxRx.status == ERR_RF_COLLISION) || (gRFAL.TxRx.status == ERR_FRAMING) || 
 800ba90:	2b1b      	cmp	r3, #27
 800ba92:	d006      	beq.n	800baa2 <rfalErrorHandling+0x7e>
              (gRFAL.TxRx.status == ERR_PAR)          || (gRFAL.TxRx.status == ERR_CRC)     || 
 800ba94:	4b25      	ldr	r3, [pc, #148]	; (800bb2c <rfalErrorHandling+0x108>)
 800ba96:	8adb      	ldrh	r3, [r3, #22]
 800ba98:	2b15      	cmp	r3, #21
 800ba9a:	d002      	beq.n	800baa2 <rfalErrorHandling+0x7e>
 800ba9c:	79bb      	ldrb	r3, [r7, #6]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d03e      	beq.n	800bb20 <rfalErrorHandling+0xfc>
              rxHasIncParError                                                               ) )
        {
            /* Ignore this reception, ReEnable receiver */
            st25r3911ExecuteCommands( reEnRx, sizeof(reEnRx) );
 800baa2:	1d3b      	adds	r3, r7, #4
 800baa4:	2102      	movs	r1, #2
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7f6 fbfe 	bl	80022a8 <st25r3911ExecuteCommands>
            
            rfalFIFOStatusClear();
 800baac:	f000 fe92 	bl	800c7d4 <rfalFIFOStatusClear>
            gRFAL.fifo.bytesTotal = 0;
 800bab0:	4b1e      	ldr	r3, [pc, #120]	; (800bb2c <rfalErrorHandling+0x108>)
 800bab2:	2200      	movs	r2, #0
 800bab4:	875a      	strh	r2, [r3, #58]	; 0x3a
            gRFAL.TxRx.status = ERR_BUSY;
 800bab6:	4b1d      	ldr	r3, [pc, #116]	; (800bb2c <rfalErrorHandling+0x108>)
 800bab8:	2202      	movs	r2, #2
 800baba:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800babc:	4b1b      	ldr	r3, [pc, #108]	; (800bb2c <rfalErrorHandling+0x108>)
 800babe:	2253      	movs	r2, #83	; 0x53
 800bac0:	751a      	strb	r2, [r3, #20]
 800bac2:	e02e      	b.n	800bb22 <rfalErrorHandling+0xfe>
    }

    /*******************************************************************************/
    /* ISO14443A Mode                                                              */
    /*******************************************************************************/
    if( gRFAL.mode == RFAL_MODE_POLL_NFCA )
 800bac4:	4b19      	ldr	r3, [pc, #100]	; (800bb2c <rfalErrorHandling+0x108>)
 800bac6:	785b      	ldrb	r3, [r3, #1]
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d12a      	bne.n	800bb22 <rfalErrorHandling+0xfe>
        /*******************************************************************************/
        /* If we received one incomplete byte (not a block and a incomplete byte at    *
         * the end) we will raise a specific error ( support for T2T 4 bit ACK / NAK )   *
         * Otherwise just leave it as an CRC/FRAMING/PAR error                         */    
        /*******************************************************************************/
        if( (gRFAL.TxRx.status == ERR_PAR) || (gRFAL.TxRx.status == ERR_CRC) )
 800bacc:	4b17      	ldr	r3, [pc, #92]	; (800bb2c <rfalErrorHandling+0x108>)
 800bace:	8adb      	ldrh	r3, [r3, #22]
 800bad0:	2b1b      	cmp	r3, #27
 800bad2:	d003      	beq.n	800badc <rfalErrorHandling+0xb8>
 800bad4:	4b15      	ldr	r3, [pc, #84]	; (800bb2c <rfalErrorHandling+0x108>)
 800bad6:	8adb      	ldrh	r3, [r3, #22]
 800bad8:	2b15      	cmp	r3, #21
 800bada:	d122      	bne.n	800bb22 <rfalErrorHandling+0xfe>
        {
            if( rfalFIFOStatusIsIncompleteByte() && (fifoBytesToRead == RFAL_NFC_RX_INCOMPLETE_LEN) )
 800badc:	f000 fe94 	bl	800c808 <rfalFIFOStatusIsIncompleteByte>
 800bae0:	4603      	mov	r3, r0
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d01d      	beq.n	800bb22 <rfalErrorHandling+0xfe>
 800bae6:	79fb      	ldrb	r3, [r7, #7]
 800bae8:	2b01      	cmp	r3, #1
 800baea:	d11a      	bne.n	800bb22 <rfalErrorHandling+0xfe>
            {
                st25r3911ReadFifo( (uint8_t*)(gRFAL.TxRx.ctx.rxBuf), fifoBytesToRead );
 800baec:	4b0f      	ldr	r3, [pc, #60]	; (800bb2c <rfalErrorHandling+0x108>)
 800baee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf0:	79fa      	ldrb	r2, [r7, #7]
 800baf2:	4611      	mov	r1, r2
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7f6 fb41 	bl	800217c <st25r3911ReadFifo>
                if( (gRFAL.TxRx.ctx.rxRcvdLen) != NULL )
 800bafa:	4b0c      	ldr	r3, [pc, #48]	; (800bb2c <rfalErrorHandling+0x108>)
 800bafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d007      	beq.n	800bb12 <rfalErrorHandling+0xee>
                {
                    *gRFAL.TxRx.ctx.rxRcvdLen = rfalFIFOGetNumIncompleteBits();
 800bb02:	f000 fea5 	bl	800c850 <rfalFIFOGetNumIncompleteBits>
 800bb06:	4603      	mov	r3, r0
 800bb08:	461a      	mov	r2, r3
 800bb0a:	4b08      	ldr	r3, [pc, #32]	; (800bb2c <rfalErrorHandling+0x108>)
 800bb0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb0e:	b292      	uxth	r2, r2
 800bb10:	801a      	strh	r2, [r3, #0]
                }
                
                gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 800bb12:	4b06      	ldr	r3, [pc, #24]	; (800bb2c <rfalErrorHandling+0x108>)
 800bb14:	2228      	movs	r2, #40	; 0x28
 800bb16:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800bb18:	4b04      	ldr	r3, [pc, #16]	; (800bb2c <rfalErrorHandling+0x108>)
 800bb1a:	225a      	movs	r2, #90	; 0x5a
 800bb1c:	751a      	strb	r2, [r3, #20]
 800bb1e:	e000      	b.n	800bb22 <rfalErrorHandling+0xfe>
        return;
 800bb20:	bf00      	nop
            }
        }
    }
    
}
 800bb22:	3708      	adds	r7, #8
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	0800e348 	.word	0x0800e348
 800bb2c:	20000a54 	.word	0x20000a54

0800bb30 <rfalCleanupTransceive>:


/*******************************************************************************/
static void rfalCleanupTransceive( void )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	af00      	add	r7, sp, #0
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    /* Restore default settings on NFCIP1 mode, Receiving parity + CRC bits and manual Tx Parity*/
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, (ST25R3911_REG_ISO14443A_NFC_no_tx_par | ST25R3911_REG_ISO14443A_NFC_no_rx_par | ST25R3911_REG_ISO14443A_NFC_nfc_f0) );
 800bb34:	21e0      	movs	r1, #224	; 0xe0
 800bb36:	2005      	movs	r0, #5
 800bb38:	f7f6 fa2e 	bl	8001f98 <st25r3911ClrRegisterBits>
    
    /* Restore AGC enabled */
    st25r3911SetRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 800bb3c:	2110      	movs	r1, #16
 800bb3e:	200b      	movs	r0, #11
 800bb40:	f7f6 fa4d 	bl	8001fde <st25r3911SetRegisterBits>
    
    
    /*******************************************************************************/
    /* Execute Post Transceive Callback                                            */
    /*******************************************************************************/
    if( gRFAL.callbacks.postTxRx != NULL )
 800bb44:	4b04      	ldr	r3, [pc, #16]	; (800bb58 <rfalCleanupTransceive+0x28>)
 800bb46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d002      	beq.n	800bb52 <rfalCleanupTransceive+0x22>
    {
        gRFAL.callbacks.postTxRx();
 800bb4c:	4b02      	ldr	r3, [pc, #8]	; (800bb58 <rfalCleanupTransceive+0x28>)
 800bb4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb50:	4798      	blx	r3
    }
    /*******************************************************************************/

}
 800bb52:	bf00      	nop
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	20000a54 	.word	0x20000a54

0800bb5c <rfalPrepareTransceive>:


/*******************************************************************************/
static void rfalPrepareTransceive( void )
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
    uint8_t  reg;
    
    /*******************************************************************************/
    /* In the EMVCo mode the NRT will continue to run.                             *
     * For the clear to stop it, the EMV mode has to be disabled before            */
    st25r3911ClrRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_emv );
 800bb62:	2102      	movs	r1, #2
 800bb64:	2011      	movs	r0, #17
 800bb66:	f7f6 fa17 	bl	8001f98 <st25r3911ClrRegisterBits>
    
    /* Reset receive logic */
    st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
 800bb6a:	20c2      	movs	r0, #194	; 0xc2
 800bb6c:	f7f6 fb4e 	bl	800220c <st25r3911ExecuteCommand>
    
    /* Reset Rx Gain */
    st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_SQUELCH );
 800bb70:	20d5      	movs	r0, #213	; 0xd5
 800bb72:	f7f6 fb4b 	bl	800220c <st25r3911ExecuteCommand>
    
    
    /*******************************************************************************/
    /* FDT Poll                                                                    */
    /*******************************************************************************/
    if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 800bb76:	4b42      	ldr	r3, [pc, #264]	; (800bc80 <rfalPrepareTransceive+0x124>)
 800bb78:	785b      	ldrb	r3, [r3, #1]
 800bb7a:	2b09      	cmp	r3, #9
 800bb7c:	d01c      	beq.n	800bbb8 <rfalPrepareTransceive+0x5c>
 800bb7e:	4b40      	ldr	r3, [pc, #256]	; (800bc80 <rfalPrepareTransceive+0x124>)
 800bb80:	785b      	ldrb	r3, [r3, #1]
 800bb82:	2b0d      	cmp	r3, #13
 800bb84:	d018      	beq.n	800bbb8 <rfalPrepareTransceive+0x5c>
    {
       /* In Passive communications General Purpose Timer is used to measure FDT Poll */
       if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 800bb86:	4b3e      	ldr	r3, [pc, #248]	; (800bc80 <rfalPrepareTransceive+0x124>)
 800bb88:	691b      	ldr	r3, [r3, #16]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d014      	beq.n	800bbb8 <rfalPrepareTransceive+0x5c>
       {
           /* Configure GPT to start at RX end */
           st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ), ST25R3911_REG_GPT_CONTROL_gptc_erx );
 800bb8e:	4b3c      	ldr	r3, [pc, #240]	; (800bc80 <rfalPrepareTransceive+0x124>)
 800bb90:	691b      	ldr	r3, [r3, #16]
 800bb92:	f240 423b 	movw	r2, #1083	; 0x43b
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d804      	bhi.n	800bba4 <rfalPrepareTransceive+0x48>
 800bb9a:	4b39      	ldr	r3, [pc, #228]	; (800bc80 <rfalPrepareTransceive+0x124>)
 800bb9c:	691b      	ldr	r3, [r3, #16]
 800bb9e:	08db      	lsrs	r3, r3, #3
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	e005      	b.n	800bbb0 <rfalPrepareTransceive+0x54>
 800bba4:	4b36      	ldr	r3, [pc, #216]	; (800bc80 <rfalPrepareTransceive+0x124>)
 800bba6:	691b      	ldr	r3, [r3, #16]
 800bba8:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800bbac:	08db      	lsrs	r3, r3, #3
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	2120      	movs	r1, #32
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7f5 fe46 	bl	8001844 <st25r3911StartGPTimer_8fcs>
    
    
    /*******************************************************************************/
    /* Execute Pre Transceive Callback                                             */
    /*******************************************************************************/
    if( gRFAL.callbacks.preTxRx != NULL )
 800bbb8:	4b31      	ldr	r3, [pc, #196]	; (800bc80 <rfalPrepareTransceive+0x124>)
 800bbba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d002      	beq.n	800bbc6 <rfalPrepareTransceive+0x6a>
    {
        gRFAL.callbacks.preTxRx();
 800bbc0:	4b2f      	ldr	r3, [pc, #188]	; (800bc80 <rfalPrepareTransceive+0x124>)
 800bbc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbc4:	4798      	blx	r3
    }
    /*******************************************************************************/
    
    maskInterrupts = ( ST25R3911_IRQ_MASK_FWL  | ST25R3911_IRQ_MASK_TXE  |
 800bbc6:	4b2f      	ldr	r3, [pc, #188]	; (800bc84 <rfalPrepareTransceive+0x128>)
 800bbc8:	607b      	str	r3, [r7, #4]
    
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    reg = (ST25R3911_REG_ISO14443A_NFC_no_tx_par_off | ST25R3911_REG_ISO14443A_NFC_no_rx_par_off | ST25R3911_REG_ISO14443A_NFC_nfc_f0_off);
 800bbca:	2300      	movs	r3, #0
 800bbcc:	70fb      	strb	r3, [r7, #3]
    
    /* Check if NFCIP1 mode is to be enabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_NFCIP1_ON) != 0U )
 800bbce:	4b2c      	ldr	r3, [pc, #176]	; (800bc80 <rfalPrepareTransceive+0x124>)
 800bbd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbd2:	f003 0304 	and.w	r3, r3, #4
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d003      	beq.n	800bbe2 <rfalPrepareTransceive+0x86>
    {
        reg |= ST25R3911_REG_ISO14443A_NFC_nfc_f0;
 800bbda:	78fb      	ldrb	r3, [r7, #3]
 800bbdc:	f043 0320 	orr.w	r3, r3, #32
 800bbe0:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Check if Parity check is to be skipped and to keep the parity + CRC bits in FIFO */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP) != 0U )
 800bbe2:	4b27      	ldr	r3, [pc, #156]	; (800bc80 <rfalPrepareTransceive+0x124>)
 800bbe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbe6:	f003 0310 	and.w	r3, r3, #16
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d003      	beq.n	800bbf6 <rfalPrepareTransceive+0x9a>
    {
        reg |= ST25R3911_REG_ISO14443A_NFC_no_rx_par;
 800bbee:	78fb      	ldrb	r3, [r7, #3]
 800bbf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbf4:	70fb      	strb	r3, [r7, #3]
    }

    /* Check if automatic Parity bits is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_TX_NONE) != 0U )
 800bbf6:	4b22      	ldr	r3, [pc, #136]	; (800bc80 <rfalPrepareTransceive+0x124>)
 800bbf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbfa:	f003 0320 	and.w	r3, r3, #32
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d003      	beq.n	800bc0a <rfalPrepareTransceive+0xae>
    {
        reg |= ST25R3911_REG_ISO14443A_NFC_no_tx_par;
 800bc02:	78fb      	ldrb	r3, [r7, #3]
 800bc04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bc08:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Apply current TxRx flags on ISO14443A and NFC 106kb/s Settings Register */
    st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443A_NFC, (ST25R3911_REG_ISO14443A_NFC_no_tx_par | ST25R3911_REG_ISO14443A_NFC_no_rx_par | ST25R3911_REG_ISO14443A_NFC_nfc_f0), reg );
 800bc0a:	78fb      	ldrb	r3, [r7, #3]
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	21e0      	movs	r1, #224	; 0xe0
 800bc10:	2005      	movs	r0, #5
 800bc12:	f7f6 fa02 	bl	800201a <st25r3911ChangeRegisterBits>
    
    
    /* Check if AGC is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_AGC_OFF) != 0U )
 800bc16:	4b1a      	ldr	r3, [pc, #104]	; (800bc80 <rfalPrepareTransceive+0x124>)
 800bc18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc1a:	f003 0308 	and.w	r3, r3, #8
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d004      	beq.n	800bc2c <rfalPrepareTransceive+0xd0>
    {
        st25r3911ClrRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 800bc22:	2110      	movs	r1, #16
 800bc24:	200b      	movs	r0, #11
 800bc26:	f7f6 f9b7 	bl	8001f98 <st25r3911ClrRegisterBits>
 800bc2a:	e003      	b.n	800bc34 <rfalPrepareTransceive+0xd8>
    }
    else
    {
        st25r3911SetRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 800bc2c:	2110      	movs	r1, #16
 800bc2e:	200b      	movs	r0, #11
 800bc30:	f7f6 f9d5 	bl	8001fde <st25r3911SetRegisterBits>
    

    /*******************************************************************************/
    /* EMVCo NRT mode                                                              */
    /*******************************************************************************/
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 800bc34:	4b12      	ldr	r3, [pc, #72]	; (800bc80 <rfalPrepareTransceive+0x124>)
 800bc36:	79db      	ldrb	r3, [r3, #7]
 800bc38:	2b02      	cmp	r3, #2
 800bc3a:	d104      	bne.n	800bc46 <rfalPrepareTransceive+0xea>
    {
        st25r3911SetRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_emv );
 800bc3c:	2102      	movs	r1, #2
 800bc3e:	2011      	movs	r0, #17
 800bc40:	f7f6 f9cd 	bl	8001fde <st25r3911SetRegisterBits>
 800bc44:	e003      	b.n	800bc4e <rfalPrepareTransceive+0xf2>
    }
    else
    {
        st25r3911ClrRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_emv );
 800bc46:	2102      	movs	r1, #2
 800bc48:	2011      	movs	r0, #17
 800bc4a:	f7f6 f9a5 	bl	8001f98 <st25r3911ClrRegisterBits>
    /*******************************************************************************/
    
    
    
    /* In Active comms enable also External Field interrupts  */
    if( rfalIsModeActiveComm( gRFAL.mode ) )
 800bc4e:	4b0c      	ldr	r3, [pc, #48]	; (800bc80 <rfalPrepareTransceive+0x124>)
 800bc50:	785b      	ldrb	r3, [r3, #1]
 800bc52:	2b09      	cmp	r3, #9
 800bc54:	d003      	beq.n	800bc5e <rfalPrepareTransceive+0x102>
 800bc56:	4b0a      	ldr	r3, [pc, #40]	; (800bc80 <rfalPrepareTransceive+0x124>)
 800bc58:	785b      	ldrb	r3, [r3, #1]
 800bc5a:	2b0d      	cmp	r3, #13
 800bc5c:	d103      	bne.n	800bc66 <rfalPrepareTransceive+0x10a>
    {
        maskInterrupts |= ( ST25R3911_IRQ_MASK_EOF  | ST25R3911_IRQ_MASK_EON | ST25R3911_IRQ_MASK_CAT | ST25R3911_IRQ_MASK_CAC );
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800bc64:	607b      	str	r3, [r7, #4]
    }
    
    
    /*******************************************************************************/
    /* clear and enable these interrupts */
    st25r3911GetInterrupt( maskInterrupts );
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f7f6 fcb8 	bl	80025dc <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( maskInterrupts );
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f7f6 fced 	bl	800264c <st25r3911EnableInterrupts>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 800bc72:	f000 fdaf 	bl	800c7d4 <rfalFIFOStatusClear>
}
 800bc76:	bf00      	nop
 800bc78:	3708      	adds	r7, #8
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	bf00      	nop
 800bc80:	20000a54 	.word	0x20000a54
 800bc84:	00f04078 	.word	0x00f04078

0800bc88 <rfalTransceiveTx>:

/*******************************************************************************/
static void rfalTransceiveTx( void )
{
 800bc88:	b5b0      	push	{r4, r5, r7, lr}
 800bc8a:	b08a      	sub	sp, #40	; 0x28
 800bc8c:	af06      	add	r7, sp, #24
    volatile uint32_t irqs;
    uint16_t          tmp;
    ReturnCode        ret;
    
    /* Supress warning in case NFC-V feature is disabled */
    ret = ERR_NONE;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	81fb      	strh	r3, [r7, #14]
    NO_WARNING(ret);
    
    
    irqs = ST25R3911_IRQ_MASK_NONE;
 800bc92:	2300      	movs	r3, #0
 800bc94:	60bb      	str	r3, [r7, #8]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 800bc96:	4b95      	ldr	r3, [pc, #596]	; (800beec <rfalTransceiveTx+0x264>)
 800bc98:	7d1a      	ldrb	r2, [r3, #20]
 800bc9a:	4b94      	ldr	r3, [pc, #592]	; (800beec <rfalTransceiveTx+0x264>)
 800bc9c:	7d5b      	ldrb	r3, [r3, #21]
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d003      	beq.n	800bcaa <rfalTransceiveTx+0x22>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 800bca2:	4b92      	ldr	r3, [pc, #584]	; (800beec <rfalTransceiveTx+0x264>)
 800bca4:	7d1a      	ldrb	r2, [r3, #20]
 800bca6:	4b91      	ldr	r3, [pc, #580]	; (800beec <rfalTransceiveTx+0x264>)
 800bca8:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 800bcaa:	4b90      	ldr	r3, [pc, #576]	; (800beec <rfalTransceiveTx+0x264>)
 800bcac:	7d1b      	ldrb	r3, [r3, #20]
 800bcae:	3b0b      	subs	r3, #11
 800bcb0:	2b08      	cmp	r3, #8
 800bcb2:	f200 8217 	bhi.w	800c0e4 <rfalTransceiveTx+0x45c>
 800bcb6:	a201      	add	r2, pc, #4	; (adr r2, 800bcbc <rfalTransceiveTx+0x34>)
 800bcb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcbc:	0800bce1 	.word	0x0800bce1
 800bcc0:	0800bce7 	.word	0x0800bce7
 800bcc4:	0800bd05 	.word	0x0800bd05
 800bcc8:	0800bd2d 	.word	0x0800bd2d
 800bccc:	0800be7f 	.word	0x0800be7f
 800bcd0:	0800bebb 	.word	0x0800bebb
 800bcd4:	0800bfff 	.word	0x0800bfff
 800bcd8:	0800c075 	.word	0x0800c075
 800bcdc:	0800c0bb 	.word	0x0800c0bb
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_IDLE:
            
            /* Nothing to do */
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_GT ;
 800bce0:	4b82      	ldr	r3, [pc, #520]	; (800beec <rfalTransceiveTx+0x264>)
 800bce2:	220c      	movs	r2, #12
 800bce4:	751a      	strb	r2, [r3, #20]
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_GT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( !rfalIsGTExpired() )
 800bce6:	f7ff fbd9 	bl	800b49c <rfalIsGTExpired>
 800bcea:	4603      	mov	r3, r0
 800bcec:	f083 0301 	eor.w	r3, r3, #1
 800bcf0:	b2db      	uxtb	r3, r3
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	f040 81fd 	bne.w	800c0f2 <rfalTransceiveTx+0x46a>
            {
                break;
            }
            
            gRFAL.tmr.GT = RFAL_TIMING_NONE;
 800bcf8:	4b7c      	ldr	r3, [pc, #496]	; (800beec <rfalTransceiveTx+0x264>)
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	641a      	str	r2, [r3, #64]	; 0x40
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_FDT;
 800bcfe:	4b7b      	ldr	r3, [pc, #492]	; (800beec <rfalTransceiveTx+0x264>)
 800bd00:	220d      	movs	r2, #13
 800bd02:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_FDT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Only in Passive communications GPT is used to measure FDT Poll */
            if( rfalIsModePassiveComm( gRFAL.mode ) )
 800bd04:	4b79      	ldr	r3, [pc, #484]	; (800beec <rfalTransceiveTx+0x264>)
 800bd06:	785b      	ldrb	r3, [r3, #1]
 800bd08:	2b09      	cmp	r3, #9
 800bd0a:	d00c      	beq.n	800bd26 <rfalTransceiveTx+0x9e>
 800bd0c:	4b77      	ldr	r3, [pc, #476]	; (800beec <rfalTransceiveTx+0x264>)
 800bd0e:	785b      	ldrb	r3, [r3, #1]
 800bd10:	2b0d      	cmp	r3, #13
 800bd12:	d008      	beq.n	800bd26 <rfalTransceiveTx+0x9e>
            {
                if( st25r3911IsGPTRunning() )
 800bd14:	2204      	movs	r2, #4
 800bd16:	2104      	movs	r1, #4
 800bd18:	202b      	movs	r0, #43	; 0x2b
 800bd1a:	f7f5 fdc7 	bl	80018ac <st25r3911CheckReg>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	f040 81e8 	bne.w	800c0f6 <rfalTransceiveTx+0x46e>
                {                
                   break;
                }
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_TRANSMIT;
 800bd26:	4b71      	ldr	r3, [pc, #452]	; (800beec <rfalTransceiveTx+0x264>)
 800bd28:	220e      	movs	r2, #14
 800bd2a:	751a      	strb	r2, [r3, #20]
        
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_TRANSMIT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 800bd2c:	f7ff ff16 	bl	800bb5c <rfalPrepareTransceive>

            /* Calculate when Water Level Interrupt will be triggered */
            gRFAL.fifo.expWL = (uint16_t)( st25r3911CheckReg( ST25R3911_REG_IO_CONF1, ST25R3911_REG_IO_CONF1_fifo_lt, ST25R3911_REG_IO_CONF1_fifo_lt_16bytes) ? RFAL_FIFO_OUT_LT_16 : RFAL_FIFO_OUT_LT_32 );
 800bd30:	2210      	movs	r2, #16
 800bd32:	2110      	movs	r1, #16
 800bd34:	2000      	movs	r0, #0
 800bd36:	f7f5 fdb9 	bl	80018ac <st25r3911CheckReg>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d001      	beq.n	800bd44 <rfalTransceiveTx+0xbc>
 800bd40:	2250      	movs	r2, #80	; 0x50
 800bd42:	e000      	b.n	800bd46 <rfalTransceiveTx+0xbe>
 800bd44:	2240      	movs	r2, #64	; 0x40
 800bd46:	4b69      	ldr	r3, [pc, #420]	; (800beec <rfalTransceiveTx+0x264>)
 800bd48:	871a      	strh	r2, [r3, #56]	; 0x38
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800bd4a:	4b68      	ldr	r3, [pc, #416]	; (800beec <rfalTransceiveTx+0x264>)
 800bd4c:	785b      	ldrb	r3, [r3, #1]
 800bd4e:	2b07      	cmp	r3, #7
 800bd50:	d003      	beq.n	800bd5a <rfalTransceiveTx+0xd2>
 800bd52:	4b66      	ldr	r3, [pc, #408]	; (800beec <rfalTransceiveTx+0x264>)
 800bd54:	785b      	ldrb	r3, [r3, #1]
 800bd56:	2b08      	cmp	r3, #8
 800bd58:	d151      	bne.n	800bdfe <rfalTransceiveTx+0x176>
                /* Debugging code: output the payload bits by writing into the FIFO and subsequent clearing */
                st25r3911WriteFifo(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen));
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
            #endif
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.nfcvData.nfcvOffset = 0;
 800bd5a:	4b64      	ldr	r3, [pc, #400]	; (800beec <rfalTransceiveTx+0x264>)
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	f8a3 23b4 	strh.w	r2, [r3, #948]	; 0x3b4
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 800bd62:	4b62      	ldr	r3, [pc, #392]	; (800beec <rfalTransceiveTx+0x264>)
 800bd64:	69d8      	ldr	r0, [r3, #28]
 800bd66:	4b61      	ldr	r3, [pc, #388]	; (800beec <rfalTransceiveTx+0x264>)
 800bd68:	8c1b      	ldrh	r3, [r3, #32]
 800bd6a:	3307      	adds	r3, #7
 800bd6c:	08db      	lsrs	r3, r3, #3
 800bd6e:	b299      	uxth	r1, r3
 800bd70:	4b5e      	ldr	r3, [pc, #376]	; (800beec <rfalTransceiveTx+0x264>)
 800bd72:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800bd76:	f003 0301 	and.w	r3, r3, #1
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	bf0c      	ite	eq
 800bd7e:	2301      	moveq	r3, #1
 800bd80:	2300      	movne	r3, #0
 800bd82:	b2dc      	uxtb	r4, r3
 800bd84:	4b59      	ldr	r3, [pc, #356]	; (800beec <rfalTransceiveTx+0x264>)
 800bd86:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800bd8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	bf0c      	ite	eq
 800bd92:	2301      	moveq	r3, #1
 800bd94:	2300      	movne	r3, #0
 800bd96:	b2dd      	uxtb	r5, r3
 800bd98:	4b54      	ldr	r3, [pc, #336]	; (800beec <rfalTransceiveTx+0x264>)
 800bd9a:	785b      	ldrb	r3, [r3, #1]
 800bd9c:	2b08      	cmp	r3, #8
 800bd9e:	bf0c      	ite	eq
 800bda0:	2301      	moveq	r3, #1
 800bda2:	2300      	movne	r3, #0
 800bda4:	b2db      	uxtb	r3, r3
 800bda6:	4a52      	ldr	r2, [pc, #328]	; (800bef0 <rfalTransceiveTx+0x268>)
 800bda8:	9205      	str	r2, [sp, #20]
 800bdaa:	2260      	movs	r2, #96	; 0x60
 800bdac:	9204      	str	r2, [sp, #16]
 800bdae:	4a51      	ldr	r2, [pc, #324]	; (800bef4 <rfalTransceiveTx+0x26c>)
 800bdb0:	9203      	str	r2, [sp, #12]
 800bdb2:	4a51      	ldr	r2, [pc, #324]	; (800bef8 <rfalTransceiveTx+0x270>)
 800bdb4:	9202      	str	r2, [sp, #8]
 800bdb6:	4a51      	ldr	r2, [pc, #324]	; (800befc <rfalTransceiveTx+0x274>)
 800bdb8:	9201      	str	r2, [sp, #4]
 800bdba:	9300      	str	r3, [sp, #0]
 800bdbc:	462b      	mov	r3, r5
 800bdbe:	4622      	mov	r2, r4
 800bdc0:	f7f8 fd80 	bl	80048c4 <iso15693VCDCode>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, MIN( (uint16_t)ST25R3911_FIFO_DEPTH, (uint16_t)sizeof(gRFAL.nfcvData.codingBuffer) ), &gRFAL.fifo.bytesWritten);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 800bdc8:	89fb      	ldrh	r3, [r7, #14]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d009      	beq.n	800bde2 <rfalTransceiveTx+0x15a>
 800bdce:	89fb      	ldrh	r3, [r7, #14]
 800bdd0:	2b0d      	cmp	r3, #13
 800bdd2:	d006      	beq.n	800bde2 <rfalTransceiveTx+0x15a>
                {
                    gRFAL.TxRx.status = ret;
 800bdd4:	4a45      	ldr	r2, [pc, #276]	; (800beec <rfalTransceiveTx+0x264>)
 800bdd6:	89fb      	ldrh	r3, [r7, #14]
 800bdd8:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800bdda:	4b44      	ldr	r3, [pc, #272]	; (800beec <rfalTransceiveTx+0x264>)
 800bddc:	2213      	movs	r2, #19
 800bdde:	751a      	strb	r2, [r3, #20]
                    break;
 800bde0:	e190      	b.n	800c104 <rfalTransceiveTx+0x47c>
                }
                /* Set the number of full bytes and bits to be transmitted */
                st25r3911SetNumTxBits( rfalConvBytesToBits(gRFAL.fifo.bytesTotal) );
 800bde2:	4b42      	ldr	r3, [pc, #264]	; (800beec <rfalTransceiveTx+0x264>)
 800bde4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800bde6:	00db      	lsls	r3, r3, #3
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7f5 fe54 	bl	8001a96 <st25r3911SetNumTxBits>

                /* Load FIFO with coded bytes */
                /* TODO: check bytesWritten does not exceed 255 */
                st25r3911WriteFifo( gRFAL.nfcvData.codingBuffer, (uint8_t)gRFAL.fifo.bytesWritten );
 800bdee:	4b3f      	ldr	r3, [pc, #252]	; (800beec <rfalTransceiveTx+0x264>)
 800bdf0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	483f      	ldr	r0, [pc, #252]	; (800bef4 <rfalTransceiveTx+0x26c>)
 800bdf8:	f7f6 f978 	bl	80020ec <st25r3911WriteFifo>
 800bdfc:	e01c      	b.n	800be38 <rfalTransceiveTx+0x1b0>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.fifo.bytesTotal = (uint16_t)rfalCalcNumBytes(gRFAL.TxRx.ctx.txBufLen);
 800bdfe:	4b3b      	ldr	r3, [pc, #236]	; (800beec <rfalTransceiveTx+0x264>)
 800be00:	8c1b      	ldrh	r3, [r3, #32]
 800be02:	3307      	adds	r3, #7
 800be04:	08db      	lsrs	r3, r3, #3
 800be06:	b29a      	uxth	r2, r3
 800be08:	4b38      	ldr	r3, [pc, #224]	; (800beec <rfalTransceiveTx+0x264>)
 800be0a:	875a      	strh	r2, [r3, #58]	; 0x3a
                
                /* Set the number of full bytes and bits to be transmitted */
                st25r3911SetNumTxBits( gRFAL.TxRx.ctx.txBufLen );
 800be0c:	4b37      	ldr	r3, [pc, #220]	; (800beec <rfalTransceiveTx+0x264>)
 800be0e:	8c1b      	ldrh	r3, [r3, #32]
 800be10:	4618      	mov	r0, r3
 800be12:	f7f5 fe40 	bl	8001a96 <st25r3911SetNumTxBits>
                
                /* Load FIFO with total length or FIFO's maximum */
                gRFAL.fifo.bytesWritten = MIN( gRFAL.fifo.bytesTotal, ST25R3911_FIFO_DEPTH );
 800be16:	4b35      	ldr	r3, [pc, #212]	; (800beec <rfalTransceiveTx+0x264>)
 800be18:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800be1a:	2b60      	cmp	r3, #96	; 0x60
 800be1c:	bf28      	it	cs
 800be1e:	2360      	movcs	r3, #96	; 0x60
 800be20:	b29a      	uxth	r2, r3
 800be22:	4b32      	ldr	r3, [pc, #200]	; (800beec <rfalTransceiveTx+0x264>)
 800be24:	879a      	strh	r2, [r3, #60]	; 0x3c
                st25r3911WriteFifo( gRFAL.TxRx.ctx.txBuf, (uint8_t)gRFAL.fifo.bytesWritten );
 800be26:	4b31      	ldr	r3, [pc, #196]	; (800beec <rfalTransceiveTx+0x264>)
 800be28:	69da      	ldr	r2, [r3, #28]
 800be2a:	4b30      	ldr	r3, [pc, #192]	; (800beec <rfalTransceiveTx+0x264>)
 800be2c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800be2e:	b2db      	uxtb	r3, r3
 800be30:	4619      	mov	r1, r3
 800be32:	4610      	mov	r0, r2
 800be34:	f7f6 f95a 	bl	80020ec <st25r3911WriteFifo>
            }
        
            /*Check if Observation Mode is enabled and set it on ST25R391x */
            rfalCheckEnableObsModeTx(); 
 800be38:	4b2c      	ldr	r3, [pc, #176]	; (800beec <rfalTransceiveTx+0x264>)
 800be3a:	795b      	ldrb	r3, [r3, #5]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d005      	beq.n	800be4c <rfalTransceiveTx+0x1c4>
 800be40:	4b2a      	ldr	r3, [pc, #168]	; (800beec <rfalTransceiveTx+0x264>)
 800be42:	795b      	ldrb	r3, [r3, #5]
 800be44:	4619      	mov	r1, r3
 800be46:	2001      	movs	r0, #1
 800be48:	f7f6 f818 	bl	8001e7c <st25r3911WriteTestRegister>
            
            /*******************************************************************************/
            /* Trigger/Start transmission                                                  */
            if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U )
 800be4c:	4b27      	ldr	r3, [pc, #156]	; (800beec <rfalTransceiveTx+0x264>)
 800be4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be50:	f003 0301 	and.w	r3, r3, #1
 800be54:	2b00      	cmp	r3, #0
 800be56:	d003      	beq.n	800be60 <rfalTransceiveTx+0x1d8>
            {
                st25r3911ExecuteCommand( ST25R3911_CMD_TRANSMIT_WITHOUT_CRC );
 800be58:	20c5      	movs	r0, #197	; 0xc5
 800be5a:	f7f6 f9d7 	bl	800220c <st25r3911ExecuteCommand>
 800be5e:	e002      	b.n	800be66 <rfalTransceiveTx+0x1de>
            }
            else
            {
                st25r3911ExecuteCommand( ST25R3911_CMD_TRANSMIT_WITH_CRC );
 800be60:	20c4      	movs	r0, #196	; 0xc4
 800be62:	f7f6 f9d3 	bl	800220c <st25r3911ExecuteCommand>
            }
             
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 800be66:	4b21      	ldr	r3, [pc, #132]	; (800beec <rfalTransceiveTx+0x264>)
 800be68:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800be6a:	4b20      	ldr	r3, [pc, #128]	; (800beec <rfalTransceiveTx+0x264>)
 800be6c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800be6e:	429a      	cmp	r2, r3
 800be70:	d201      	bcs.n	800be76 <rfalTransceiveTx+0x1ee>
 800be72:	220f      	movs	r2, #15
 800be74:	e000      	b.n	800be78 <rfalTransceiveTx+0x1f0>
 800be76:	2211      	movs	r2, #17
 800be78:	4b1c      	ldr	r3, [pc, #112]	; (800beec <rfalTransceiveTx+0x264>)
 800be7a:	751a      	strb	r2, [r3, #20]
            break;
 800be7c:	e142      	b.n	800c104 <rfalTransceiveTx+0x47c>

        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_WL:
            
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_FWL | ST25R3911_IRQ_MASK_TXE) );            
 800be7e:	2048      	movs	r0, #72	; 0x48
 800be80:	f7f6 fbac 	bl	80025dc <st25r3911GetInterrupt>
 800be84:	4603      	mov	r3, r0
 800be86:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	f000 8135 	beq.w	800c0fa <rfalTransceiveTx+0x472>
            {
               break;  /* No interrupt to process */
            }
            
            if( ((irqs & ST25R3911_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3911_IRQ_MASK_TXE) == 0U) )
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be96:	2b00      	cmp	r3, #0
 800be98:	d008      	beq.n	800beac <rfalTransceiveTx+0x224>
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	f003 0308 	and.w	r3, r3, #8
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d103      	bne.n	800beac <rfalTransceiveTx+0x224>
            {
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_RELOAD_FIFO;
 800bea4:	4b11      	ldr	r3, [pc, #68]	; (800beec <rfalTransceiveTx+0x264>)
 800bea6:	2210      	movs	r2, #16
 800bea8:	751a      	strb	r2, [r3, #20]
 800beaa:	e006      	b.n	800beba <rfalTransceiveTx+0x232>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 800beac:	4b0f      	ldr	r3, [pc, #60]	; (800beec <rfalTransceiveTx+0x264>)
 800beae:	2203      	movs	r2, #3
 800beb0:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800beb2:	4b0e      	ldr	r3, [pc, #56]	; (800beec <rfalTransceiveTx+0x264>)
 800beb4:	2213      	movs	r2, #19
 800beb6:	751a      	strb	r2, [r3, #20]
                break;
 800beb8:	e124      	b.n	800c104 <rfalTransceiveTx+0x47c>
        case RFAL_TXRX_STATE_TX_RELOAD_FIFO:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800beba:	4b0c      	ldr	r3, [pc, #48]	; (800beec <rfalTransceiveTx+0x264>)
 800bebc:	785b      	ldrb	r3, [r3, #1]
 800bebe:	2b07      	cmp	r3, #7
 800bec0:	d003      	beq.n	800beca <rfalTransceiveTx+0x242>
 800bec2:	4b0a      	ldr	r3, [pc, #40]	; (800beec <rfalTransceiveTx+0x264>)
 800bec4:	785b      	ldrb	r3, [r3, #1]
 800bec6:	2b08      	cmp	r3, #8
 800bec8:	d16d      	bne.n	800bfa6 <rfalTransceiveTx+0x31e>
            {
                uint16_t maxLen;
                                
                /* Load FIFO with the remaining length or maximum available (which fit on the coding buffer) */
                maxLen = (uint16_t)MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);
 800beca:	4b08      	ldr	r3, [pc, #32]	; (800beec <rfalTransceiveTx+0x264>)
 800becc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800bece:	461a      	mov	r2, r3
 800bed0:	4b06      	ldr	r3, [pc, #24]	; (800beec <rfalTransceiveTx+0x264>)
 800bed2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800bed4:	1ad3      	subs	r3, r2, r3
 800bed6:	4a05      	ldr	r2, [pc, #20]	; (800beec <rfalTransceiveTx+0x264>)
 800bed8:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800beda:	4293      	cmp	r3, r2
 800bedc:	da10      	bge.n	800bf00 <rfalTransceiveTx+0x278>
 800bede:	4b03      	ldr	r3, [pc, #12]	; (800beec <rfalTransceiveTx+0x264>)
 800bee0:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800bee2:	4b02      	ldr	r3, [pc, #8]	; (800beec <rfalTransceiveTx+0x264>)
 800bee4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800bee6:	1ad3      	subs	r3, r2, r3
 800bee8:	b29b      	uxth	r3, r3
 800beea:	e00b      	b.n	800bf04 <rfalTransceiveTx+0x27c>
 800beec:	20000a54 	.word	0x20000a54
 800bef0:	20000a90 	.word	0x20000a90
 800bef4:	20000c00 	.word	0x20000c00
 800bef8:	20000e08 	.word	0x20000e08
 800befc:	20000a8e 	.word	0x20000a8e
 800bf00:	4b82      	ldr	r3, [pc, #520]	; (800c10c <rfalTransceiveTx+0x484>)
 800bf02:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800bf04:	81bb      	strh	r3, [r7, #12]
                maxLen = (uint16_t)MIN( maxLen, sizeof(gRFAL.nfcvData.codingBuffer) );
 800bf06:	89bb      	ldrh	r3, [r7, #12]
 800bf08:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800bf0c:	bf28      	it	cs
 800bf0e:	f44f 7302 	movcs.w	r3, #520	; 0x208
 800bf12:	81bb      	strh	r3, [r7, #12]
                tmp    = 0;
 800bf14:	2300      	movs	r3, #0
 800bf16:	80fb      	strh	r3, [r7, #6]

                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 800bf18:	4b7c      	ldr	r3, [pc, #496]	; (800c10c <rfalTransceiveTx+0x484>)
 800bf1a:	69d8      	ldr	r0, [r3, #28]
 800bf1c:	4b7b      	ldr	r3, [pc, #492]	; (800c10c <rfalTransceiveTx+0x484>)
 800bf1e:	8c1b      	ldrh	r3, [r3, #32]
 800bf20:	3307      	adds	r3, #7
 800bf22:	08db      	lsrs	r3, r3, #3
 800bf24:	b299      	uxth	r1, r3
 800bf26:	4b79      	ldr	r3, [pc, #484]	; (800c10c <rfalTransceiveTx+0x484>)
 800bf28:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800bf2c:	f003 0301 	and.w	r3, r3, #1
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	bf0c      	ite	eq
 800bf34:	2301      	moveq	r3, #1
 800bf36:	2300      	movne	r3, #0
 800bf38:	b2dc      	uxtb	r4, r3
 800bf3a:	4b74      	ldr	r3, [pc, #464]	; (800c10c <rfalTransceiveTx+0x484>)
 800bf3c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800bf40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	bf0c      	ite	eq
 800bf48:	2301      	moveq	r3, #1
 800bf4a:	2300      	movne	r3, #0
 800bf4c:	b2dd      	uxtb	r5, r3
 800bf4e:	4b6f      	ldr	r3, [pc, #444]	; (800c10c <rfalTransceiveTx+0x484>)
 800bf50:	785b      	ldrb	r3, [r3, #1]
 800bf52:	2b08      	cmp	r3, #8
 800bf54:	bf0c      	ite	eq
 800bf56:	2301      	moveq	r3, #1
 800bf58:	2300      	movne	r3, #0
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	1dba      	adds	r2, r7, #6
 800bf5e:	9205      	str	r2, [sp, #20]
 800bf60:	89ba      	ldrh	r2, [r7, #12]
 800bf62:	9204      	str	r2, [sp, #16]
 800bf64:	4a6a      	ldr	r2, [pc, #424]	; (800c110 <rfalTransceiveTx+0x488>)
 800bf66:	9203      	str	r2, [sp, #12]
 800bf68:	4a6a      	ldr	r2, [pc, #424]	; (800c114 <rfalTransceiveTx+0x48c>)
 800bf6a:	9202      	str	r2, [sp, #8]
 800bf6c:	4a6a      	ldr	r2, [pc, #424]	; (800c118 <rfalTransceiveTx+0x490>)
 800bf6e:	9201      	str	r2, [sp, #4]
 800bf70:	9300      	str	r3, [sp, #0]
 800bf72:	462b      	mov	r3, r5
 800bf74:	4622      	mov	r2, r4
 800bf76:	f7f8 fca5 	bl	80048c4 <iso15693VCDCode>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, maxLen, &tmp);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 800bf7e:	89fb      	ldrh	r3, [r7, #14]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d009      	beq.n	800bf98 <rfalTransceiveTx+0x310>
 800bf84:	89fb      	ldrh	r3, [r7, #14]
 800bf86:	2b0d      	cmp	r3, #13
 800bf88:	d006      	beq.n	800bf98 <rfalTransceiveTx+0x310>
                {
                    gRFAL.TxRx.status = ret;
 800bf8a:	4a60      	ldr	r2, [pc, #384]	; (800c10c <rfalTransceiveTx+0x484>)
 800bf8c:	89fb      	ldrh	r3, [r7, #14]
 800bf8e:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800bf90:	4b5e      	ldr	r3, [pc, #376]	; (800c10c <rfalTransceiveTx+0x484>)
 800bf92:	2213      	movs	r2, #19
 800bf94:	751a      	strb	r2, [r3, #20]
                    break;
 800bf96:	e0b5      	b.n	800c104 <rfalTransceiveTx+0x47c>
                }

                /* Load FIFO with coded bytes */
                /* TODO: check tmp does not exceed 255 */
                st25r3911WriteFifo( gRFAL.nfcvData.codingBuffer, (uint8_t)tmp );
 800bf98:	88fb      	ldrh	r3, [r7, #6]
 800bf9a:	b2db      	uxtb	r3, r3
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	485c      	ldr	r0, [pc, #368]	; (800c110 <rfalTransceiveTx+0x488>)
 800bfa0:	f7f6 f8a4 	bl	80020ec <st25r3911WriteFifo>
            {
 800bfa4:	e018      	b.n	800bfd8 <rfalTransceiveTx+0x350>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Load FIFO with the remaining length or maximum available */
                tmp = MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);       /* tmp holds the number of bytes written on this iteration */
 800bfa6:	4b59      	ldr	r3, [pc, #356]	; (800c10c <rfalTransceiveTx+0x484>)
 800bfa8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800bfaa:	461a      	mov	r2, r3
 800bfac:	4b57      	ldr	r3, [pc, #348]	; (800c10c <rfalTransceiveTx+0x484>)
 800bfae:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	4b56      	ldr	r3, [pc, #344]	; (800c10c <rfalTransceiveTx+0x484>)
 800bfb4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800bfb6:	1acb      	subs	r3, r1, r3
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	bfa8      	it	ge
 800bfbc:	4613      	movge	r3, r2
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	80fb      	strh	r3, [r7, #6]
                /* TODO: check tmp does not exceed 255 */
                st25r3911WriteFifo( &gRFAL.TxRx.ctx.txBuf[gRFAL.fifo.bytesWritten], (uint8_t)tmp );
 800bfc2:	4b52      	ldr	r3, [pc, #328]	; (800c10c <rfalTransceiveTx+0x484>)
 800bfc4:	69db      	ldr	r3, [r3, #28]
 800bfc6:	4a51      	ldr	r2, [pc, #324]	; (800c10c <rfalTransceiveTx+0x484>)
 800bfc8:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 800bfca:	4413      	add	r3, r2
 800bfcc:	88fa      	ldrh	r2, [r7, #6]
 800bfce:	b2d2      	uxtb	r2, r2
 800bfd0:	4611      	mov	r1, r2
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7f6 f88a 	bl	80020ec <st25r3911WriteFifo>
            }
            
            /* Update total written bytes to FIFO */
            gRFAL.fifo.bytesWritten += tmp;
 800bfd8:	4b4c      	ldr	r3, [pc, #304]	; (800c10c <rfalTransceiveTx+0x484>)
 800bfda:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800bfdc:	88fb      	ldrh	r3, [r7, #6]
 800bfde:	4413      	add	r3, r2
 800bfe0:	b29a      	uxth	r2, r3
 800bfe2:	4b4a      	ldr	r3, [pc, #296]	; (800c10c <rfalTransceiveTx+0x484>)
 800bfe4:	879a      	strh	r2, [r3, #60]	; 0x3c
            
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 800bfe6:	4b49      	ldr	r3, [pc, #292]	; (800c10c <rfalTransceiveTx+0x484>)
 800bfe8:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800bfea:	4b48      	ldr	r3, [pc, #288]	; (800c10c <rfalTransceiveTx+0x484>)
 800bfec:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d201      	bcs.n	800bff6 <rfalTransceiveTx+0x36e>
 800bff2:	220f      	movs	r2, #15
 800bff4:	e000      	b.n	800bff8 <rfalTransceiveTx+0x370>
 800bff6:	2211      	movs	r2, #17
 800bff8:	4b44      	ldr	r3, [pc, #272]	; (800c10c <rfalTransceiveTx+0x484>)
 800bffa:	751a      	strb	r2, [r3, #20]
            break;
 800bffc:	e082      	b.n	800c104 <rfalTransceiveTx+0x47c>
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_TXE:
           
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_FWL | ST25R3911_IRQ_MASK_TXE) );
 800bffe:	2048      	movs	r0, #72	; 0x48
 800c000:	f7f6 faec 	bl	80025dc <st25r3911GetInterrupt>
 800c004:	4603      	mov	r3, r0
 800c006:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d077      	beq.n	800c0fe <rfalTransceiveTx+0x476>
            {
               break;  /* No interrupt to process */
            }
                        
            
            if( (irqs & ST25R3911_IRQ_MASK_TXE) != 0U )
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	f003 0308 	and.w	r3, r3, #8
 800c014:	2b00      	cmp	r3, #0
 800c016:	d021      	beq.n	800c05c <rfalTransceiveTx+0x3d4>
            {
                /* In Active comm start SW timer to measure FWT */
                if( rfalIsModeActiveComm( gRFAL.mode) && (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) ) 
 800c018:	4b3c      	ldr	r3, [pc, #240]	; (800c10c <rfalTransceiveTx+0x484>)
 800c01a:	785b      	ldrb	r3, [r3, #1]
 800c01c:	2b09      	cmp	r3, #9
 800c01e:	d003      	beq.n	800c028 <rfalTransceiveTx+0x3a0>
 800c020:	4b3a      	ldr	r3, [pc, #232]	; (800c10c <rfalTransceiveTx+0x484>)
 800c022:	785b      	ldrb	r3, [r3, #1]
 800c024:	2b0d      	cmp	r3, #13
 800c026:	d115      	bne.n	800c054 <rfalTransceiveTx+0x3cc>
 800c028:	4b38      	ldr	r3, [pc, #224]	; (800c10c <rfalTransceiveTx+0x484>)
 800c02a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c02c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c030:	d010      	beq.n	800c054 <rfalTransceiveTx+0x3cc>
 800c032:	4b36      	ldr	r3, [pc, #216]	; (800c10c <rfalTransceiveTx+0x484>)
 800c034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00c      	beq.n	800c054 <rfalTransceiveTx+0x3cc>
                {
                    rfalTimerStart( gRFAL.tmr.FWT, rfalConv1fcToMs( gRFAL.TxRx.ctx.fwt ) );
 800c03a:	4b34      	ldr	r3, [pc, #208]	; (800c10c <rfalTransceiveTx+0x484>)
 800c03c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c03e:	4a37      	ldr	r2, [pc, #220]	; (800c11c <rfalTransceiveTx+0x494>)
 800c040:	fba2 2303 	umull	r2, r3, r2, r3
 800c044:	0b1b      	lsrs	r3, r3, #12
 800c046:	b29b      	uxth	r3, r3
 800c048:	4618      	mov	r0, r3
 800c04a:	f7f6 fb49 	bl	80026e0 <timerCalculateTimer>
 800c04e:	4602      	mov	r2, r0
 800c050:	4b2e      	ldr	r3, [pc, #184]	; (800c10c <rfalTransceiveTx+0x484>)
 800c052:	645a      	str	r2, [r3, #68]	; 0x44
                }
                
                gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_DONE;
 800c054:	4b2d      	ldr	r3, [pc, #180]	; (800c10c <rfalTransceiveTx+0x484>)
 800c056:	2212      	movs	r2, #18
 800c058:	751a      	strb	r2, [r3, #20]
 800c05a:	e00b      	b.n	800c074 <rfalTransceiveTx+0x3ec>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_FWL) != 0U )
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c062:	2b00      	cmp	r3, #0
 800c064:	d14d      	bne.n	800c102 <rfalTransceiveTx+0x47a>
                /*******************************************************************************/
                break;  /* Ignore ST25R3911 FIFO WL if total TxLen is already on the FIFO */
            }
            else
            {
               gRFAL.TxRx.status = ERR_IO;
 800c066:	4b29      	ldr	r3, [pc, #164]	; (800c10c <rfalTransceiveTx+0x484>)
 800c068:	2203      	movs	r2, #3
 800c06a:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800c06c:	4b27      	ldr	r3, [pc, #156]	; (800c10c <rfalTransceiveTx+0x484>)
 800c06e:	2213      	movs	r2, #19
 800c070:	751a      	strb	r2, [r3, #20]
               break;
 800c072:	e047      	b.n	800c104 <rfalTransceiveTx+0x47c>
        
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* If no rxBuf is provided do not wait/expect Rx */
            if( gRFAL.TxRx.ctx.rxBuf == NULL )
 800c074:	4b25      	ldr	r3, [pc, #148]	; (800c10c <rfalTransceiveTx+0x484>)
 800c076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d110      	bne.n	800c09e <rfalTransceiveTx+0x416>
            {
                /*Check if Observation Mode was enabled and disable it on ST25R391x */
                rfalCheckDisableObsMode();
 800c07c:	4b23      	ldr	r3, [pc, #140]	; (800c10c <rfalTransceiveTx+0x484>)
 800c07e:	799b      	ldrb	r3, [r3, #6]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d003      	beq.n	800c08c <rfalTransceiveTx+0x404>
 800c084:	2100      	movs	r1, #0
 800c086:	2001      	movs	r0, #1
 800c088:	f7f5 fef8 	bl	8001e7c <st25r3911WriteTestRegister>
                
                /* Clean up Transceive */
                rfalCleanupTransceive();
 800c08c:	f7ff fd50 	bl	800bb30 <rfalCleanupTransceive>
                                
                gRFAL.TxRx.status = ERR_NONE;
 800c090:	4b1e      	ldr	r3, [pc, #120]	; (800c10c <rfalTransceiveTx+0x484>)
 800c092:	2200      	movs	r2, #0
 800c094:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  =  RFAL_TXRX_STATE_IDLE;
 800c096:	4b1d      	ldr	r3, [pc, #116]	; (800c10c <rfalTransceiveTx+0x484>)
 800c098:	2200      	movs	r2, #0
 800c09a:	751a      	strb	r2, [r3, #20]
                break;
 800c09c:	e032      	b.n	800c104 <rfalTransceiveTx+0x47c>
            }
            
            rfalCheckEnableObsModeRx();
 800c09e:	4b1b      	ldr	r3, [pc, #108]	; (800c10c <rfalTransceiveTx+0x484>)
 800c0a0:	799b      	ldrb	r3, [r3, #6]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d005      	beq.n	800c0b2 <rfalTransceiveTx+0x42a>
 800c0a6:	4b19      	ldr	r3, [pc, #100]	; (800c10c <rfalTransceiveTx+0x484>)
 800c0a8:	799b      	ldrb	r3, [r3, #6]
 800c0aa:	4619      	mov	r1, r3
 800c0ac:	2001      	movs	r0, #1
 800c0ae:	f7f5 fee5 	bl	8001e7c <st25r3911WriteTestRegister>
            
            /* Goto Rx */
            gRFAL.TxRx.state  =  RFAL_TXRX_STATE_RX_IDLE;
 800c0b2:	4b16      	ldr	r3, [pc, #88]	; (800c10c <rfalTransceiveTx+0x484>)
 800c0b4:	2251      	movs	r2, #81	; 0x51
 800c0b6:	751a      	strb	r2, [r3, #20]
            break;
 800c0b8:	e024      	b.n	800c104 <rfalTransceiveTx+0x47c>
           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_FAIL:
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 800c0ba:	4b14      	ldr	r3, [pc, #80]	; (800c10c <rfalTransceiveTx+0x484>)
 800c0bc:	8adb      	ldrh	r3, [r3, #22]
 800c0be:	2b02      	cmp	r3, #2
 800c0c0:	d102      	bne.n	800c0c8 <rfalTransceiveTx+0x440>
            {
                gRFAL.TxRx.status = ERR_SYSTEM;
 800c0c2:	4b12      	ldr	r3, [pc, #72]	; (800c10c <rfalTransceiveTx+0x484>)
 800c0c4:	2208      	movs	r2, #8
 800c0c6:	82da      	strh	r2, [r3, #22]
            }
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800c0c8:	4b10      	ldr	r3, [pc, #64]	; (800c10c <rfalTransceiveTx+0x484>)
 800c0ca:	799b      	ldrb	r3, [r3, #6]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d003      	beq.n	800c0d8 <rfalTransceiveTx+0x450>
 800c0d0:	2100      	movs	r1, #0
 800c0d2:	2001      	movs	r0, #1
 800c0d4:	f7f5 fed2 	bl	8001e7c <st25r3911WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800c0d8:	f7ff fd2a 	bl	800bb30 <rfalCleanupTransceive>
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 800c0dc:	4b0b      	ldr	r3, [pc, #44]	; (800c10c <rfalTransceiveTx+0x484>)
 800c0de:	2200      	movs	r2, #0
 800c0e0:	751a      	strb	r2, [r3, #20]
            break;
 800c0e2:	e00f      	b.n	800c104 <rfalTransceiveTx+0x47c>
        
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 800c0e4:	4b09      	ldr	r3, [pc, #36]	; (800c10c <rfalTransceiveTx+0x484>)
 800c0e6:	2208      	movs	r2, #8
 800c0e8:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800c0ea:	4b08      	ldr	r3, [pc, #32]	; (800c10c <rfalTransceiveTx+0x484>)
 800c0ec:	2213      	movs	r2, #19
 800c0ee:	751a      	strb	r2, [r3, #20]
            break;
 800c0f0:	e008      	b.n	800c104 <rfalTransceiveTx+0x47c>
                break;
 800c0f2:	bf00      	nop
 800c0f4:	e006      	b.n	800c104 <rfalTransceiveTx+0x47c>
                   break;
 800c0f6:	bf00      	nop
 800c0f8:	e004      	b.n	800c104 <rfalTransceiveTx+0x47c>
               break;  /* No interrupt to process */
 800c0fa:	bf00      	nop
 800c0fc:	e002      	b.n	800c104 <rfalTransceiveTx+0x47c>
               break;  /* No interrupt to process */
 800c0fe:	bf00      	nop
 800c100:	e000      	b.n	800c104 <rfalTransceiveTx+0x47c>
                break;  /* Ignore ST25R3911 FIFO WL if total TxLen is already on the FIFO */
 800c102:	bf00      	nop
    }
}
 800c104:	bf00      	nop
 800c106:	3710      	adds	r7, #16
 800c108:	46bd      	mov	sp, r7
 800c10a:	bdb0      	pop	{r4, r5, r7, pc}
 800c10c:	20000a54 	.word	0x20000a54
 800c110:	20000c00 	.word	0x20000c00
 800c114:	20000e08 	.word	0x20000e08
 800c118:	20000a8e 	.word	0x20000a8e
 800c11c:	4d542005 	.word	0x4d542005

0800c120 <rfalTransceiveRx>:


/*******************************************************************************/
static void rfalTransceiveRx( void )
{
 800c120:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c122:	b089      	sub	sp, #36	; 0x24
 800c124:	af04      	add	r7, sp, #16
    volatile uint32_t irqs;
    uint8_t           tmp;
    uint8_t           aux;
    
    irqs = ST25R3911_IRQ_MASK_NONE;
 800c126:	2300      	movs	r3, #0
 800c128:	60bb      	str	r3, [r7, #8]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 800c12a:	4baa      	ldr	r3, [pc, #680]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c12c:	7d1a      	ldrb	r2, [r3, #20]
 800c12e:	4ba9      	ldr	r3, [pc, #676]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c130:	7d5b      	ldrb	r3, [r3, #21]
 800c132:	429a      	cmp	r2, r3
 800c134:	d003      	beq.n	800c13e <rfalTransceiveRx+0x1e>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 800c136:	4ba7      	ldr	r3, [pc, #668]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c138:	7d1a      	ldrb	r2, [r3, #20]
 800c13a:	4ba6      	ldr	r3, [pc, #664]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c13c:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 800c13e:	4ba5      	ldr	r3, [pc, #660]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c140:	7d1b      	ldrb	r3, [r3, #20]
 800c142:	3b51      	subs	r3, #81	; 0x51
 800c144:	2b09      	cmp	r3, #9
 800c146:	f200 831c 	bhi.w	800c782 <rfalTransceiveRx+0x662>
 800c14a:	a201      	add	r2, pc, #4	; (adr r2, 800c150 <rfalTransceiveRx+0x30>)
 800c14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c150:	0800c179 	.word	0x0800c179
 800c154:	0800c6ff 	.word	0x0800c6ff
 800c158:	0800c1b1 	.word	0x0800c1b1
 800c15c:	0800c2bd 	.word	0x0800c2bd
 800c160:	0800c63d 	.word	0x0800c63d
 800c164:	0800c311 	.word	0x0800c311
 800c168:	0800c427 	.word	0x0800c427
 800c16c:	0800c739 	.word	0x0800c739
 800c170:	0800c617 	.word	0x0800c617
 800c174:	0800c6d5 	.word	0x0800c6d5
    {
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_IDLE:
            
            /* Clear rx counters */
            gRFAL.fifo.bytesWritten   = 0;    // Total bytes written on RxBuffer
 800c178:	4b96      	ldr	r3, [pc, #600]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c17a:	2200      	movs	r2, #0
 800c17c:	879a      	strh	r2, [r3, #60]	; 0x3c
            gRFAL.fifo.bytesTotal     = 0;    // Total bytes in FIFO will now be from Rx
 800c17e:	4b95      	ldr	r3, [pc, #596]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c180:	2200      	movs	r2, #0
 800c182:	875a      	strh	r2, [r3, #58]	; 0x3a
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 800c184:	4b93      	ldr	r3, [pc, #588]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d003      	beq.n	800c194 <rfalTransceiveRx+0x74>
            {
                *gRFAL.TxRx.ctx.rxRcvdLen = 0;
 800c18c:	4b91      	ldr	r3, [pc, #580]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c190:	2200      	movs	r2, #0
 800c192:	801a      	strh	r2, [r3, #0]
            }
            
            gRFAL.TxRx.state = ( rfalIsModeActiveComm( gRFAL.mode ) ? RFAL_TXRX_STATE_RX_WAIT_EON : RFAL_TXRX_STATE_RX_WAIT_RXS );
 800c194:	4b8f      	ldr	r3, [pc, #572]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c196:	785b      	ldrb	r3, [r3, #1]
 800c198:	2b09      	cmp	r3, #9
 800c19a:	d003      	beq.n	800c1a4 <rfalTransceiveRx+0x84>
 800c19c:	4b8d      	ldr	r3, [pc, #564]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c19e:	785b      	ldrb	r3, [r3, #1]
 800c1a0:	2b0d      	cmp	r3, #13
 800c1a2:	d101      	bne.n	800c1a8 <rfalTransceiveRx+0x88>
 800c1a4:	2252      	movs	r2, #82	; 0x52
 800c1a6:	e000      	b.n	800c1aa <rfalTransceiveRx+0x8a>
 800c1a8:	2253      	movs	r2, #83	; 0x53
 800c1aa:	4b8a      	ldr	r3, [pc, #552]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c1ac:	751a      	strb	r2, [r3, #20]
            break;
 800c1ae:	e2f8      	b.n	800c7a2 <rfalTransceiveRx+0x682>
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_WAIT_RXS:
        
            /*******************************************************************************/
            /* If in Active comm, Check if FWT SW timer has expired */
            if( rfalIsModeActiveComm( gRFAL.mode ) && (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800c1b0:	4b88      	ldr	r3, [pc, #544]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c1b2:	785b      	ldrb	r3, [r3, #1]
 800c1b4:	2b09      	cmp	r3, #9
 800c1b6:	d003      	beq.n	800c1c0 <rfalTransceiveRx+0xa0>
 800c1b8:	4b86      	ldr	r3, [pc, #536]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c1ba:	785b      	ldrb	r3, [r3, #1]
 800c1bc:	2b0d      	cmp	r3, #13
 800c1be:	d117      	bne.n	800c1f0 <rfalTransceiveRx+0xd0>
 800c1c0:	4b84      	ldr	r3, [pc, #528]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c1c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1c8:	d012      	beq.n	800c1f0 <rfalTransceiveRx+0xd0>
 800c1ca:	4b82      	ldr	r3, [pc, #520]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c1cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d00e      	beq.n	800c1f0 <rfalTransceiveRx+0xd0>
            {
                if( rfalTimerisExpired( gRFAL.tmr.FWT ) )  
 800c1d2:	4b80      	ldr	r3, [pc, #512]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c1d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7f6 fa90 	bl	80026fc <timerIsExpired>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d006      	beq.n	800c1f0 <rfalTransceiveRx+0xd0>
                {
                    gRFAL.TxRx.status = ERR_TIMEOUT;
 800c1e2:	4b7c      	ldr	r3, [pc, #496]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c1e4:	2204      	movs	r2, #4
 800c1e6:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800c1e8:	4b7a      	ldr	r3, [pc, #488]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c1ea:	225a      	movs	r2, #90	; 0x5a
 800c1ec:	751a      	strb	r2, [r3, #20]
                    break;
 800c1ee:	e2d8      	b.n	800c7a2 <rfalTransceiveRx+0x682>
                }
            }
            
            /*******************************************************************************/
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_RXS | ST25R3911_IRQ_MASK_NRE | ST25R3911_IRQ_MASK_EOF | ST25R3911_IRQ_MASK_RXE) );
 800c1f0:	f644 0030 	movw	r0, #18480	; 0x4830
 800c1f4:	f7f6 f9f2 	bl	80025dc <st25r3911GetInterrupt>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	f000 82c6 	beq.w	800c790 <rfalTransceiveRx+0x670>
            /* NRE interrupt may be triggered twice                                        */
            /* Ignore NRE if is detected together with no Rx Start                         */
            /*******************************************************************************/
            
            /* Only raise Timeout if NRE is detected with no Rx Start (NRT EMV mode)       */
            if( ((irqs & ST25R3911_IRQ_MASK_NRE) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXS) == 0U) )
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d00b      	beq.n	800c226 <rfalTransceiveRx+0x106>
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	f003 0320 	and.w	r3, r3, #32
 800c214:	2b00      	cmp	r3, #0
 800c216:	d106      	bne.n	800c226 <rfalTransceiveRx+0x106>
            {
                gRFAL.TxRx.status = ERR_TIMEOUT;
 800c218:	4b6e      	ldr	r3, [pc, #440]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c21a:	2204      	movs	r2, #4
 800c21c:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800c21e:	4b6d      	ldr	r3, [pc, #436]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c220:	225a      	movs	r2, #90	; 0x5a
 800c222:	751a      	strb	r2, [r3, #20]
                break;
 800c224:	e2bd      	b.n	800c7a2 <rfalTransceiveRx+0x682>
            }
            
            /* Only raise Link Loss if EOF is detected with no Rx Start */
            if( ((irqs & ST25R3911_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXS) == 0U) )
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d015      	beq.n	800c25c <rfalTransceiveRx+0x13c>
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	f003 0320 	and.w	r3, r3, #32
 800c236:	2b00      	cmp	r3, #0
 800c238:	d110      	bne.n	800c25c <rfalTransceiveRx+0x13c>
            {
                /* In AP2P a Field On has already occurred - treat this as timeout | mute */
                gRFAL.TxRx.status = ( rfalIsModeActiveComm( gRFAL.mode ) ? ERR_TIMEOUT : ERR_LINK_LOSS );
 800c23a:	4b66      	ldr	r3, [pc, #408]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c23c:	785b      	ldrb	r3, [r3, #1]
 800c23e:	2b09      	cmp	r3, #9
 800c240:	d003      	beq.n	800c24a <rfalTransceiveRx+0x12a>
 800c242:	4b64      	ldr	r3, [pc, #400]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c244:	785b      	ldrb	r3, [r3, #1]
 800c246:	2b0d      	cmp	r3, #13
 800c248:	d101      	bne.n	800c24e <rfalTransceiveRx+0x12e>
 800c24a:	2204      	movs	r2, #4
 800c24c:	e000      	b.n	800c250 <rfalTransceiveRx+0x130>
 800c24e:	2225      	movs	r2, #37	; 0x25
 800c250:	4b60      	ldr	r3, [pc, #384]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c252:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800c254:	4b5f      	ldr	r3, [pc, #380]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c256:	225a      	movs	r2, #90	; 0x5a
 800c258:	751a      	strb	r2, [r3, #20]
                break;
 800c25a:	e2a2      	b.n	800c7a2 <rfalTransceiveRx+0x682>
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_RXS) != 0U )
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	f003 0320 	and.w	r3, r3, #32
 800c262:	2b00      	cmp	r3, #0
 800c264:	d015      	beq.n	800c292 <rfalTransceiveRx+0x172>
            {
                /* If we got RXS + RXE together, jump directly into RFAL_TXRX_STATE_RX_ERR_CHECK */
                if( (irqs & ST25R3911_IRQ_MASK_RXE) != 0U )
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	f003 0310 	and.w	r3, r3, #16
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d006      	beq.n	800c27e <rfalTransceiveRx+0x15e>
                {
                    gRFAL.TxRx.rxse  = true;
 800c270:	4b58      	ldr	r3, [pc, #352]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c272:	2201      	movs	r2, #1
 800c274:	761a      	strb	r2, [r3, #24]
                    gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 800c276:	4b57      	ldr	r3, [pc, #348]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c278:	2256      	movs	r2, #86	; 0x56
 800c27a:	751a      	strb	r2, [r3, #20]
                    break;
 800c27c:	e291      	b.n	800c7a2 <rfalTransceiveRx+0x682>
                {
                    /*******************************************************************************/
                    /* REMARK: Silicon workaround ST25R3911 Errata #1.1                            */
                    /* Rarely on corrupted frames I_rxs gets signaled but I_rxe is not signaled    */
                    /* Use a SW timer to handle an eventual missing RXE                            */
                    rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 800c27e:	200a      	movs	r0, #10
 800c280:	f7f6 fa2e 	bl	80026e0 <timerCalculateTimer>
 800c284:	4602      	mov	r2, r0
 800c286:	4b53      	ldr	r3, [pc, #332]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c288:	649a      	str	r2, [r3, #72]	; 0x48
                    /*******************************************************************************/
                    
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800c28a:	4b52      	ldr	r3, [pc, #328]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c28c:	2254      	movs	r2, #84	; 0x54
 800c28e:	751a      	strb	r2, [r3, #20]
 800c290:	e014      	b.n	800c2bc <rfalTransceiveRx+0x19c>
                }
            }
            else if( (irqs & ST25R3911_IRQ_MASK_RXE) != 0U )
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	f003 0310 	and.w	r3, r3, #16
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d008      	beq.n	800c2ae <rfalTransceiveRx+0x18e>
                /* REMARK: Silicon workaround ST25R3911 Errata #1.9                            */
                /* ST25R3911 may indicate RXE without RXS previously, this happens upon some   */
                /* noise or incomplete byte frames with less than 4 bits                       */
                /*******************************************************************************/
                
                gRFAL.TxRx.status = ERR_IO;
 800c29c:	4b4d      	ldr	r3, [pc, #308]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c29e:	2203      	movs	r2, #3
 800c2a0:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800c2a2:	4b4c      	ldr	r3, [pc, #304]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c2a4:	225a      	movs	r2, #90	; 0x5a
 800c2a6:	751a      	strb	r2, [r3, #20]
                
                rfalErrorHandling();
 800c2a8:	f7ff fbbc 	bl	800ba24 <rfalErrorHandling>
                break;
 800c2ac:	e279      	b.n	800c7a2 <rfalTransceiveRx+0x682>
            }
            else
            {
               gRFAL.TxRx.status = ERR_IO;
 800c2ae:	4b49      	ldr	r3, [pc, #292]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c2b0:	2203      	movs	r2, #3
 800c2b2:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800c2b4:	4b47      	ldr	r3, [pc, #284]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c2b6:	225a      	movs	r2, #90	; 0x5a
 800c2b8:	751a      	strb	r2, [r3, #20]
               break;
 800c2ba:	e272      	b.n	800c7a2 <rfalTransceiveRx+0x682>
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_RXE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_RXE | ST25R3911_IRQ_MASK_FWL | ST25R3911_IRQ_MASK_EOF) );
 800c2bc:	f44f 6005 	mov.w	r0, #2128	; 0x850
 800c2c0:	f7f6 f98c 	bl	80025dc <st25r3911GetInterrupt>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d10f      	bne.n	800c2ee <rfalTransceiveRx+0x1ce>
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3911B Errata #1.1                           */
                /* ST25R3911 may indicate RXS without RXE afterwards, this happens rarely on   */
                /* corrupted frames.                                                           */
                /* SW timer is used to timeout upon a missing RXE                              */
                if( rfalTimerisExpired( gRFAL.tmr.RXE ) )
 800c2ce:	4b41      	ldr	r3, [pc, #260]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c2d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7f6 fa12 	bl	80026fc <timerIsExpired>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	f000 825a 	beq.w	800c794 <rfalTransceiveRx+0x674>
                {
                    gRFAL.TxRx.status = ERR_FRAMING;
 800c2e0:	4b3c      	ldr	r3, [pc, #240]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c2e2:	2209      	movs	r2, #9
 800c2e4:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800c2e6:	4b3b      	ldr	r3, [pc, #236]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c2e8:	225a      	movs	r2, #90	; 0x5a
 800c2ea:	751a      	strb	r2, [r3, #20]
                }
                /*******************************************************************************/
                    
                break;  /* No interrupt to process */
 800c2ec:	e252      	b.n	800c794 <rfalTransceiveRx+0x674>
            }
            
            if( ((irqs & ST25R3911_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXE) == 0U) )
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d008      	beq.n	800c30a <rfalTransceiveRx+0x1ea>
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	f003 0310 	and.w	r3, r3, #16
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d103      	bne.n	800c30a <rfalTransceiveRx+0x1ea>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_FIFO;
 800c302:	4b34      	ldr	r3, [pc, #208]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c304:	2255      	movs	r2, #85	; 0x55
 800c306:	751a      	strb	r2, [r3, #20]
                break;
 800c308:	e24b      	b.n	800c7a2 <rfalTransceiveRx+0x682>
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 800c30a:	4b32      	ldr	r3, [pc, #200]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c30c:	2256      	movs	r2, #86	; 0x56
 800c30e:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_ERR_CHECK:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
        
            /* Retrieve and check for any error irqs */
            irqs |= st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_CRC | ST25R3911_IRQ_MASK_PAR | ST25R3911_IRQ_MASK_ERR1 | ST25R3911_IRQ_MASK_ERR2 | ST25R3911_IRQ_MASK_COL) );
 800c310:	4831      	ldr	r0, [pc, #196]	; (800c3d8 <rfalTransceiveRx+0x2b8>)
 800c312:	f7f6 f963 	bl	80025dc <st25r3911GetInterrupt>
 800c316:	4602      	mov	r2, r0
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	4313      	orrs	r3, r2
 800c31c:	60bb      	str	r3, [r7, #8]
        
            if( (irqs & ST25R3911_IRQ_MASK_ERR1) != 0U )
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c324:	2b00      	cmp	r3, #0
 800c326:	d008      	beq.n	800c33a <rfalTransceiveRx+0x21a>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 800c328:	4b2a      	ldr	r3, [pc, #168]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c32a:	2209      	movs	r2, #9
 800c32c:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800c32e:	4b29      	ldr	r3, [pc, #164]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c330:	2257      	movs	r2, #87	; 0x57
 800c332:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800c334:	f7ff fb76 	bl	800ba24 <rfalErrorHandling>
                break;
 800c338:	e233      	b.n	800c7a2 <rfalTransceiveRx+0x682>
            }
            /* Discard Soft Framing errors if not in EMVCo error handling */
            else if( ((irqs & ST25R3911_IRQ_MASK_ERR2) != 0U) && (gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO) )
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c340:	2b00      	cmp	r3, #0
 800c342:	d00c      	beq.n	800c35e <rfalTransceiveRx+0x23e>
 800c344:	4b23      	ldr	r3, [pc, #140]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c346:	79db      	ldrb	r3, [r3, #7]
 800c348:	2b02      	cmp	r3, #2
 800c34a:	d108      	bne.n	800c35e <rfalTransceiveRx+0x23e>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 800c34c:	4b21      	ldr	r3, [pc, #132]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c34e:	2209      	movs	r2, #9
 800c350:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800c352:	4b20      	ldr	r3, [pc, #128]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c354:	2257      	movs	r2, #87	; 0x57
 800c356:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800c358:	f7ff fb64 	bl	800ba24 <rfalErrorHandling>
                break;
 800c35c:	e221      	b.n	800c7a2 <rfalTransceiveRx+0x682>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_PAR) != 0U )
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c364:	2b00      	cmp	r3, #0
 800c366:	d008      	beq.n	800c37a <rfalTransceiveRx+0x25a>
            {
                gRFAL.TxRx.status = ERR_PAR;
 800c368:	4b1a      	ldr	r3, [pc, #104]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c36a:	221b      	movs	r2, #27
 800c36c:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800c36e:	4b19      	ldr	r3, [pc, #100]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c370:	2257      	movs	r2, #87	; 0x57
 800c372:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800c374:	f7ff fb56 	bl	800ba24 <rfalErrorHandling>
                break;
 800c378:	e213      	b.n	800c7a2 <rfalTransceiveRx+0x682>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_CRC) != 0U )
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c380:	2b00      	cmp	r3, #0
 800c382:	d008      	beq.n	800c396 <rfalTransceiveRx+0x276>
            {
                gRFAL.TxRx.status = ERR_CRC;
 800c384:	4b13      	ldr	r3, [pc, #76]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c386:	2215      	movs	r2, #21
 800c388:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800c38a:	4b12      	ldr	r3, [pc, #72]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c38c:	2257      	movs	r2, #87	; 0x57
 800c38e:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800c390:	f7ff fb48 	bl	800ba24 <rfalErrorHandling>
                break;
 800c394:	e205      	b.n	800c7a2 <rfalTransceiveRx+0x682>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_COL) != 0U )
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	f003 0304 	and.w	r3, r3, #4
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d008      	beq.n	800c3b2 <rfalTransceiveRx+0x292>
            {
                gRFAL.TxRx.status = ERR_RF_COLLISION;
 800c3a0:	4b0c      	ldr	r3, [pc, #48]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c3a2:	221d      	movs	r2, #29
 800c3a4:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800c3a6:	4b0b      	ldr	r3, [pc, #44]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c3a8:	2257      	movs	r2, #87	; 0x57
 800c3aa:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800c3ac:	f7ff fb3a 	bl	800ba24 <rfalErrorHandling>
                break;
 800c3b0:	e1f7      	b.n	800c7a2 <rfalTransceiveRx+0x682>
            }
            else if( ((irqs & ST25R3911_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXE) == 0U) )
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d00f      	beq.n	800c3dc <rfalTransceiveRx+0x2bc>
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	f003 0310 	and.w	r3, r3, #16
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d10a      	bne.n	800c3dc <rfalTransceiveRx+0x2bc>
            {
                 gRFAL.TxRx.status = ERR_LINK_LOSS;
 800c3c6:	4b03      	ldr	r3, [pc, #12]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c3c8:	2225      	movs	r2, #37	; 0x25
 800c3ca:	82da      	strh	r2, [r3, #22]
                 gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800c3cc:	4b01      	ldr	r3, [pc, #4]	; (800c3d4 <rfalTransceiveRx+0x2b4>)
 800c3ce:	225a      	movs	r2, #90	; 0x5a
 800c3d0:	751a      	strb	r2, [r3, #20]
                 break;
 800c3d2:	e1e6      	b.n	800c7a2 <rfalTransceiveRx+0x682>
 800c3d4:	20000a54 	.word	0x20000a54
 800c3d8:	00f00004 	.word	0x00f00004
            }
            else if( ((irqs & ST25R3911_IRQ_MASK_RXE) != 0U) || (gRFAL.TxRx.rxse) )
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	f003 0310 	and.w	r3, r3, #16
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d103      	bne.n	800c3ee <rfalTransceiveRx+0x2ce>
 800c3e6:	4b94      	ldr	r3, [pc, #592]	; (800c638 <rfalTransceiveRx+0x518>)
 800c3e8:	7e1b      	ldrb	r3, [r3, #24]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d014      	beq.n	800c418 <rfalTransceiveRx+0x2f8>
            {
                /* Reception ended without any error indication,                  *
                 * check FIFO status for malformed or incomplete frames           */
                
                /* Check if the reception ends with an incomplete byte (residual bits) */
                if( rfalFIFOStatusIsIncompleteByte() )
 800c3ee:	f000 fa0b 	bl	800c808 <rfalFIFOStatusIsIncompleteByte>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d003      	beq.n	800c400 <rfalTransceiveRx+0x2e0>
                {
                   gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 800c3f8:	4b8f      	ldr	r3, [pc, #572]	; (800c638 <rfalTransceiveRx+0x518>)
 800c3fa:	2228      	movs	r2, #40	; 0x28
 800c3fc:	82da      	strh	r2, [r3, #22]
 800c3fe:	e007      	b.n	800c410 <rfalTransceiveRx+0x2f0>
                }
                /* Check if the reception ends with missing parity bit */
                else if( rfalFIFOStatusIsMissingPar() )
 800c400:	f000 fa14 	bl	800c82c <rfalFIFOStatusIsMissingPar>
 800c404:	4603      	mov	r3, r0
 800c406:	2b00      	cmp	r3, #0
 800c408:	d002      	beq.n	800c410 <rfalTransceiveRx+0x2f0>
                {
                   gRFAL.TxRx.status = ERR_FRAMING;
 800c40a:	4b8b      	ldr	r3, [pc, #556]	; (800c638 <rfalTransceiveRx+0x518>)
 800c40c:	2209      	movs	r2, #9
 800c40e:	82da      	strh	r2, [r3, #22]
                else
                {
                    /* MISRA 15.7 - Empty else */
                }
                
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_DATA;
 800c410:	4b89      	ldr	r3, [pc, #548]	; (800c638 <rfalTransceiveRx+0x518>)
 800c412:	2257      	movs	r2, #87	; 0x57
 800c414:	751a      	strb	r2, [r3, #20]
 800c416:	e006      	b.n	800c426 <rfalTransceiveRx+0x306>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 800c418:	4b87      	ldr	r3, [pc, #540]	; (800c638 <rfalTransceiveRx+0x518>)
 800c41a:	2203      	movs	r2, #3
 800c41c:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800c41e:	4b86      	ldr	r3, [pc, #536]	; (800c638 <rfalTransceiveRx+0x518>)
 800c420:	225a      	movs	r2, #90	; 0x5a
 800c422:	751a      	strb	r2, [r3, #20]
                break;
 800c424:	e1bd      	b.n	800c7a2 <rfalTransceiveRx+0x682>
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_READ_DATA:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
                        
            tmp = rfalFIFOStatusGetNumBytes();
 800c426:	f000 f9e3 	bl	800c7f0 <rfalFIFOStatusGetNumBytes>
 800c42a:	4603      	mov	r3, r0
 800c42c:	73fb      	strb	r3, [r7, #15]
                        
            /*******************************************************************************/
            /* Check if CRC should not be placed in rxBuf                                  */
            if( ((gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP) == 0U) )
 800c42e:	4b82      	ldr	r3, [pc, #520]	; (800c638 <rfalTransceiveRx+0x518>)
 800c430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c432:	f003 0302 	and.w	r3, r3, #2
 800c436:	2b00      	cmp	r3, #0
 800c438:	d11f      	bne.n	800c47a <rfalTransceiveRx+0x35a>
            {
                /* Check if CRC is being placed into the FIFO and if received frame was bigger than CRC */
                if( st25r3911IsCRCinFIFO() && ((gRFAL.fifo.bytesTotal + tmp) > 0U) )
 800c43a:	2240      	movs	r2, #64	; 0x40
 800c43c:	2140      	movs	r1, #64	; 0x40
 800c43e:	2009      	movs	r0, #9
 800c440:	f7f5 fa34 	bl	80018ac <st25r3911CheckReg>
 800c444:	4603      	mov	r3, r0
 800c446:	2b00      	cmp	r3, #0
 800c448:	d017      	beq.n	800c47a <rfalTransceiveRx+0x35a>
 800c44a:	4b7b      	ldr	r3, [pc, #492]	; (800c638 <rfalTransceiveRx+0x518>)
 800c44c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800c44e:	461a      	mov	r2, r3
 800c450:	7bfb      	ldrb	r3, [r7, #15]
 800c452:	4413      	add	r3, r2
 800c454:	2b00      	cmp	r3, #0
 800c456:	d010      	beq.n	800c47a <rfalTransceiveRx+0x35a>
                {
                    /* By default CRC will not be placed into the rxBuffer */
                    if( ( tmp > (uint8_t)RFAL_CRC_LEN) )  
 800c458:	7bfb      	ldrb	r3, [r7, #15]
 800c45a:	2b02      	cmp	r3, #2
 800c45c:	d903      	bls.n	800c466 <rfalTransceiveRx+0x346>
                    {
                        tmp -= (uint8_t)RFAL_CRC_LEN;
 800c45e:	7bfb      	ldrb	r3, [r7, #15]
 800c460:	3b02      	subs	r3, #2
 800c462:	73fb      	strb	r3, [r7, #15]
 800c464:	e009      	b.n	800c47a <rfalTransceiveRx+0x35a>
                    }
                    /* If the CRC was already placed into rxBuffer (due to WL interrupt where CRC was already in FIFO Read)
                     * cannot remove it from rxBuf. Can only remove it from rxBufLen not indicate the presence of CRC    */ 
                    else if(gRFAL.fifo.bytesTotal > (uint16_t)RFAL_CRC_LEN)                       
 800c466:	4b74      	ldr	r3, [pc, #464]	; (800c638 <rfalTransceiveRx+0x518>)
 800c468:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800c46a:	2b02      	cmp	r3, #2
 800c46c:	d905      	bls.n	800c47a <rfalTransceiveRx+0x35a>
                    {                        
                        gRFAL.fifo.bytesTotal -= (uint16_t)RFAL_CRC_LEN;
 800c46e:	4b72      	ldr	r3, [pc, #456]	; (800c638 <rfalTransceiveRx+0x518>)
 800c470:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800c472:	3b02      	subs	r3, #2
 800c474:	b29a      	uxth	r2, r3
 800c476:	4b70      	ldr	r3, [pc, #448]	; (800c638 <rfalTransceiveRx+0x518>)
 800c478:	875a      	strh	r2, [r3, #58]	; 0x3a
                        /* MISRA 15.7 - Empty else */
                    }
                }
            }
            
            gRFAL.fifo.bytesTotal += tmp;                    /* add to total bytes counter */
 800c47a:	4b6f      	ldr	r3, [pc, #444]	; (800c638 <rfalTransceiveRx+0x518>)
 800c47c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800c47e:	7bfb      	ldrb	r3, [r7, #15]
 800c480:	b29b      	uxth	r3, r3
 800c482:	4413      	add	r3, r2
 800c484:	b29a      	uxth	r2, r3
 800c486:	4b6c      	ldr	r3, [pc, #432]	; (800c638 <rfalTransceiveRx+0x518>)
 800c488:	875a      	strh	r2, [r3, #58]	; 0x3a
            
            /*******************************************************************************/
            /* Check if remaining bytes fit on the rxBuf available                         */
            if( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) )
 800c48a:	4b6b      	ldr	r3, [pc, #428]	; (800c638 <rfalTransceiveRx+0x518>)
 800c48c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800c48e:	4b6a      	ldr	r3, [pc, #424]	; (800c638 <rfalTransceiveRx+0x518>)
 800c490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c492:	3307      	adds	r3, #7
 800c494:	08db      	lsrs	r3, r3, #3
 800c496:	b29b      	uxth	r3, r3
 800c498:	429a      	cmp	r2, r3
 800c49a:	d90f      	bls.n	800c4bc <rfalTransceiveRx+0x39c>
            {
                tmp = (uint8_t)( rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten);
 800c49c:	4b66      	ldr	r3, [pc, #408]	; (800c638 <rfalTransceiveRx+0x518>)
 800c49e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4a0:	3307      	adds	r3, #7
 800c4a2:	08db      	lsrs	r3, r3, #3
 800c4a4:	b2da      	uxtb	r2, r3
 800c4a6:	4b64      	ldr	r3, [pc, #400]	; (800c638 <rfalTransceiveRx+0x518>)
 800c4a8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	1ad3      	subs	r3, r2, r3
 800c4ae:	73fb      	strb	r3, [r7, #15]
                
                gRFAL.TxRx.status = ERR_NOMEM;
 800c4b0:	4b61      	ldr	r3, [pc, #388]	; (800c638 <rfalTransceiveRx+0x518>)
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800c4b6:	4b60      	ldr	r3, [pc, #384]	; (800c638 <rfalTransceiveRx+0x518>)
 800c4b8:	225a      	movs	r2, #90	; 0x5a
 800c4ba:	751a      	strb	r2, [r3, #20]
            }

            /*******************************************************************************/
            /* Retrieve remaining bytes from FIFO to rxBuf, and assign total length rcvd   */
            st25r3911ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], tmp);
 800c4bc:	4b5e      	ldr	r3, [pc, #376]	; (800c638 <rfalTransceiveRx+0x518>)
 800c4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4c0:	4a5d      	ldr	r2, [pc, #372]	; (800c638 <rfalTransceiveRx+0x518>)
 800c4c2:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 800c4c4:	4413      	add	r3, r2
 800c4c6:	7bfa      	ldrb	r2, [r7, #15]
 800c4c8:	4611      	mov	r1, r2
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7f5 fe56 	bl	800217c <st25r3911ReadFifo>
            if( (gRFAL.TxRx.ctx.rxRcvdLen != NULL) )
 800c4d0:	4b59      	ldr	r3, [pc, #356]	; (800c638 <rfalTransceiveRx+0x518>)
 800c4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d019      	beq.n	800c50c <rfalTransceiveRx+0x3ec>
            {
                (*gRFAL.TxRx.ctx.rxRcvdLen) = (uint16_t)rfalConvBytesToBits( gRFAL.fifo.bytesTotal );
 800c4d8:	4b57      	ldr	r3, [pc, #348]	; (800c638 <rfalTransceiveRx+0x518>)
 800c4da:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800c4dc:	4b56      	ldr	r3, [pc, #344]	; (800c638 <rfalTransceiveRx+0x518>)
 800c4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e0:	00d2      	lsls	r2, r2, #3
 800c4e2:	b292      	uxth	r2, r2
 800c4e4:	801a      	strh	r2, [r3, #0]
                if( rfalFIFOStatusIsIncompleteByte() )
 800c4e6:	f000 f98f 	bl	800c808 <rfalFIFOStatusIsIncompleteByte>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d00d      	beq.n	800c50c <rfalTransceiveRx+0x3ec>
                {
                    (*gRFAL.TxRx.ctx.rxRcvdLen) -= (RFAL_BITS_IN_BYTE - rfalFIFOGetNumIncompleteBits());
 800c4f0:	f000 f9ae 	bl	800c850 <rfalFIFOGetNumIncompleteBits>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	f1c3 0208 	rsb	r2, r3, #8
 800c4fa:	4b4f      	ldr	r3, [pc, #316]	; (800c638 <rfalTransceiveRx+0x518>)
 800c4fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4fe:	8819      	ldrh	r1, [r3, #0]
 800c500:	b292      	uxth	r2, r2
 800c502:	4b4d      	ldr	r3, [pc, #308]	; (800c638 <rfalTransceiveRx+0x518>)
 800c504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c506:	1a8a      	subs	r2, r1, r2
 800c508:	b292      	uxth	r2, r2
 800c50a:	801a      	strh	r2, [r3, #0]
            }
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* Decode sub bit stream into payload bits for NFCV, if no error found so far  */
            if( ((RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode)) && (gRFAL.TxRx.status == ERR_BUSY) )
 800c50c:	4b4a      	ldr	r3, [pc, #296]	; (800c638 <rfalTransceiveRx+0x518>)
 800c50e:	785b      	ldrb	r3, [r3, #1]
 800c510:	2b07      	cmp	r3, #7
 800c512:	d003      	beq.n	800c51c <rfalTransceiveRx+0x3fc>
 800c514:	4b48      	ldr	r3, [pc, #288]	; (800c638 <rfalTransceiveRx+0x518>)
 800c516:	785b      	ldrb	r3, [r3, #1]
 800c518:	2b08      	cmp	r3, #8
 800c51a:	d165      	bne.n	800c5e8 <rfalTransceiveRx+0x4c8>
 800c51c:	4b46      	ldr	r3, [pc, #280]	; (800c638 <rfalTransceiveRx+0x518>)
 800c51e:	8adb      	ldrh	r3, [r3, #22]
 800c520:	2b02      	cmp	r3, #2
 800c522:	d161      	bne.n	800c5e8 <rfalTransceiveRx+0x4c8>
            {
                ReturnCode ret;
                uint16_t offset = 0;
 800c524:	2300      	movs	r3, #0
 800c526:	80fb      	strh	r3, [r7, #6]

                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800c528:	4b43      	ldr	r3, [pc, #268]	; (800c638 <rfalTransceiveRx+0x518>)
 800c52a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c52c:	4b42      	ldr	r3, [pc, #264]	; (800c638 <rfalTransceiveRx+0x518>)
 800c52e:	8f5c      	ldrh	r4, [r3, #58]	; 0x3a
 800c530:	4b41      	ldr	r3, [pc, #260]	; (800c638 <rfalTransceiveRx+0x518>)
 800c532:	f8d3 53c0 	ldr.w	r5, [r3, #960]	; 0x3c0
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) );
 800c536:	4b40      	ldr	r3, [pc, #256]	; (800c638 <rfalTransceiveRx+0x518>)
 800c538:	f8b3 33c4 	ldrh.w	r3, [r3, #964]	; 0x3c4
 800c53c:	3307      	adds	r3, #7
 800c53e:	08db      	lsrs	r3, r3, #3
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800c540:	b29e      	uxth	r6, r3
 800c542:	4b3d      	ldr	r3, [pc, #244]	; (800c638 <rfalTransceiveRx+0x518>)
 800c544:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c548:	4a3b      	ldr	r2, [pc, #236]	; (800c638 <rfalTransceiveRx+0x518>)
 800c54a:	f8b2 23d4 	ldrh.w	r2, [r2, #980]	; 0x3d4
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) );
 800c54e:	493a      	ldr	r1, [pc, #232]	; (800c638 <rfalTransceiveRx+0x518>)
 800c550:	7849      	ldrb	r1, [r1, #1]
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800c552:	2908      	cmp	r1, #8
 800c554:	bf0c      	ite	eq
 800c556:	2101      	moveq	r1, #1
 800c558:	2100      	movne	r1, #0
 800c55a:	b2c9      	uxtb	r1, r1
 800c55c:	9103      	str	r1, [sp, #12]
 800c55e:	9202      	str	r2, [sp, #8]
 800c560:	9301      	str	r3, [sp, #4]
 800c562:	1dbb      	adds	r3, r7, #6
 800c564:	9300      	str	r3, [sp, #0]
 800c566:	4633      	mov	r3, r6
 800c568:	462a      	mov	r2, r5
 800c56a:	4621      	mov	r1, r4
 800c56c:	f7f8 fb20 	bl	8004bb0 <iso15693VICCDecode>
 800c570:	4603      	mov	r3, r0
 800c572:	81bb      	strh	r3, [r7, #12]

                if( ((ERR_NONE == ret) || (ERR_CRC == ret))
 800c574:	89bb      	ldrh	r3, [r7, #12]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d002      	beq.n	800c580 <rfalTransceiveRx+0x460>
 800c57a:	89bb      	ldrh	r3, [r7, #12]
 800c57c:	2b15      	cmp	r3, #21
 800c57e:	d11f      	bne.n	800c5c0 <rfalTransceiveRx+0x4a0>
                     && (((uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP & gRFAL.nfcvData.origCtx.flags) == 0U)
 800c580:	4b2d      	ldr	r3, [pc, #180]	; (800c638 <rfalTransceiveRx+0x518>)
 800c582:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800c586:	f003 0302 	and.w	r3, r3, #2
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d118      	bne.n	800c5c0 <rfalTransceiveRx+0x4a0>
                     &&  ((*gRFAL.nfcvData.origCtx.rxRcvdLen % RFAL_BITS_IN_BYTE) == 0U)
 800c58e:	4b2a      	ldr	r3, [pc, #168]	; (800c638 <rfalTransceiveRx+0x518>)
 800c590:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c594:	881b      	ldrh	r3, [r3, #0]
 800c596:	f003 0307 	and.w	r3, r3, #7
 800c59a:	b29b      	uxth	r3, r3
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d10f      	bne.n	800c5c0 <rfalTransceiveRx+0x4a0>
                     &&  (*gRFAL.nfcvData.origCtx.rxRcvdLen >= rfalConvBytesToBits(RFAL_CRC_LEN) )
 800c5a0:	4b25      	ldr	r3, [pc, #148]	; (800c638 <rfalTransceiveRx+0x518>)
 800c5a2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c5a6:	881b      	ldrh	r3, [r3, #0]
 800c5a8:	2b0f      	cmp	r3, #15
 800c5aa:	d909      	bls.n	800c5c0 <rfalTransceiveRx+0x4a0>
                   )
                {
                   *gRFAL.nfcvData.origCtx.rxRcvdLen -= (uint16_t)rfalConvBytesToBits(RFAL_CRC_LEN); /* Remove CRC */
 800c5ac:	4b22      	ldr	r3, [pc, #136]	; (800c638 <rfalTransceiveRx+0x518>)
 800c5ae:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c5b2:	881a      	ldrh	r2, [r3, #0]
 800c5b4:	4b20      	ldr	r3, [pc, #128]	; (800c638 <rfalTransceiveRx+0x518>)
 800c5b6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c5ba:	3a10      	subs	r2, #16
 800c5bc:	b292      	uxth	r2, r2
 800c5be:	801a      	strh	r2, [r3, #0]
                }
                
                /* Restore original ctx */
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 800c5c0:	4a1d      	ldr	r2, [pc, #116]	; (800c638 <rfalTransceiveRx+0x518>)
 800c5c2:	4b1d      	ldr	r3, [pc, #116]	; (800c638 <rfalTransceiveRx+0x518>)
 800c5c4:	f102 041c 	add.w	r4, r2, #28
 800c5c8:	f503 756e 	add.w	r5, r3, #952	; 0x3b8
 800c5cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c5ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c5d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c5d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                gRFAL.TxRx.status = ((ret != ERR_NONE) ? ret : ERR_BUSY);
 800c5d8:	89bb      	ldrh	r3, [r7, #12]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d001      	beq.n	800c5e2 <rfalTransceiveRx+0x4c2>
 800c5de:	89bb      	ldrh	r3, [r7, #12]
 800c5e0:	e000      	b.n	800c5e4 <rfalTransceiveRx+0x4c4>
 800c5e2:	2302      	movs	r3, #2
 800c5e4:	4a14      	ldr	r2, [pc, #80]	; (800c638 <rfalTransceiveRx+0x518>)
 800c5e6:	82d3      	strh	r3, [r2, #22]
            }
        #endif /* RFAL_FEATURE_NFCV */
            
            /*******************************************************************************/
            /* If an error as been marked/detected don't fall into to RX_DONE  */
            if( gRFAL.TxRx.status != ERR_BUSY )
 800c5e8:	4b13      	ldr	r3, [pc, #76]	; (800c638 <rfalTransceiveRx+0x518>)
 800c5ea:	8adb      	ldrh	r3, [r3, #22]
 800c5ec:	2b02      	cmp	r3, #2
 800c5ee:	d003      	beq.n	800c5f8 <rfalTransceiveRx+0x4d8>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_FAIL;
 800c5f0:	4b11      	ldr	r3, [pc, #68]	; (800c638 <rfalTransceiveRx+0x518>)
 800c5f2:	225a      	movs	r2, #90	; 0x5a
 800c5f4:	751a      	strb	r2, [r3, #20]
                break;
 800c5f6:	e0d4      	b.n	800c7a2 <rfalTransceiveRx+0x682>
            }
            
            if( rfalIsModeActiveComm( gRFAL.mode ) )
 800c5f8:	4b0f      	ldr	r3, [pc, #60]	; (800c638 <rfalTransceiveRx+0x518>)
 800c5fa:	785b      	ldrb	r3, [r3, #1]
 800c5fc:	2b09      	cmp	r3, #9
 800c5fe:	d003      	beq.n	800c608 <rfalTransceiveRx+0x4e8>
 800c600:	4b0d      	ldr	r3, [pc, #52]	; (800c638 <rfalTransceiveRx+0x518>)
 800c602:	785b      	ldrb	r3, [r3, #1]
 800c604:	2b0d      	cmp	r3, #13
 800c606:	d103      	bne.n	800c610 <rfalTransceiveRx+0x4f0>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_EOF;
 800c608:	4b0b      	ldr	r3, [pc, #44]	; (800c638 <rfalTransceiveRx+0x518>)
 800c60a:	2258      	movs	r2, #88	; 0x58
 800c60c:	751a      	strb	r2, [r3, #20]
                break;
 800c60e:	e0c8      	b.n	800c7a2 <rfalTransceiveRx+0x682>
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 800c610:	4b09      	ldr	r3, [pc, #36]	; (800c638 <rfalTransceiveRx+0x518>)
 800c612:	2259      	movs	r2, #89	; 0x59
 800c614:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800c616:	4b08      	ldr	r3, [pc, #32]	; (800c638 <rfalTransceiveRx+0x518>)
 800c618:	799b      	ldrb	r3, [r3, #6]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d003      	beq.n	800c626 <rfalTransceiveRx+0x506>
 800c61e:	2100      	movs	r1, #0
 800c620:	2001      	movs	r0, #1
 800c622:	f7f5 fc2b 	bl	8001e7c <st25r3911WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800c626:	f7ff fa83 	bl	800bb30 <rfalCleanupTransceive>

            
            gRFAL.TxRx.status = ERR_NONE;
 800c62a:	4b03      	ldr	r3, [pc, #12]	; (800c638 <rfalTransceiveRx+0x518>)
 800c62c:	2200      	movs	r2, #0
 800c62e:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_IDLE;
 800c630:	4b01      	ldr	r3, [pc, #4]	; (800c638 <rfalTransceiveRx+0x518>)
 800c632:	2200      	movs	r2, #0
 800c634:	751a      	strb	r2, [r3, #20]
            break;
 800c636:	e0b4      	b.n	800c7a2 <rfalTransceiveRx+0x682>
 800c638:	20000a54 	.word	0x20000a54
            /*******************************************************************************/
            /* REMARK: Silicon workaround ST25R3911B Errata #1.1                           */
            /* ST25R3911 may indicate RXS without RXE afterwards, this happens rarely on   */
            /* corrupted frames.                                                           */
            /* Re-Start SW timer to handle an eventual missing RXE                         */
            rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 800c63c:	200a      	movs	r0, #10
 800c63e:	f7f6 f84f 	bl	80026e0 <timerCalculateTimer>
 800c642:	4602      	mov	r2, r0
 800c644:	4b59      	ldr	r3, [pc, #356]	; (800c7ac <rfalTransceiveRx+0x68c>)
 800c646:	649a      	str	r2, [r3, #72]	; 0x48
            /*******************************************************************************/        
                    
        
            tmp = rfalFIFOStatusGetNumBytes();
 800c648:	f000 f8d2 	bl	800c7f0 <rfalFIFOStatusGetNumBytes>
 800c64c:	4603      	mov	r3, r0
 800c64e:	73fb      	strb	r3, [r7, #15]
            gRFAL.fifo.bytesTotal += tmp;
 800c650:	4b56      	ldr	r3, [pc, #344]	; (800c7ac <rfalTransceiveRx+0x68c>)
 800c652:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800c654:	7bfb      	ldrb	r3, [r7, #15]
 800c656:	b29b      	uxth	r3, r3
 800c658:	4413      	add	r3, r2
 800c65a:	b29a      	uxth	r2, r3
 800c65c:	4b53      	ldr	r3, [pc, #332]	; (800c7ac <rfalTransceiveRx+0x68c>)
 800c65e:	875a      	strh	r2, [r3, #58]	; 0x3a
            
            /*******************************************************************************/
            /* Calculate the amount of bytes that still fits in rxBuf                      */
            aux = (uint8_t)(( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 800c660:	4b52      	ldr	r3, [pc, #328]	; (800c7ac <rfalTransceiveRx+0x68c>)
 800c662:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800c664:	4b51      	ldr	r3, [pc, #324]	; (800c7ac <rfalTransceiveRx+0x68c>)
 800c666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c668:	3307      	adds	r3, #7
 800c66a:	08db      	lsrs	r3, r3, #3
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	429a      	cmp	r2, r3
 800c670:	d90a      	bls.n	800c688 <rfalTransceiveRx+0x568>
 800c672:	4b4e      	ldr	r3, [pc, #312]	; (800c7ac <rfalTransceiveRx+0x68c>)
 800c674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c676:	3307      	adds	r3, #7
 800c678:	08db      	lsrs	r3, r3, #3
 800c67a:	b2da      	uxtb	r2, r3
 800c67c:	4b4b      	ldr	r3, [pc, #300]	; (800c7ac <rfalTransceiveRx+0x68c>)
 800c67e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c680:	b2db      	uxtb	r3, r3
 800c682:	1ad3      	subs	r3, r2, r3
 800c684:	b2db      	uxtb	r3, r3
 800c686:	e000      	b.n	800c68a <rfalTransceiveRx+0x56a>
 800c688:	7bfb      	ldrb	r3, [r7, #15]
 800c68a:	73bb      	strb	r3, [r7, #14]
            
            /*******************************************************************************/
            /* Retrieve incoming bytes from FIFO to rxBuf, and store already read amount   */
            st25r3911ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], aux);
 800c68c:	4b47      	ldr	r3, [pc, #284]	; (800c7ac <rfalTransceiveRx+0x68c>)
 800c68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c690:	4a46      	ldr	r2, [pc, #280]	; (800c7ac <rfalTransceiveRx+0x68c>)
 800c692:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 800c694:	4413      	add	r3, r2
 800c696:	7bba      	ldrb	r2, [r7, #14]
 800c698:	4611      	mov	r1, r2
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7f5 fd6e 	bl	800217c <st25r3911ReadFifo>
            gRFAL.fifo.bytesWritten += aux;
 800c6a0:	4b42      	ldr	r3, [pc, #264]	; (800c7ac <rfalTransceiveRx+0x68c>)
 800c6a2:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800c6a4:	7bbb      	ldrb	r3, [r7, #14]
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	4413      	add	r3, r2
 800c6aa:	b29a      	uxth	r2, r3
 800c6ac:	4b3f      	ldr	r3, [pc, #252]	; (800c7ac <rfalTransceiveRx+0x68c>)
 800c6ae:	879a      	strh	r2, [r3, #60]	; 0x3c
            
            /*******************************************************************************/
            /* If the bytes already read were not the full FIFO WL, dump the remaining     *
             * FIFO so that ST25R391x can continue with reception                          */
            if( aux < tmp )
 800c6b0:	7bba      	ldrb	r2, [r7, #14]
 800c6b2:	7bfb      	ldrb	r3, [r7, #15]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d207      	bcs.n	800c6c8 <rfalTransceiveRx+0x5a8>
            {
                st25r3911ReadFifo( NULL, (tmp - aux) );
 800c6b8:	7bfa      	ldrb	r2, [r7, #15]
 800c6ba:	7bbb      	ldrb	r3, [r7, #14]
 800c6bc:	1ad3      	subs	r3, r2, r3
 800c6be:	b2db      	uxtb	r3, r3
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	2000      	movs	r0, #0
 800c6c4:	f7f5 fd5a 	bl	800217c <st25r3911ReadFifo>
            }
            
            rfalFIFOStatusClear();
 800c6c8:	f000 f884 	bl	800c7d4 <rfalFIFOStatusClear>
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800c6cc:	4b37      	ldr	r3, [pc, #220]	; (800c7ac <rfalTransceiveRx+0x68c>)
 800c6ce:	2254      	movs	r2, #84	; 0x54
 800c6d0:	751a      	strb	r2, [r3, #20]
            break;
 800c6d2:	e066      	b.n	800c7a2 <rfalTransceiveRx+0x682>
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_FAIL:
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800c6d4:	4b35      	ldr	r3, [pc, #212]	; (800c7ac <rfalTransceiveRx+0x68c>)
 800c6d6:	799b      	ldrb	r3, [r3, #6]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d003      	beq.n	800c6e4 <rfalTransceiveRx+0x5c4>
 800c6dc:	2100      	movs	r1, #0
 800c6de:	2001      	movs	r0, #1
 800c6e0:	f7f5 fbcc 	bl	8001e7c <st25r3911WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800c6e4:	f7ff fa24 	bl	800bb30 <rfalCleanupTransceive>
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 800c6e8:	4b30      	ldr	r3, [pc, #192]	; (800c7ac <rfalTransceiveRx+0x68c>)
 800c6ea:	8adb      	ldrh	r3, [r3, #22]
 800c6ec:	2b02      	cmp	r3, #2
 800c6ee:	d102      	bne.n	800c6f6 <rfalTransceiveRx+0x5d6>
            {                
                gRFAL.TxRx.status = ERR_SYSTEM;
 800c6f0:	4b2e      	ldr	r3, [pc, #184]	; (800c7ac <rfalTransceiveRx+0x68c>)
 800c6f2:	2208      	movs	r2, #8
 800c6f4:	82da      	strh	r2, [r3, #22]
            }
             
            /*rfalLogD( "RFAL: curSt: %d  Error: %d \r\n", gRFAL.TxRx.state, gRFAL.TxRx.status );*/
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 800c6f6:	4b2d      	ldr	r3, [pc, #180]	; (800c7ac <rfalTransceiveRx+0x68c>)
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	751a      	strb	r2, [r3, #20]
            break;
 800c6fc:	e051      	b.n	800c7a2 <rfalTransceiveRx+0x682>
        
        
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EON:
            
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_EON | ST25R3911_IRQ_MASK_NRE) );
 800c6fe:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 800c702:	f7f5 ff6b 	bl	80025dc <st25r3911GetInterrupt>
 800c706:	4603      	mov	r3, r0
 800c708:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d043      	beq.n	800c798 <rfalTransceiveRx+0x678>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_EON) != 0U )
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c716:	2b00      	cmp	r3, #0
 800c718:	d002      	beq.n	800c720 <rfalTransceiveRx+0x600>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800c71a:	4b24      	ldr	r3, [pc, #144]	; (800c7ac <rfalTransceiveRx+0x68c>)
 800c71c:	2253      	movs	r2, #83	; 0x53
 800c71e:	751a      	strb	r2, [r3, #20]
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_NRE) != 0U )
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c726:	2b00      	cmp	r3, #0
 800c728:	d038      	beq.n	800c79c <rfalTransceiveRx+0x67c>
            {
                /* ST25R3911 uses the NRT to measure other device's Field On max time: Tadt + (n x Trfw)  */
                gRFAL.TxRx.status = ERR_LINK_LOSS;
 800c72a:	4b20      	ldr	r3, [pc, #128]	; (800c7ac <rfalTransceiveRx+0x68c>)
 800c72c:	2225      	movs	r2, #37	; 0x25
 800c72e:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800c730:	4b1e      	ldr	r3, [pc, #120]	; (800c7ac <rfalTransceiveRx+0x68c>)
 800c732:	225a      	movs	r2, #90	; 0x5a
 800c734:	751a      	strb	r2, [r3, #20]
            }
            break;
 800c736:	e031      	b.n	800c79c <rfalTransceiveRx+0x67c>

        
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EOF:
           
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_CAT | ST25R3911_IRQ_MASK_CAC) );
 800c738:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800c73c:	f7f5 ff4e 	bl	80025dc <st25r3911GetInterrupt>
 800c740:	4603      	mov	r3, r0
 800c742:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d02a      	beq.n	800c7a0 <rfalTransceiveRx+0x680>
            {
               break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_CAT) != 0U )
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c750:	2b00      	cmp	r3, #0
 800c752:	d003      	beq.n	800c75c <rfalTransceiveRx+0x63c>
            {
               gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 800c754:	4b15      	ldr	r3, [pc, #84]	; (800c7ac <rfalTransceiveRx+0x68c>)
 800c756:	2259      	movs	r2, #89	; 0x59
 800c758:	751a      	strb	r2, [r3, #20]
            else
            {
               gRFAL.TxRx.status = ERR_IO;
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
            }
            break;
 800c75a:	e022      	b.n	800c7a2 <rfalTransceiveRx+0x682>
            else if( (irqs & ST25R3911_IRQ_MASK_CAC) != 0U )
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c762:	2b00      	cmp	r3, #0
 800c764:	d006      	beq.n	800c774 <rfalTransceiveRx+0x654>
               gRFAL.TxRx.status = ERR_RF_COLLISION;
 800c766:	4b11      	ldr	r3, [pc, #68]	; (800c7ac <rfalTransceiveRx+0x68c>)
 800c768:	221d      	movs	r2, #29
 800c76a:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800c76c:	4b0f      	ldr	r3, [pc, #60]	; (800c7ac <rfalTransceiveRx+0x68c>)
 800c76e:	225a      	movs	r2, #90	; 0x5a
 800c770:	751a      	strb	r2, [r3, #20]
            break;
 800c772:	e016      	b.n	800c7a2 <rfalTransceiveRx+0x682>
               gRFAL.TxRx.status = ERR_IO;
 800c774:	4b0d      	ldr	r3, [pc, #52]	; (800c7ac <rfalTransceiveRx+0x68c>)
 800c776:	2203      	movs	r2, #3
 800c778:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800c77a:	4b0c      	ldr	r3, [pc, #48]	; (800c7ac <rfalTransceiveRx+0x68c>)
 800c77c:	225a      	movs	r2, #90	; 0x5a
 800c77e:	751a      	strb	r2, [r3, #20]
            break;
 800c780:	e00f      	b.n	800c7a2 <rfalTransceiveRx+0x682>
            
            
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 800c782:	4b0a      	ldr	r3, [pc, #40]	; (800c7ac <rfalTransceiveRx+0x68c>)
 800c784:	2208      	movs	r2, #8
 800c786:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800c788:	4b08      	ldr	r3, [pc, #32]	; (800c7ac <rfalTransceiveRx+0x68c>)
 800c78a:	225a      	movs	r2, #90	; 0x5a
 800c78c:	751a      	strb	r2, [r3, #20]
            break;           
 800c78e:	e008      	b.n	800c7a2 <rfalTransceiveRx+0x682>
                break;  /* No interrupt to process */
 800c790:	bf00      	nop
 800c792:	e006      	b.n	800c7a2 <rfalTransceiveRx+0x682>
                break;  /* No interrupt to process */
 800c794:	bf00      	nop
 800c796:	e004      	b.n	800c7a2 <rfalTransceiveRx+0x682>
                break;  /* No interrupt to process */
 800c798:	bf00      	nop
 800c79a:	e002      	b.n	800c7a2 <rfalTransceiveRx+0x682>
            break;
 800c79c:	bf00      	nop
 800c79e:	e000      	b.n	800c7a2 <rfalTransceiveRx+0x682>
               break;  /* No interrupt to process */
 800c7a0:	bf00      	nop
    }    
}
 800c7a2:	bf00      	nop
 800c7a4:	3714      	adds	r7, #20
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	20000a54 	.word	0x20000a54

0800c7b0 <rfalFIFOStatusUpdate>:

/*******************************************************************************/
static void rfalFIFOStatusUpdate( void )
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	af00      	add	r7, sp, #0
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 800c7b4:	4b05      	ldr	r3, [pc, #20]	; (800c7cc <rfalFIFOStatusUpdate+0x1c>)
 800c7b6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c7ba:	2bff      	cmp	r3, #255	; 0xff
 800c7bc:	d104      	bne.n	800c7c8 <rfalFIFOStatusUpdate+0x18>
    {
        st25r3911ReadMultipleRegisters( ST25R3911_REG_FIFO_RX_STATUS1, gRFAL.fifo.status, ST25R3911_FIFO_STATUS_LEN );
 800c7be:	2202      	movs	r2, #2
 800c7c0:	4903      	ldr	r1, [pc, #12]	; (800c7d0 <rfalFIFOStatusUpdate+0x20>)
 800c7c2:	201a      	movs	r0, #26
 800c7c4:	f7f5 fac0 	bl	8001d48 <st25r3911ReadMultipleRegisters>
    }
}
 800c7c8:	bf00      	nop
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	20000a54 	.word	0x20000a54
 800c7d0:	20000a92 	.word	0x20000a92

0800c7d4 <rfalFIFOStatusClear>:


/*******************************************************************************/
static void rfalFIFOStatusClear( void )
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	af00      	add	r7, sp, #0
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 800c7d8:	4b04      	ldr	r3, [pc, #16]	; (800c7ec <rfalFIFOStatusClear+0x18>)
 800c7da:	22ff      	movs	r2, #255	; 0xff
 800c7dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
 800c7e0:	bf00      	nop
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr
 800c7ea:	bf00      	nop
 800c7ec:	20000a54 	.word	0x20000a54

0800c7f0 <rfalFIFOStatusGetNumBytes>:


/*******************************************************************************/
static uint8_t rfalFIFOStatusGetNumBytes( void )
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800c7f4:	f7ff ffdc 	bl	800c7b0 <rfalFIFOStatusUpdate>
    
    return gRFAL.fifo.status[RFAL_FIFO_STATUS_REG1]; 
 800c7f8:	4b02      	ldr	r3, [pc, #8]	; (800c804 <rfalFIFOStatusGetNumBytes+0x14>)
 800c7fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	bd80      	pop	{r7, pc}
 800c802:	bf00      	nop
 800c804:	20000a54 	.word	0x20000a54

0800c808 <rfalFIFOStatusIsIncompleteByte>:


/*******************************************************************************/
static bool rfalFIFOStatusIsIncompleteByte( void )
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800c80c:	f7ff ffd0 	bl	800c7b0 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & (ST25R3911_REG_FIFO_RX_STATUS2_mask_fifo_lb | ST25R3911_REG_FIFO_RX_STATUS2_fifo_ncp)) != 0U);
 800c810:	4b05      	ldr	r3, [pc, #20]	; (800c828 <rfalFIFOStatusIsIncompleteByte+0x20>)
 800c812:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c816:	f003 031e 	and.w	r3, r3, #30
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	bf14      	ite	ne
 800c81e:	2301      	movne	r3, #1
 800c820:	2300      	moveq	r3, #0
 800c822:	b2db      	uxtb	r3, r3
}
 800c824:	4618      	mov	r0, r3
 800c826:	bd80      	pop	{r7, pc}
 800c828:	20000a54 	.word	0x20000a54

0800c82c <rfalFIFOStatusIsMissingPar>:


/*******************************************************************************/
static bool rfalFIFOStatusIsMissingPar( void )
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800c830:	f7ff ffbe 	bl	800c7b0 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3911_REG_FIFO_RX_STATUS2_np_lb) != 0U);
 800c834:	4b05      	ldr	r3, [pc, #20]	; (800c84c <rfalFIFOStatusIsMissingPar+0x20>)
 800c836:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c83a:	f003 0301 	and.w	r3, r3, #1
 800c83e:	2b00      	cmp	r3, #0
 800c840:	bf14      	ite	ne
 800c842:	2301      	movne	r3, #1
 800c844:	2300      	moveq	r3, #0
 800c846:	b2db      	uxtb	r3, r3
}
 800c848:	4618      	mov	r0, r3
 800c84a:	bd80      	pop	{r7, pc}
 800c84c:	20000a54 	.word	0x20000a54

0800c850 <rfalFIFOGetNumIncompleteBits>:


/*******************************************************************************/
static uint8_t rfalFIFOGetNumIncompleteBits( void )
{
 800c850:	b580      	push	{r7, lr}
 800c852:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800c854:	f7ff ffac 	bl	800c7b0 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3911_REG_FIFO_RX_STATUS2_mask_fifo_lb) >> ST25R3911_REG_FIFO_RX_STATUS2_shift_fifo_lb);
 800c858:	4b04      	ldr	r3, [pc, #16]	; (800c86c <rfalFIFOGetNumIncompleteBits+0x1c>)
 800c85a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c85e:	085b      	lsrs	r3, r3, #1
 800c860:	b2db      	uxtb	r3, r3
 800c862:	f003 0307 	and.w	r3, r3, #7
 800c866:	b2db      	uxtb	r3, r3
}
 800c868:	4618      	mov	r0, r3
 800c86a:	bd80      	pop	{r7, pc}
 800c86c:	20000a54 	.word	0x20000a54

0800c870 <rfalISO14443ATransceiveShortFrame>:

#if RFAL_FEATURE_NFCA

/*******************************************************************************/
ReturnCode rfalISO14443ATransceiveShortFrame( rfal14443AShortFrameCmd txCmd, uint8_t* rxBuf, uint8_t rxBufLen, uint16_t* rxRcvdLen, uint32_t fwt )
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b086      	sub	sp, #24
 800c874:	af00      	add	r7, sp, #0
 800c876:	60b9      	str	r1, [r7, #8]
 800c878:	607b      	str	r3, [r7, #4]
 800c87a:	4603      	mov	r3, r0
 800c87c:	73fb      	strb	r3, [r7, #15]
 800c87e:	4613      	mov	r3, r2
 800c880:	73bb      	strb	r3, [r7, #14]
    ReturnCode ret;
    uint8_t    directCmd;

    /* Check if RFAL is properly initialized */
    if( !st25r3911IsTxEnabled() || (gRFAL.state < RFAL_STATE_MODE_SET) || (( gRFAL.mode != RFAL_MODE_POLL_NFCA ) && ( gRFAL.mode != RFAL_MODE_POLL_NFCA_T1T )) )
 800c882:	2208      	movs	r2, #8
 800c884:	2108      	movs	r1, #8
 800c886:	2002      	movs	r0, #2
 800c888:	f7f5 f810 	bl	80018ac <st25r3911CheckReg>
 800c88c:	4603      	mov	r3, r0
 800c88e:	f083 0301 	eor.w	r3, r3, #1
 800c892:	b2db      	uxtb	r3, r3
 800c894:	2b00      	cmp	r3, #0
 800c896:	d10b      	bne.n	800c8b0 <rfalISO14443ATransceiveShortFrame+0x40>
 800c898:	4b70      	ldr	r3, [pc, #448]	; (800ca5c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d907      	bls.n	800c8b0 <rfalISO14443ATransceiveShortFrame+0x40>
 800c8a0:	4b6e      	ldr	r3, [pc, #440]	; (800ca5c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800c8a2:	785b      	ldrb	r3, [r3, #1]
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	d005      	beq.n	800c8b4 <rfalISO14443ATransceiveShortFrame+0x44>
 800c8a8:	4b6c      	ldr	r3, [pc, #432]	; (800ca5c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800c8aa:	785b      	ldrb	r3, [r3, #1]
 800c8ac:	2b02      	cmp	r3, #2
 800c8ae:	d001      	beq.n	800c8b4 <rfalISO14443ATransceiveShortFrame+0x44>
    {
        return ERR_WRONG_STATE;
 800c8b0:	2321      	movs	r3, #33	; 0x21
 800c8b2:	e0cf      	b.n	800ca54 <rfalISO14443ATransceiveShortFrame+0x1e4>
    }    
    
    /* Check for valid parameters */
    if( (rxBuf == NULL) || (rxRcvdLen == NULL) || (fwt == RFAL_FWT_NONE) )
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d006      	beq.n	800c8c8 <rfalISO14443ATransceiveShortFrame+0x58>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d003      	beq.n	800c8c8 <rfalISO14443ATransceiveShortFrame+0x58>
 800c8c0:	6a3b      	ldr	r3, [r7, #32]
 800c8c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8c6:	d101      	bne.n	800c8cc <rfalISO14443ATransceiveShortFrame+0x5c>
    {
        return ERR_PARAM;
 800c8c8:	2307      	movs	r3, #7
 800c8ca:	e0c3      	b.n	800ca54 <rfalISO14443ATransceiveShortFrame+0x1e4>
    }
    
    /*******************************************************************************/
    /* Select the Direct Command to be performed                                   */
    switch (txCmd)
 800c8cc:	7bfb      	ldrb	r3, [r7, #15]
 800c8ce:	2b26      	cmp	r3, #38	; 0x26
 800c8d0:	d004      	beq.n	800c8dc <rfalISO14443ATransceiveShortFrame+0x6c>
 800c8d2:	2b52      	cmp	r3, #82	; 0x52
 800c8d4:	d105      	bne.n	800c8e2 <rfalISO14443ATransceiveShortFrame+0x72>
    {
        case RFAL_14443A_SHORTFRAME_CMD_WUPA:
            directCmd = ST25R3911_CMD_TRANSMIT_WUPA;
 800c8d6:	23c7      	movs	r3, #199	; 0xc7
 800c8d8:	757b      	strb	r3, [r7, #21]
            break;
 800c8da:	e004      	b.n	800c8e6 <rfalISO14443ATransceiveShortFrame+0x76>
            
        case RFAL_14443A_SHORTFRAME_CMD_REQA:
            directCmd = ST25R3911_CMD_TRANSMIT_REQA;
 800c8dc:	23c6      	movs	r3, #198	; 0xc6
 800c8de:	757b      	strb	r3, [r7, #21]
            break;
 800c8e0:	e001      	b.n	800c8e6 <rfalISO14443ATransceiveShortFrame+0x76>
            
        default:
            return ERR_PARAM;
 800c8e2:	2307      	movs	r3, #7
 800c8e4:	e0b6      	b.n	800ca54 <rfalISO14443ATransceiveShortFrame+0x1e4>
    }
    
    
    /*******************************************************************************/
    /* Enable anti collision to recognise collision in first byte of SENS_REQ */
    st25r3911SetRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl);
 800c8e6:	2101      	movs	r1, #1
 800c8e8:	2005      	movs	r0, #5
 800c8ea:	f7f5 fb78 	bl	8001fde <st25r3911SetRegisterBits>
    
    /* Disable CRC while receiving since ATQA has no CRC included */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 800c8ee:	2180      	movs	r1, #128	; 0x80
 800c8f0:	2009      	movs	r0, #9
 800c8f2:	f7f5 fb74 	bl	8001fde <st25r3911SetRegisterBits>
    
    
    /*******************************************************************************/
    /* Wait for GT and FDT */
    while( !rfalIsGTExpired() )      { /* MISRA 15.6: mandatory brackets */ };
 800c8f6:	bf00      	nop
 800c8f8:	f7fe fdd0 	bl	800b49c <rfalIsGTExpired>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	f083 0301 	eor.w	r3, r3, #1
 800c902:	b2db      	uxtb	r3, r3
 800c904:	2b00      	cmp	r3, #0
 800c906:	d1f7      	bne.n	800c8f8 <rfalISO14443ATransceiveShortFrame+0x88>
    while( st25r3911IsGPTRunning() ) { /* MISRA 15.6: mandatory brackets */ };
 800c908:	bf00      	nop
 800c90a:	2204      	movs	r2, #4
 800c90c:	2104      	movs	r1, #4
 800c90e:	202b      	movs	r0, #43	; 0x2b
 800c910:	f7f4 ffcc 	bl	80018ac <st25r3911CheckReg>
 800c914:	4603      	mov	r3, r0
 800c916:	2b00      	cmp	r3, #0
 800c918:	d1f7      	bne.n	800c90a <rfalISO14443ATransceiveShortFrame+0x9a>
    
    gRFAL.tmr.GT = RFAL_TIMING_NONE;
 800c91a:	4b50      	ldr	r3, [pc, #320]	; (800ca5c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800c91c:	2200      	movs	r2, #0
 800c91e:	641a      	str	r2, [r3, #64]	; 0x40

    
    /*******************************************************************************/
    /* Prepare for Transceive, Receive only (bypass Tx states) */
    gRFAL.TxRx.ctx.flags     = ((uint32_t) RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP );
 800c920:	4b4e      	ldr	r3, [pc, #312]	; (800ca5c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800c922:	2203      	movs	r2, #3
 800c924:	631a      	str	r2, [r3, #48]	; 0x30
    gRFAL.TxRx.ctx.rxBuf     = rxBuf;
 800c926:	4a4d      	ldr	r2, [pc, #308]	; (800ca5c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	6253      	str	r3, [r2, #36]	; 0x24
    gRFAL.TxRx.ctx.rxBufLen  = rxBufLen;
 800c92c:	7bbb      	ldrb	r3, [r7, #14]
 800c92e:	b29a      	uxth	r2, r3
 800c930:	4b4a      	ldr	r3, [pc, #296]	; (800ca5c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800c932:	851a      	strh	r2, [r3, #40]	; 0x28
    gRFAL.TxRx.ctx.rxRcvdLen = rxRcvdLen;
 800c934:	4a49      	ldr	r2, [pc, #292]	; (800ca5c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	62d3      	str	r3, [r2, #44]	; 0x2c
    
    /*******************************************************************************/
    /* Load NRT with FWT */
    st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc( MIN( (fwt + RFAL_FWT_ADJUSTMENT + RFAL_FWT_A_ADJUSTMENT), RFAL_ST25R3911_NRT_MAX_1FC ) ) );
 800c93a:	6a3b      	ldr	r3, [r7, #32]
 800c93c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800c940:	4a47      	ldr	r2, [pc, #284]	; (800ca60 <rfalISO14443ATransceiveShortFrame+0x1f0>)
 800c942:	4293      	cmp	r3, r2
 800c944:	bf28      	it	cs
 800c946:	4613      	movcs	r3, r2
 800c948:	099b      	lsrs	r3, r3, #6
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7f4 fff0 	bl	8001930 <st25r3911SetNoResponseTime_64fcs>
    
    if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 800c950:	4b42      	ldr	r3, [pc, #264]	; (800ca5c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800c952:	68db      	ldr	r3, [r3, #12]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d010      	beq.n	800c97a <rfalISO14443ATransceiveShortFrame+0x10a>
    {
        /* Set Minimum FDT(Listen) in which PICC is not allowed to send a response */
        st25r3911WriteRegister( ST25R3911_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( ((RFAL_FDT_LISTEN_MRT_ADJUSTMENT + RFAL_FDT_LISTEN_A_ADJUSTMENT) > gRFAL.timings.FDTListen) ? RFAL_ST25R3911_MRT_MIN_1FC : (gRFAL.timings.FDTListen - (RFAL_FDT_LISTEN_MRT_ADJUSTMENT + RFAL_FDT_LISTEN_A_ADJUSTMENT)) ) );
 800c958:	4b40      	ldr	r3, [pc, #256]	; (800ca5c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800c95a:	68db      	ldr	r3, [r3, #12]
 800c95c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800c960:	d306      	bcc.n	800c970 <rfalISO14443ATransceiveShortFrame+0x100>
 800c962:	4b3e      	ldr	r3, [pc, #248]	; (800ca5c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800c964:	68db      	ldr	r3, [r3, #12]
 800c966:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800c96a:	099b      	lsrs	r3, r3, #6
 800c96c:	b2db      	uxtb	r3, r3
 800c96e:	e000      	b.n	800c972 <rfalISO14443ATransceiveShortFrame+0x102>
 800c970:	2304      	movs	r3, #4
 800c972:	4619      	mov	r1, r3
 800c974:	200e      	movs	r0, #14
 800c976:	f7f5 fac5 	bl	8001f04 <st25r3911WriteRegister>
    }
    
    /* In Passive communications General Purpose Timer is used to measure FDT Poll */
    if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 800c97a:	4b38      	ldr	r3, [pc, #224]	; (800ca5c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800c97c:	691b      	ldr	r3, [r3, #16]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d014      	beq.n	800c9ac <rfalISO14443ATransceiveShortFrame+0x13c>
    {
        /* Configure GPT to start at RX end */
        st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ), ST25R3911_REG_GPT_CONTROL_gptc_erx );
 800c982:	4b36      	ldr	r3, [pc, #216]	; (800ca5c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800c984:	691b      	ldr	r3, [r3, #16]
 800c986:	f240 423b 	movw	r2, #1083	; 0x43b
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d804      	bhi.n	800c998 <rfalISO14443ATransceiveShortFrame+0x128>
 800c98e:	4b33      	ldr	r3, [pc, #204]	; (800ca5c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800c990:	691b      	ldr	r3, [r3, #16]
 800c992:	08db      	lsrs	r3, r3, #3
 800c994:	b29b      	uxth	r3, r3
 800c996:	e005      	b.n	800c9a4 <rfalISO14443ATransceiveShortFrame+0x134>
 800c998:	4b30      	ldr	r3, [pc, #192]	; (800ca5c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800c99a:	691b      	ldr	r3, [r3, #16]
 800c99c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800c9a0:	08db      	lsrs	r3, r3, #3
 800c9a2:	b29b      	uxth	r3, r3
 800c9a4:	2120      	movs	r1, #32
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f7f4 ff4c 	bl	8001844 <st25r3911StartGPTimer_8fcs>
    }
    
    /*******************************************************************************/
    rfalPrepareTransceive();
 800c9ac:	f7ff f8d6 	bl	800bb5c <rfalPrepareTransceive>
    
    /* Also enable bit collision interrupt */
    st25r3911GetInterrupt( ST25R3911_IRQ_MASK_COL );
 800c9b0:	2004      	movs	r0, #4
 800c9b2:	f7f5 fe13 	bl	80025dc <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( ST25R3911_IRQ_MASK_COL );
 800c9b6:	2004      	movs	r0, #4
 800c9b8:	f7f5 fe48 	bl	800264c <st25r3911EnableInterrupts>
    
    /*Check if Observation Mode is enabled and set it on ST25R391x */
    rfalCheckEnableObsModeTx();
 800c9bc:	4b27      	ldr	r3, [pc, #156]	; (800ca5c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800c9be:	795b      	ldrb	r3, [r3, #5]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d005      	beq.n	800c9d0 <rfalISO14443ATransceiveShortFrame+0x160>
 800c9c4:	4b25      	ldr	r3, [pc, #148]	; (800ca5c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800c9c6:	795b      	ldrb	r3, [r3, #5]
 800c9c8:	4619      	mov	r1, r3
 800c9ca:	2001      	movs	r0, #1
 800c9cc:	f7f5 fa56 	bl	8001e7c <st25r3911WriteTestRegister>
    
    /*******************************************************************************/
    /* Chip bug: Clear nbtx bits before sending WUPA/REQA - otherwise ST25R3911 will report parity error */
    st25r3911WriteRegister( ST25R3911_REG_NUM_TX_BYTES2, 0);
 800c9d0:	2100      	movs	r1, #0
 800c9d2:	201e      	movs	r0, #30
 800c9d4:	f7f5 fa96 	bl	8001f04 <st25r3911WriteRegister>

    /* Send either WUPA or REQA. All affected tags will backscatter ATQA and change to READY state */
    st25r3911ExecuteCommand( directCmd );
 800c9d8:	7d7b      	ldrb	r3, [r7, #21]
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7f5 fc16 	bl	800220c <st25r3911ExecuteCommand>
    
    /* Wait for TXE */
    if( st25r3911WaitForInterruptsTimed( ST25R3911_IRQ_MASK_TXE, (uint16_t)MAX( rfalConv1fcToMs( fwt ), RFAL_ST25R3911_SW_TMR_MIN_1MS ) ) == 0U)
 800c9e0:	6a3b      	ldr	r3, [r7, #32]
 800c9e2:	f646 12ef 	movw	r2, #27119	; 0x69ef
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d906      	bls.n	800c9f8 <rfalISO14443ATransceiveShortFrame+0x188>
 800c9ea:	6a3b      	ldr	r3, [r7, #32]
 800c9ec:	4a1d      	ldr	r2, [pc, #116]	; (800ca64 <rfalISO14443ATransceiveShortFrame+0x1f4>)
 800c9ee:	fba2 2303 	umull	r2, r3, r2, r3
 800c9f2:	0b1b      	lsrs	r3, r3, #12
 800c9f4:	b29b      	uxth	r3, r3
 800c9f6:	e000      	b.n	800c9fa <rfalISO14443ATransceiveShortFrame+0x18a>
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	2008      	movs	r0, #8
 800c9fe:	f7f5 fd9d 	bl	800253c <st25r3911WaitForInterruptsTimed>
 800ca02:	4603      	mov	r3, r0
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d102      	bne.n	800ca0e <rfalISO14443ATransceiveShortFrame+0x19e>
    {
        ret = ERR_IO;
 800ca08:	2303      	movs	r3, #3
 800ca0a:	82fb      	strh	r3, [r7, #22]
 800ca0c:	e016      	b.n	800ca3c <rfalISO14443ATransceiveShortFrame+0x1cc>
    }
    else
    {
        /*Check if Observation Mode is enabled and set it on ST25R391x */
        rfalCheckEnableObsModeRx();
 800ca0e:	4b13      	ldr	r3, [pc, #76]	; (800ca5c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800ca10:	799b      	ldrb	r3, [r3, #6]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d005      	beq.n	800ca22 <rfalISO14443ATransceiveShortFrame+0x1b2>
 800ca16:	4b11      	ldr	r3, [pc, #68]	; (800ca5c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800ca18:	799b      	ldrb	r3, [r3, #6]
 800ca1a:	4619      	mov	r1, r3
 800ca1c:	2001      	movs	r0, #1
 800ca1e:	f7f5 fa2d 	bl	8001e7c <st25r3911WriteTestRegister>
        
        /* Jump into a transceive Rx state for reception (bypass Tx states) */
        gRFAL.state       = RFAL_STATE_TXRX;
 800ca22:	4b0e      	ldr	r3, [pc, #56]	; (800ca5c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800ca24:	2203      	movs	r2, #3
 800ca26:	701a      	strb	r2, [r3, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 800ca28:	4b0c      	ldr	r3, [pc, #48]	; (800ca5c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800ca2a:	2251      	movs	r2, #81	; 0x51
 800ca2c:	751a      	strb	r2, [r3, #20]
        gRFAL.TxRx.status = ERR_BUSY;
 800ca2e:	4b0b      	ldr	r3, [pc, #44]	; (800ca5c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800ca30:	2202      	movs	r2, #2
 800ca32:	82da      	strh	r2, [r3, #22]
        
        /* Execute Transceive Rx blocking */
        ret = rfalTransceiveBlockingRx();
 800ca34:	f7fe ff66 	bl	800b904 <rfalTransceiveBlockingRx>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	82fb      	strh	r3, [r7, #22]
    }
    
    
    /* Disable Collision interrupt */
    st25r3911DisableInterrupts( (ST25R3911_IRQ_MASK_COL) );
 800ca3c:	2004      	movs	r0, #4
 800ca3e:	f7f5 fe11 	bl	8002664 <st25r3911DisableInterrupts>
    
    /* Disable anti collision again */
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl );
 800ca42:	2101      	movs	r1, #1
 800ca44:	2005      	movs	r0, #5
 800ca46:	f7f5 faa7 	bl	8001f98 <st25r3911ClrRegisterBits>
    
    /* ReEnable CRC on Rx */
    st25r3911ClrRegisterBits(ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 800ca4a:	2180      	movs	r1, #128	; 0x80
 800ca4c:	2009      	movs	r0, #9
 800ca4e:	f7f5 faa3 	bl	8001f98 <st25r3911ClrRegisterBits>
    
    return ret;
 800ca52:	8afb      	ldrh	r3, [r7, #22]
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3718      	adds	r7, #24
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}
 800ca5c:	20000a54 	.word	0x20000a54
 800ca60:	0ffff000 	.word	0x0ffff000
 800ca64:	4d542005 	.word	0x4d542005

0800ca68 <rfalISO14443ATransceiveAnticollisionFrame>:

/*******************************************************************************/
ReturnCode rfalISO14443ATransceiveAnticollisionFrame( uint8_t *buf, uint8_t *bytesToSend, uint8_t *bitsToSend, uint16_t *rxLength, uint32_t fwt )
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b08e      	sub	sp, #56	; 0x38
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	60f8      	str	r0, [r7, #12]
 800ca70:	60b9      	str	r1, [r7, #8]
 800ca72:	607a      	str	r2, [r7, #4]
 800ca74:	603b      	str	r3, [r7, #0]
    rfalTransceiveContext ctx;
    uint8_t               collByte;
    uint8_t               collData;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCA ) )
 800ca76:	4b77      	ldr	r3, [pc, #476]	; (800cc54 <rfalISO14443ATransceiveAnticollisionFrame+0x1ec>)
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	2b01      	cmp	r3, #1
 800ca7c:	d903      	bls.n	800ca86 <rfalISO14443ATransceiveAnticollisionFrame+0x1e>
 800ca7e:	4b75      	ldr	r3, [pc, #468]	; (800cc54 <rfalISO14443ATransceiveAnticollisionFrame+0x1ec>)
 800ca80:	785b      	ldrb	r3, [r3, #1]
 800ca82:	2b01      	cmp	r3, #1
 800ca84:	d001      	beq.n	800ca8a <rfalISO14443ATransceiveAnticollisionFrame+0x22>
    {
        return ERR_WRONG_STATE;
 800ca86:	2321      	movs	r3, #33	; 0x21
 800ca88:	e0df      	b.n	800cc4a <rfalISO14443ATransceiveAnticollisionFrame+0x1e2>
    }
    
    /* Check for valid parameters */
    if( (buf == NULL) || (bytesToSend == NULL) || (bitsToSend == NULL) || (rxLength == NULL) )
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d008      	beq.n	800caa2 <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d005      	beq.n	800caa2 <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d002      	beq.n	800caa2 <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d101      	bne.n	800caa6 <rfalISO14443ATransceiveAnticollisionFrame+0x3e>
    {
        return ERR_PARAM;
 800caa2:	2307      	movs	r3, #7
 800caa4:	e0d1      	b.n	800cc4a <rfalISO14443ATransceiveAnticollisionFrame+0x1e2>
    }
    
    /*******************************************************************************/
    /* Set speficic Analog Config for Anticolission if needed */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 800caa6:	f240 1003 	movw	r0, #259	; 0x103
 800caaa:	f7f7 fd85 	bl	80045b8 <rfalSetAnalogConfig>
    
    
    /*******************************************************************************/
    /* Enable anti collision to recognise collision in first byte of SENS_REQ */
    st25r3911SetRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl );
 800caae:	2101      	movs	r1, #1
 800cab0:	2005      	movs	r0, #5
 800cab2:	f7f5 fa94 	bl	8001fde <st25r3911SetRegisterBits>
    
    /* Disable CRC while receiving */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 800cab6:	2180      	movs	r1, #128	; 0x80
 800cab8:	2009      	movs	r0, #9
 800caba:	f7f5 fa90 	bl	8001fde <st25r3911SetRegisterBits>
    
    
    
    /*******************************************************************************/
    /* Prepare for Transceive                                                      */
    ctx.flags     = ( (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF );  /* Disable Automatic Gain Control (AGC) for better detection of collision */
 800cabe:	230b      	movs	r3, #11
 800cac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    ctx.txBuf     = buf;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	61bb      	str	r3, [r7, #24]
    ctx.txBufLen  = (uint16_t)(rfalConvBytesToBits( *bytesToSend ) + *bitsToSend );
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	b29b      	uxth	r3, r3
 800cacc:	00db      	lsls	r3, r3, #3
 800cace:	b29a      	uxth	r2, r3
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	b29b      	uxth	r3, r3
 800cad6:	4413      	add	r3, r2
 800cad8:	b29b      	uxth	r3, r3
 800cada:	83bb      	strh	r3, [r7, #28]
    ctx.rxBuf     = &buf[*bytesToSend];
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	461a      	mov	r2, r3
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	4413      	add	r3, r2
 800cae6:	623b      	str	r3, [r7, #32]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits( RFAL_ISO14443A_SDD_RES_LEN );
 800cae8:	2328      	movs	r3, #40	; 0x28
 800caea:	84bb      	strh	r3, [r7, #36]	; 0x24
    ctx.rxRcvdLen = rxLength;
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	62bb      	str	r3, [r7, #40]	; 0x28
    ctx.fwt       = fwt;
 800caf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caf2:	633b      	str	r3, [r7, #48]	; 0x30
    
    rfalStartTransceive( &ctx );
 800caf4:	f107 0318 	add.w	r3, r7, #24
 800caf8:	4618      	mov	r0, r3
 800cafa:	f7fe fd5f 	bl	800b5bc <rfalStartTransceive>
    
    /* Additionally enable bit collision interrupt */
    st25r3911GetInterrupt( ST25R3911_IRQ_MASK_COL );
 800cafe:	2004      	movs	r0, #4
 800cb00:	f7f5 fd6c 	bl	80025dc <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( ST25R3911_IRQ_MASK_COL );
 800cb04:	2004      	movs	r0, #4
 800cb06:	f7f5 fda1 	bl	800264c <st25r3911EnableInterrupts>
    
    /*******************************************************************************/
    collByte = 0;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    
    /* save the collision byte */
    if ((*bitsToSend) > 0U)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d02d      	beq.n	800cb74 <rfalISO14443ATransceiveAnticollisionFrame+0x10c>
    {
        buf[(*bytesToSend)] <<= (RFAL_BITS_IN_BYTE - (*bitsToSend));
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	4413      	add	r3, r2
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	461a      	mov	r2, r3
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	f1c3 0308 	rsb	r3, r3, #8
 800cb2e:	409a      	lsls	r2, r3
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	4619      	mov	r1, r3
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	440b      	add	r3, r1
 800cb3a:	b2d2      	uxtb	r2, r2
 800cb3c:	701a      	strb	r2, [r3, #0]
        buf[(*bytesToSend)] >>= (RFAL_BITS_IN_BYTE - (*bitsToSend));
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	461a      	mov	r2, r3
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	4413      	add	r3, r2
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	f1c3 0308 	rsb	r3, r3, #8
 800cb54:	411a      	asrs	r2, r3
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	781b      	ldrb	r3, [r3, #0]
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	440b      	add	r3, r1
 800cb60:	b2d2      	uxtb	r2, r2
 800cb62:	701a      	strb	r2, [r3, #0]
        collByte = buf[(*bytesToSend)];
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	461a      	mov	r2, r3
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	4413      	add	r3, r2
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }
    
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveRunBlockingTx();
 800cb74:	f7fe fea9 	bl	800b8ca <rfalTransceiveRunBlockingTx>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	86fb      	strh	r3, [r7, #54]	; 0x36
    if( ret == ERR_NONE)
 800cb7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d14f      	bne.n	800cc22 <rfalISO14443ATransceiveAnticollisionFrame+0x1ba>
    {
       ret = rfalTransceiveBlockingRx();
 800cb82:	f7fe febf 	bl	800b904 <rfalTransceiveBlockingRx>
 800cb86:	4603      	mov	r3, r0
 800cb88:	86fb      	strh	r3, [r7, #54]	; 0x36
    
       /*******************************************************************************/
       if ((*bitsToSend) > 0U)
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d031      	beq.n	800cbf6 <rfalISO14443ATransceiveAnticollisionFrame+0x18e>
       {
           buf[(*bytesToSend)] >>= (*bitsToSend);
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	461a      	mov	r2, r3
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	4413      	add	r3, r2
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	461a      	mov	r2, r3
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	411a      	asrs	r2, r3
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	4619      	mov	r1, r3
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	440b      	add	r3, r1
 800cbb0:	b2d2      	uxtb	r2, r2
 800cbb2:	701a      	strb	r2, [r3, #0]
           buf[(*bytesToSend)] <<= (*bitsToSend);
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	461a      	mov	r2, r3
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	4413      	add	r3, r2
 800cbbe:	781b      	ldrb	r3, [r3, #0]
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	409a      	lsls	r2, r3
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	4619      	mov	r1, r3
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	440b      	add	r3, r1
 800cbd2:	b2d2      	uxtb	r2, r2
 800cbd4:	701a      	strb	r2, [r3, #0]
           buf[(*bytesToSend)] |= collByte;
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	461a      	mov	r2, r3
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	4413      	add	r3, r2
 800cbe0:	7819      	ldrb	r1, [r3, #0]
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	4413      	add	r3, r2
 800cbec:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800cbf0:	430a      	orrs	r2, r1
 800cbf2:	b2d2      	uxtb	r2, r2
 800cbf4:	701a      	strb	r2, [r3, #0]
       }
       
       if( (ERR_RF_COLLISION == ret) )
 800cbf6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cbf8:	2b1d      	cmp	r3, #29
 800cbfa:	d112      	bne.n	800cc22 <rfalISO14443ATransceiveAnticollisionFrame+0x1ba>
       {
           /* read out collision register */
           st25r3911ReadRegister( ST25R3911_REG_COLLISION_STATUS, &collData);
 800cbfc:	f107 0317 	add.w	r3, r7, #23
 800cc00:	4619      	mov	r1, r3
 800cc02:	201c      	movs	r0, #28
 800cc04:	f7f5 f856 	bl	8001cb4 <st25r3911ReadRegister>

           (*bytesToSend) = ((collData >> ST25R3911_REG_COLLISION_STATUS_shift_c_byte) & 0x0FU); // 4-bits Byte information
 800cc08:	7dfb      	ldrb	r3, [r7, #23]
 800cc0a:	091b      	lsrs	r3, r3, #4
 800cc0c:	b2da      	uxtb	r2, r3
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	701a      	strb	r2, [r3, #0]
           (*bitsToSend)  = ((collData >> ST25R3911_REG_COLLISION_STATUS_shift_c_bit)  & 0x07U); // 3-bits bit information
 800cc12:	7dfb      	ldrb	r3, [r7, #23]
 800cc14:	085b      	lsrs	r3, r3, #1
 800cc16:	b2db      	uxtb	r3, r3
 800cc18:	f003 0307 	and.w	r3, r3, #7
 800cc1c:	b2da      	uxtb	r2, r3
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	701a      	strb	r2, [r3, #0]
    }
    
   
    /*******************************************************************************/
    /* Disable Collision interrupt */
    st25r3911DisableInterrupts( (ST25R3911_IRQ_MASK_COL) );
 800cc22:	2004      	movs	r0, #4
 800cc24:	f7f5 fd1e 	bl	8002664 <st25r3911DisableInterrupts>
    
    /* Disable anti collision again */
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl );
 800cc28:	2101      	movs	r1, #1
 800cc2a:	2005      	movs	r0, #5
 800cc2c:	f7f5 f9b4 	bl	8001f98 <st25r3911ClrRegisterBits>
    
    /* ReEnable CRC on Rx */
    st25r3911ClrRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 800cc30:	2180      	movs	r1, #128	; 0x80
 800cc32:	2009      	movs	r0, #9
 800cc34:	f7f5 f9b0 	bl	8001f98 <st25r3911ClrRegisterBits>
    /*******************************************************************************/
    
    
    /* Restore common Analog configurations for this mode */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800cc38:	f240 1001 	movw	r0, #257	; 0x101
 800cc3c:	f7f7 fcbc 	bl	80045b8 <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800cc40:	f44f 7081 	mov.w	r0, #258	; 0x102
 800cc44:	f7f7 fcb8 	bl	80045b8 <rfalSetAnalogConfig>
    
    return ret;
 800cc48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3738      	adds	r7, #56	; 0x38
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
 800cc52:	bf00      	nop
 800cc54:	20000a54 	.word	0x20000a54

0800cc58 <rfalISO15693TransceiveAnticollisionFrame>:

#if RFAL_FEATURE_NFCV

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveAnticollisionFrame( uint8_t *txBuf, uint8_t txBufLen, uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b08c      	sub	sp, #48	; 0x30
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	60f8      	str	r0, [r7, #12]
 800cc60:	607a      	str	r2, [r7, #4]
 800cc62:	461a      	mov	r2, r3
 800cc64:	460b      	mov	r3, r1
 800cc66:	72fb      	strb	r3, [r7, #11]
 800cc68:	4613      	mov	r3, r2
 800cc6a:	72bb      	strb	r3, [r7, #10]
    ReturnCode            ret;
    rfalTransceiveContext ctx;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 800cc6c:	4b29      	ldr	r3, [pc, #164]	; (800cd14 <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d903      	bls.n	800cc7c <rfalISO15693TransceiveAnticollisionFrame+0x24>
 800cc74:	4b27      	ldr	r3, [pc, #156]	; (800cd14 <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 800cc76:	785b      	ldrb	r3, [r3, #1]
 800cc78:	2b07      	cmp	r3, #7
 800cc7a:	d001      	beq.n	800cc80 <rfalISO15693TransceiveAnticollisionFrame+0x28>
    {
        return ERR_WRONG_STATE;
 800cc7c:	2321      	movs	r3, #33	; 0x21
 800cc7e:	e045      	b.n	800cd0c <rfalISO15693TransceiveAnticollisionFrame+0xb4>
    }
    
    /*******************************************************************************/
    /* Set speficic Analog Config for Anticolission if needed */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 800cc80:	f241 0003 	movw	r0, #4099	; 0x1003
 800cc84:	f7f7 fc98 	bl	80045b8 <rfalSetAnalogConfig>

    
    /* Ignoring collisions before the UID (RES_FLAG + DSFID) */
    gRFAL.nfcvData.ignoreBits = (uint16_t)RFAL_ISO15693_IGNORE_BITS;
 800cc88:	4b22      	ldr	r3, [pc, #136]	; (800cd14 <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 800cc8a:	2210      	movs	r2, #16
 800cc8c:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4
    
    /*******************************************************************************/
    /* Prepare for Transceive  */
    ctx.flags     = ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_AUTO) | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF | ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_AUTO); /* Disable Automatic Gain Control (AGC) for better detection of collision */
 800cc90:	7afb      	ldrb	r3, [r7, #11]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d101      	bne.n	800cc9a <rfalISO15693TransceiveAnticollisionFrame+0x42>
 800cc96:	220b      	movs	r2, #11
 800cc98:	e000      	b.n	800cc9c <rfalISO15693TransceiveAnticollisionFrame+0x44>
 800cc9a:	220a      	movs	r2, #10
 800cc9c:	7afb      	ldrb	r3, [r7, #11]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d101      	bne.n	800cca6 <rfalISO15693TransceiveAnticollisionFrame+0x4e>
 800cca2:	2340      	movs	r3, #64	; 0x40
 800cca4:	e000      	b.n	800cca8 <rfalISO15693TransceiveAnticollisionFrame+0x50>
 800cca6:	2300      	movs	r3, #0
 800cca8:	4313      	orrs	r3, r2
 800ccaa:	627b      	str	r3, [r7, #36]	; 0x24
    ctx.txBuf     = txBuf;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	613b      	str	r3, [r7, #16]
    ctx.txBufLen  = (uint16_t)rfalConvBytesToBits(txBufLen);
 800ccb0:	7afb      	ldrb	r3, [r7, #11]
 800ccb2:	b29b      	uxth	r3, r3
 800ccb4:	00db      	lsls	r3, r3, #3
 800ccb6:	b29b      	uxth	r3, r3
 800ccb8:	82bb      	strh	r3, [r7, #20]
    ctx.rxBuf     = rxBuf;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	61bb      	str	r3, [r7, #24]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits(rxBufLen);
 800ccbe:	7abb      	ldrb	r3, [r7, #10]
 800ccc0:	b29b      	uxth	r3, r3
 800ccc2:	00db      	lsls	r3, r3, #3
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	83bb      	strh	r3, [r7, #28]
    ctx.rxRcvdLen = actLen;
 800ccc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccca:	623b      	str	r3, [r7, #32]
    ctx.fwt       = rfalConv64fcTo1fc(ISO15693_FWT);
 800cccc:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 800ccd0:	62bb      	str	r3, [r7, #40]	; 0x28
    
    rfalStartTransceive( &ctx );
 800ccd2:	f107 0310 	add.w	r3, r7, #16
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7fe fc70 	bl	800b5bc <rfalStartTransceive>
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveRunBlockingTx();
 800ccdc:	f7fe fdf5 	bl	800b8ca <rfalTransceiveRunBlockingTx>
 800cce0:	4603      	mov	r3, r0
 800cce2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if( ret == ERR_NONE)
 800cce4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d103      	bne.n	800ccf2 <rfalISO15693TransceiveAnticollisionFrame+0x9a>
    {
        ret = rfalTransceiveBlockingRx();
 800ccea:	f7fe fe0b 	bl	800b904 <rfalTransceiveBlockingRx>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    
    /* Restore common Analog configurations for this mode */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800ccf2:	f241 0001 	movw	r0, #4097	; 0x1001
 800ccf6:	f7f7 fc5f 	bl	80045b8 <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800ccfa:	f241 0002 	movw	r0, #4098	; 0x1002
 800ccfe:	f7f7 fc5b 	bl	80045b8 <rfalSetAnalogConfig>
        
    gRFAL.nfcvData.ignoreBits = 0;
 800cd02:	4b04      	ldr	r3, [pc, #16]	; (800cd14 <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 800cd04:	2200      	movs	r2, #0
 800cd06:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4
    return ret;
 800cd0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3730      	adds	r7, #48	; 0x30
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}
 800cd14:	20000a54 	.word	0x20000a54

0800cd18 <rfalISO15693TransceiveEOFAnticollision>:

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveEOFAnticollision( uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b088      	sub	sp, #32
 800cd1c:	af02      	add	r7, sp, #8
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	460b      	mov	r3, r1
 800cd22:	607a      	str	r2, [r7, #4]
 800cd24:	72fb      	strb	r3, [r7, #11]
    uint8_t dummy;

    return rfalISO15693TransceiveAnticollisionFrame( &dummy, 0, rxBuf, rxBufLen, actLen );
 800cd26:	7afa      	ldrb	r2, [r7, #11]
 800cd28:	f107 0017 	add.w	r0, r7, #23
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	9300      	str	r3, [sp, #0]
 800cd30:	4613      	mov	r3, r2
 800cd32:	68fa      	ldr	r2, [r7, #12]
 800cd34:	2100      	movs	r1, #0
 800cd36:	f7ff ff8f 	bl	800cc58 <rfalISO15693TransceiveAnticollisionFrame>
 800cd3a:	4603      	mov	r3, r0
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3718      	adds	r7, #24
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <rfalFeliCaPoll>:

#if RFAL_FEATURE_NFCF

/*******************************************************************************/
ReturnCode rfalFeliCaPoll( rfalFeliCaPollSlots slots, uint16_t sysCode, uint8_t reqCode, rfalFeliCaPollRes* pollResList, uint8_t pollResListSize, uint8_t *devicesDetected, uint8_t *collisionsDetected )
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b08c      	sub	sp, #48	; 0x30
 800cd48:	af04      	add	r7, sp, #16
 800cd4a:	603b      	str	r3, [r7, #0]
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	71fb      	strb	r3, [r7, #7]
 800cd50:	460b      	mov	r3, r1
 800cd52:	80bb      	strh	r3, [r7, #4]
 800cd54:	4613      	mov	r3, r2
 800cd56:	71bb      	strb	r3, [r7, #6]
    uint8_t           colDetected;
    rfalEHandling     curHandling;
    uint8_t           nbSlots;
        
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCF ) )
 800cd58:	4b70      	ldr	r3, [pc, #448]	; (800cf1c <rfalFeliCaPoll+0x1d8>)
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	2b01      	cmp	r3, #1
 800cd5e:	d903      	bls.n	800cd68 <rfalFeliCaPoll+0x24>
 800cd60:	4b6e      	ldr	r3, [pc, #440]	; (800cf1c <rfalFeliCaPoll+0x1d8>)
 800cd62:	785b      	ldrb	r3, [r3, #1]
 800cd64:	2b06      	cmp	r3, #6
 800cd66:	d001      	beq.n	800cd6c <rfalFeliCaPoll+0x28>
    {
        return ERR_WRONG_STATE;
 800cd68:	2321      	movs	r3, #33	; 0x21
 800cd6a:	e0d3      	b.n	800cf14 <rfalFeliCaPoll+0x1d0>
    }
    
    frameIdx    = 0;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	767b      	strb	r3, [r7, #25]
    colDetected = 0;
 800cd70:	2300      	movs	r3, #0
 800cd72:	773b      	strb	r3, [r7, #28]
    devDetected = 0;
 800cd74:	2300      	movs	r3, #0
 800cd76:	777b      	strb	r3, [r7, #29]
    nbSlots     = (uint8_t)slots;
 800cd78:	79fb      	ldrb	r3, [r7, #7]
 800cd7a:	76fb      	strb	r3, [r7, #27]
    
    /*******************************************************************************/
    /* Compute SENSF_REQ frame */
    frame[frameIdx++] = (uint8_t)FELICA_CMD_POLLING; /* CMD: SENF_REQ                       */
 800cd7c:	7e7b      	ldrb	r3, [r7, #25]
 800cd7e:	1c5a      	adds	r2, r3, #1
 800cd80:	767a      	strb	r2, [r7, #25]
 800cd82:	f107 0220 	add.w	r2, r7, #32
 800cd86:	4413      	add	r3, r2
 800cd88:	2200      	movs	r2, #0
 800cd8a:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = (uint8_t)(sysCode >> 8);     /* System Code (SC)                    */
 800cd8e:	88bb      	ldrh	r3, [r7, #4]
 800cd90:	0a1b      	lsrs	r3, r3, #8
 800cd92:	b29a      	uxth	r2, r3
 800cd94:	7e7b      	ldrb	r3, [r7, #25]
 800cd96:	1c59      	adds	r1, r3, #1
 800cd98:	7679      	strb	r1, [r7, #25]
 800cd9a:	b2d2      	uxtb	r2, r2
 800cd9c:	f107 0120 	add.w	r1, r7, #32
 800cda0:	440b      	add	r3, r1
 800cda2:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = (uint8_t)(sysCode & 0xFFU);  /* System Code (SC)                    */
 800cda6:	7e7b      	ldrb	r3, [r7, #25]
 800cda8:	1c5a      	adds	r2, r3, #1
 800cdaa:	767a      	strb	r2, [r7, #25]
 800cdac:	88ba      	ldrh	r2, [r7, #4]
 800cdae:	b2d2      	uxtb	r2, r2
 800cdb0:	f107 0120 	add.w	r1, r7, #32
 800cdb4:	440b      	add	r3, r1
 800cdb6:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = reqCode;                     /* Communication Parameter Request (RC)*/
 800cdba:	7e7b      	ldrb	r3, [r7, #25]
 800cdbc:	1c5a      	adds	r2, r3, #1
 800cdbe:	767a      	strb	r2, [r7, #25]
 800cdc0:	f107 0220 	add.w	r2, r7, #32
 800cdc4:	4413      	add	r3, r2
 800cdc6:	79ba      	ldrb	r2, [r7, #6]
 800cdc8:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = nbSlots;                     /* TimeSlot (TSN)                      */
 800cdcc:	7e7b      	ldrb	r3, [r7, #25]
 800cdce:	1c5a      	adds	r2, r3, #1
 800cdd0:	767a      	strb	r2, [r7, #25]
 800cdd2:	f107 0220 	add.w	r2, r7, #32
 800cdd6:	4413      	add	r3, r2
 800cdd8:	7efa      	ldrb	r2, [r7, #27]
 800cdda:	f803 2c10 	strb.w	r2, [r3, #-16]
    
    
    /*******************************************************************************/
    /* NRT should not stop on reception - Use EMVCo mode to run NRT in nrt_emv     *
     * ERRORHANDLING_EMVCO has no special handling for NFC-F mode                  */
    curHandling = gRFAL.conf.eHandling;
 800cdde:	4b4f      	ldr	r3, [pc, #316]	; (800cf1c <rfalFeliCaPoll+0x1d8>)
 800cde0:	79db      	ldrb	r3, [r3, #7]
 800cde2:	763b      	strb	r3, [r7, #24]
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 800cde4:	2002      	movs	r0, #2
 800cde6:	f7fe fb09 	bl	800b3fc <rfalSetErrorHandling>
    
    /*******************************************************************************/
    /* Run transceive blocking, 
     * Calculate Total Response Time in(64/fc): 
     *                       512 PICC process time + (n * 256 Time Slot duration)  */
    ret = rfalTransceiveBlockingTx( frame, 
 800cdea:	7e7b      	ldrb	r3, [r7, #25]
 800cdec:	b299      	uxth	r1, r3
                                    (uint16_t)frameIdx, 
                                    (uint8_t*)gRFAL.nfcfData.pollResponses, 
                                    RFAL_FELICA_POLL_RES_LEN, 
                                    &actLen,
                                    (RFAL_TXRX_FLAGS_DEFAULT),
                                    rfalConv64fcTo1fc( RFAL_FELICA_POLL_DELAY_TIME + (RFAL_FELICA_POLL_SLOT_TIME * ((uint32_t)nbSlots + 1U)) ) );
 800cdee:	7efb      	ldrb	r3, [r7, #27]
    ret = rfalTransceiveBlockingTx( frame, 
 800cdf0:	3303      	adds	r3, #3
 800cdf2:	039b      	lsls	r3, r3, #14
 800cdf4:	f107 0010 	add.w	r0, r7, #16
 800cdf8:	9302      	str	r3, [sp, #8]
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	9301      	str	r3, [sp, #4]
 800cdfe:	f107 030e 	add.w	r3, r7, #14
 800ce02:	9300      	str	r3, [sp, #0]
 800ce04:	2314      	movs	r3, #20
 800ce06:	4a46      	ldr	r2, [pc, #280]	; (800cf20 <rfalFeliCaPoll+0x1dc>)
 800ce08:	f7fe fd30 	bl	800b86c <rfalTransceiveBlockingTx>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	83fb      	strh	r3, [r7, #30]
    
    /*******************************************************************************/
    /* If Tx OK, Wait for all responses, store them as soon as they appear         */
    if( ret == ERR_NONE )
 800ce10:	8bfb      	ldrh	r3, [r7, #30]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d145      	bne.n	800cea2 <rfalFeliCaPoll+0x15e>
    {
        bool timeout;

        do 
        {
            ret = rfalTransceiveBlockingRx();
 800ce16:	f7fe fd75 	bl	800b904 <rfalTransceiveBlockingRx>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	83fb      	strh	r3, [r7, #30]
            if( ret == ERR_TIMEOUT )
 800ce1e:	8bfb      	ldrh	r3, [r7, #30]
 800ce20:	2b04      	cmp	r3, #4
 800ce22:	d102      	bne.n	800ce2a <rfalFeliCaPoll+0xe6>
            {
                /* Upon timeout the full Poll Delay + (Slot time)*(nbSlots) has expired */
                timeout = true;
 800ce24:	2301      	movs	r3, #1
 800ce26:	76bb      	strb	r3, [r7, #26]
 800ce28:	e030      	b.n	800ce8c <rfalFeliCaPoll+0x148>
            }
            else
            {
                /* Reception done, reEnabled Rx for following Slot */
                st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 800ce2a:	20d1      	movs	r0, #209	; 0xd1
 800ce2c:	f7f5 f9ee 	bl	800220c <st25r3911ExecuteCommand>
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_SQUELCH );
 800ce30:	20d5      	movs	r0, #213	; 0xd5
 800ce32:	f7f5 f9eb 	bl	800220c <st25r3911ExecuteCommand>
                
                /* If the reception was OK, new device found */
                if( ret == ERR_NONE )
 800ce36:	8bfb      	ldrh	r3, [r7, #30]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d10e      	bne.n	800ce5a <rfalFeliCaPoll+0x116>
                {
                   devDetected++;
 800ce3c:	7f7b      	ldrb	r3, [r7, #29]
 800ce3e:	3301      	adds	r3, #1
 800ce40:	777b      	strb	r3, [r7, #29]
                   
                   /* Overwrite the Transceive context for the next reception */
                   gRFAL.TxRx.ctx.rxBuf = (uint8_t*)gRFAL.nfcfData.pollResponses[devDetected];
 800ce42:	7f7a      	ldrb	r2, [r7, #29]
 800ce44:	4613      	mov	r3, r2
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	4413      	add	r3, r2
 800ce4a:	009b      	lsls	r3, r3, #2
 800ce4c:	3368      	adds	r3, #104	; 0x68
 800ce4e:	4a33      	ldr	r2, [pc, #204]	; (800cf1c <rfalFeliCaPoll+0x1d8>)
 800ce50:	4413      	add	r3, r2
 800ce52:	3302      	adds	r3, #2
 800ce54:	4a31      	ldr	r2, [pc, #196]	; (800cf1c <rfalFeliCaPoll+0x1d8>)
 800ce56:	6253      	str	r3, [r2, #36]	; 0x24
 800ce58:	e002      	b.n	800ce60 <rfalFeliCaPoll+0x11c>
                }
                /* If the reception was not OK, mark as collision */
                else
                {
                    colDetected++;
 800ce5a:	7f3b      	ldrb	r3, [r7, #28]
 800ce5c:	3301      	adds	r3, #1
 800ce5e:	773b      	strb	r3, [r7, #28]
                }
                
                /* Check whether NRT has expired meanwhile  */
                timeout = st25r3911CheckReg( ST25R3911_REG_REGULATOR_RESULT, ST25R3911_REG_REGULATOR_RESULT_nrt_on, 0x00 );
 800ce60:	2200      	movs	r2, #0
 800ce62:	2102      	movs	r1, #2
 800ce64:	202b      	movs	r0, #43	; 0x2b
 800ce66:	f7f4 fd21 	bl	80018ac <st25r3911CheckReg>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	76bb      	strb	r3, [r7, #26]
                if( !timeout )
 800ce6e:	7ebb      	ldrb	r3, [r7, #26]
 800ce70:	f083 0301 	eor.w	r3, r3, #1
 800ce74:	b2db      	uxtb	r3, r3
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d008      	beq.n	800ce8c <rfalFeliCaPoll+0x148>
                {
                    /* Jump again into transceive Rx state for the following reception */
                    gRFAL.TxRx.status = ERR_BUSY;
 800ce7a:	4b28      	ldr	r3, [pc, #160]	; (800cf1c <rfalFeliCaPoll+0x1d8>)
 800ce7c:	2202      	movs	r2, #2
 800ce7e:	82da      	strh	r2, [r3, #22]
                    gRFAL.state       = RFAL_STATE_TXRX;
 800ce80:	4b26      	ldr	r3, [pc, #152]	; (800cf1c <rfalFeliCaPoll+0x1d8>)
 800ce82:	2203      	movs	r2, #3
 800ce84:	701a      	strb	r2, [r3, #0]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 800ce86:	4b25      	ldr	r3, [pc, #148]	; (800cf1c <rfalFeliCaPoll+0x1d8>)
 800ce88:	2251      	movs	r2, #81	; 0x51
 800ce8a:	751a      	strb	r2, [r3, #20]
                }
            }
        }while( ((nbSlots--) != 0U) && !timeout );
 800ce8c:	7efb      	ldrb	r3, [r7, #27]
 800ce8e:	1e5a      	subs	r2, r3, #1
 800ce90:	76fa      	strb	r2, [r7, #27]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d005      	beq.n	800cea2 <rfalFeliCaPoll+0x15e>
 800ce96:	7ebb      	ldrb	r3, [r7, #26]
 800ce98:	f083 0301 	eor.w	r3, r3, #1
 800ce9c:	b2db      	uxtb	r3, r3
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d1b9      	bne.n	800ce16 <rfalFeliCaPoll+0xd2>
    }
    
    /*******************************************************************************/
    /* Restore NRT to normal mode - back to previous error handling */
    rfalSetErrorHandling( curHandling );
 800cea2:	7e3b      	ldrb	r3, [r7, #24]
 800cea4:	4618      	mov	r0, r3
 800cea6:	f7fe faa9 	bl	800b3fc <rfalSetErrorHandling>
    
    /*******************************************************************************/
    /* Assign output parameters if requested                                       */
    
    if( (pollResList != NULL) && (pollResListSize > 0U) && (devDetected > 0U) )
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d01c      	beq.n	800ceea <rfalFeliCaPoll+0x1a6>
 800ceb0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d018      	beq.n	800ceea <rfalFeliCaPoll+0x1a6>
 800ceb8:	7f7b      	ldrb	r3, [r7, #29]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d015      	beq.n	800ceea <rfalFeliCaPoll+0x1a6>
    {
        ST_MEMCPY( pollResList, gRFAL.nfcfData.pollResponses, (RFAL_FELICA_POLL_RES_LEN * (uint32_t)MIN(pollResListSize, devDetected) ) );
 800cebe:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800cec2:	7f7b      	ldrb	r3, [r7, #29]
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d206      	bcs.n	800ced6 <rfalFeliCaPoll+0x192>
 800cec8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800cecc:	4613      	mov	r3, r2
 800cece:	009b      	lsls	r3, r3, #2
 800ced0:	4413      	add	r3, r2
 800ced2:	009b      	lsls	r3, r3, #2
 800ced4:	e004      	b.n	800cee0 <rfalFeliCaPoll+0x19c>
 800ced6:	7f7a      	ldrb	r2, [r7, #29]
 800ced8:	4613      	mov	r3, r2
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	4413      	add	r3, r2
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	461a      	mov	r2, r3
 800cee2:	490f      	ldr	r1, [pc, #60]	; (800cf20 <rfalFeliCaPoll+0x1dc>)
 800cee4:	6838      	ldr	r0, [r7, #0]
 800cee6:	f000 fd1e 	bl	800d926 <memcpy>
    }
    
    if( devicesDetected != NULL )
 800ceea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d002      	beq.n	800cef6 <rfalFeliCaPoll+0x1b2>
    {
        *devicesDetected = devDetected;
 800cef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef2:	7f7a      	ldrb	r2, [r7, #29]
 800cef4:	701a      	strb	r2, [r3, #0]
    }
    
    if( collisionsDetected != NULL )
 800cef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d002      	beq.n	800cf02 <rfalFeliCaPoll+0x1be>
    {
        *collisionsDetected = colDetected;
 800cefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cefe:	7f3a      	ldrb	r2, [r7, #28]
 800cf00:	701a      	strb	r2, [r3, #0]
    }
    
    return (( (colDetected != 0U) || (devDetected != 0U)) ? ERR_NONE : ret);
 800cf02:	7f3b      	ldrb	r3, [r7, #28]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d104      	bne.n	800cf12 <rfalFeliCaPoll+0x1ce>
 800cf08:	7f7b      	ldrb	r3, [r7, #29]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d101      	bne.n	800cf12 <rfalFeliCaPoll+0x1ce>
 800cf0e:	8bfb      	ldrh	r3, [r7, #30]
 800cf10:	e000      	b.n	800cf14 <rfalFeliCaPoll+0x1d0>
 800cf12:	2300      	movs	r3, #0
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3720      	adds	r7, #32
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}
 800cf1c:	20000a54 	.word	0x20000a54
 800cf20:	20000abe 	.word	0x20000abe

0800cf24 <rfalWakeUpModeStart>:

#if RFAL_FEATURE_WAKEUP_MODE

/*******************************************************************************/
ReturnCode rfalWakeUpModeStart( const rfalWakeUpConfig *config )
{
 800cf24:	b5b0      	push	{r4, r5, r7, lr}
 800cf26:	b086      	sub	sp, #24
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
    uint8_t                reg;
    uint32_t               irqs;
    
    /* The Wake-Up procedure is explained in detail in Application Note: AN4985 */
    
    if( config == NULL )
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d130      	bne.n	800cf94 <rfalWakeUpModeStart+0x70>
    {
        gRFAL.wum.cfg.period      = RFAL_WUM_PERIOD_500MS;
 800cf32:	4bad      	ldr	r3, [pc, #692]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800cf34:	2214      	movs	r2, #20
 800cf36:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
        gRFAL.wum.cfg.irqTout     = false;
 800cf3a:	4bab      	ldr	r3, [pc, #684]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
        gRFAL.wum.cfg.swTagDetect = false;
 800cf42:	4ba9      	ldr	r3, [pc, #676]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800cf44:	2200      	movs	r2, #0
 800cf46:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
      
        gRFAL.wum.cfg.indAmp.enabled   = true;
 800cf4a:	4ba7      	ldr	r3, [pc, #668]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800cf4c:	2201      	movs	r2, #1
 800cf4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        gRFAL.wum.cfg.indPha.enabled   = true;
 800cf52:	4ba5      	ldr	r3, [pc, #660]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800cf54:	2201      	movs	r2, #1
 800cf56:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        gRFAL.wum.cfg.cap.enabled      = false;
 800cf5a:	4ba3      	ldr	r3, [pc, #652]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        gRFAL.wum.cfg.indAmp.delta     = 2U;
 800cf62:	4ba1      	ldr	r3, [pc, #644]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800cf64:	2202      	movs	r2, #2
 800cf66:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
        gRFAL.wum.cfg.indAmp.reference = RFAL_WUM_REFERENCE_AUTO;
 800cf6a:	4b9f      	ldr	r3, [pc, #636]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800cf6c:	22ff      	movs	r2, #255	; 0xff
 800cf6e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
        gRFAL.wum.cfg.indAmp.autoAvg   = false;
 800cf72:	4b9d      	ldr	r3, [pc, #628]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800cf74:	2200      	movs	r2, #0
 800cf76:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
        gRFAL.wum.cfg.indPha.delta     = 2U;
 800cf7a:	4b9b      	ldr	r3, [pc, #620]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800cf7c:	2202      	movs	r2, #2
 800cf7e:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
        gRFAL.wum.cfg.indPha.reference = RFAL_WUM_REFERENCE_AUTO;
 800cf82:	4b99      	ldr	r3, [pc, #612]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800cf84:	22ff      	movs	r2, #255	; 0xff
 800cf86:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        gRFAL.wum.cfg.indPha.autoAvg   = false;
 800cf8a:	4b97      	ldr	r3, [pc, #604]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800cf92:	e00e      	b.n	800cfb2 <rfalWakeUpModeStart+0x8e>
    }
    else
    {
        gRFAL.wum.cfg = *config;
 800cf94:	4b94      	ldr	r3, [pc, #592]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800cf96:	687a      	ldr	r2, [r7, #4]
 800cf98:	3355      	adds	r3, #85	; 0x55
 800cf9a:	6811      	ldr	r1, [r2, #0]
 800cf9c:	6855      	ldr	r5, [r2, #4]
 800cf9e:	6894      	ldr	r4, [r2, #8]
 800cfa0:	68d0      	ldr	r0, [r2, #12]
 800cfa2:	6019      	str	r1, [r3, #0]
 800cfa4:	605d      	str	r5, [r3, #4]
 800cfa6:	609c      	str	r4, [r3, #8]
 800cfa8:	60d8      	str	r0, [r3, #12]
 800cfaa:	6911      	ldr	r1, [r2, #16]
 800cfac:	6119      	str	r1, [r3, #16]
 800cfae:	7d12      	ldrb	r2, [r2, #20]
 800cfb0:	751a      	strb	r2, [r3, #20]
    }
    
    
    /* Check for valid configuration */
    if( (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  || 
 800cfb2:	4b8d      	ldr	r3, [pc, #564]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800cfb4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d009      	beq.n	800cfd0 <rfalWakeUpModeStart+0xac>
 800cfbc:	4b8a      	ldr	r3, [pc, #552]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800cfbe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d121      	bne.n	800d00a <rfalWakeUpModeStart+0xe6>
 800cfc6:	4b88      	ldr	r3, [pc, #544]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800cfc8:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d11c      	bne.n	800d00a <rfalWakeUpModeStart+0xe6>
        (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 800cfd0:	4b85      	ldr	r3, [pc, #532]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800cfd2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800cfd6:	f083 0301 	eor.w	r3, r3, #1
 800cfda:	b2db      	uxtb	r3, r3
    if( (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  || 
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d00f      	beq.n	800d000 <rfalWakeUpModeStart+0xdc>
        (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 800cfe0:	4b81      	ldr	r3, [pc, #516]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800cfe2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800cfe6:	f083 0301 	eor.w	r3, r3, #1
 800cfea:	b2db      	uxtb	r3, r3
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d007      	beq.n	800d000 <rfalWakeUpModeStart+0xdc>
 800cff0:	4b7d      	ldr	r3, [pc, #500]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800cff2:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800cff6:	f083 0301 	eor.w	r3, r3, #1
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d104      	bne.n	800d00a <rfalWakeUpModeStart+0xe6>
         gRFAL.wum.cfg.swTagDetect                                                                         )
 800d000:	4b79      	ldr	r3, [pc, #484]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800d002:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
        (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 800d006:	2b00      	cmp	r3, #0
 800d008:	d001      	beq.n	800d00e <rfalWakeUpModeStart+0xea>
    {
        return ERR_PARAM;
 800d00a:	2307      	movs	r3, #7
 800d00c:	e14f      	b.n	800d2ae <rfalWakeUpModeStart+0x38a>
    }
    
    irqs = ST25R3911_IRQ_MASK_NONE;
 800d00e:	2300      	movs	r3, #0
 800d010:	613b      	str	r3, [r7, #16]
    
    
    /* Disable Tx, Rx, External Field Detector and set default ISO14443A mode */
    st25r3911TxRxOff();
 800d012:	f7f4 fa82 	bl	800151a <st25r3911TxRxOff>
    st25r3911ClrRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 800d016:	2110      	movs	r1, #16
 800d018:	2009      	movs	r0, #9
 800d01a:	f7f4 ffbd 	bl	8001f98 <st25r3911ClrRegisterBits>
    st25r3911ChangeRegisterBits(ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ | ST25R3911_REG_MODE_mask_om), (ST25R3911_REG_MODE_targ_init | ST25R3911_REG_MODE_om_iso14443a) );
 800d01e:	2208      	movs	r2, #8
 800d020:	21f8      	movs	r1, #248	; 0xf8
 800d022:	2003      	movs	r0, #3
 800d024:	f7f4 fff9 	bl	800201a <st25r3911ChangeRegisterBits>
    
    /* Set Analog configurations for Wake-up On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_ON) );
 800d028:	2004      	movs	r0, #4
 800d02a:	f7f7 fac5 	bl	80045b8 <rfalSetAnalogConfig>
    
    /*******************************************************************************/
    /* Prepare Wake-Up Timer Control Register */
    reg  = (uint8_t)(((uint8_t)gRFAL.wum.cfg.period & 0x0FU) << ST25R3911_REG_WUP_TIMER_CONTROL_shift_wut);
 800d02e:	4b6e      	ldr	r3, [pc, #440]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800d030:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d034:	011b      	lsls	r3, r3, #4
 800d036:	75fb      	strb	r3, [r7, #23]
    reg |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.period < (uint8_t)RFAL_WUM_PERIOD_100MS) ? ST25R3911_REG_WUP_TIMER_CONTROL_wur : 0x00U);
 800d038:	4b6b      	ldr	r3, [pc, #428]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800d03a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d03e:	2b0f      	cmp	r3, #15
 800d040:	d802      	bhi.n	800d048 <rfalWakeUpModeStart+0x124>
 800d042:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800d046:	e000      	b.n	800d04a <rfalWakeUpModeStart+0x126>
 800d048:	2200      	movs	r2, #0
 800d04a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d04e:	4313      	orrs	r3, r2
 800d050:	b25b      	sxtb	r3, r3
 800d052:	75fb      	strb	r3, [r7, #23]
    
    if(gRFAL.wum.cfg.irqTout)
 800d054:	4b64      	ldr	r3, [pc, #400]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800d056:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d007      	beq.n	800d06e <rfalWakeUpModeStart+0x14a>
    {
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wto;
 800d05e:	7dfb      	ldrb	r3, [r7, #23]
 800d060:	f043 0308 	orr.w	r3, r3, #8
 800d064:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WT;
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d06c:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Inductive Amplitude is to be performed */
    if( gRFAL.wum.cfg.indAmp.enabled )
 800d06e:	4b5e      	ldr	r3, [pc, #376]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800d070:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d074:	2b00      	cmp	r3, #0
 800d076:	d04c      	beq.n	800d112 <rfalWakeUpModeStart+0x1ee>
    {
        aux  = (uint8_t)((gRFAL.wum.cfg.indAmp.delta) << ST25R3911_REG_AMPLITUDE_MEASURE_CONF_shift_am_d);
 800d078:	4b5b      	ldr	r3, [pc, #364]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800d07a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d07e:	011b      	lsls	r3, r3, #4
 800d080:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.aaInclMeas ? ST25R3911_REG_AMPLITUDE_MEASURE_CONF_am_aam : 0x00U);
 800d082:	4b59      	ldr	r3, [pc, #356]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800d084:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d001      	beq.n	800d090 <rfalWakeUpModeStart+0x16c>
 800d08c:	2208      	movs	r2, #8
 800d08e:	e000      	b.n	800d092 <rfalWakeUpModeStart+0x16e>
 800d090:	2200      	movs	r2, #0
 800d092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d096:	4313      	orrs	r3, r2
 800d098:	b25b      	sxtb	r3, r3
 800d09a:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indAmp.aaWeight << ST25R3911_REG_AMPLITUDE_MEASURE_CONF_shift_am_aew) & ST25R3911_REG_AMPLITUDE_MEASURE_CONF_mask_am_aew);
 800d09c:	4b52      	ldr	r3, [pc, #328]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800d09e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d0a2:	005b      	lsls	r3, r3, #1
 800d0a4:	b2db      	uxtb	r3, r3
 800d0a6:	b25b      	sxtb	r3, r3
 800d0a8:	f003 0306 	and.w	r3, r3, #6
 800d0ac:	b25a      	sxtb	r2, r3
 800d0ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0b2:	4313      	orrs	r3, r2
 800d0b4:	b25b      	sxtb	r3, r3
 800d0b6:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.autoAvg ? ST25R3911_REG_AMPLITUDE_MEASURE_CONF_am_ae : 0x00U);
 800d0b8:	4b4b      	ldr	r3, [pc, #300]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800d0ba:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800d0be:	b25a      	sxtb	r2, r3
 800d0c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	b25b      	sxtb	r3, r3
 800d0c8:	73fb      	strb	r3, [r7, #15]
        
        st25r3911WriteRegister( ST25R3911_REG_AMPLITUDE_MEASURE_CONF, aux );
 800d0ca:	7bfb      	ldrb	r3, [r7, #15]
 800d0cc:	4619      	mov	r1, r3
 800d0ce:	2032      	movs	r0, #50	; 0x32
 800d0d0:	f7f4 ff18 	bl	8001f04 <st25r3911WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.indAmp.autoAvg )
 800d0d4:	4b44      	ldr	r3, [pc, #272]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800d0d6:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800d0da:	f083 0301 	eor.w	r3, r3, #1
 800d0de:	b2db      	uxtb	r3, r3
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d00e      	beq.n	800d102 <rfalWakeUpModeStart+0x1de>
        {
            if( gRFAL.wum.cfg.indAmp.reference == RFAL_WUM_REFERENCE_AUTO )
 800d0e4:	4b40      	ldr	r3, [pc, #256]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800d0e6:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800d0ea:	2bff      	cmp	r3, #255	; 0xff
 800d0ec:	d102      	bne.n	800d0f4 <rfalWakeUpModeStart+0x1d0>
            {
                st25r3911MeasureAmplitude( &gRFAL.wum.cfg.indAmp.reference );
 800d0ee:	483f      	ldr	r0, [pc, #252]	; (800d1ec <rfalWakeUpModeStart+0x2c8>)
 800d0f0:	f7f4 fac1 	bl	8001676 <st25r3911MeasureAmplitude>
            }
            st25r3911WriteRegister( ST25R3911_REG_AMPLITUDE_MEASURE_REF, gRFAL.wum.cfg.indAmp.reference );
 800d0f4:	4b3c      	ldr	r3, [pc, #240]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800d0f6:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	2033      	movs	r0, #51	; 0x33
 800d0fe:	f7f4 ff01 	bl	8001f04 <st25r3911WriteRegister>
        }
        
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wam;
 800d102:	7dfb      	ldrb	r3, [r7, #23]
 800d104:	f043 0304 	orr.w	r3, r3, #4
 800d108:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WAM;
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d110:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Inductive Phase is to be performed */
    if( gRFAL.wum.cfg.indPha.enabled )
 800d112:	4b35      	ldr	r3, [pc, #212]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800d114:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d04c      	beq.n	800d1b6 <rfalWakeUpModeStart+0x292>
    {
        aux  = (uint8_t)((gRFAL.wum.cfg.indPha.delta) << ST25R3911_REG_PHASE_MEASURE_CONF_shift_pm_d);
 800d11c:	4b32      	ldr	r3, [pc, #200]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800d11e:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800d122:	011b      	lsls	r3, r3, #4
 800d124:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indPha.aaInclMeas ? ST25R3911_REG_PHASE_MEASURE_CONF_pm_aam : 0x00U);
 800d126:	4b30      	ldr	r3, [pc, #192]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800d128:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d001      	beq.n	800d134 <rfalWakeUpModeStart+0x210>
 800d130:	2208      	movs	r2, #8
 800d132:	e000      	b.n	800d136 <rfalWakeUpModeStart+0x212>
 800d134:	2200      	movs	r2, #0
 800d136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d13a:	4313      	orrs	r3, r2
 800d13c:	b25b      	sxtb	r3, r3
 800d13e:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indPha.aaWeight << ST25R3911_REG_PHASE_MEASURE_CONF_shift_pm_aew) & ST25R3911_REG_PHASE_MEASURE_CONF_mask_pm_aew);
 800d140:	4b29      	ldr	r3, [pc, #164]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800d142:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800d146:	005b      	lsls	r3, r3, #1
 800d148:	b2db      	uxtb	r3, r3
 800d14a:	b25b      	sxtb	r3, r3
 800d14c:	f003 0306 	and.w	r3, r3, #6
 800d150:	b25a      	sxtb	r2, r3
 800d152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d156:	4313      	orrs	r3, r2
 800d158:	b25b      	sxtb	r3, r3
 800d15a:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indPha.autoAvg ? ST25R3911_REG_PHASE_MEASURE_CONF_pm_ae : 0x00U);
 800d15c:	4b22      	ldr	r3, [pc, #136]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800d15e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800d162:	b25a      	sxtb	r2, r3
 800d164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d168:	4313      	orrs	r3, r2
 800d16a:	b25b      	sxtb	r3, r3
 800d16c:	73fb      	strb	r3, [r7, #15]
        
        st25r3911WriteRegister( ST25R3911_REG_PHASE_MEASURE_CONF, aux );
 800d16e:	7bfb      	ldrb	r3, [r7, #15]
 800d170:	4619      	mov	r1, r3
 800d172:	2036      	movs	r0, #54	; 0x36
 800d174:	f7f4 fec6 	bl	8001f04 <st25r3911WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.indPha.autoAvg )
 800d178:	4b1b      	ldr	r3, [pc, #108]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800d17a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800d17e:	f083 0301 	eor.w	r3, r3, #1
 800d182:	b2db      	uxtb	r3, r3
 800d184:	2b00      	cmp	r3, #0
 800d186:	d00e      	beq.n	800d1a6 <rfalWakeUpModeStart+0x282>
        {
            if( gRFAL.wum.cfg.indPha.reference == RFAL_WUM_REFERENCE_AUTO )
 800d188:	4b17      	ldr	r3, [pc, #92]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800d18a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800d18e:	2bff      	cmp	r3, #255	; 0xff
 800d190:	d102      	bne.n	800d198 <rfalWakeUpModeStart+0x274>
            {
                st25r3911MeasurePhase( &gRFAL.wum.cfg.indPha.reference );
 800d192:	4817      	ldr	r0, [pc, #92]	; (800d1f0 <rfalWakeUpModeStart+0x2cc>)
 800d194:	f7f4 fa7d 	bl	8001692 <st25r3911MeasurePhase>
            }
            st25r3911WriteRegister( ST25R3911_REG_PHASE_MEASURE_REF, gRFAL.wum.cfg.indPha.reference );
 800d198:	4b13      	ldr	r3, [pc, #76]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800d19a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800d19e:	4619      	mov	r1, r3
 800d1a0:	2037      	movs	r0, #55	; 0x37
 800d1a2:	f7f4 feaf 	bl	8001f04 <st25r3911WriteRegister>
        }
        
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wph;
 800d1a6:	7dfb      	ldrb	r3, [r7, #23]
 800d1a8:	f043 0302 	orr.w	r3, r3, #2
 800d1ac:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WPH;
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d1b4:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Capacitive is to be performed */
    if( gRFAL.wum.cfg.cap.enabled )
 800d1b6:	4b0c      	ldr	r3, [pc, #48]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800d1b8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d05a      	beq.n	800d276 <rfalWakeUpModeStart+0x352>
    {
        /*******************************************************************************/
        /* Perform Capacitive sensor calibration */
        
        /* Disable Oscillator and Field */
        st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 800d1c0:	2188      	movs	r1, #136	; 0x88
 800d1c2:	2002      	movs	r0, #2
 800d1c4:	f7f4 fee8 	bl	8001f98 <st25r3911ClrRegisterBits>
        
        /* Sensor gain should be configured on Analog Config */
        
        /* Perform calibration procedure */
        st25r3911CalibrateCapacitiveSensor( NULL );
 800d1c8:	2000      	movs	r0, #0
 800d1ca:	f7f4 fa8c 	bl	80016e6 <st25r3911CalibrateCapacitiveSensor>
        
        
        /*******************************************************************************/
        aux  = (uint8_t)((gRFAL.wum.cfg.cap.delta) << ST25R3911_REG_CAPACITANCE_MEASURE_CONF_shift_cm_d);
 800d1ce:	4b06      	ldr	r3, [pc, #24]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800d1d0:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800d1d4:	011b      	lsls	r3, r3, #4
 800d1d6:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.cap.aaInclMeas ? ST25R3911_REG_CAPACITANCE_MEASURE_CONF_cm_aam : 0x00U);
 800d1d8:	4b03      	ldr	r3, [pc, #12]	; (800d1e8 <rfalWakeUpModeStart+0x2c4>)
 800d1da:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d008      	beq.n	800d1f4 <rfalWakeUpModeStart+0x2d0>
 800d1e2:	2208      	movs	r2, #8
 800d1e4:	e007      	b.n	800d1f6 <rfalWakeUpModeStart+0x2d2>
 800d1e6:	bf00      	nop
 800d1e8:	20000a54 	.word	0x20000a54
 800d1ec:	20000aae 	.word	0x20000aae
 800d1f0:	20000ab4 	.word	0x20000ab4
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1fa:	4313      	orrs	r3, r2
 800d1fc:	b25b      	sxtb	r3, r3
 800d1fe:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.cap.aaWeight << ST25R3911_REG_CAPACITANCE_MEASURE_CONF_shift_cm_aew) & ST25R3911_REG_CAPACITANCE_MEASURE_CONF_mask_cm_aew);
 800d200:	4b2d      	ldr	r3, [pc, #180]	; (800d2b8 <rfalWakeUpModeStart+0x394>)
 800d202:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d206:	005b      	lsls	r3, r3, #1
 800d208:	b2db      	uxtb	r3, r3
 800d20a:	b25b      	sxtb	r3, r3
 800d20c:	f003 0306 	and.w	r3, r3, #6
 800d210:	b25a      	sxtb	r2, r3
 800d212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d216:	4313      	orrs	r3, r2
 800d218:	b25b      	sxtb	r3, r3
 800d21a:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.cap.autoAvg ? ST25R3911_REG_CAPACITANCE_MEASURE_CONF_cm_ae : 0x00U);
 800d21c:	4b26      	ldr	r3, [pc, #152]	; (800d2b8 <rfalWakeUpModeStart+0x394>)
 800d21e:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800d222:	b25a      	sxtb	r2, r3
 800d224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d228:	4313      	orrs	r3, r2
 800d22a:	b25b      	sxtb	r3, r3
 800d22c:	73fb      	strb	r3, [r7, #15]
        
        st25r3911WriteRegister( ST25R3911_REG_CAPACITANCE_MEASURE_CONF, aux );
 800d22e:	7bfb      	ldrb	r3, [r7, #15]
 800d230:	4619      	mov	r1, r3
 800d232:	203a      	movs	r0, #58	; 0x3a
 800d234:	f7f4 fe66 	bl	8001f04 <st25r3911WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.cap.autoAvg )
 800d238:	4b1f      	ldr	r3, [pc, #124]	; (800d2b8 <rfalWakeUpModeStart+0x394>)
 800d23a:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800d23e:	f083 0301 	eor.w	r3, r3, #1
 800d242:	b2db      	uxtb	r3, r3
 800d244:	2b00      	cmp	r3, #0
 800d246:	d00e      	beq.n	800d266 <rfalWakeUpModeStart+0x342>
        {
            if( gRFAL.wum.cfg.indPha.reference == RFAL_WUM_REFERENCE_AUTO )
 800d248:	4b1b      	ldr	r3, [pc, #108]	; (800d2b8 <rfalWakeUpModeStart+0x394>)
 800d24a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800d24e:	2bff      	cmp	r3, #255	; 0xff
 800d250:	d102      	bne.n	800d258 <rfalWakeUpModeStart+0x334>
            {
                st25r3911MeasureCapacitance( &gRFAL.wum.cfg.cap.reference );
 800d252:	481a      	ldr	r0, [pc, #104]	; (800d2bc <rfalWakeUpModeStart+0x398>)
 800d254:	f7f4 fa2b 	bl	80016ae <st25r3911MeasureCapacitance>
            }
            st25r3911WriteRegister( ST25R3911_REG_CAPACITANCE_MEASURE_REF, gRFAL.wum.cfg.cap.reference );
 800d258:	4b17      	ldr	r3, [pc, #92]	; (800d2b8 <rfalWakeUpModeStart+0x394>)
 800d25a:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800d25e:	4619      	mov	r1, r3
 800d260:	203b      	movs	r0, #59	; 0x3b
 800d262:	f7f4 fe4f 	bl	8001f04 <st25r3911WriteRegister>
        }
        
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wcap;
 800d266:	7dfb      	ldrb	r3, [r7, #23]
 800d268:	f043 0301 	orr.w	r3, r3, #1
 800d26c:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WCAP;
 800d26e:	693b      	ldr	r3, [r7, #16]
 800d270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d274:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable and clear all interrupts except Wake-Up IRQs */
    st25r3911DisableInterrupts( ST25R3911_IRQ_MASK_ALL );
 800d276:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800d27a:	f7f5 f9f3 	bl	8002664 <st25r3911DisableInterrupts>
    st25r3911GetInterrupt( irqs );
 800d27e:	6938      	ldr	r0, [r7, #16]
 800d280:	f7f5 f9ac 	bl	80025dc <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( irqs );
 800d284:	6938      	ldr	r0, [r7, #16]
 800d286:	f7f5 f9e1 	bl	800264c <st25r3911EnableInterrupts>
    
    /* Enable Low Power Wake-Up Mode */
    st25r3911WriteRegister( ST25R3911_REG_WUP_TIMER_CONTROL, reg );
 800d28a:	7dfb      	ldrb	r3, [r7, #23]
 800d28c:	4619      	mov	r1, r3
 800d28e:	2031      	movs	r0, #49	; 0x31
 800d290:	f7f4 fe38 	bl	8001f04 <st25r3911WriteRegister>
    st25r3911ChangeRegisterBits( ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_en | ST25R3911_REG_OP_CONTROL_wu), ST25R3911_REG_OP_CONTROL_wu );
 800d294:	2204      	movs	r2, #4
 800d296:	2184      	movs	r1, #132	; 0x84
 800d298:	2002      	movs	r0, #2
 800d29a:	f7f4 febe 	bl	800201a <st25r3911ChangeRegisterBits>
    
    gRFAL.wum.state = RFAL_WUM_STATE_ENABLED;
 800d29e:	4b06      	ldr	r3, [pc, #24]	; (800d2b8 <rfalWakeUpModeStart+0x394>)
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    gRFAL.state     = RFAL_STATE_WUM;  
 800d2a6:	4b04      	ldr	r3, [pc, #16]	; (800d2b8 <rfalWakeUpModeStart+0x394>)
 800d2a8:	2205      	movs	r2, #5
 800d2aa:	701a      	strb	r2, [r3, #0]
      
    return ERR_NONE;
 800d2ac:	2300      	movs	r3, #0
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3718      	adds	r7, #24
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bdb0      	pop	{r4, r5, r7, pc}
 800d2b6:	bf00      	nop
 800d2b8:	20000a54 	.word	0x20000a54
 800d2bc:	20000aba 	.word	0x20000aba

0800d2c0 <rfalWakeUpModeHasWoke>:


/*******************************************************************************/
bool rfalWakeUpModeHasWoke( void )
{   
 800d2c0:	b480      	push	{r7}
 800d2c2:	af00      	add	r7, sp, #0
    return (gRFAL.wum.state >= RFAL_WUM_STATE_ENABLED_WOKE);
 800d2c4:	4b06      	ldr	r3, [pc, #24]	; (800d2e0 <rfalWakeUpModeHasWoke+0x20>)
 800d2c6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800d2ca:	2b01      	cmp	r3, #1
 800d2cc:	bf8c      	ite	hi
 800d2ce:	2301      	movhi	r3, #1
 800d2d0:	2300      	movls	r3, #0
 800d2d2:	b2db      	uxtb	r3, r3
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2dc:	4770      	bx	lr
 800d2de:	bf00      	nop
 800d2e0:	20000a54 	.word	0x20000a54

0800d2e4 <rfalRunWakeUpModeWorker>:


/*******************************************************************************/
static void rfalRunWakeUpModeWorker( void )
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b082      	sub	sp, #8
 800d2e8:	af00      	add	r7, sp, #0
    uint32_t irqs;
    
    if( gRFAL.state != RFAL_STATE_WUM )
 800d2ea:	4b1c      	ldr	r3, [pc, #112]	; (800d35c <rfalRunWakeUpModeWorker+0x78>)
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	2b05      	cmp	r3, #5
 800d2f0:	d129      	bne.n	800d346 <rfalRunWakeUpModeWorker+0x62>
    {
        return;
    }
    
    switch( gRFAL.wum.state )
 800d2f2:	4b1a      	ldr	r3, [pc, #104]	; (800d35c <rfalRunWakeUpModeWorker+0x78>)
 800d2f4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800d2f8:	3b01      	subs	r3, #1
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	d825      	bhi.n	800d34a <rfalRunWakeUpModeWorker+0x66>
    {
        case RFAL_WUM_STATE_ENABLED:
        case RFAL_WUM_STATE_ENABLED_WOKE:
            
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_WT | ST25R3911_IRQ_MASK_WAM | ST25R3911_IRQ_MASK_WPH | ST25R3911_IRQ_MASK_WCAP ) );
 800d2fe:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 800d302:	f7f5 f96b 	bl	80025dc <st25r3911GetInterrupt>
 800d306:	6078      	str	r0, [r7, #4]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d01f      	beq.n	800d34e <rfalRunWakeUpModeWorker+0x6a>
               break;  /* No interrupt to process */
            }
            
            /*******************************************************************************/
            /* Check and mark which measurement(s) cause interrupt */
            if((irqs & ST25R3911_IRQ_MASK_WAM) != 0U)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d314:	2b00      	cmp	r3, #0
 800d316:	d003      	beq.n	800d320 <rfalRunWakeUpModeWorker+0x3c>
            {
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800d318:	4b10      	ldr	r3, [pc, #64]	; (800d35c <rfalRunWakeUpModeWorker+0x78>)
 800d31a:	2202      	movs	r2, #2
 800d31c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            }
            
            if((irqs & ST25R3911_IRQ_MASK_WPH) != 0U)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d326:	2b00      	cmp	r3, #0
 800d328:	d003      	beq.n	800d332 <rfalRunWakeUpModeWorker+0x4e>
            {
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800d32a:	4b0c      	ldr	r3, [pc, #48]	; (800d35c <rfalRunWakeUpModeWorker+0x78>)
 800d32c:	2202      	movs	r2, #2
 800d32e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            }
            
            if((irqs & ST25R3911_IRQ_MASK_WCAP) != 0U)
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d00a      	beq.n	800d352 <rfalRunWakeUpModeWorker+0x6e>
            {
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800d33c:	4b07      	ldr	r3, [pc, #28]	; (800d35c <rfalRunWakeUpModeWorker+0x78>)
 800d33e:	2202      	movs	r2, #2
 800d340:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            }
            break;
 800d344:	e005      	b.n	800d352 <rfalRunWakeUpModeWorker+0x6e>
        return;
 800d346:	bf00      	nop
 800d348:	e004      	b.n	800d354 <rfalRunWakeUpModeWorker+0x70>
            
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 800d34a:	bf00      	nop
 800d34c:	e002      	b.n	800d354 <rfalRunWakeUpModeWorker+0x70>
               break;  /* No interrupt to process */
 800d34e:	bf00      	nop
 800d350:	e000      	b.n	800d354 <rfalRunWakeUpModeWorker+0x70>
            break;
 800d352:	bf00      	nop
    }
}
 800d354:	3708      	adds	r7, #8
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}
 800d35a:	bf00      	nop
 800d35c:	20000a54 	.word	0x20000a54

0800d360 <rfalWakeUpModeStop>:


/*******************************************************************************/
ReturnCode rfalWakeUpModeStop( void )
{
 800d360:	b580      	push	{r7, lr}
 800d362:	af00      	add	r7, sp, #0
    if( gRFAL.wum.state == RFAL_WUM_STATE_NOT_INIT )
 800d364:	4b0f      	ldr	r3, [pc, #60]	; (800d3a4 <rfalWakeUpModeStop+0x44>)
 800d366:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d101      	bne.n	800d372 <rfalWakeUpModeStop+0x12>
    {
        return ERR_WRONG_STATE;
 800d36e:	2321      	movs	r3, #33	; 0x21
 800d370:	e015      	b.n	800d39e <rfalWakeUpModeStop+0x3e>
    }
    
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 800d372:	4b0c      	ldr	r3, [pc, #48]	; (800d3a4 <rfalWakeUpModeStop+0x44>)
 800d374:	2200      	movs	r2, #0
 800d376:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    
    /* Re-Enable External Field Detector */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 800d37a:	2110      	movs	r1, #16
 800d37c:	2009      	movs	r0, #9
 800d37e:	f7f4 fe2e 	bl	8001fde <st25r3911SetRegisterBits>
    
    /* Disable Wake-Up Mode */
    st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800d382:	2104      	movs	r1, #4
 800d384:	2002      	movs	r0, #2
 800d386:	f7f4 fe07 	bl	8001f98 <st25r3911ClrRegisterBits>
    st25r3911DisableInterrupts( (ST25R3911_IRQ_MASK_WT | ST25R3911_IRQ_MASK_WAM | ST25R3911_IRQ_MASK_WPH | ST25R3911_IRQ_MASK_WCAP) );
 800d38a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 800d38e:	f7f5 f969 	bl	8002664 <st25r3911DisableInterrupts>
    
    /* Re-Enable the Oscillator */
    st25r3911OscOn();
 800d392:	f7f4 f8ca 	bl	800152a <st25r3911OscOn>
    
    /* Set Analog configurations for Wake-up Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_OFF) );
 800d396:	2005      	movs	r0, #5
 800d398:	f7f7 f90e 	bl	80045b8 <rfalSetAnalogConfig>
      
    return ERR_NONE;
 800d39c:	2300      	movs	r3, #0
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	bd80      	pop	{r7, pc}
 800d3a2:	bf00      	nop
 800d3a4:	20000a54 	.word	0x20000a54

0800d3a8 <rfalChipChangeRegBits>:
}


/*******************************************************************************/
ReturnCode rfalChipChangeRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	80fb      	strh	r3, [r7, #6]
 800d3b2:	460b      	mov	r3, r1
 800d3b4:	717b      	strb	r3, [r7, #5]
 800d3b6:	4613      	mov	r3, r2
 800d3b8:	713b      	strb	r3, [r7, #4]
    st25r3911ChangeRegisterBits( (uint8_t)reg, valueMask, value );
 800d3ba:	88fb      	ldrh	r3, [r7, #6]
 800d3bc:	b2db      	uxtb	r3, r3
 800d3be:	793a      	ldrb	r2, [r7, #4]
 800d3c0:	7979      	ldrb	r1, [r7, #5]
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7f4 fe29 	bl	800201a <st25r3911ChangeRegisterBits>
    return ERR_NONE;
 800d3c8:	2300      	movs	r3, #0
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3708      	adds	r7, #8
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}

0800d3d2 <rfalChipChangeTestRegBits>:


/*******************************************************************************/
ReturnCode rfalChipChangeTestRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 800d3d2:	b580      	push	{r7, lr}
 800d3d4:	b082      	sub	sp, #8
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	4603      	mov	r3, r0
 800d3da:	80fb      	strh	r3, [r7, #6]
 800d3dc:	460b      	mov	r3, r1
 800d3de:	717b      	strb	r3, [r7, #5]
 800d3e0:	4613      	mov	r3, r2
 800d3e2:	713b      	strb	r3, [r7, #4]
    st25r3911ChangeTestRegisterBits( (uint8_t)reg, valueMask, value );
 800d3e4:	88fb      	ldrh	r3, [r7, #6]
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	793a      	ldrb	r2, [r7, #4]
 800d3ea:	7979      	ldrb	r1, [r7, #5]
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7f4 fe53 	bl	8002098 <st25r3911ChangeTestRegisterBits>
    return ERR_NONE;
 800d3f2:	2300      	movs	r3, #0
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3708      	adds	r7, #8
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}

0800d3fc <rfalSt25tbPollerDoCollisionResolution>:
******************************************************************************
*/


static bool rfalSt25tbPollerDoCollisionResolution( uint8_t devLimit, rfalSt25tbListenDevice *st25tbDevList, uint8_t *devCnt )
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b086      	sub	sp, #24
 800d400:	af00      	add	r7, sp, #0
 800d402:	4603      	mov	r3, r0
 800d404:	60b9      	str	r1, [r7, #8]
 800d406:	607a      	str	r2, [r7, #4]
 800d408:	73fb      	strb	r3, [r7, #15]
    uint8_t    i;
    uint8_t    chipId;
    ReturnCode ret;
    bool col;

    col = false;
 800d40a:	2300      	movs	r3, #0
 800d40c:	74fb      	strb	r3, [r7, #19]
    
    for(i = 0; i < RFAL_ST25TB_SLOTS; i++)
 800d40e:	2300      	movs	r3, #0
 800d410:	75fb      	strb	r3, [r7, #23]
 800d412:	e072      	b.n	800d4fa <rfalSt25tbPollerDoCollisionResolution+0xfe>
    {
        platformDelay(1);  /* Wait t2: Answer to new request delay  */
 800d414:	2001      	movs	r0, #1
 800d416:	f7f5 f9f9 	bl	800280c <HAL_Delay>
        
        if( i==0U )
 800d41a:	7dfb      	ldrb	r3, [r7, #23]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d107      	bne.n	800d430 <rfalSt25tbPollerDoCollisionResolution+0x34>
        {
            /* Step 2: Send Pcall16 */
            ret = rfalSt25tbPollerPcall( &chipId );
 800d420:	f107 0312 	add.w	r3, r7, #18
 800d424:	4618      	mov	r0, r3
 800d426:	f000 f8c6 	bl	800d5b6 <rfalSt25tbPollerPcall>
 800d42a:	4603      	mov	r3, r0
 800d42c:	82bb      	strh	r3, [r7, #20]
 800d42e:	e008      	b.n	800d442 <rfalSt25tbPollerDoCollisionResolution+0x46>
        }
        else
        {
            /* Step 3-17: Send Pcall16 */
            ret = rfalSt25tbPollerSlotMarker( i, &chipId );
 800d430:	f107 0212 	add.w	r2, r7, #18
 800d434:	7dfb      	ldrb	r3, [r7, #23]
 800d436:	4611      	mov	r1, r2
 800d438:	4618      	mov	r0, r3
 800d43a:	f000 f8e2 	bl	800d602 <rfalSt25tbPollerSlotMarker>
 800d43e:	4603      	mov	r3, r0
 800d440:	82bb      	strh	r3, [r7, #20]
        }
        
        if( ret == ERR_NONE )
 800d442:	8abb      	ldrh	r3, [r7, #20]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d148      	bne.n	800d4da <rfalSt25tbPollerDoCollisionResolution+0xde>
        {
            /* Found another device */
            st25tbDevList[*devCnt].chipID       = chipId;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	781b      	ldrb	r3, [r3, #0]
 800d44c:	461a      	mov	r2, r3
 800d44e:	4613      	mov	r3, r2
 800d450:	009b      	lsls	r3, r3, #2
 800d452:	4413      	add	r3, r2
 800d454:	005b      	lsls	r3, r3, #1
 800d456:	461a      	mov	r2, r3
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	4413      	add	r3, r2
 800d45c:	7cba      	ldrb	r2, [r7, #18]
 800d45e:	701a      	strb	r2, [r3, #0]
            st25tbDevList[*devCnt].isDeselected = false;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	461a      	mov	r2, r3
 800d466:	4613      	mov	r3, r2
 800d468:	009b      	lsls	r3, r3, #2
 800d46a:	4413      	add	r3, r2
 800d46c:	005b      	lsls	r3, r3, #1
 800d46e:	461a      	mov	r2, r3
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	4413      	add	r3, r2
 800d474:	2200      	movs	r2, #0
 800d476:	725a      	strb	r2, [r3, #9]
            
            /* Select Device, retrieve its UID  */
            ret = rfalSt25tbPollerSelect( chipId );
 800d478:	7cbb      	ldrb	r3, [r7, #18]
 800d47a:	4618      	mov	r0, r3
 800d47c:	f000 f8f4 	bl	800d668 <rfalSt25tbPollerSelect>
 800d480:	4603      	mov	r3, r0
 800d482:	82bb      	strh	r3, [r7, #20]

            /* By Selecting this device, the previous gets Deselected */
            if( (*devCnt) > 0U )
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	781b      	ldrb	r3, [r3, #0]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d00b      	beq.n	800d4a4 <rfalSt25tbPollerDoCollisionResolution+0xa8>
            {
                st25tbDevList[(*devCnt)-1U].isDeselected = true;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	781b      	ldrb	r3, [r3, #0]
 800d490:	461a      	mov	r2, r3
 800d492:	4613      	mov	r3, r2
 800d494:	009b      	lsls	r3, r3, #2
 800d496:	4413      	add	r3, r2
 800d498:	005b      	lsls	r3, r3, #1
 800d49a:	3b0a      	subs	r3, #10
 800d49c:	68ba      	ldr	r2, [r7, #8]
 800d49e:	4413      	add	r3, r2
 800d4a0:	2201      	movs	r2, #1
 800d4a2:	725a      	strb	r2, [r3, #9]
            }

            if( ERR_NONE == ret )
 800d4a4:	8abb      	ldrh	r3, [r7, #20]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d10d      	bne.n	800d4c6 <rfalSt25tbPollerDoCollisionResolution+0xca>
            {
                rfalSt25tbPollerGetUID( &st25tbDevList[*devCnt].UID );
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	461a      	mov	r2, r3
 800d4b0:	4613      	mov	r3, r2
 800d4b2:	009b      	lsls	r3, r3, #2
 800d4b4:	4413      	add	r3, r2
 800d4b6:	005b      	lsls	r3, r3, #1
 800d4b8:	461a      	mov	r2, r3
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	4413      	add	r3, r2
 800d4be:	3301      	adds	r3, #1
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f000 f8fd 	bl	800d6c0 <rfalSt25tbPollerGetUID>
            }

            if( ERR_NONE == ret )
 800d4c6:	8abb      	ldrh	r3, [r7, #20]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d10e      	bne.n	800d4ea <rfalSt25tbPollerDoCollisionResolution+0xee>
            {
                (*devCnt)++;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	3301      	adds	r3, #1
 800d4d2:	b2da      	uxtb	r2, r3
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	701a      	strb	r2, [r3, #0]
 800d4d8:	e007      	b.n	800d4ea <rfalSt25tbPollerDoCollisionResolution+0xee>
            }
        }
        else if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 800d4da:	8abb      	ldrh	r3, [r7, #20]
 800d4dc:	2b15      	cmp	r3, #21
 800d4de:	d002      	beq.n	800d4e6 <rfalSt25tbPollerDoCollisionResolution+0xea>
 800d4e0:	8abb      	ldrh	r3, [r7, #20]
 800d4e2:	2b09      	cmp	r3, #9
 800d4e4:	d101      	bne.n	800d4ea <rfalSt25tbPollerDoCollisionResolution+0xee>
        {
            col = true;
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	74fb      	strb	r3, [r7, #19]
        else
        {
            /* MISRA 15.7 - Empty else */
        }
        
        if( *devCnt >= devLimit )
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	7bfa      	ldrb	r2, [r7, #15]
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d906      	bls.n	800d502 <rfalSt25tbPollerDoCollisionResolution+0x106>
    for(i = 0; i < RFAL_ST25TB_SLOTS; i++)
 800d4f4:	7dfb      	ldrb	r3, [r7, #23]
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	75fb      	strb	r3, [r7, #23]
 800d4fa:	7dfb      	ldrb	r3, [r7, #23]
 800d4fc:	2b0f      	cmp	r3, #15
 800d4fe:	d989      	bls.n	800d414 <rfalSt25tbPollerDoCollisionResolution+0x18>
 800d500:	e000      	b.n	800d504 <rfalSt25tbPollerDoCollisionResolution+0x108>
        {
            break;
 800d502:	bf00      	nop
        }
    }
    return col;
 800d504:	7cfb      	ldrb	r3, [r7, #19]
}
 800d506:	4618      	mov	r0, r3
 800d508:	3718      	adds	r7, #24
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}

0800d50e <rfalSt25tbPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalSt25tbPollerInitialize( void )
{
 800d50e:	b580      	push	{r7, lr}
 800d510:	af00      	add	r7, sp, #0
    return rfalNfcbPollerInitialize();
 800d512:	f7fc fc3b 	bl	8009d8c <rfalNfcbPollerInitialize>
 800d516:	4603      	mov	r3, r0
}
 800d518:	4618      	mov	r0, r3
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <rfalSt25tbPollerCheckPresence>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerCheckPresence( uint8_t *chipId )
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b084      	sub	sp, #16
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    uint8_t    chipIdRes;

    chipIdRes = 0x00;
 800d524:	2300      	movs	r3, #0
 800d526:	737b      	strb	r3, [r7, #13]
   
    /* Send Initiate Request */
    ret = rfalSt25tbPollerInitiate( &chipIdRes );
 800d528:	f107 030d 	add.w	r3, r7, #13
 800d52c:	4618      	mov	r0, r3
 800d52e:	f000 f815 	bl	800d55c <rfalSt25tbPollerInitiate>
 800d532:	4603      	mov	r3, r0
 800d534:	81fb      	strh	r3, [r7, #14]
    
    /*  Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 800d536:	89fb      	ldrh	r3, [r7, #14]
 800d538:	2b15      	cmp	r3, #21
 800d53a:	d002      	beq.n	800d542 <rfalSt25tbPollerCheckPresence+0x26>
 800d53c:	89fb      	ldrh	r3, [r7, #14]
 800d53e:	2b09      	cmp	r3, #9
 800d540:	d101      	bne.n	800d546 <rfalSt25tbPollerCheckPresence+0x2a>
    {
        return ERR_NONE;
 800d542:	2300      	movs	r3, #0
 800d544:	e006      	b.n	800d554 <rfalSt25tbPollerCheckPresence+0x38>
    }
    
    /* Copy chip ID if requested */
    if( chipId != NULL )
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d002      	beq.n	800d552 <rfalSt25tbPollerCheckPresence+0x36>
    {
        *chipId = chipIdRes;
 800d54c:	7b7a      	ldrb	r2, [r7, #13]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	701a      	strb	r2, [r3, #0]
    }
    
    return ret;
 800d552:	89fb      	ldrh	r3, [r7, #14]
}
 800d554:	4618      	mov	r0, r3
 800d556:	3710      	adds	r7, #16
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}

0800d55c <rfalSt25tbPollerInitiate>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerInitiate( uint8_t *chipId )
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b08a      	sub	sp, #40	; 0x28
 800d560:	af04      	add	r7, sp, #16
 800d562:	6078      	str	r0, [r7, #4]
    uint16_t              rxLen;
    rfalSt25tbInitiateReq initiateReq;
    uint8_t               rxBuf[RFAL_ST25TB_CHIP_ID_LEN + RFAL_ST25TB_CRC_LEN]; /* In case we receive less data that CRC, RF layer will not remove the CRC from buffer */
    
    /* Compute Initiate Request */
    initiateReq.cmd1   = RFAL_ST25TB_INITIATE_CMD1;
 800d564:	2306      	movs	r3, #6
 800d566:	743b      	strb	r3, [r7, #16]
    initiateReq.cmd2   = RFAL_ST25TB_INITIATE_CMD2;
 800d568:	2300      	movs	r3, #0
 800d56a:	747b      	strb	r3, [r7, #17]
    
    /* Send Initiate Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&initiateReq, sizeof(rfalSt25tbInitiateReq), (uint8_t*)rxBuf, sizeof(rxBuf), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800d56c:	f107 020c 	add.w	r2, r7, #12
 800d570:	f107 0010 	add.w	r0, r7, #16
 800d574:	f241 036d 	movw	r3, #4205	; 0x106d
 800d578:	9302      	str	r3, [sp, #8]
 800d57a:	2300      	movs	r3, #0
 800d57c:	9301      	str	r3, [sp, #4]
 800d57e:	f107 0314 	add.w	r3, r7, #20
 800d582:	9300      	str	r3, [sp, #0]
 800d584:	2303      	movs	r3, #3
 800d586:	2102      	movs	r1, #2
 800d588:	f7fe f9d2 	bl	800b930 <rfalTransceiveBlockingTxRx>
 800d58c:	4603      	mov	r3, r0
 800d58e:	82fb      	strh	r3, [r7, #22]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 800d590:	8afb      	ldrh	r3, [r7, #22]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d104      	bne.n	800d5a0 <rfalSt25tbPollerInitiate+0x44>
 800d596:	8abb      	ldrh	r3, [r7, #20]
 800d598:	2b01      	cmp	r3, #1
 800d59a:	d001      	beq.n	800d5a0 <rfalSt25tbPollerInitiate+0x44>
    {
        return ERR_PROTO;
 800d59c:	230b      	movs	r3, #11
 800d59e:	e006      	b.n	800d5ae <rfalSt25tbPollerInitiate+0x52>
    }
    
    /* Copy chip ID if requested */
    if( chipId != NULL )
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d002      	beq.n	800d5ac <rfalSt25tbPollerInitiate+0x50>
    {
        *chipId = *rxBuf;
 800d5a6:	7b3a      	ldrb	r2, [r7, #12]
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	701a      	strb	r2, [r3, #0]
    }
    
    return ret;
 800d5ac:	8afb      	ldrh	r3, [r7, #22]
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3718      	adds	r7, #24
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}

0800d5b6 <rfalSt25tbPollerPcall>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerPcall( uint8_t *chipId )
{
 800d5b6:	b580      	push	{r7, lr}
 800d5b8:	b088      	sub	sp, #32
 800d5ba:	af04      	add	r7, sp, #16
 800d5bc:	6078      	str	r0, [r7, #4]
    ReturnCode         ret;
    uint16_t           rxLen;
    rfalSt25tbPcallReq pcallReq;

    /* Compute Pcal16 Request */
    pcallReq.cmd1   = RFAL_ST25TB_PCALL_CMD1;
 800d5be:	2306      	movs	r3, #6
 800d5c0:	723b      	strb	r3, [r7, #8]
    pcallReq.cmd2   = RFAL_ST25TB_PCALL_CMD2;
 800d5c2:	2304      	movs	r3, #4
 800d5c4:	727b      	strb	r3, [r7, #9]
    
    /* Send Pcal16 Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&pcallReq, sizeof(rfalSt25tbPcallReq), (uint8_t*)chipId, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800d5c6:	f107 0008 	add.w	r0, r7, #8
 800d5ca:	f241 036d 	movw	r3, #4205	; 0x106d
 800d5ce:	9302      	str	r3, [sp, #8]
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	9301      	str	r3, [sp, #4]
 800d5d4:	f107 030c 	add.w	r3, r7, #12
 800d5d8:	9300      	str	r3, [sp, #0]
 800d5da:	2301      	movs	r3, #1
 800d5dc:	687a      	ldr	r2, [r7, #4]
 800d5de:	2102      	movs	r1, #2
 800d5e0:	f7fe f9a6 	bl	800b930 <rfalTransceiveBlockingTxRx>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 800d5e8:	89fb      	ldrh	r3, [r7, #14]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d104      	bne.n	800d5f8 <rfalSt25tbPollerPcall+0x42>
 800d5ee:	89bb      	ldrh	r3, [r7, #12]
 800d5f0:	2b01      	cmp	r3, #1
 800d5f2:	d001      	beq.n	800d5f8 <rfalSt25tbPollerPcall+0x42>
    {
        return ERR_PROTO;
 800d5f4:	230b      	movs	r3, #11
 800d5f6:	e000      	b.n	800d5fa <rfalSt25tbPollerPcall+0x44>
    }
    
    return ret;
 800d5f8:	89fb      	ldrh	r3, [r7, #14]
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3710      	adds	r7, #16
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}

0800d602 <rfalSt25tbPollerSlotMarker>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerSlotMarker( uint8_t slotNum, uint8_t *chipIdRes )
{
 800d602:	b580      	push	{r7, lr}
 800d604:	b088      	sub	sp, #32
 800d606:	af04      	add	r7, sp, #16
 800d608:	4603      	mov	r3, r0
 800d60a:	6039      	str	r1, [r7, #0]
 800d60c:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    uint16_t   rxLen;
    uint8_t    slotMarker;

    if( (slotNum == 0U) || (slotNum > 15U) )
 800d60e:	79fb      	ldrb	r3, [r7, #7]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d002      	beq.n	800d61a <rfalSt25tbPollerSlotMarker+0x18>
 800d614:	79fb      	ldrb	r3, [r7, #7]
 800d616:	2b0f      	cmp	r3, #15
 800d618:	d901      	bls.n	800d61e <rfalSt25tbPollerSlotMarker+0x1c>
    {
        return ERR_PARAM;
 800d61a:	2307      	movs	r3, #7
 800d61c:	e020      	b.n	800d660 <rfalSt25tbPollerSlotMarker+0x5e>
    }
    
    /* Compute SlotMarker */
    slotMarker = ( ((slotNum & RFAL_ST25TB_SLOTNUM_MASK) << RFAL_ST25TB_SLOTNUM_SHIFT) | RFAL_ST25TB_PCALL_CMD1 );
 800d61e:	79fb      	ldrb	r3, [r7, #7]
 800d620:	011b      	lsls	r3, r3, #4
 800d622:	b2db      	uxtb	r3, r3
 800d624:	f043 0306 	orr.w	r3, r3, #6
 800d628:	b2db      	uxtb	r3, r3
 800d62a:	72fb      	strb	r3, [r7, #11]
    
    
    /* Send SlotMarker */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&slotMarker, RFAL_ST25TB_CMD_LEN, (uint8_t*)chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800d62c:	f107 000b 	add.w	r0, r7, #11
 800d630:	f241 036d 	movw	r3, #4205	; 0x106d
 800d634:	9302      	str	r3, [sp, #8]
 800d636:	2300      	movs	r3, #0
 800d638:	9301      	str	r3, [sp, #4]
 800d63a:	f107 030c 	add.w	r3, r7, #12
 800d63e:	9300      	str	r3, [sp, #0]
 800d640:	2301      	movs	r3, #1
 800d642:	683a      	ldr	r2, [r7, #0]
 800d644:	2101      	movs	r1, #1
 800d646:	f7fe f973 	bl	800b930 <rfalTransceiveBlockingTxRx>
 800d64a:	4603      	mov	r3, r0
 800d64c:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid ChipID Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 800d64e:	89fb      	ldrh	r3, [r7, #14]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d104      	bne.n	800d65e <rfalSt25tbPollerSlotMarker+0x5c>
 800d654:	89bb      	ldrh	r3, [r7, #12]
 800d656:	2b01      	cmp	r3, #1
 800d658:	d001      	beq.n	800d65e <rfalSt25tbPollerSlotMarker+0x5c>
    {
        return ERR_PROTO;
 800d65a:	230b      	movs	r3, #11
 800d65c:	e000      	b.n	800d660 <rfalSt25tbPollerSlotMarker+0x5e>
    }
    
    return ret;
 800d65e:	89fb      	ldrh	r3, [r7, #14]
}
 800d660:	4618      	mov	r0, r3
 800d662:	3710      	adds	r7, #16
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}

0800d668 <rfalSt25tbPollerSelect>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerSelect( uint8_t chipId )
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b08a      	sub	sp, #40	; 0x28
 800d66c:	af04      	add	r7, sp, #16
 800d66e:	4603      	mov	r3, r0
 800d670:	71fb      	strb	r3, [r7, #7]
    uint16_t            rxLen;    
    rfalSt25tbSelectReq selectReq;
    uint8_t             chipIdRes;

    /* Compute Select Request */
    selectReq.cmd    = RFAL_ST25TB_SELECT_CMD;
 800d672:	230e      	movs	r3, #14
 800d674:	743b      	strb	r3, [r7, #16]
    selectReq.chipId = chipId;
 800d676:	79fb      	ldrb	r3, [r7, #7]
 800d678:	747b      	strb	r3, [r7, #17]
    
    /* Send Select Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&selectReq, sizeof(rfalSt25tbSelectReq), (uint8_t*)&chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800d67a:	f107 020f 	add.w	r2, r7, #15
 800d67e:	f107 0010 	add.w	r0, r7, #16
 800d682:	f241 036d 	movw	r3, #4205	; 0x106d
 800d686:	9302      	str	r3, [sp, #8]
 800d688:	2300      	movs	r3, #0
 800d68a:	9301      	str	r3, [sp, #4]
 800d68c:	f107 0314 	add.w	r3, r7, #20
 800d690:	9300      	str	r3, [sp, #0]
 800d692:	2301      	movs	r3, #1
 800d694:	2102      	movs	r1, #2
 800d696:	f7fe f94b 	bl	800b930 <rfalTransceiveBlockingTxRx>
 800d69a:	4603      	mov	r3, r0
 800d69c:	82fb      	strh	r3, [r7, #22]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && ((rxLen != RFAL_ST25TB_CHIP_ID_LEN) || (chipIdRes != chipId)) )
 800d69e:	8afb      	ldrh	r3, [r7, #22]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d108      	bne.n	800d6b6 <rfalSt25tbPollerSelect+0x4e>
 800d6a4:	8abb      	ldrh	r3, [r7, #20]
 800d6a6:	2b01      	cmp	r3, #1
 800d6a8:	d103      	bne.n	800d6b2 <rfalSt25tbPollerSelect+0x4a>
 800d6aa:	7bfb      	ldrb	r3, [r7, #15]
 800d6ac:	79fa      	ldrb	r2, [r7, #7]
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d001      	beq.n	800d6b6 <rfalSt25tbPollerSelect+0x4e>
    {
        return ERR_PROTO;
 800d6b2:	230b      	movs	r3, #11
 800d6b4:	e000      	b.n	800d6b8 <rfalSt25tbPollerSelect+0x50>
    }
    
    return ret;
 800d6b6:	8afb      	ldrh	r3, [r7, #22]
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3718      	adds	r7, #24
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}

0800d6c0 <rfalSt25tbPollerGetUID>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerGetUID( rfalSt25tbUID *UID )
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b088      	sub	sp, #32
 800d6c4:	af04      	add	r7, sp, #16
 800d6c6:	6078      	str	r0, [r7, #4]
    uint16_t   rxLen;
    uint8_t    getUidReq;
    

    /* Compute Get UID Request */
    getUidReq = RFAL_ST25TB_GET_UID_CMD;
 800d6c8:	230b      	movs	r3, #11
 800d6ca:	72fb      	strb	r3, [r7, #11]
    
    /* Send Select Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&getUidReq, RFAL_ST25TB_CMD_LEN, (uint8_t*)UID, sizeof(rfalSt25tbUID), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800d6cc:	f107 000b 	add.w	r0, r7, #11
 800d6d0:	f241 036d 	movw	r3, #4205	; 0x106d
 800d6d4:	9302      	str	r3, [sp, #8]
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	9301      	str	r3, [sp, #4]
 800d6da:	f107 030c 	add.w	r3, r7, #12
 800d6de:	9300      	str	r3, [sp, #0]
 800d6e0:	2308      	movs	r3, #8
 800d6e2:	687a      	ldr	r2, [r7, #4]
 800d6e4:	2101      	movs	r1, #1
 800d6e6:	f7fe f923 	bl	800b930 <rfalTransceiveBlockingTxRx>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid UID Response */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_UID_LEN) )
 800d6ee:	89fb      	ldrh	r3, [r7, #14]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d104      	bne.n	800d6fe <rfalSt25tbPollerGetUID+0x3e>
 800d6f4:	89bb      	ldrh	r3, [r7, #12]
 800d6f6:	2b08      	cmp	r3, #8
 800d6f8:	d001      	beq.n	800d6fe <rfalSt25tbPollerGetUID+0x3e>
    {
        return ERR_PROTO;
 800d6fa:	230b      	movs	r3, #11
 800d6fc:	e000      	b.n	800d700 <rfalSt25tbPollerGetUID+0x40>
    }
    
    return ret;
 800d6fe:	89fb      	ldrh	r3, [r7, #14]
}
 800d700:	4618      	mov	r0, r3
 800d702:	3710      	adds	r7, #16
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}

0800d708 <rfalSt25tbPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerCollisionResolution( uint8_t devLimit, rfalSt25tbListenDevice *st25tbDevList, uint8_t *devCnt )
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b086      	sub	sp, #24
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	4603      	mov	r3, r0
 800d710:	60b9      	str	r1, [r7, #8]
 800d712:	607a      	str	r2, [r7, #4]
 800d714:	73fb      	strb	r3, [r7, #15]
    
    uint8_t    chipId;
    ReturnCode ret;
    bool       detected;  /* collision or device was detected */
    
    if( (st25tbDevList == NULL) || (devCnt == NULL) || (devLimit == 0U) )
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d005      	beq.n	800d728 <rfalSt25tbPollerCollisionResolution+0x20>
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d002      	beq.n	800d728 <rfalSt25tbPollerCollisionResolution+0x20>
 800d722:	7bfb      	ldrb	r3, [r7, #15]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d101      	bne.n	800d72c <rfalSt25tbPollerCollisionResolution+0x24>
    {
        return ERR_PARAM;
 800d728:	2307      	movs	r3, #7
 800d72a:	e05c      	b.n	800d7e6 <rfalSt25tbPollerCollisionResolution+0xde>
    }
    
    *devCnt = 0;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2200      	movs	r2, #0
 800d730:	701a      	strb	r2, [r3, #0]
    
    /* Step 1: Send Initiate */
    ret = rfalSt25tbPollerInitiate( &chipId );
 800d732:	f107 0314 	add.w	r3, r7, #20
 800d736:	4618      	mov	r0, r3
 800d738:	f7ff ff10 	bl	800d55c <rfalSt25tbPollerInitiate>
 800d73c:	4603      	mov	r3, r0
 800d73e:	82fb      	strh	r3, [r7, #22]
    if( ret == ERR_NONE )
 800d740:	8afb      	ldrh	r3, [r7, #22]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d139      	bne.n	800d7ba <rfalSt25tbPollerCollisionResolution+0xb2>
    {
        /* If only 1 answer is detected */
        st25tbDevList[*devCnt].chipID       = chipId;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	781b      	ldrb	r3, [r3, #0]
 800d74a:	461a      	mov	r2, r3
 800d74c:	4613      	mov	r3, r2
 800d74e:	009b      	lsls	r3, r3, #2
 800d750:	4413      	add	r3, r2
 800d752:	005b      	lsls	r3, r3, #1
 800d754:	461a      	mov	r2, r3
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	4413      	add	r3, r2
 800d75a:	7d3a      	ldrb	r2, [r7, #20]
 800d75c:	701a      	strb	r2, [r3, #0]
        st25tbDevList[*devCnt].isDeselected = false;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	461a      	mov	r2, r3
 800d764:	4613      	mov	r3, r2
 800d766:	009b      	lsls	r3, r3, #2
 800d768:	4413      	add	r3, r2
 800d76a:	005b      	lsls	r3, r3, #1
 800d76c:	461a      	mov	r2, r3
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	4413      	add	r3, r2
 800d772:	2200      	movs	r2, #0
 800d774:	725a      	strb	r2, [r3, #9]
        
        /* Retrieve its UID and keep it Selected*/
        ret = rfalSt25tbPollerSelect( chipId );
 800d776:	7d3b      	ldrb	r3, [r7, #20]
 800d778:	4618      	mov	r0, r3
 800d77a:	f7ff ff75 	bl	800d668 <rfalSt25tbPollerSelect>
 800d77e:	4603      	mov	r3, r0
 800d780:	82fb      	strh	r3, [r7, #22]
        
        if( ERR_NONE == ret )
 800d782:	8afb      	ldrh	r3, [r7, #22]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d10f      	bne.n	800d7a8 <rfalSt25tbPollerCollisionResolution+0xa0>
        {
            ret = rfalSt25tbPollerGetUID( &st25tbDevList[*devCnt].UID );
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	461a      	mov	r2, r3
 800d78e:	4613      	mov	r3, r2
 800d790:	009b      	lsls	r3, r3, #2
 800d792:	4413      	add	r3, r2
 800d794:	005b      	lsls	r3, r3, #1
 800d796:	461a      	mov	r2, r3
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	4413      	add	r3, r2
 800d79c:	3301      	adds	r3, #1
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f7ff ff8e 	bl	800d6c0 <rfalSt25tbPollerGetUID>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	82fb      	strh	r3, [r7, #22]
        }
        
        if( ERR_NONE == ret )
 800d7a8:	8afb      	ldrh	r3, [r7, #22]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d105      	bne.n	800d7ba <rfalSt25tbPollerCollisionResolution+0xb2>
        {
            (*devCnt)++;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	781b      	ldrb	r3, [r3, #0]
 800d7b2:	3301      	adds	r3, #1
 800d7b4:	b2da      	uxtb	r2, r3
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	701a      	strb	r2, [r3, #0]
        }
    }
    /* Always proceed to Pcall16 anticollision as phase differences of tags can lead to no tag recognized, even if there is one */
    if( *devCnt < devLimit )
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	781b      	ldrb	r3, [r3, #0]
 800d7be:	7bfa      	ldrb	r2, [r7, #15]
 800d7c0:	429a      	cmp	r2, r3
 800d7c2:	d90f      	bls.n	800d7e4 <rfalSt25tbPollerCollisionResolution+0xdc>
    {
        /* Multiple device responses */
        do
        {
            detected = rfalSt25tbPollerDoCollisionResolution( devLimit, st25tbDevList, devCnt );
 800d7c4:	7bfb      	ldrb	r3, [r7, #15]
 800d7c6:	687a      	ldr	r2, [r7, #4]
 800d7c8:	68b9      	ldr	r1, [r7, #8]
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7ff fe16 	bl	800d3fc <rfalSt25tbPollerDoCollisionResolution>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	757b      	strb	r3, [r7, #21]
        }
        while( (detected == true) && (*devCnt < devLimit) );
 800d7d4:	7d7b      	ldrb	r3, [r7, #21]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d004      	beq.n	800d7e4 <rfalSt25tbPollerCollisionResolution+0xdc>
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	781b      	ldrb	r3, [r3, #0]
 800d7de:	7bfa      	ldrb	r2, [r7, #15]
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d8ef      	bhi.n	800d7c4 <rfalSt25tbPollerCollisionResolution+0xbc>
    }

    return ERR_NONE;
 800d7e4:	2300      	movs	r3, #0
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3718      	adds	r7, #24
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}

0800d7ee <rfalT1TPollerInitialize>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

ReturnCode rfalT1TPollerInitialize( void )
{
 800d7ee:	b580      	push	{r7, lr}
 800d7f0:	b082      	sub	sp, #8
 800d7f2:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR(ret, rfalSetMode( RFAL_MODE_POLL_NFCA_T1T, RFAL_BR_106, RFAL_BR_106 ) );
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	2100      	movs	r1, #0
 800d7f8:	2002      	movs	r0, #2
 800d7fa:	f7fd fa65 	bl	800acc8 <rfalSetMode>
 800d7fe:	4603      	mov	r3, r0
 800d800:	80fb      	strh	r3, [r7, #6]
 800d802:	88fb      	ldrh	r3, [r7, #6]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d001      	beq.n	800d80c <rfalT1TPollerInitialize+0x1e>
 800d808:	88fb      	ldrh	r3, [r7, #6]
 800d80a:	e00e      	b.n	800d82a <rfalT1TPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 800d80c:	2001      	movs	r0, #1
 800d80e:	f7fd fdf5 	bl	800b3fc <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NONE );                          /* T1T should only be initialized after NFC-A mode, therefore the GT has been fulfilled */ 
 800d812:	2000      	movs	r0, #0
 800d814:	f7fd fe2c 	bl	800b470 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCA_POLLER );    /* T1T uses NFC-A FDT Listen with n=9   Digital 1.1  10.7.2                             */
 800d818:	f240 4094 	movw	r0, #1172	; 0x494
 800d81c:	f7fd fe14 	bl	800b448 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCA_T1T_POLLER );
 800d820:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800d824:	f7fd fdfa 	bl	800b41c <rfalSetFDTPoll>
    
    return ERR_NONE;
 800d828:	2300      	movs	r3, #0
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3708      	adds	r7, #8
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}

0800d832 <rfalT1TPollerRid>:


/*******************************************************************************/
ReturnCode rfalT1TPollerRid( rfalT1TRidRes *ridRes )
{
 800d832:	b580      	push	{r7, lr}
 800d834:	b08a      	sub	sp, #40	; 0x28
 800d836:	af04      	add	r7, sp, #16
 800d838:	6078      	str	r0, [r7, #4]
    ReturnCode     ret;
    rfalT1TRidReq  ridReq;
    uint16_t       rcvdLen;
    
    if( ridRes == NULL )
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d101      	bne.n	800d844 <rfalT1TPollerRid+0x12>
    {
        return ERR_PARAM;
 800d840:	2307      	movs	r3, #7
 800d842:	e02a      	b.n	800d89a <rfalT1TPollerRid+0x68>
    }
    
    /* Compute RID command and set Undefined Values to 0x00    Digital 1.1 10.6.1 */
    ST_MEMSET( &ridReq, 0x00, sizeof(rfalT1TRidReq) );
 800d844:	f107 030c 	add.w	r3, r7, #12
 800d848:	2207      	movs	r2, #7
 800d84a:	2100      	movs	r1, #0
 800d84c:	4618      	mov	r0, r3
 800d84e:	f000 f88e 	bl	800d96e <memset>
    ridReq.cmd = (uint8_t)RFAL_T1T_CMD_RID;
 800d852:	2378      	movs	r3, #120	; 0x78
 800d854:	733b      	strb	r3, [r7, #12]
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&ridReq, sizeof(rfalT1TRidReq), (uint8_t*)ridRes, sizeof(rfalT1TRidRes), &rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_T1T_DRD_READ ) );
 800d856:	f107 000c 	add.w	r0, r7, #12
 800d85a:	f640 13a8 	movw	r3, #2472	; 0x9a8
 800d85e:	9302      	str	r3, [sp, #8]
 800d860:	2300      	movs	r3, #0
 800d862:	9301      	str	r3, [sp, #4]
 800d864:	f107 030a 	add.w	r3, r7, #10
 800d868:	9300      	str	r3, [sp, #0]
 800d86a:	2306      	movs	r3, #6
 800d86c:	687a      	ldr	r2, [r7, #4]
 800d86e:	2107      	movs	r1, #7
 800d870:	f7fe f85e 	bl	800b930 <rfalTransceiveBlockingTxRx>
 800d874:	4603      	mov	r3, r0
 800d876:	82fb      	strh	r3, [r7, #22]
 800d878:	8afb      	ldrh	r3, [r7, #22]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d001      	beq.n	800d882 <rfalT1TPollerRid+0x50>
 800d87e:	8afb      	ldrh	r3, [r7, #22]
 800d880:	e00b      	b.n	800d89a <rfalT1TPollerRid+0x68>
    
    /* Check expected RID response length and the HR0   Digital 2.0 (Candidate) 11.6.2.1 */
    if( (rcvdLen != sizeof(rfalT1TRidRes)) || ((ridRes->hr0 & RFAL_T1T_RID_RES_HR0_MASK) != RFAL_T1T_RID_RES_HR0_VAL) )
 800d882:	897b      	ldrh	r3, [r7, #10]
 800d884:	2b06      	cmp	r3, #6
 800d886:	d105      	bne.n	800d894 <rfalT1TPollerRid+0x62>
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d890:	2b10      	cmp	r3, #16
 800d892:	d001      	beq.n	800d898 <rfalT1TPollerRid+0x66>
    {
        return ERR_PROTO;
 800d894:	230b      	movs	r3, #11
 800d896:	e000      	b.n	800d89a <rfalT1TPollerRid+0x68>
    }
    
    return ERR_NONE;
 800d898:	2300      	movs	r3, #0
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3718      	adds	r7, #24
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
	...

0800d8a4 <__errno>:
 800d8a4:	4b01      	ldr	r3, [pc, #4]	; (800d8ac <__errno+0x8>)
 800d8a6:	6818      	ldr	r0, [r3, #0]
 800d8a8:	4770      	bx	lr
 800d8aa:	bf00      	nop
 800d8ac:	200000e4 	.word	0x200000e4

0800d8b0 <__libc_init_array>:
 800d8b0:	b570      	push	{r4, r5, r6, lr}
 800d8b2:	4e0d      	ldr	r6, [pc, #52]	; (800d8e8 <__libc_init_array+0x38>)
 800d8b4:	4c0d      	ldr	r4, [pc, #52]	; (800d8ec <__libc_init_array+0x3c>)
 800d8b6:	1ba4      	subs	r4, r4, r6
 800d8b8:	10a4      	asrs	r4, r4, #2
 800d8ba:	2500      	movs	r5, #0
 800d8bc:	42a5      	cmp	r5, r4
 800d8be:	d109      	bne.n	800d8d4 <__libc_init_array+0x24>
 800d8c0:	4e0b      	ldr	r6, [pc, #44]	; (800d8f0 <__libc_init_array+0x40>)
 800d8c2:	4c0c      	ldr	r4, [pc, #48]	; (800d8f4 <__libc_init_array+0x44>)
 800d8c4:	f000 fc60 	bl	800e188 <_init>
 800d8c8:	1ba4      	subs	r4, r4, r6
 800d8ca:	10a4      	asrs	r4, r4, #2
 800d8cc:	2500      	movs	r5, #0
 800d8ce:	42a5      	cmp	r5, r4
 800d8d0:	d105      	bne.n	800d8de <__libc_init_array+0x2e>
 800d8d2:	bd70      	pop	{r4, r5, r6, pc}
 800d8d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d8d8:	4798      	blx	r3
 800d8da:	3501      	adds	r5, #1
 800d8dc:	e7ee      	b.n	800d8bc <__libc_init_array+0xc>
 800d8de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d8e2:	4798      	blx	r3
 800d8e4:	3501      	adds	r5, #1
 800d8e6:	e7f2      	b.n	800d8ce <__libc_init_array+0x1e>
 800d8e8:	0800e544 	.word	0x0800e544
 800d8ec:	0800e544 	.word	0x0800e544
 800d8f0:	0800e544 	.word	0x0800e544
 800d8f4:	0800e548 	.word	0x0800e548

0800d8f8 <malloc>:
 800d8f8:	4b02      	ldr	r3, [pc, #8]	; (800d904 <malloc+0xc>)
 800d8fa:	4601      	mov	r1, r0
 800d8fc:	6818      	ldr	r0, [r3, #0]
 800d8fe:	f000 b88d 	b.w	800da1c <_malloc_r>
 800d902:	bf00      	nop
 800d904:	200000e4 	.word	0x200000e4

0800d908 <memcmp>:
 800d908:	b530      	push	{r4, r5, lr}
 800d90a:	2400      	movs	r4, #0
 800d90c:	42a2      	cmp	r2, r4
 800d90e:	d101      	bne.n	800d914 <memcmp+0xc>
 800d910:	2000      	movs	r0, #0
 800d912:	e007      	b.n	800d924 <memcmp+0x1c>
 800d914:	5d03      	ldrb	r3, [r0, r4]
 800d916:	3401      	adds	r4, #1
 800d918:	190d      	adds	r5, r1, r4
 800d91a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800d91e:	42ab      	cmp	r3, r5
 800d920:	d0f4      	beq.n	800d90c <memcmp+0x4>
 800d922:	1b58      	subs	r0, r3, r5
 800d924:	bd30      	pop	{r4, r5, pc}

0800d926 <memcpy>:
 800d926:	b510      	push	{r4, lr}
 800d928:	1e43      	subs	r3, r0, #1
 800d92a:	440a      	add	r2, r1
 800d92c:	4291      	cmp	r1, r2
 800d92e:	d100      	bne.n	800d932 <memcpy+0xc>
 800d930:	bd10      	pop	{r4, pc}
 800d932:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d936:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d93a:	e7f7      	b.n	800d92c <memcpy+0x6>

0800d93c <memmove>:
 800d93c:	4288      	cmp	r0, r1
 800d93e:	b510      	push	{r4, lr}
 800d940:	eb01 0302 	add.w	r3, r1, r2
 800d944:	d807      	bhi.n	800d956 <memmove+0x1a>
 800d946:	1e42      	subs	r2, r0, #1
 800d948:	4299      	cmp	r1, r3
 800d94a:	d00a      	beq.n	800d962 <memmove+0x26>
 800d94c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d950:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d954:	e7f8      	b.n	800d948 <memmove+0xc>
 800d956:	4283      	cmp	r3, r0
 800d958:	d9f5      	bls.n	800d946 <memmove+0xa>
 800d95a:	1881      	adds	r1, r0, r2
 800d95c:	1ad2      	subs	r2, r2, r3
 800d95e:	42d3      	cmn	r3, r2
 800d960:	d100      	bne.n	800d964 <memmove+0x28>
 800d962:	bd10      	pop	{r4, pc}
 800d964:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d968:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d96c:	e7f7      	b.n	800d95e <memmove+0x22>

0800d96e <memset>:
 800d96e:	4402      	add	r2, r0
 800d970:	4603      	mov	r3, r0
 800d972:	4293      	cmp	r3, r2
 800d974:	d100      	bne.n	800d978 <memset+0xa>
 800d976:	4770      	bx	lr
 800d978:	f803 1b01 	strb.w	r1, [r3], #1
 800d97c:	e7f9      	b.n	800d972 <memset+0x4>
	...

0800d980 <_free_r>:
 800d980:	b538      	push	{r3, r4, r5, lr}
 800d982:	4605      	mov	r5, r0
 800d984:	2900      	cmp	r1, #0
 800d986:	d045      	beq.n	800da14 <_free_r+0x94>
 800d988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d98c:	1f0c      	subs	r4, r1, #4
 800d98e:	2b00      	cmp	r3, #0
 800d990:	bfb8      	it	lt
 800d992:	18e4      	addlt	r4, r4, r3
 800d994:	f000 f8ee 	bl	800db74 <__malloc_lock>
 800d998:	4a1f      	ldr	r2, [pc, #124]	; (800da18 <_free_r+0x98>)
 800d99a:	6813      	ldr	r3, [r2, #0]
 800d99c:	4610      	mov	r0, r2
 800d99e:	b933      	cbnz	r3, 800d9ae <_free_r+0x2e>
 800d9a0:	6063      	str	r3, [r4, #4]
 800d9a2:	6014      	str	r4, [r2, #0]
 800d9a4:	4628      	mov	r0, r5
 800d9a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9aa:	f000 b8e4 	b.w	800db76 <__malloc_unlock>
 800d9ae:	42a3      	cmp	r3, r4
 800d9b0:	d90c      	bls.n	800d9cc <_free_r+0x4c>
 800d9b2:	6821      	ldr	r1, [r4, #0]
 800d9b4:	1862      	adds	r2, r4, r1
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	bf04      	itt	eq
 800d9ba:	681a      	ldreq	r2, [r3, #0]
 800d9bc:	685b      	ldreq	r3, [r3, #4]
 800d9be:	6063      	str	r3, [r4, #4]
 800d9c0:	bf04      	itt	eq
 800d9c2:	1852      	addeq	r2, r2, r1
 800d9c4:	6022      	streq	r2, [r4, #0]
 800d9c6:	6004      	str	r4, [r0, #0]
 800d9c8:	e7ec      	b.n	800d9a4 <_free_r+0x24>
 800d9ca:	4613      	mov	r3, r2
 800d9cc:	685a      	ldr	r2, [r3, #4]
 800d9ce:	b10a      	cbz	r2, 800d9d4 <_free_r+0x54>
 800d9d0:	42a2      	cmp	r2, r4
 800d9d2:	d9fa      	bls.n	800d9ca <_free_r+0x4a>
 800d9d4:	6819      	ldr	r1, [r3, #0]
 800d9d6:	1858      	adds	r0, r3, r1
 800d9d8:	42a0      	cmp	r0, r4
 800d9da:	d10b      	bne.n	800d9f4 <_free_r+0x74>
 800d9dc:	6820      	ldr	r0, [r4, #0]
 800d9de:	4401      	add	r1, r0
 800d9e0:	1858      	adds	r0, r3, r1
 800d9e2:	4282      	cmp	r2, r0
 800d9e4:	6019      	str	r1, [r3, #0]
 800d9e6:	d1dd      	bne.n	800d9a4 <_free_r+0x24>
 800d9e8:	6810      	ldr	r0, [r2, #0]
 800d9ea:	6852      	ldr	r2, [r2, #4]
 800d9ec:	605a      	str	r2, [r3, #4]
 800d9ee:	4401      	add	r1, r0
 800d9f0:	6019      	str	r1, [r3, #0]
 800d9f2:	e7d7      	b.n	800d9a4 <_free_r+0x24>
 800d9f4:	d902      	bls.n	800d9fc <_free_r+0x7c>
 800d9f6:	230c      	movs	r3, #12
 800d9f8:	602b      	str	r3, [r5, #0]
 800d9fa:	e7d3      	b.n	800d9a4 <_free_r+0x24>
 800d9fc:	6820      	ldr	r0, [r4, #0]
 800d9fe:	1821      	adds	r1, r4, r0
 800da00:	428a      	cmp	r2, r1
 800da02:	bf04      	itt	eq
 800da04:	6811      	ldreq	r1, [r2, #0]
 800da06:	6852      	ldreq	r2, [r2, #4]
 800da08:	6062      	str	r2, [r4, #4]
 800da0a:	bf04      	itt	eq
 800da0c:	1809      	addeq	r1, r1, r0
 800da0e:	6021      	streq	r1, [r4, #0]
 800da10:	605c      	str	r4, [r3, #4]
 800da12:	e7c7      	b.n	800d9a4 <_free_r+0x24>
 800da14:	bd38      	pop	{r3, r4, r5, pc}
 800da16:	bf00      	nop
 800da18:	20000e2c 	.word	0x20000e2c

0800da1c <_malloc_r>:
 800da1c:	b570      	push	{r4, r5, r6, lr}
 800da1e:	1ccd      	adds	r5, r1, #3
 800da20:	f025 0503 	bic.w	r5, r5, #3
 800da24:	3508      	adds	r5, #8
 800da26:	2d0c      	cmp	r5, #12
 800da28:	bf38      	it	cc
 800da2a:	250c      	movcc	r5, #12
 800da2c:	2d00      	cmp	r5, #0
 800da2e:	4606      	mov	r6, r0
 800da30:	db01      	blt.n	800da36 <_malloc_r+0x1a>
 800da32:	42a9      	cmp	r1, r5
 800da34:	d903      	bls.n	800da3e <_malloc_r+0x22>
 800da36:	230c      	movs	r3, #12
 800da38:	6033      	str	r3, [r6, #0]
 800da3a:	2000      	movs	r0, #0
 800da3c:	bd70      	pop	{r4, r5, r6, pc}
 800da3e:	f000 f899 	bl	800db74 <__malloc_lock>
 800da42:	4a21      	ldr	r2, [pc, #132]	; (800dac8 <_malloc_r+0xac>)
 800da44:	6814      	ldr	r4, [r2, #0]
 800da46:	4621      	mov	r1, r4
 800da48:	b991      	cbnz	r1, 800da70 <_malloc_r+0x54>
 800da4a:	4c20      	ldr	r4, [pc, #128]	; (800dacc <_malloc_r+0xb0>)
 800da4c:	6823      	ldr	r3, [r4, #0]
 800da4e:	b91b      	cbnz	r3, 800da58 <_malloc_r+0x3c>
 800da50:	4630      	mov	r0, r6
 800da52:	f000 f83d 	bl	800dad0 <_sbrk_r>
 800da56:	6020      	str	r0, [r4, #0]
 800da58:	4629      	mov	r1, r5
 800da5a:	4630      	mov	r0, r6
 800da5c:	f000 f838 	bl	800dad0 <_sbrk_r>
 800da60:	1c43      	adds	r3, r0, #1
 800da62:	d124      	bne.n	800daae <_malloc_r+0x92>
 800da64:	230c      	movs	r3, #12
 800da66:	6033      	str	r3, [r6, #0]
 800da68:	4630      	mov	r0, r6
 800da6a:	f000 f884 	bl	800db76 <__malloc_unlock>
 800da6e:	e7e4      	b.n	800da3a <_malloc_r+0x1e>
 800da70:	680b      	ldr	r3, [r1, #0]
 800da72:	1b5b      	subs	r3, r3, r5
 800da74:	d418      	bmi.n	800daa8 <_malloc_r+0x8c>
 800da76:	2b0b      	cmp	r3, #11
 800da78:	d90f      	bls.n	800da9a <_malloc_r+0x7e>
 800da7a:	600b      	str	r3, [r1, #0]
 800da7c:	50cd      	str	r5, [r1, r3]
 800da7e:	18cc      	adds	r4, r1, r3
 800da80:	4630      	mov	r0, r6
 800da82:	f000 f878 	bl	800db76 <__malloc_unlock>
 800da86:	f104 000b 	add.w	r0, r4, #11
 800da8a:	1d23      	adds	r3, r4, #4
 800da8c:	f020 0007 	bic.w	r0, r0, #7
 800da90:	1ac3      	subs	r3, r0, r3
 800da92:	d0d3      	beq.n	800da3c <_malloc_r+0x20>
 800da94:	425a      	negs	r2, r3
 800da96:	50e2      	str	r2, [r4, r3]
 800da98:	e7d0      	b.n	800da3c <_malloc_r+0x20>
 800da9a:	428c      	cmp	r4, r1
 800da9c:	684b      	ldr	r3, [r1, #4]
 800da9e:	bf16      	itet	ne
 800daa0:	6063      	strne	r3, [r4, #4]
 800daa2:	6013      	streq	r3, [r2, #0]
 800daa4:	460c      	movne	r4, r1
 800daa6:	e7eb      	b.n	800da80 <_malloc_r+0x64>
 800daa8:	460c      	mov	r4, r1
 800daaa:	6849      	ldr	r1, [r1, #4]
 800daac:	e7cc      	b.n	800da48 <_malloc_r+0x2c>
 800daae:	1cc4      	adds	r4, r0, #3
 800dab0:	f024 0403 	bic.w	r4, r4, #3
 800dab4:	42a0      	cmp	r0, r4
 800dab6:	d005      	beq.n	800dac4 <_malloc_r+0xa8>
 800dab8:	1a21      	subs	r1, r4, r0
 800daba:	4630      	mov	r0, r6
 800dabc:	f000 f808 	bl	800dad0 <_sbrk_r>
 800dac0:	3001      	adds	r0, #1
 800dac2:	d0cf      	beq.n	800da64 <_malloc_r+0x48>
 800dac4:	6025      	str	r5, [r4, #0]
 800dac6:	e7db      	b.n	800da80 <_malloc_r+0x64>
 800dac8:	20000e2c 	.word	0x20000e2c
 800dacc:	20000e30 	.word	0x20000e30

0800dad0 <_sbrk_r>:
 800dad0:	b538      	push	{r3, r4, r5, lr}
 800dad2:	4c06      	ldr	r4, [pc, #24]	; (800daec <_sbrk_r+0x1c>)
 800dad4:	2300      	movs	r3, #0
 800dad6:	4605      	mov	r5, r0
 800dad8:	4608      	mov	r0, r1
 800dada:	6023      	str	r3, [r4, #0]
 800dadc:	f7f3 fc8a 	bl	80013f4 <_sbrk>
 800dae0:	1c43      	adds	r3, r0, #1
 800dae2:	d102      	bne.n	800daea <_sbrk_r+0x1a>
 800dae4:	6823      	ldr	r3, [r4, #0]
 800dae6:	b103      	cbz	r3, 800daea <_sbrk_r+0x1a>
 800dae8:	602b      	str	r3, [r5, #0]
 800daea:	bd38      	pop	{r3, r4, r5, pc}
 800daec:	200010d4 	.word	0x200010d4

0800daf0 <strcpy>:
 800daf0:	4603      	mov	r3, r0
 800daf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800daf6:	f803 2b01 	strb.w	r2, [r3], #1
 800dafa:	2a00      	cmp	r2, #0
 800dafc:	d1f9      	bne.n	800daf2 <strcpy+0x2>
 800dafe:	4770      	bx	lr

0800db00 <_vsniprintf_r>:
 800db00:	b530      	push	{r4, r5, lr}
 800db02:	1e14      	subs	r4, r2, #0
 800db04:	4605      	mov	r5, r0
 800db06:	b09b      	sub	sp, #108	; 0x6c
 800db08:	4618      	mov	r0, r3
 800db0a:	da05      	bge.n	800db18 <_vsniprintf_r+0x18>
 800db0c:	238b      	movs	r3, #139	; 0x8b
 800db0e:	602b      	str	r3, [r5, #0]
 800db10:	f04f 30ff 	mov.w	r0, #4294967295
 800db14:	b01b      	add	sp, #108	; 0x6c
 800db16:	bd30      	pop	{r4, r5, pc}
 800db18:	f44f 7302 	mov.w	r3, #520	; 0x208
 800db1c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800db20:	bf14      	ite	ne
 800db22:	f104 33ff 	addne.w	r3, r4, #4294967295
 800db26:	4623      	moveq	r3, r4
 800db28:	9302      	str	r3, [sp, #8]
 800db2a:	9305      	str	r3, [sp, #20]
 800db2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db30:	9100      	str	r1, [sp, #0]
 800db32:	9104      	str	r1, [sp, #16]
 800db34:	f8ad 300e 	strh.w	r3, [sp, #14]
 800db38:	4602      	mov	r2, r0
 800db3a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800db3c:	4669      	mov	r1, sp
 800db3e:	4628      	mov	r0, r5
 800db40:	f000 f874 	bl	800dc2c <_svfiprintf_r>
 800db44:	1c43      	adds	r3, r0, #1
 800db46:	bfbc      	itt	lt
 800db48:	238b      	movlt	r3, #139	; 0x8b
 800db4a:	602b      	strlt	r3, [r5, #0]
 800db4c:	2c00      	cmp	r4, #0
 800db4e:	d0e1      	beq.n	800db14 <_vsniprintf_r+0x14>
 800db50:	9b00      	ldr	r3, [sp, #0]
 800db52:	2200      	movs	r2, #0
 800db54:	701a      	strb	r2, [r3, #0]
 800db56:	e7dd      	b.n	800db14 <_vsniprintf_r+0x14>

0800db58 <vsniprintf>:
 800db58:	b507      	push	{r0, r1, r2, lr}
 800db5a:	9300      	str	r3, [sp, #0]
 800db5c:	4613      	mov	r3, r2
 800db5e:	460a      	mov	r2, r1
 800db60:	4601      	mov	r1, r0
 800db62:	4803      	ldr	r0, [pc, #12]	; (800db70 <vsniprintf+0x18>)
 800db64:	6800      	ldr	r0, [r0, #0]
 800db66:	f7ff ffcb 	bl	800db00 <_vsniprintf_r>
 800db6a:	b003      	add	sp, #12
 800db6c:	f85d fb04 	ldr.w	pc, [sp], #4
 800db70:	200000e4 	.word	0x200000e4

0800db74 <__malloc_lock>:
 800db74:	4770      	bx	lr

0800db76 <__malloc_unlock>:
 800db76:	4770      	bx	lr

0800db78 <__ssputs_r>:
 800db78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db7c:	688e      	ldr	r6, [r1, #8]
 800db7e:	429e      	cmp	r6, r3
 800db80:	4682      	mov	sl, r0
 800db82:	460c      	mov	r4, r1
 800db84:	4690      	mov	r8, r2
 800db86:	4699      	mov	r9, r3
 800db88:	d837      	bhi.n	800dbfa <__ssputs_r+0x82>
 800db8a:	898a      	ldrh	r2, [r1, #12]
 800db8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800db90:	d031      	beq.n	800dbf6 <__ssputs_r+0x7e>
 800db92:	6825      	ldr	r5, [r4, #0]
 800db94:	6909      	ldr	r1, [r1, #16]
 800db96:	1a6f      	subs	r7, r5, r1
 800db98:	6965      	ldr	r5, [r4, #20]
 800db9a:	2302      	movs	r3, #2
 800db9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dba0:	fb95 f5f3 	sdiv	r5, r5, r3
 800dba4:	f109 0301 	add.w	r3, r9, #1
 800dba8:	443b      	add	r3, r7
 800dbaa:	429d      	cmp	r5, r3
 800dbac:	bf38      	it	cc
 800dbae:	461d      	movcc	r5, r3
 800dbb0:	0553      	lsls	r3, r2, #21
 800dbb2:	d530      	bpl.n	800dc16 <__ssputs_r+0x9e>
 800dbb4:	4629      	mov	r1, r5
 800dbb6:	f7ff ff31 	bl	800da1c <_malloc_r>
 800dbba:	4606      	mov	r6, r0
 800dbbc:	b950      	cbnz	r0, 800dbd4 <__ssputs_r+0x5c>
 800dbbe:	230c      	movs	r3, #12
 800dbc0:	f8ca 3000 	str.w	r3, [sl]
 800dbc4:	89a3      	ldrh	r3, [r4, #12]
 800dbc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbca:	81a3      	strh	r3, [r4, #12]
 800dbcc:	f04f 30ff 	mov.w	r0, #4294967295
 800dbd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbd4:	463a      	mov	r2, r7
 800dbd6:	6921      	ldr	r1, [r4, #16]
 800dbd8:	f7ff fea5 	bl	800d926 <memcpy>
 800dbdc:	89a3      	ldrh	r3, [r4, #12]
 800dbde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dbe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbe6:	81a3      	strh	r3, [r4, #12]
 800dbe8:	6126      	str	r6, [r4, #16]
 800dbea:	6165      	str	r5, [r4, #20]
 800dbec:	443e      	add	r6, r7
 800dbee:	1bed      	subs	r5, r5, r7
 800dbf0:	6026      	str	r6, [r4, #0]
 800dbf2:	60a5      	str	r5, [r4, #8]
 800dbf4:	464e      	mov	r6, r9
 800dbf6:	454e      	cmp	r6, r9
 800dbf8:	d900      	bls.n	800dbfc <__ssputs_r+0x84>
 800dbfa:	464e      	mov	r6, r9
 800dbfc:	4632      	mov	r2, r6
 800dbfe:	4641      	mov	r1, r8
 800dc00:	6820      	ldr	r0, [r4, #0]
 800dc02:	f7ff fe9b 	bl	800d93c <memmove>
 800dc06:	68a3      	ldr	r3, [r4, #8]
 800dc08:	1b9b      	subs	r3, r3, r6
 800dc0a:	60a3      	str	r3, [r4, #8]
 800dc0c:	6823      	ldr	r3, [r4, #0]
 800dc0e:	441e      	add	r6, r3
 800dc10:	6026      	str	r6, [r4, #0]
 800dc12:	2000      	movs	r0, #0
 800dc14:	e7dc      	b.n	800dbd0 <__ssputs_r+0x58>
 800dc16:	462a      	mov	r2, r5
 800dc18:	f000 fa88 	bl	800e12c <_realloc_r>
 800dc1c:	4606      	mov	r6, r0
 800dc1e:	2800      	cmp	r0, #0
 800dc20:	d1e2      	bne.n	800dbe8 <__ssputs_r+0x70>
 800dc22:	6921      	ldr	r1, [r4, #16]
 800dc24:	4650      	mov	r0, sl
 800dc26:	f7ff feab 	bl	800d980 <_free_r>
 800dc2a:	e7c8      	b.n	800dbbe <__ssputs_r+0x46>

0800dc2c <_svfiprintf_r>:
 800dc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc30:	461d      	mov	r5, r3
 800dc32:	898b      	ldrh	r3, [r1, #12]
 800dc34:	061f      	lsls	r7, r3, #24
 800dc36:	b09d      	sub	sp, #116	; 0x74
 800dc38:	4680      	mov	r8, r0
 800dc3a:	460c      	mov	r4, r1
 800dc3c:	4616      	mov	r6, r2
 800dc3e:	d50f      	bpl.n	800dc60 <_svfiprintf_r+0x34>
 800dc40:	690b      	ldr	r3, [r1, #16]
 800dc42:	b96b      	cbnz	r3, 800dc60 <_svfiprintf_r+0x34>
 800dc44:	2140      	movs	r1, #64	; 0x40
 800dc46:	f7ff fee9 	bl	800da1c <_malloc_r>
 800dc4a:	6020      	str	r0, [r4, #0]
 800dc4c:	6120      	str	r0, [r4, #16]
 800dc4e:	b928      	cbnz	r0, 800dc5c <_svfiprintf_r+0x30>
 800dc50:	230c      	movs	r3, #12
 800dc52:	f8c8 3000 	str.w	r3, [r8]
 800dc56:	f04f 30ff 	mov.w	r0, #4294967295
 800dc5a:	e0c8      	b.n	800ddee <_svfiprintf_r+0x1c2>
 800dc5c:	2340      	movs	r3, #64	; 0x40
 800dc5e:	6163      	str	r3, [r4, #20]
 800dc60:	2300      	movs	r3, #0
 800dc62:	9309      	str	r3, [sp, #36]	; 0x24
 800dc64:	2320      	movs	r3, #32
 800dc66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc6a:	2330      	movs	r3, #48	; 0x30
 800dc6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc70:	9503      	str	r5, [sp, #12]
 800dc72:	f04f 0b01 	mov.w	fp, #1
 800dc76:	4637      	mov	r7, r6
 800dc78:	463d      	mov	r5, r7
 800dc7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dc7e:	b10b      	cbz	r3, 800dc84 <_svfiprintf_r+0x58>
 800dc80:	2b25      	cmp	r3, #37	; 0x25
 800dc82:	d13e      	bne.n	800dd02 <_svfiprintf_r+0xd6>
 800dc84:	ebb7 0a06 	subs.w	sl, r7, r6
 800dc88:	d00b      	beq.n	800dca2 <_svfiprintf_r+0x76>
 800dc8a:	4653      	mov	r3, sl
 800dc8c:	4632      	mov	r2, r6
 800dc8e:	4621      	mov	r1, r4
 800dc90:	4640      	mov	r0, r8
 800dc92:	f7ff ff71 	bl	800db78 <__ssputs_r>
 800dc96:	3001      	adds	r0, #1
 800dc98:	f000 80a4 	beq.w	800dde4 <_svfiprintf_r+0x1b8>
 800dc9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc9e:	4453      	add	r3, sl
 800dca0:	9309      	str	r3, [sp, #36]	; 0x24
 800dca2:	783b      	ldrb	r3, [r7, #0]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	f000 809d 	beq.w	800dde4 <_svfiprintf_r+0x1b8>
 800dcaa:	2300      	movs	r3, #0
 800dcac:	f04f 32ff 	mov.w	r2, #4294967295
 800dcb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dcb4:	9304      	str	r3, [sp, #16]
 800dcb6:	9307      	str	r3, [sp, #28]
 800dcb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dcbc:	931a      	str	r3, [sp, #104]	; 0x68
 800dcbe:	462f      	mov	r7, r5
 800dcc0:	2205      	movs	r2, #5
 800dcc2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800dcc6:	4850      	ldr	r0, [pc, #320]	; (800de08 <_svfiprintf_r+0x1dc>)
 800dcc8:	f7f2 faa2 	bl	8000210 <memchr>
 800dccc:	9b04      	ldr	r3, [sp, #16]
 800dcce:	b9d0      	cbnz	r0, 800dd06 <_svfiprintf_r+0xda>
 800dcd0:	06d9      	lsls	r1, r3, #27
 800dcd2:	bf44      	itt	mi
 800dcd4:	2220      	movmi	r2, #32
 800dcd6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dcda:	071a      	lsls	r2, r3, #28
 800dcdc:	bf44      	itt	mi
 800dcde:	222b      	movmi	r2, #43	; 0x2b
 800dce0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dce4:	782a      	ldrb	r2, [r5, #0]
 800dce6:	2a2a      	cmp	r2, #42	; 0x2a
 800dce8:	d015      	beq.n	800dd16 <_svfiprintf_r+0xea>
 800dcea:	9a07      	ldr	r2, [sp, #28]
 800dcec:	462f      	mov	r7, r5
 800dcee:	2000      	movs	r0, #0
 800dcf0:	250a      	movs	r5, #10
 800dcf2:	4639      	mov	r1, r7
 800dcf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcf8:	3b30      	subs	r3, #48	; 0x30
 800dcfa:	2b09      	cmp	r3, #9
 800dcfc:	d94d      	bls.n	800dd9a <_svfiprintf_r+0x16e>
 800dcfe:	b1b8      	cbz	r0, 800dd30 <_svfiprintf_r+0x104>
 800dd00:	e00f      	b.n	800dd22 <_svfiprintf_r+0xf6>
 800dd02:	462f      	mov	r7, r5
 800dd04:	e7b8      	b.n	800dc78 <_svfiprintf_r+0x4c>
 800dd06:	4a40      	ldr	r2, [pc, #256]	; (800de08 <_svfiprintf_r+0x1dc>)
 800dd08:	1a80      	subs	r0, r0, r2
 800dd0a:	fa0b f000 	lsl.w	r0, fp, r0
 800dd0e:	4318      	orrs	r0, r3
 800dd10:	9004      	str	r0, [sp, #16]
 800dd12:	463d      	mov	r5, r7
 800dd14:	e7d3      	b.n	800dcbe <_svfiprintf_r+0x92>
 800dd16:	9a03      	ldr	r2, [sp, #12]
 800dd18:	1d11      	adds	r1, r2, #4
 800dd1a:	6812      	ldr	r2, [r2, #0]
 800dd1c:	9103      	str	r1, [sp, #12]
 800dd1e:	2a00      	cmp	r2, #0
 800dd20:	db01      	blt.n	800dd26 <_svfiprintf_r+0xfa>
 800dd22:	9207      	str	r2, [sp, #28]
 800dd24:	e004      	b.n	800dd30 <_svfiprintf_r+0x104>
 800dd26:	4252      	negs	r2, r2
 800dd28:	f043 0302 	orr.w	r3, r3, #2
 800dd2c:	9207      	str	r2, [sp, #28]
 800dd2e:	9304      	str	r3, [sp, #16]
 800dd30:	783b      	ldrb	r3, [r7, #0]
 800dd32:	2b2e      	cmp	r3, #46	; 0x2e
 800dd34:	d10c      	bne.n	800dd50 <_svfiprintf_r+0x124>
 800dd36:	787b      	ldrb	r3, [r7, #1]
 800dd38:	2b2a      	cmp	r3, #42	; 0x2a
 800dd3a:	d133      	bne.n	800dda4 <_svfiprintf_r+0x178>
 800dd3c:	9b03      	ldr	r3, [sp, #12]
 800dd3e:	1d1a      	adds	r2, r3, #4
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	9203      	str	r2, [sp, #12]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	bfb8      	it	lt
 800dd48:	f04f 33ff 	movlt.w	r3, #4294967295
 800dd4c:	3702      	adds	r7, #2
 800dd4e:	9305      	str	r3, [sp, #20]
 800dd50:	4d2e      	ldr	r5, [pc, #184]	; (800de0c <_svfiprintf_r+0x1e0>)
 800dd52:	7839      	ldrb	r1, [r7, #0]
 800dd54:	2203      	movs	r2, #3
 800dd56:	4628      	mov	r0, r5
 800dd58:	f7f2 fa5a 	bl	8000210 <memchr>
 800dd5c:	b138      	cbz	r0, 800dd6e <_svfiprintf_r+0x142>
 800dd5e:	2340      	movs	r3, #64	; 0x40
 800dd60:	1b40      	subs	r0, r0, r5
 800dd62:	fa03 f000 	lsl.w	r0, r3, r0
 800dd66:	9b04      	ldr	r3, [sp, #16]
 800dd68:	4303      	orrs	r3, r0
 800dd6a:	3701      	adds	r7, #1
 800dd6c:	9304      	str	r3, [sp, #16]
 800dd6e:	7839      	ldrb	r1, [r7, #0]
 800dd70:	4827      	ldr	r0, [pc, #156]	; (800de10 <_svfiprintf_r+0x1e4>)
 800dd72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd76:	2206      	movs	r2, #6
 800dd78:	1c7e      	adds	r6, r7, #1
 800dd7a:	f7f2 fa49 	bl	8000210 <memchr>
 800dd7e:	2800      	cmp	r0, #0
 800dd80:	d038      	beq.n	800ddf4 <_svfiprintf_r+0x1c8>
 800dd82:	4b24      	ldr	r3, [pc, #144]	; (800de14 <_svfiprintf_r+0x1e8>)
 800dd84:	bb13      	cbnz	r3, 800ddcc <_svfiprintf_r+0x1a0>
 800dd86:	9b03      	ldr	r3, [sp, #12]
 800dd88:	3307      	adds	r3, #7
 800dd8a:	f023 0307 	bic.w	r3, r3, #7
 800dd8e:	3308      	adds	r3, #8
 800dd90:	9303      	str	r3, [sp, #12]
 800dd92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd94:	444b      	add	r3, r9
 800dd96:	9309      	str	r3, [sp, #36]	; 0x24
 800dd98:	e76d      	b.n	800dc76 <_svfiprintf_r+0x4a>
 800dd9a:	fb05 3202 	mla	r2, r5, r2, r3
 800dd9e:	2001      	movs	r0, #1
 800dda0:	460f      	mov	r7, r1
 800dda2:	e7a6      	b.n	800dcf2 <_svfiprintf_r+0xc6>
 800dda4:	2300      	movs	r3, #0
 800dda6:	3701      	adds	r7, #1
 800dda8:	9305      	str	r3, [sp, #20]
 800ddaa:	4619      	mov	r1, r3
 800ddac:	250a      	movs	r5, #10
 800ddae:	4638      	mov	r0, r7
 800ddb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddb4:	3a30      	subs	r2, #48	; 0x30
 800ddb6:	2a09      	cmp	r2, #9
 800ddb8:	d903      	bls.n	800ddc2 <_svfiprintf_r+0x196>
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d0c8      	beq.n	800dd50 <_svfiprintf_r+0x124>
 800ddbe:	9105      	str	r1, [sp, #20]
 800ddc0:	e7c6      	b.n	800dd50 <_svfiprintf_r+0x124>
 800ddc2:	fb05 2101 	mla	r1, r5, r1, r2
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	4607      	mov	r7, r0
 800ddca:	e7f0      	b.n	800ddae <_svfiprintf_r+0x182>
 800ddcc:	ab03      	add	r3, sp, #12
 800ddce:	9300      	str	r3, [sp, #0]
 800ddd0:	4622      	mov	r2, r4
 800ddd2:	4b11      	ldr	r3, [pc, #68]	; (800de18 <_svfiprintf_r+0x1ec>)
 800ddd4:	a904      	add	r1, sp, #16
 800ddd6:	4640      	mov	r0, r8
 800ddd8:	f3af 8000 	nop.w
 800dddc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dde0:	4681      	mov	r9, r0
 800dde2:	d1d6      	bne.n	800dd92 <_svfiprintf_r+0x166>
 800dde4:	89a3      	ldrh	r3, [r4, #12]
 800dde6:	065b      	lsls	r3, r3, #25
 800dde8:	f53f af35 	bmi.w	800dc56 <_svfiprintf_r+0x2a>
 800ddec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddee:	b01d      	add	sp, #116	; 0x74
 800ddf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddf4:	ab03      	add	r3, sp, #12
 800ddf6:	9300      	str	r3, [sp, #0]
 800ddf8:	4622      	mov	r2, r4
 800ddfa:	4b07      	ldr	r3, [pc, #28]	; (800de18 <_svfiprintf_r+0x1ec>)
 800ddfc:	a904      	add	r1, sp, #16
 800ddfe:	4640      	mov	r0, r8
 800de00:	f000 f882 	bl	800df08 <_printf_i>
 800de04:	e7ea      	b.n	800dddc <_svfiprintf_r+0x1b0>
 800de06:	bf00      	nop
 800de08:	0800e506 	.word	0x0800e506
 800de0c:	0800e50c 	.word	0x0800e50c
 800de10:	0800e510 	.word	0x0800e510
 800de14:	00000000 	.word	0x00000000
 800de18:	0800db79 	.word	0x0800db79

0800de1c <_printf_common>:
 800de1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de20:	4691      	mov	r9, r2
 800de22:	461f      	mov	r7, r3
 800de24:	688a      	ldr	r2, [r1, #8]
 800de26:	690b      	ldr	r3, [r1, #16]
 800de28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800de2c:	4293      	cmp	r3, r2
 800de2e:	bfb8      	it	lt
 800de30:	4613      	movlt	r3, r2
 800de32:	f8c9 3000 	str.w	r3, [r9]
 800de36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800de3a:	4606      	mov	r6, r0
 800de3c:	460c      	mov	r4, r1
 800de3e:	b112      	cbz	r2, 800de46 <_printf_common+0x2a>
 800de40:	3301      	adds	r3, #1
 800de42:	f8c9 3000 	str.w	r3, [r9]
 800de46:	6823      	ldr	r3, [r4, #0]
 800de48:	0699      	lsls	r1, r3, #26
 800de4a:	bf42      	ittt	mi
 800de4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800de50:	3302      	addmi	r3, #2
 800de52:	f8c9 3000 	strmi.w	r3, [r9]
 800de56:	6825      	ldr	r5, [r4, #0]
 800de58:	f015 0506 	ands.w	r5, r5, #6
 800de5c:	d107      	bne.n	800de6e <_printf_common+0x52>
 800de5e:	f104 0a19 	add.w	sl, r4, #25
 800de62:	68e3      	ldr	r3, [r4, #12]
 800de64:	f8d9 2000 	ldr.w	r2, [r9]
 800de68:	1a9b      	subs	r3, r3, r2
 800de6a:	42ab      	cmp	r3, r5
 800de6c:	dc28      	bgt.n	800dec0 <_printf_common+0xa4>
 800de6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800de72:	6822      	ldr	r2, [r4, #0]
 800de74:	3300      	adds	r3, #0
 800de76:	bf18      	it	ne
 800de78:	2301      	movne	r3, #1
 800de7a:	0692      	lsls	r2, r2, #26
 800de7c:	d42d      	bmi.n	800deda <_printf_common+0xbe>
 800de7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800de82:	4639      	mov	r1, r7
 800de84:	4630      	mov	r0, r6
 800de86:	47c0      	blx	r8
 800de88:	3001      	adds	r0, #1
 800de8a:	d020      	beq.n	800dece <_printf_common+0xb2>
 800de8c:	6823      	ldr	r3, [r4, #0]
 800de8e:	68e5      	ldr	r5, [r4, #12]
 800de90:	f8d9 2000 	ldr.w	r2, [r9]
 800de94:	f003 0306 	and.w	r3, r3, #6
 800de98:	2b04      	cmp	r3, #4
 800de9a:	bf08      	it	eq
 800de9c:	1aad      	subeq	r5, r5, r2
 800de9e:	68a3      	ldr	r3, [r4, #8]
 800dea0:	6922      	ldr	r2, [r4, #16]
 800dea2:	bf0c      	ite	eq
 800dea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dea8:	2500      	movne	r5, #0
 800deaa:	4293      	cmp	r3, r2
 800deac:	bfc4      	itt	gt
 800deae:	1a9b      	subgt	r3, r3, r2
 800deb0:	18ed      	addgt	r5, r5, r3
 800deb2:	f04f 0900 	mov.w	r9, #0
 800deb6:	341a      	adds	r4, #26
 800deb8:	454d      	cmp	r5, r9
 800deba:	d11a      	bne.n	800def2 <_printf_common+0xd6>
 800debc:	2000      	movs	r0, #0
 800debe:	e008      	b.n	800ded2 <_printf_common+0xb6>
 800dec0:	2301      	movs	r3, #1
 800dec2:	4652      	mov	r2, sl
 800dec4:	4639      	mov	r1, r7
 800dec6:	4630      	mov	r0, r6
 800dec8:	47c0      	blx	r8
 800deca:	3001      	adds	r0, #1
 800decc:	d103      	bne.n	800ded6 <_printf_common+0xba>
 800dece:	f04f 30ff 	mov.w	r0, #4294967295
 800ded2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ded6:	3501      	adds	r5, #1
 800ded8:	e7c3      	b.n	800de62 <_printf_common+0x46>
 800deda:	18e1      	adds	r1, r4, r3
 800dedc:	1c5a      	adds	r2, r3, #1
 800dede:	2030      	movs	r0, #48	; 0x30
 800dee0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dee4:	4422      	add	r2, r4
 800dee6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800deea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800deee:	3302      	adds	r3, #2
 800def0:	e7c5      	b.n	800de7e <_printf_common+0x62>
 800def2:	2301      	movs	r3, #1
 800def4:	4622      	mov	r2, r4
 800def6:	4639      	mov	r1, r7
 800def8:	4630      	mov	r0, r6
 800defa:	47c0      	blx	r8
 800defc:	3001      	adds	r0, #1
 800defe:	d0e6      	beq.n	800dece <_printf_common+0xb2>
 800df00:	f109 0901 	add.w	r9, r9, #1
 800df04:	e7d8      	b.n	800deb8 <_printf_common+0x9c>
	...

0800df08 <_printf_i>:
 800df08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df0c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800df10:	460c      	mov	r4, r1
 800df12:	7e09      	ldrb	r1, [r1, #24]
 800df14:	b085      	sub	sp, #20
 800df16:	296e      	cmp	r1, #110	; 0x6e
 800df18:	4617      	mov	r7, r2
 800df1a:	4606      	mov	r6, r0
 800df1c:	4698      	mov	r8, r3
 800df1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df20:	f000 80b3 	beq.w	800e08a <_printf_i+0x182>
 800df24:	d822      	bhi.n	800df6c <_printf_i+0x64>
 800df26:	2963      	cmp	r1, #99	; 0x63
 800df28:	d036      	beq.n	800df98 <_printf_i+0x90>
 800df2a:	d80a      	bhi.n	800df42 <_printf_i+0x3a>
 800df2c:	2900      	cmp	r1, #0
 800df2e:	f000 80b9 	beq.w	800e0a4 <_printf_i+0x19c>
 800df32:	2958      	cmp	r1, #88	; 0x58
 800df34:	f000 8083 	beq.w	800e03e <_printf_i+0x136>
 800df38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800df3c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800df40:	e032      	b.n	800dfa8 <_printf_i+0xa0>
 800df42:	2964      	cmp	r1, #100	; 0x64
 800df44:	d001      	beq.n	800df4a <_printf_i+0x42>
 800df46:	2969      	cmp	r1, #105	; 0x69
 800df48:	d1f6      	bne.n	800df38 <_printf_i+0x30>
 800df4a:	6820      	ldr	r0, [r4, #0]
 800df4c:	6813      	ldr	r3, [r2, #0]
 800df4e:	0605      	lsls	r5, r0, #24
 800df50:	f103 0104 	add.w	r1, r3, #4
 800df54:	d52a      	bpl.n	800dfac <_printf_i+0xa4>
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	6011      	str	r1, [r2, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	da03      	bge.n	800df66 <_printf_i+0x5e>
 800df5e:	222d      	movs	r2, #45	; 0x2d
 800df60:	425b      	negs	r3, r3
 800df62:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800df66:	486f      	ldr	r0, [pc, #444]	; (800e124 <_printf_i+0x21c>)
 800df68:	220a      	movs	r2, #10
 800df6a:	e039      	b.n	800dfe0 <_printf_i+0xd8>
 800df6c:	2973      	cmp	r1, #115	; 0x73
 800df6e:	f000 809d 	beq.w	800e0ac <_printf_i+0x1a4>
 800df72:	d808      	bhi.n	800df86 <_printf_i+0x7e>
 800df74:	296f      	cmp	r1, #111	; 0x6f
 800df76:	d020      	beq.n	800dfba <_printf_i+0xb2>
 800df78:	2970      	cmp	r1, #112	; 0x70
 800df7a:	d1dd      	bne.n	800df38 <_printf_i+0x30>
 800df7c:	6823      	ldr	r3, [r4, #0]
 800df7e:	f043 0320 	orr.w	r3, r3, #32
 800df82:	6023      	str	r3, [r4, #0]
 800df84:	e003      	b.n	800df8e <_printf_i+0x86>
 800df86:	2975      	cmp	r1, #117	; 0x75
 800df88:	d017      	beq.n	800dfba <_printf_i+0xb2>
 800df8a:	2978      	cmp	r1, #120	; 0x78
 800df8c:	d1d4      	bne.n	800df38 <_printf_i+0x30>
 800df8e:	2378      	movs	r3, #120	; 0x78
 800df90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800df94:	4864      	ldr	r0, [pc, #400]	; (800e128 <_printf_i+0x220>)
 800df96:	e055      	b.n	800e044 <_printf_i+0x13c>
 800df98:	6813      	ldr	r3, [r2, #0]
 800df9a:	1d19      	adds	r1, r3, #4
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	6011      	str	r1, [r2, #0]
 800dfa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dfa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	e08c      	b.n	800e0c6 <_printf_i+0x1be>
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	6011      	str	r1, [r2, #0]
 800dfb0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dfb4:	bf18      	it	ne
 800dfb6:	b21b      	sxthne	r3, r3
 800dfb8:	e7cf      	b.n	800df5a <_printf_i+0x52>
 800dfba:	6813      	ldr	r3, [r2, #0]
 800dfbc:	6825      	ldr	r5, [r4, #0]
 800dfbe:	1d18      	adds	r0, r3, #4
 800dfc0:	6010      	str	r0, [r2, #0]
 800dfc2:	0628      	lsls	r0, r5, #24
 800dfc4:	d501      	bpl.n	800dfca <_printf_i+0xc2>
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	e002      	b.n	800dfd0 <_printf_i+0xc8>
 800dfca:	0668      	lsls	r0, r5, #25
 800dfcc:	d5fb      	bpl.n	800dfc6 <_printf_i+0xbe>
 800dfce:	881b      	ldrh	r3, [r3, #0]
 800dfd0:	4854      	ldr	r0, [pc, #336]	; (800e124 <_printf_i+0x21c>)
 800dfd2:	296f      	cmp	r1, #111	; 0x6f
 800dfd4:	bf14      	ite	ne
 800dfd6:	220a      	movne	r2, #10
 800dfd8:	2208      	moveq	r2, #8
 800dfda:	2100      	movs	r1, #0
 800dfdc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dfe0:	6865      	ldr	r5, [r4, #4]
 800dfe2:	60a5      	str	r5, [r4, #8]
 800dfe4:	2d00      	cmp	r5, #0
 800dfe6:	f2c0 8095 	blt.w	800e114 <_printf_i+0x20c>
 800dfea:	6821      	ldr	r1, [r4, #0]
 800dfec:	f021 0104 	bic.w	r1, r1, #4
 800dff0:	6021      	str	r1, [r4, #0]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d13d      	bne.n	800e072 <_printf_i+0x16a>
 800dff6:	2d00      	cmp	r5, #0
 800dff8:	f040 808e 	bne.w	800e118 <_printf_i+0x210>
 800dffc:	4665      	mov	r5, ip
 800dffe:	2a08      	cmp	r2, #8
 800e000:	d10b      	bne.n	800e01a <_printf_i+0x112>
 800e002:	6823      	ldr	r3, [r4, #0]
 800e004:	07db      	lsls	r3, r3, #31
 800e006:	d508      	bpl.n	800e01a <_printf_i+0x112>
 800e008:	6923      	ldr	r3, [r4, #16]
 800e00a:	6862      	ldr	r2, [r4, #4]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	bfde      	ittt	le
 800e010:	2330      	movle	r3, #48	; 0x30
 800e012:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e016:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e01a:	ebac 0305 	sub.w	r3, ip, r5
 800e01e:	6123      	str	r3, [r4, #16]
 800e020:	f8cd 8000 	str.w	r8, [sp]
 800e024:	463b      	mov	r3, r7
 800e026:	aa03      	add	r2, sp, #12
 800e028:	4621      	mov	r1, r4
 800e02a:	4630      	mov	r0, r6
 800e02c:	f7ff fef6 	bl	800de1c <_printf_common>
 800e030:	3001      	adds	r0, #1
 800e032:	d14d      	bne.n	800e0d0 <_printf_i+0x1c8>
 800e034:	f04f 30ff 	mov.w	r0, #4294967295
 800e038:	b005      	add	sp, #20
 800e03a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e03e:	4839      	ldr	r0, [pc, #228]	; (800e124 <_printf_i+0x21c>)
 800e040:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e044:	6813      	ldr	r3, [r2, #0]
 800e046:	6821      	ldr	r1, [r4, #0]
 800e048:	1d1d      	adds	r5, r3, #4
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	6015      	str	r5, [r2, #0]
 800e04e:	060a      	lsls	r2, r1, #24
 800e050:	d50b      	bpl.n	800e06a <_printf_i+0x162>
 800e052:	07ca      	lsls	r2, r1, #31
 800e054:	bf44      	itt	mi
 800e056:	f041 0120 	orrmi.w	r1, r1, #32
 800e05a:	6021      	strmi	r1, [r4, #0]
 800e05c:	b91b      	cbnz	r3, 800e066 <_printf_i+0x15e>
 800e05e:	6822      	ldr	r2, [r4, #0]
 800e060:	f022 0220 	bic.w	r2, r2, #32
 800e064:	6022      	str	r2, [r4, #0]
 800e066:	2210      	movs	r2, #16
 800e068:	e7b7      	b.n	800dfda <_printf_i+0xd2>
 800e06a:	064d      	lsls	r5, r1, #25
 800e06c:	bf48      	it	mi
 800e06e:	b29b      	uxthmi	r3, r3
 800e070:	e7ef      	b.n	800e052 <_printf_i+0x14a>
 800e072:	4665      	mov	r5, ip
 800e074:	fbb3 f1f2 	udiv	r1, r3, r2
 800e078:	fb02 3311 	mls	r3, r2, r1, r3
 800e07c:	5cc3      	ldrb	r3, [r0, r3]
 800e07e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e082:	460b      	mov	r3, r1
 800e084:	2900      	cmp	r1, #0
 800e086:	d1f5      	bne.n	800e074 <_printf_i+0x16c>
 800e088:	e7b9      	b.n	800dffe <_printf_i+0xf6>
 800e08a:	6813      	ldr	r3, [r2, #0]
 800e08c:	6825      	ldr	r5, [r4, #0]
 800e08e:	6961      	ldr	r1, [r4, #20]
 800e090:	1d18      	adds	r0, r3, #4
 800e092:	6010      	str	r0, [r2, #0]
 800e094:	0628      	lsls	r0, r5, #24
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	d501      	bpl.n	800e09e <_printf_i+0x196>
 800e09a:	6019      	str	r1, [r3, #0]
 800e09c:	e002      	b.n	800e0a4 <_printf_i+0x19c>
 800e09e:	066a      	lsls	r2, r5, #25
 800e0a0:	d5fb      	bpl.n	800e09a <_printf_i+0x192>
 800e0a2:	8019      	strh	r1, [r3, #0]
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	6123      	str	r3, [r4, #16]
 800e0a8:	4665      	mov	r5, ip
 800e0aa:	e7b9      	b.n	800e020 <_printf_i+0x118>
 800e0ac:	6813      	ldr	r3, [r2, #0]
 800e0ae:	1d19      	adds	r1, r3, #4
 800e0b0:	6011      	str	r1, [r2, #0]
 800e0b2:	681d      	ldr	r5, [r3, #0]
 800e0b4:	6862      	ldr	r2, [r4, #4]
 800e0b6:	2100      	movs	r1, #0
 800e0b8:	4628      	mov	r0, r5
 800e0ba:	f7f2 f8a9 	bl	8000210 <memchr>
 800e0be:	b108      	cbz	r0, 800e0c4 <_printf_i+0x1bc>
 800e0c0:	1b40      	subs	r0, r0, r5
 800e0c2:	6060      	str	r0, [r4, #4]
 800e0c4:	6863      	ldr	r3, [r4, #4]
 800e0c6:	6123      	str	r3, [r4, #16]
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0ce:	e7a7      	b.n	800e020 <_printf_i+0x118>
 800e0d0:	6923      	ldr	r3, [r4, #16]
 800e0d2:	462a      	mov	r2, r5
 800e0d4:	4639      	mov	r1, r7
 800e0d6:	4630      	mov	r0, r6
 800e0d8:	47c0      	blx	r8
 800e0da:	3001      	adds	r0, #1
 800e0dc:	d0aa      	beq.n	800e034 <_printf_i+0x12c>
 800e0de:	6823      	ldr	r3, [r4, #0]
 800e0e0:	079b      	lsls	r3, r3, #30
 800e0e2:	d413      	bmi.n	800e10c <_printf_i+0x204>
 800e0e4:	68e0      	ldr	r0, [r4, #12]
 800e0e6:	9b03      	ldr	r3, [sp, #12]
 800e0e8:	4298      	cmp	r0, r3
 800e0ea:	bfb8      	it	lt
 800e0ec:	4618      	movlt	r0, r3
 800e0ee:	e7a3      	b.n	800e038 <_printf_i+0x130>
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	464a      	mov	r2, r9
 800e0f4:	4639      	mov	r1, r7
 800e0f6:	4630      	mov	r0, r6
 800e0f8:	47c0      	blx	r8
 800e0fa:	3001      	adds	r0, #1
 800e0fc:	d09a      	beq.n	800e034 <_printf_i+0x12c>
 800e0fe:	3501      	adds	r5, #1
 800e100:	68e3      	ldr	r3, [r4, #12]
 800e102:	9a03      	ldr	r2, [sp, #12]
 800e104:	1a9b      	subs	r3, r3, r2
 800e106:	42ab      	cmp	r3, r5
 800e108:	dcf2      	bgt.n	800e0f0 <_printf_i+0x1e8>
 800e10a:	e7eb      	b.n	800e0e4 <_printf_i+0x1dc>
 800e10c:	2500      	movs	r5, #0
 800e10e:	f104 0919 	add.w	r9, r4, #25
 800e112:	e7f5      	b.n	800e100 <_printf_i+0x1f8>
 800e114:	2b00      	cmp	r3, #0
 800e116:	d1ac      	bne.n	800e072 <_printf_i+0x16a>
 800e118:	7803      	ldrb	r3, [r0, #0]
 800e11a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e11e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e122:	e76c      	b.n	800dffe <_printf_i+0xf6>
 800e124:	0800e517 	.word	0x0800e517
 800e128:	0800e528 	.word	0x0800e528

0800e12c <_realloc_r>:
 800e12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e12e:	4607      	mov	r7, r0
 800e130:	4614      	mov	r4, r2
 800e132:	460e      	mov	r6, r1
 800e134:	b921      	cbnz	r1, 800e140 <_realloc_r+0x14>
 800e136:	4611      	mov	r1, r2
 800e138:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e13c:	f7ff bc6e 	b.w	800da1c <_malloc_r>
 800e140:	b922      	cbnz	r2, 800e14c <_realloc_r+0x20>
 800e142:	f7ff fc1d 	bl	800d980 <_free_r>
 800e146:	4625      	mov	r5, r4
 800e148:	4628      	mov	r0, r5
 800e14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e14c:	f000 f814 	bl	800e178 <_malloc_usable_size_r>
 800e150:	42a0      	cmp	r0, r4
 800e152:	d20f      	bcs.n	800e174 <_realloc_r+0x48>
 800e154:	4621      	mov	r1, r4
 800e156:	4638      	mov	r0, r7
 800e158:	f7ff fc60 	bl	800da1c <_malloc_r>
 800e15c:	4605      	mov	r5, r0
 800e15e:	2800      	cmp	r0, #0
 800e160:	d0f2      	beq.n	800e148 <_realloc_r+0x1c>
 800e162:	4631      	mov	r1, r6
 800e164:	4622      	mov	r2, r4
 800e166:	f7ff fbde 	bl	800d926 <memcpy>
 800e16a:	4631      	mov	r1, r6
 800e16c:	4638      	mov	r0, r7
 800e16e:	f7ff fc07 	bl	800d980 <_free_r>
 800e172:	e7e9      	b.n	800e148 <_realloc_r+0x1c>
 800e174:	4635      	mov	r5, r6
 800e176:	e7e7      	b.n	800e148 <_realloc_r+0x1c>

0800e178 <_malloc_usable_size_r>:
 800e178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e17c:	1f18      	subs	r0, r3, #4
 800e17e:	2b00      	cmp	r3, #0
 800e180:	bfbc      	itt	lt
 800e182:	580b      	ldrlt	r3, [r1, r0]
 800e184:	18c0      	addlt	r0, r0, r3
 800e186:	4770      	bx	lr

0800e188 <_init>:
 800e188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e18a:	bf00      	nop
 800e18c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e18e:	bc08      	pop	{r3}
 800e190:	469e      	mov	lr, r3
 800e192:	4770      	bx	lr

0800e194 <_fini>:
 800e194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e196:	bf00      	nop
 800e198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e19a:	bc08      	pop	{r3}
 800e19c:	469e      	mov	lr, r3
 800e19e:	4770      	bx	lr
